function check(condition, msg) {
    var log = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        log[_i - 2] = arguments[_i];
    }
    if (!condition) {
        console.group(msg);
        console.error.apply(console, log);
        ok(condition, msg);
        console.groupEnd();
    }
    else {
        ok(condition, msg);
    }
}

/// <reference path="../typings/tsd.d.ts" />
/// <reference path="../src/ts/fromJS.d.ts" />
/// <reference path="../src/ts/ast.ts" />
/// <reference path="../src/ts/symbols.ts" />
/// <reference path="../src/ts/util.ts" />
/// <reference path="../src/ts/semantics.ts" />
var ClassSymbol = eiffel.symbols.ClassSymbol;
var TypeInstance = eiffel.symbols.TypeInstance;
QUnit.module("TypeInstance Tests");
test("different Generic Derivation works", function () {
    var a = new ClassSymbol("A", null);
    var b = new ClassSymbol("B", null);
    var c = new ClassSymbol("C", null);
    var g1 = new ClassSymbol("G1", null);
    var g2 = new ClassSymbol("G2", null);
    var t1_1 = new TypeInstance(a, [], a);
    var t1_2 = new TypeInstance(a, [], a);
    ok(t1_1.equals(t1_2));
    ok(!t1_1.differentGenericDerivationThan(t1_2));
    var t2_1 = new TypeInstance(g1, [new TypeInstance(a, [], a)], a);
    var t2_2 = new TypeInstance(g1, [new TypeInstance(a, [], a)], a);
    var t3_1 = new TypeInstance(g2, [t2_1, t1_1], a);
    var t3_1 = new TypeInstance(g2, [t2_1, t1_1], a);
});

/// <reference path="../typings/tsd.d.ts" />
/// <reference path="../src/ts/fromJS.d.ts" />
/// <reference path="../src/ts/ast.ts" />
/// <reference path="../src/ts/symbols.ts" />
/// <reference path="../src/ts/util.ts" />
/// <reference path="../src/ts/semantics.ts" />
var caseIgnoreEquals = eiffel.util.caseIgnoreEquals;
var cartesianProduct = eiffel.util.cartesianProduct;
var pairs = eiffel.util.pairs;
QUnit.module("Util Tests");
test("pairs", function () {
    var ps = pairs([1, 2, 3]);
    var actual = ps.length;
    check(actual === 3, "Expected length 3, actual: " + actual, ps);
});
test("cartesian", function () {
    var ps = cartesianProduct([1, 2, 3]);
    var actual = ps.length;
    check(actual === 3, "Expected length 3, actual: " + actual, ps);
    check(ps[0].length === 1, "Expected inner length to be 1, actual: " + ps[0].length, ps[0]);
});
test("cartesian with multiple args", function () {
    var ps = cartesianProduct([1, 2, 3], [1, 2, 3]);
    var actual = ps.length;
    check(actual === 3 * 3, "Expected length 9, actual: " + actual, ps);
    check(ps[0].length === 2, "Expected inner length to be 2, actual: " + ps[0].length, ps[0]);
});

/// <reference path="../typings/tsd.d.ts" />
/// <reference path="../src/ts/fromJS.d.ts" />
/// <reference path="../src/ts/ast.ts" />
/// <reference path="../src/ts/symbols.ts" />
/// <reference path="../src/ts/util.ts" />
/// <reference path="../src/ts/semantics.ts" />
function fail(message) {
    ok(false, message);
}
QUnit.module("Grunt");
test("generated files exist", function () {
    ok(okTests);
});
QUnit.module("Parser");
test("the base function exists", function () {
    ok(vees);
});
test("parser exists", function () {
    ok(vees.parser);
});
test("parser.parse exists", function () {
    ok(vees.parser.parse);
});
QUnit.module("OKTests");
okTests.forEach(function (file__content) {
    test("Parsing " + file__content.filename, function () {
        try {
            vees.parser.parse(file__content.content);
            ok(true);
        }
        catch (e) {
            fail(e.message + "\nLine: " + e.line + "\nColumn: " + e.column);
        }
    });
});
var astTests = [
    [
        "True parses",
        "Expression",
        "True",
        {
            value: true,
            start: { offset: 0 },
            end: {},
        },
    ],
    [
        "False parses",
        "Expression",
        "False",
        {
            __instanceof: eiffel.ast.BooleanLiteral,
            value: false,
            start: {},
            end: { offset: 5 },
        },
    ],
    [
        "1 parses",
        "Expression",
        "1",
        {
            value: 1,
            start: {},
            end: {},
        },
    ],
    [
        "'1' parses",
        "Expression",
        "'1'",
        {
            value: "1",
            start: {},
            end: {},
        },
    ],
    [
        "%n parses",
        "Expression",
        '"%n%""',
        {
            value: '%n%"',
            start: {},
            end: {},
        },
    ],
    [
        "Void parses",
        "Expression",
        'Void',
        {
            start: {},
            end: {},
        },
    ],
];
function compareAst(expected, actual) {
    var noDifferences = true;
    var differences = [];
    function compare(expected, actual, query) {
        function diff() {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i - 0] = arguments[_i];
            }
            noDifferences = false;
            differences.push({ query: query, params: params });
        }
        if (expected === actual) {
            return;
        }
        if (expected === null && actual !== null) {
            diff("expected is null, actual is not", actual);
        }
        if (expected !== null && actual == null) {
            diff("actual is null when it should have been", actual);
            return;
        }
        if (typeof expected !== typeof actual) {
            diff("different types", "typeof expected " + typeof expected, "typeof actual " + typeof actual);
            return;
        }
        if (Array.isArray(expected)) {
            if (!Array.isArray(actual)) {
                diff("expected is object, actual is not", actual);
                return;
            }
            // both are arrays
            if (expected.length > actual.length) {
                diff("expected is longer", "expected: " + expected.length, "actual: " + actual.length);
                return false;
            }
            expected.forEach(function (x, x_i) {
                compare(x, actual[x_i], query + "[" + x_i + "]");
            });
        }
        if (typeof expected === 'object') {
            for (var key in expected) {
                if (expected.hasOwnProperty(key)) {
                    if (key === "__instanceof") {
                        if (!(actual instanceof expected[key])) {
                            diff("actual has wrong type");
                        }
                    }
                    else {
                        if (actual.hasOwnProperty(key)) {
                            compare(expected[key], actual[key], query + "[" + key + "]");
                        }
                        else {
                            diff("actual is missing key " + key);
                        }
                    }
                }
            }
            return;
        }
        else {
            diff("different values", "Expected: ", expected, "Actual ", actual);
            return;
        }
        diff("unknown difference");
    }
    compare(expected, actual, "this");
    if (differences.length) {
        return function () {
            differences.forEach(function (d) {
                console.group(d.query);
                console.error.apply(console, d.params);
                console.groupEnd();
            });
        };
    }
    else {
        return null;
    }
}
function okAst(errorFunction) {
    if (errorFunction) {
        errorFunction();
        ok(false, "AST was not equal");
    }
    else {
        ok(true);
    }
}
function nokAst(errorFunction) {
    if (errorFunction) {
        ok(true);
    }
    else {
        errorFunction();
        ok(false, "AST was not equal");
    }
}
QUnit.module("AST comparison function");
test("should work for empty objects", function () {
    okAst(compareAst({}, {}));
});
test("should work for single values", function () {
    okAst(compareAst({ a: 2 }, { a: 2 }));
    nokAst(compareAst({ a: 3 }, { a: 2 }));
    nokAst(compareAst({ a: 3 }, { a: "stringstuff" }));
    okAst(compareAst({ a: null }, { a: null }));
    nokAst(compareAst({ a: 2 }, { a: null }));
    nokAst(compareAst({ a: null }, { a: 2 }));
});
test("actual has more stuff", function () {
    okAst(compareAst({ i: "hello" }, { i: "hello", more: 2 }));
    okAst(compareAst({ i: "hello" }, { i: "hello", more: 2 }));
    nokAst(compareAst({ i: "different" }, { i: "hello", more: 2 }));
});
test("different values -> false", function () {
    nokAst(compareAst({ a: 2 }, { a: 3 }));
    nokAst(compareAst({ a: "hello" }, { a: null }));
});
test("should work for nested objects", function () {
    okAst(compareAst({ flat: 6, nested: { nested: {} } }, { flat: 6, nested: { nested: {} } }));
    nokAst(compareAst({ flat: 6, nested: { nested: { something: null } } }, { flat: 6, nested: { nested: {} } }));
});
test("should work for nested objects", function () {
    okAst(compareAst({ flat: 6, nested: { nested: {} } }, { flat: 6, nested: { nested: {} } }));
});
test("should not work for non-records", function () {
    nokAst(compareAst(null, {}));
    nokAst(compareAst({}, null));
    okAst(compareAst(null, null));
    okAst(compareAst(2, 2));
    nokAst(compareAst(3, 2));
    nokAst(compareAst(3, {}));
});
QUnit.module("AST");
astTests.forEach(function (n_s_t_e) {
    var name = n_s_t_e[0];
    var start = n_s_t_e[1];
    var expression = n_s_t_e[2];
    var expected = n_s_t_e[3];
    test(name, function () {
        var actual = vees.parser.parse(expression, { startRule: start });
        okAst(compareAst(expected, actual));
    });
});
QUnit.module("AstTraversal");
test("should return correct class name", function () {
    var ast = vees.parser.parse("class CLASSNAME end");
    var trav = new vees.AstTraversal(ast[0]);
    equal("CLASSNAME", trav.className());
});
QUnit.module("Analyzer");
function analyze() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i - 0] = arguments[_i];
    }
    console.time("Parsing");
    var parsed = Array.prototype.map.call(sources, function (x, i) {
        return vees.parser.parse(x);
    });
    var analyzed = eiffel.semantics.analyze.apply(null, parsed);
    console.timeEnd("Parsing");
    if (analyzed.errors.errors.length > 0) {
        console.group("Analysis Failure");
        console.groupCollapsed("Sources");
        console.error(sources);
        console.groupEnd();
        console.group("Errors");
        analyzed.errors.errors.forEach(function (error) {
            console.log(error);
        });
        console.groupEnd();
        console.groupEnd();
    }
    return analyzed;
}
test("should pass", function () {
    analyze("class CLASSNAME end");
    ok(true);
});
function analyzerHasClass(analyzed, className) {
    var hasClass = analyzed.context.hasClass(className);
    if (!hasClass) {
        console.log(analyzed.context.classSymbols);
    }
    ok(hasClass, "doesn't have class " + className);
}
function classHasSymbol(analyzed, className, symbolName) {
    var classSymbol = analyzed.context.classWithName(className);
    var hasSymbol = classSymbol.hasSymbol(symbolName);
    var errorMessage = "Class " + className + " does not have symbol " + symbolName;
    if (!hasSymbol) {
        console.error(errorMessage);
        console.log(analyzed);
        console.log(analyzed.context.classWithName(className));
    }
    ok(hasSymbol, errorMessage);
    var symbol = classSymbol.resolveSymbol(symbolName);
    var actualName = symbol.lowerCaseName;
    equal(actualName.toLowerCase(), symbolName.toLowerCase(), "Symbol has wrong name");
    var actualLowerCaseName = symbol.lowerCaseName;
    equal(actualLowerCaseName, symbolName.toLowerCase(), "Symbol has wrong name");
}
test("should find symbol", function () {
    var analyzed = analyze("class CLASSNAME feature test: INTEGER end");
    classHasSymbol(analyzed, "CLASSNAME", "test");
});
test("Analyze two classes in one input", function () {
    var analyzed = analyze("class A feature test: INTEGER end class B end");
    analyzerHasClass(analyzed, "A");
    analyzerHasClass(analyzed, "B");
});
test("Analyze two classes two sources", function () {
    var analyzed = analyze("class A feature test: INTEGER end", "class B end");
    analyzerHasClass(analyzed, "A");
    analyzerHasClass(analyzed, "B");
});
test("Symbols exist", function () {
    var analyzed = analyze("class A feature test: STRING test2: INTEGER f3: INTEGER do end f4 do end end");
    classHasSymbol(analyzed, "A", "test");
    classHasSymbol(analyzed, "A", "test2");
    classHasSymbol(analyzed, "A", "f3");
    classHasSymbol(analyzed, "A", "f4");
    classHasSymbol(analyzed, "ANY", "Io");
});
test("Local variables exist", function () {
    var analyzed = analyze("class HASLOCALS feature abcd local var: INTEGER do end end");
    var local = analyzed.context.classWithName("HASLOCALS").declaredRoutines.get("abcd").localsAndParamsByName.get("var");
    equal(local.name, "var", "Local variable is not named var");
});
test("Symbols resolve correctly in attributes", function () {
    var analyzed = analyze("class A feature a: A end", "class B feature a: A end class C feature b: B end");
    var aSym = analyzed.context.classWithName("A");
    var bSym = analyzed.context.classWithName("B");
    var cSym = analyzed.context.classWithName("C");
    ok(aSym.resolveSymbol("a").typeInstance.baseType === aSym, "Type was not resolved");
    ok(bSym.resolveSymbol("a").typeInstance.baseType === aSym, "Type was not resolved");
    ok(cSym.resolveSymbol("b").typeInstance.baseType === bSym, "Type was not resolved");
});
test("Alias registers correctly", function () {
    var analyzed = analyze('class A feature b  alias "and then" (other: A): A do end end');
    ok(analyzed.context.classWithName("A").resolveSymbol("b") === analyzed.context.classWithName("A").aliases["and then"], "Alias was not registered");
    try {
        var analyzed = analyze('class A feature b  alias "and then" (other: A; other3: A): A do end end');
        ok(false, "Did not throw");
    }
    catch (e) {
        equal(e.message, "This alias requires exactly 1 parameters. b has 2", "Throws on wrong parameter count");
    }
});
test("Function return types resolve correctly", function () {
    var analyzed = analyze("class A feature b: A do end end");
    ok(analyzed.context.classWithName("A").resolveSymbol("b").typeInstance.baseType === analyzed.context.classWithName("A"), "Type was not resolved");
});
test("Local variables type resolves correctly", function () {
    var analyzed = analyze("class HASLOCALS feature abcd local var: INTEGER do end end");
    console.log("LOCAL VARS", analyzed);
    var local = analyzed.context.classWithName("HASLOCALS").declaredRoutines["abcd"].localsAndParamsByName["var"];
    ok(local.type.baseSymbol === analyzed.context.classWithName("INTEGER"), "Type was not resolved");
    equal(local.name, "var", "Local variable is not named var");
});

//# sourceMappingURL=data:application/json;base64,