/// <reference path="ast.ts" />
var eiffel;
(function (eiffel) {
    var ast;
    (function (_ast) {
        var Visitor = (function () {
            function Visitor() {}
            Visitor.prototype.vClass = function (_class, arg) {
                return this.vDefault(_class, arg);
            };
            Visitor.prototype.vFeatureList = function (featureList, arg) {
                return this.vDefault(featureList, arg);
            };
            Visitor.prototype.vFeature = function (feature, arg) {
                return this.vDefault(feature, arg);
            };
            Visitor.prototype.vAttr = function (attr, arg) {
                return this.vVarOrConstAttribute(attr, arg);
            };
            Visitor.prototype.vRoutine = function (feature, arg) {
                return this.vFeature(feature, arg);
            };
            Visitor.prototype.vFunction = function (func, arg) {
                return this.vRoutine(func, arg);
            };
            Visitor.prototype.vProcedure = function (procedure, arg) {
                return this.vRoutine(procedure, arg);
            };
            Visitor.prototype.vChildren = function (ast, arg) {
                var result = null;
                ast.children.forEach(function (t) {
                    if (t != null) {
                        result = t._acceptor.accept(this, arg);
                    }
                }, this);
                return result;
            };
            Visitor.prototype.vIdentifier = function (identifier, arg) {
                return this.vDefault(identifier, arg);
            };
            Visitor.prototype.vType = function (type, arg) {
                return this.vDefault(type, arg);
            };
            Visitor.prototype.vParent = function (parent, arg) {
                return this.vDefault(parent, arg);
            };
            Visitor.prototype.vInstruction = function (instruction, arg) {
                return this.vDefault(instruction, arg);
            };
            Visitor.prototype.vDefault = function (ast, arg) {
                return this.vChildren(ast, arg);
            };
            Visitor.prototype.vCreateInstruction = function (createInstruction, arg) {
                return this.vInstruction(createInstruction, arg);
            };
            Visitor.prototype.vAssignment = function (assignment, arg) {
                return this.vInstruction(assignment, arg);
            };
            Visitor.prototype.vExportChangeset = function (exportChangeset, arg) {
                return this.vDefault(exportChangeset, arg);
            };
            Visitor.prototype.vPrecondition = function (precondition, arg) {
                return this.vCondition(precondition, arg);
            };
            Visitor.prototype.vPostcondition = function (postcondition, arg) {
                return this.vCondition(postcondition, arg);
            };
            Visitor.prototype.vInvariantcondition = function (invariantcondition, arg) {
                return this.vCondition(invariantcondition, arg);
            };
            Visitor.prototype.vCondition = function (condition, arg) {
                return this.vDefault(condition, arg);
            };
            Visitor.prototype.vUnaryOp = function (unaryOp, arg) {
                return this.vExpression(unaryOp, arg);
            };
            Visitor.prototype.vBinaryOp = function (binaryOp, arg) {
                return this.vExpression(binaryOp, arg);
            };
            Visitor.prototype.vExpression = function (expression, arg) {
                return this.vDefault(expression, arg);
            };
            Visitor.prototype.vCurrentExpr = function (currentExpression, arg) {
                return this.vDefault(currentExpression, arg);
            };
            Visitor.prototype.vIntLiteral = function (intLiteral, arg) {
                return this.vLiteral(intLiteral, arg);
            };
            Visitor.prototype.vStringLiteral = function (stringLiteral, arg) {
                return this.vLiteral(stringLiteral, arg);
            };
            Visitor.prototype.vLiteral = function (literal, arg) {
                return this.vDefault(literal, arg);
            };
            Visitor.prototype.vConstantAttribute = function (constantAttribute, arg) {
                return this.vVarOrConstAttribute(constantAttribute, arg);
            };
            Visitor.prototype.vVarOrConstAttribute = function (varOrConstAttribute, arg) {
                return this.vFeature(varOrConstAttribute, arg);
            };
            Visitor.prototype.vAlias = function (alias, arg) {
                return this.vDefault(alias, arg);
            };
            Visitor.prototype.vCharLiteral = function (charLiteral, arg) {
                return this.vLiteral(charLiteral, arg);
            };
            Visitor.prototype.vBooleanLiteral = function (booleanLiteral, arg) {
                return this.vLiteral(booleanLiteral, arg);
            };
            Visitor.prototype.vVoidLiteral = function (voidLiteral, arg) {
                return this.vLiteral(voidLiteral, arg);
            };
            Visitor.prototype.vCallExpression = function (callExpression, arg) {
                return this.vExpression(callExpression, arg);
            };
            Visitor.prototype.vIndexExpression = function (indexExpression, arg) {
                return this.vExpression(indexExpression, arg);
            };
            Visitor.prototype.vVarDeclList = function (varDeclList, arg) {
                return this.vDefault(varDeclList, arg);
            };
            Visitor.prototype.vVarDeclEntry = function (varDeclEntry, arg) {
                return this.vDefault(varDeclEntry, arg);
            };
            Visitor.prototype.vFromLoop = function (fromLoop, arg) {
                return this.vInstruction(fromLoop, arg);
            };
            Visitor.prototype.vIfElse = function (ifElse, arg) {
                return this.vInstruction(ifElse, arg);
            };
            Visitor.prototype.vElseIf = function (elseIf, arg) {
                return this.vInstruction(elseIf, arg);
            };
            Visitor.prototype.vExternal = function (external, arg) {
                return null;
            };
            Visitor.prototype.vResultExpression = function (resultExpression, arg) {
                return this.vDefault(resultExpression, arg);
            };
            Visitor.prototype.vAnchoredType = function (anchoredType, arg) {
                return this.vDefault(anchoredType, arg);
            };
            Visitor.prototype.vIdentifierAccess = function (identifierAccess, arg) {
                return this.vExpression(identifierAccess, arg);
            };
            Visitor.prototype.vObsolete = function (obsolete, arg) {
                return null;
            };
            Visitor.prototype.vAttachedExpression = function (attachedExpression, arg) {
                return this.vExpression(attachedExpression, arg);
            };
            Visitor.prototype.vTypeExpression = function (typeExpression, arg) {
                return this.vExpression(typeExpression, arg);
            };
            Visitor.prototype.vParentGroup = function (parentGroup, arg) {
                return this.vDefault(parentGroup, arg);
            };
            Visitor.prototype.vRoutineInstructions = function (routineInstructions, arg) {
                return this.vDefault(routineInstructions, arg);
            };
            Visitor.prototype.vOnceBlock = function (onceBlock, arg) {
                return this.vRoutineInstructions(onceBlock, arg);
            };
            Visitor.prototype.vDoBlock = function (doBlock, arg) {
                return this.vRoutineInstructions(doBlock, arg);
            };
            Visitor.prototype.vUnqualifiedCallExpression = function (unqualifiedCallExpression, arg) {
                return this.vExpression(unqualifiedCallExpression, arg);
            };
            Visitor.prototype.vLocalsBlock = function (localsBlock, arg) {
                return this.vDefault(localsBlock, arg);
            };
            Visitor.prototype.vTypeConstraint = function (typeConstraint, arg) {
                return this.vDefault(typeConstraint, arg);
            };
            Visitor.prototype.vRename = function (rename, arg) {
                return this.vDefault(rename, arg);
            };
            Visitor.prototype.vToken = function (token, arg) {
                return this.vDefault(token, arg);
            };
            Visitor.prototype.vRedefines = function (redefines, arg) {
                return this.vDefault(redefines, arg);
            };
            Visitor.prototype.vUndefines = function (undefines, arg) {
                return this.vDefault(undefines, arg);
            };
            Visitor.prototype.vRenames = function (renames, arg) {
                return this.vDefault(renames, arg);
            };
            Visitor.prototype.vSelects = function (selects, arg) {
                return this.vDefault(selects, arg);
            };
            Visitor.prototype.vNewExports = function (newExports, arg) {
                return this.vDefault(newExports, arg);
            };
            Visitor.prototype.vTupleExpression = function (tupleExpression, arg) {
                return this.vExpression(tupleExpression, arg);
            };
            Visitor.prototype.vAll = function (all, arg) {
                return this.vDefault(all, arg);
            };
            return Visitor;
        })();
        _ast.Visitor = Visitor;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

/// <reference path="visitor.ts" />
/// <reference path="../../typings/tsd.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var ast;
    (function (ast) {
        var AST = (function () {
            function AST(impl) {
                this._acceptor = impl;
                this.children = [];
            }
            return AST;
        })();
        ast.AST = AST;
        var Identifier = (function (_super) {
            __extends(Identifier, _super);
            function Identifier(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
            }
            Identifier.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifier(this, arg);
            };
            return Identifier;
        })(AST);
        ast.Identifier = Identifier;
        var Token = (function (_super) {
            __extends(Token, _super);
            function Token(text, start, end) {
                _super.call(this, this);
                this.text = text;
                this.start = start;
                this.end = end;
            }
            Token.prototype.accept = function (visitor, arg) {
                return visitor.vToken(this, arg);
            };
            return Token;
        })(AST);
        ast.Token = Token;
        var Pos = (function () {
            function Pos(offset) {
                this.offset = offset;
            }
            return Pos;
        })();
        ast.Pos = Pos;
        var Class = (function (_super) {
            __extends(Class, _super);
            function Class(name, expanded, note, parentGroups, generics, creationClause, featureLists) {
                _super.call(this, this);
                this.name = name;
                this.expanded = expanded;
                this.children.push(name);
                this.genericParameters = generics;
                this.parentGroups = parentGroups;
                Array.prototype.push.apply(this.children, parentGroups);
                this.creationClause = creationClause;
                Array.prototype.push.apply(this.children, creationClause);
                this.featureLists = featureLists;
                Array.prototype.push.apply(this.children, featureLists);
                this.dictionary = new Map();
            }
            Class.prototype.byType = function (prototype) {
                return this.dictionary.get(prototype);
            };
            Class.prototype.accept = function (visitor, arg) {
                return visitor.vClass(this, arg);
            };
            return Class;
        })(AST);
        ast.Class = Class;
        var TypeConstraint = (function (_super) {
            __extends(TypeConstraint, _super);
            function TypeConstraint(rt, rename) {
                _super.call(this, this);
                this.rt = rt;
                this.rename = rename;
                this.children.push(rt, rename);
            }
            TypeConstraint.prototype.accept = function (visitor, arg) {
                return visitor.vTypeConstraint(this, arg);
            };
            return TypeConstraint;
        })(AST);
        ast.TypeConstraint = TypeConstraint;
        var FeatureList = (function (_super) {
            __extends(FeatureList, _super);
            function FeatureList(exports, features) {
                _super.call(this, this);
                this.exports = exports;
                Array.prototype.push.apply(this.children, exports);
                this.features = features;
                Array.prototype.push.apply(this.children, features);
            }
            FeatureList.prototype.accept = function (visitor, arg) {
                return visitor.vFeatureList(this, arg);
            };
            return FeatureList;
        })(AST);
        ast.FeatureList = FeatureList;
        var IdentifierAccess = (function (_super) {
            __extends(IdentifierAccess, _super);
            function IdentifierAccess(identifier) {
                _super.call(this, this);
                this.identifier = identifier;
                this.start = identifier.start;
                this.end = identifier.end;
            }
            IdentifierAccess.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifierAccess(this, arg);
            };
            return IdentifierAccess;
        })(AST);
        ast.IdentifierAccess = IdentifierAccess;
        var Routine = (function (_super) {
            __extends(Routine, _super);
            function Routine(frozenNamesAndAliases, parameters, rt, bodyElements) {
                _super.call(this, this);
                this.frozenNamesAndAliases = frozenNamesAndAliases;
                this.parameters = parameters;
                Array.prototype.push.apply(this.children, _.pluck(frozenNamesAndAliases, "name"));
                Array.prototype.push.apply(this.children, parameters);
                Array.prototype.push.apply(this.children, this.aliases);
                Array.prototype.push.apply(this.children, bodyElements);
            }
            Routine.prototype.accept = function (visitor, arg) {
                return visitor.vRoutine(this, arg);
            };
            return Routine;
        })(AST);
        ast.Routine = Routine;
        var LocalsBlock = (function (_super) {
            __extends(LocalsBlock, _super);
            function LocalsBlock(linesOfVarDeclLists) {
                _super.call(this, this);
                this.linesOfVarDeclLists = linesOfVarDeclLists;
                this.varDeclLists = _.flatten(linesOfVarDeclLists);
                Array.prototype.push.apply(this.children, this.varDeclLists);
            }
            LocalsBlock.prototype.accept = function (visitor, arg) {
                return visitor.vLocalsBlock(this, arg);
            };
            return LocalsBlock;
        })(AST);
        ast.LocalsBlock = LocalsBlock;
        var External = (function (_super) {
            __extends(External, _super);
            function External(expressions, start, end) {
                _super.call(this, this);
                this.expressions = expressions;
            }
            External.prototype.accept = function (visitor, arg) {
                return visitor.vExternal(this, arg);
            };
            return External;
        })(AST);
        ast.External = External;
        var Obsolete = (function (_super) {
            __extends(Obsolete, _super);
            function Obsolete(expression, start, end) {
                _super.call(this, this);
                this.expression = expression;
            }
            Obsolete.prototype.accept = function (visitor, arg) {
                return visitor.vObsolete(this, arg);
            };
            return Obsolete;
        })(AST);
        ast.Obsolete = Obsolete;
        var VarDeclList = (function (_super) {
            __extends(VarDeclList, _super);
            function VarDeclList(varDecls, rawType) {
                _super.call(this, this);
                this.varDecls = varDecls;
                this.rawType = rawType;
                varDecls.forEach(function (varDecl) {
                    varDecl.varDeclList = this;
                });
                Array.prototype.push.apply(this.children, varDecls);
                this.children.push(rawType);
            }
            VarDeclList.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclList(this, arg);
            };
            return VarDeclList;
        })(AST);
        ast.VarDeclList = VarDeclList;
        var VarDeclEntry = (function (_super) {
            __extends(VarDeclEntry, _super);
            function VarDeclEntry(name) {
                _super.call(this, this);
                this.name = name;
                this.children.push(name);
            }
            VarDeclEntry.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclEntry(this, arg);
            };
            return VarDeclEntry;
        })(AST);
        ast.VarDeclEntry = VarDeclEntry;
        var Type = (function (_super) {
            __extends(Type, _super);
            function Type(name, parameters, detachable, start, end) {
                _super.call(this, this);
                this.name = name;
                this.parameters = parameters;
                this.detachable = detachable;
                this.start = start;
                this.end = end;
                this.children.push(name);
                Array.prototype.push.apply(this.children, parameters);
            }
            Type.prototype.accept = function (visitor, arg) {
                return visitor.vType(this, arg);
            };
            return Type;
        })(AST);
        ast.Type = Type;
        var TupleExpression = (function (_super) {
            __extends(TupleExpression, _super);
            function TupleExpression(expressions, start, end) {
                _super.call(this, this);
                this.expressions = expressions;
                this.start = start;
                this.end = end;
                Array.prototype.push.apply(this.children, expressions);
            }
            TupleExpression.prototype.accept = function (visitor, arg) {
                return visitor.vTupleExpression(this, arg);
            };
            return TupleExpression;
        })(AST);
        ast.TupleExpression = TupleExpression;
        var TypeExpression = (function (_super) {
            __extends(TypeExpression, _super);
            function TypeExpression(rt) {
                _super.call(this, this);
                this.rt = rt;
            }
            TypeExpression.prototype.accept = function (visitor, arg) {
                return visitor.vTypeExpression(this, arg);
            };
            return TypeExpression;
        })(AST);
        ast.TypeExpression = TypeExpression;
        var Function = (function (_super) {
            __extends(Function, _super);
            function Function() {
                _super.apply(this, arguments);
            }
            Function.prototype.accept = function (visitor, arg) {
                return visitor.vFunction(this, arg);
            };
            return Function;
        })(Routine);
        ast.Function = Function;
        var Procedure = (function (_super) {
            __extends(Procedure, _super);
            function Procedure() {
                _super.apply(this, arguments);
            }
            Procedure.prototype.accept = function (visitor, arg) {
                return visitor.vProcedure(this, arg);
            };
            return Procedure;
        })(Routine);
        ast.Procedure = Procedure;
        var RoutineInstructions = (function (_super) {
            __extends(RoutineInstructions, _super);
            function RoutineInstructions(instructions) {
                _super.call(this, this);
                this.instructions = instructions;
            }
            RoutineInstructions.prototype.accept = function (visitor, arg) {
                return visitor.vRoutineInstructions(this, arg);
            };
            return RoutineInstructions;
        })(AST);
        ast.RoutineInstructions = RoutineInstructions;
        var DoBlock = (function (_super) {
            __extends(DoBlock, _super);
            function DoBlock() {
                _super.apply(this, arguments);
            }
            DoBlock.prototype.accept = function (visitor, arg) {
                return visitor.vDoBlock(this, arg);
            };
            return DoBlock;
        })(RoutineInstructions);
        ast.DoBlock = DoBlock;
        var OnceBlock = (function (_super) {
            __extends(OnceBlock, _super);
            function OnceBlock() {
                _super.apply(this, arguments);
            }
            OnceBlock.prototype.accept = function (visitor, arg) {
                return visitor.vOnceBlock(this, arg);
            };
            return OnceBlock;
        })(RoutineInstructions);
        ast.OnceBlock = OnceBlock;
        var Alias = (function (_super) {
            __extends(Alias, _super);
            function Alias(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
                this.children.push(name);
            }
            Alias.prototype.accept = function (visitor, arg) {
                return visitor.vAlias(this, arg);
            };
            return Alias;
        })(AST);
        ast.Alias = Alias;
        var CurrentExpression = (function (_super) {
            __extends(CurrentExpression, _super);
            function CurrentExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            CurrentExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCurrentExpr(this, arg);
            };
            return CurrentExpression;
        })(AST);
        ast.CurrentExpression = CurrentExpression;
        var ResultExpression = (function (_super) {
            __extends(ResultExpression, _super);
            function ResultExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            ResultExpression.prototype.accept = function (visitor, arg) {
                return visitor.vResultExpression(this, arg);
            };
            return ResultExpression;
        })(AST);
        ast.ResultExpression = ResultExpression;
        var AnchoredType = (function (_super) {
            __extends(AnchoredType, _super);
            function AnchoredType(expression) {
                _super.call(this, this);
                this.expression = expression;
            }
            AnchoredType.prototype.accept = function (visitor, arg) {
                return visitor.vAnchoredType(this, arg);
            };
            return AnchoredType;
        })(AST);
        ast.AnchoredType = AnchoredType;
        var VarOrConstAttribute = (function (_super) {
            __extends(VarOrConstAttribute, _super);
            function VarOrConstAttribute(frozenNamesAndAliases, rawType) {
                _super.call(this, this);
                this.frozenNamesAndAliases = frozenNamesAndAliases;
                this.rawType = rawType;
                Array.prototype.push.apply(this.children, _.pluck(frozenNamesAndAliases, "name"));
                this.children.push(rawType);
            }
            VarOrConstAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vVarOrConstAttribute(this, arg);
            };
            return VarOrConstAttribute;
        })(AST);
        ast.VarOrConstAttribute = VarOrConstAttribute;
        var Attribute = (function (_super) {
            __extends(Attribute, _super);
            function Attribute() {
                _super.apply(this, arguments);
            }
            Attribute.prototype.accept = function (visitor, arg) {
                return visitor.vAttr(this, arg);
            };
            return Attribute;
        })(VarOrConstAttribute);
        ast.Attribute = Attribute;
        var ConstantAttribute = (function (_super) {
            __extends(ConstantAttribute, _super);
            function ConstantAttribute(frozenNamesAndAliases, rawType, value) {
                _super.call(this, frozenNamesAndAliases, rawType);
                this.value = value;
                this.children.push(value);
            }
            ConstantAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vConstantAttribute(this, arg);
            };
            return ConstantAttribute;
        })(VarOrConstAttribute);
        ast.ConstantAttribute = ConstantAttribute;
        var ParentGroup = (function (_super) {
            __extends(ParentGroup, _super);
            function ParentGroup(conforming, parents) {
                _super.call(this, this);
                this.conforming = conforming;
                this.parents = parents;
            }
            ParentGroup.prototype.accept = function (visitor, arg) {
                return visitor.vParentGroup(this, arg);
            };
            return ParentGroup;
        })(AST);
        ast.ParentGroup = ParentGroup;
        var Parent = (function (_super) {
            __extends(Parent, _super);
            function Parent(rt, adaptions) {
                _super.call(this, this);
                this.rawType = rt;
                this.adaptions = adaptions;
            }
            Parent.prototype.accept = function (visitor, arg) {
                return visitor.vParent(this, arg);
            };
            return Parent;
        })(AST);
        ast.Parent = Parent;
        var Rename = (function (_super) {
            __extends(Rename, _super);
            function Rename(oldName, newName) {
                _super.call(this, this);
                this.oldName = oldName;
                this.newName = newName;
            }
            Rename.prototype.accept = function (visitor, arg) {
                return visitor.vRename(this, arg);
            };
            return Rename;
        })(AST);
        ast.Rename = Rename;
        var Renames = (function (_super) {
            __extends(Renames, _super);
            function Renames(t, renames) {
                _super.call(this, this);
                this.token = t;
                this.renames = renames;
            }
            Renames.prototype.accept = function (visitor, arg) {
                return visitor.vRenames(this, arg);
            };
            return Renames;
        })(AST);
        ast.Renames = Renames;
        var Redefines = (function (_super) {
            __extends(Redefines, _super);
            function Redefines(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Redefines.prototype.accept = function (visitor, arg) {
                return visitor.vRedefines(this, arg);
            };
            return Redefines;
        })(AST);
        ast.Redefines = Redefines;
        var Selects = (function (_super) {
            __extends(Selects, _super);
            function Selects(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Selects.prototype.accept = function (visitor, arg) {
                return visitor.vSelects(this, arg);
            };
            return Selects;
        })(AST);
        ast.Selects = Selects;
        var ExportChangeset = (function (_super) {
            __extends(ExportChangeset, _super);
            function ExportChangeset(access, featureSet) {
                _super.call(this, this);
                this.access = access;
                this.featureSet = featureSet;
            }
            ExportChangeset.prototype.accept = function (visitor, arg) {
                return visitor.vExportChangeset(this, arg);
            };
            return ExportChangeset;
        })(AST);
        ast.ExportChangeset = ExportChangeset;
        var NewExports = (function (_super) {
            __extends(NewExports, _super);
            function NewExports(t, exportChangeset) {
                _super.call(this, this);
                this.token = t;
                this.exportChangeset = exportChangeset;
            }
            NewExports.prototype.accept = function (visitor, arg) {
                return visitor.vNewExports(this, arg);
            };
            return NewExports;
        })(AST);
        ast.NewExports = NewExports;
        var Undefines = (function (_super) {
            __extends(Undefines, _super);
            function Undefines(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Undefines.prototype.accept = function (visitor, arg) {
                return visitor.vUndefines(this, arg);
            };
            return Undefines;
        })(AST);
        ast.Undefines = Undefines;
        var Literal = (function (_super) {
            __extends(Literal, _super);
            function Literal() {
                _super.apply(this, arguments);
            }
            return Literal;
        })(AST);
        ast.Literal = Literal;
        var CharLiteral = (function (_super) {
            __extends(CharLiteral, _super);
            function CharLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            CharLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vCharLiteral(this, arg);
            };
            return CharLiteral;
        })(Literal);
        ast.CharLiteral = CharLiteral;
        var BooleanLiteral = (function (_super) {
            __extends(BooleanLiteral, _super);
            function BooleanLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            BooleanLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vBooleanLiteral(this, arg);
            };
            return BooleanLiteral;
        })(Literal);
        ast.BooleanLiteral = BooleanLiteral;
        var IntLiteral = (function (_super) {
            __extends(IntLiteral, _super);
            function IntLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            IntLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vIntLiteral(this, arg);
            };
            return IntLiteral;
        })(Literal);
        ast.IntLiteral = IntLiteral;
        var VoidLiteral = (function (_super) {
            __extends(VoidLiteral, _super);
            function VoidLiteral(start, end) {
                _super.call(this, this);
                this.value = null;
                this.start = start;
                this.end = end;
            }
            VoidLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vVoidLiteral(this, arg);
            };
            return VoidLiteral;
        })(Literal);
        ast.VoidLiteral = VoidLiteral;
        var StringLiteral = (function (_super) {
            __extends(StringLiteral, _super);
            function StringLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            StringLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vStringLiteral(this, arg);
            };
            return StringLiteral;
        })(Literal);
        ast.StringLiteral = StringLiteral;
        var All = (function (_super) {
            __extends(All, _super);
            function All(allToken) {
                _super.call(this, this);
                this.allToken = allToken;
            }
            All.prototype.accept = function (visitor, arg) {
                return visitor.vAll(this, arg);
            };
            return All;
        })(AST);
        ast.All = All;
        var TypeInstance = (function () {
            function TypeInstance() {}
            return TypeInstance;
        })();
        ast.TypeInstance = TypeInstance;
        var Condition = (function (_super) {
            __extends(Condition, _super);
            function Condition(label, condition) {
                _super.call(this, this);
                this.condition = condition;
                this.label = label;
                this.children.push(label, condition);
            }
            Condition.prototype.accept = function (visitor, arg) {
                throw new Error("This should not be called");
            };
            return Condition;
        })(AST);
        ast.Condition = Condition;
        var Precondition = (function (_super) {
            __extends(Precondition, _super);
            function Precondition() {
                _super.apply(this, arguments);
            }
            Precondition.prototype.accept = function (visitor, arg) {
                return visitor.vPrecondition(this, arg);
            };
            return Precondition;
        })(Condition);
        ast.Precondition = Precondition;
        var Postcondition = (function (_super) {
            __extends(Postcondition, _super);
            function Postcondition() {
                _super.apply(this, arguments);
            }
            Postcondition.prototype.accept = function (visitor, arg) {
                return visitor.vPostcondition(this, arg);
            };
            return Postcondition;
        })(Condition);
        ast.Postcondition = Postcondition;
        var Invariantcondition = (function (_super) {
            __extends(Invariantcondition, _super);
            function Invariantcondition() {
                _super.apply(this, arguments);
            }
            Invariantcondition.prototype.accept = function (visitor, arg) {
                return visitor.vInvariantcondition(this, arg);
            };
            return Invariantcondition;
        })(Condition);
        ast.Invariantcondition = Invariantcondition;
        var Assignment = (function (_super) {
            __extends(Assignment, _super);
            function Assignment(left, right) {
                _super.call(this, this);
                this.left = left;
                this.right = right;
                this.children.push(left, right);
            }
            Assignment.prototype.accept = function (visitor, arg) {
                return visitor.vAssignment(this, arg);
            };
            return Assignment;
        })(AST);
        ast.Assignment = Assignment;
        var CreateInstruction = (function (_super) {
            __extends(CreateInstruction, _super);
            function CreateInstruction(target, method, arguments) {
                _super.call(this, this);
                this.target = target;
                this.method = method;
                this.arguments = arguments;
                this.children.push(target, method);
                Array.prototype.push.apply(this.children, arguments);
            }
            CreateInstruction.prototype.accept = function (visitor, arg) {
                return visitor.vCreateInstruction(this, arg);
            };
            return CreateInstruction;
        })(AST);
        ast.CreateInstruction = CreateInstruction;
        var UnaryOp = (function (_super) {
            __extends(UnaryOp, _super);
            function UnaryOp(operator, operand, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.operand = operand;
                this.start = start;
                this.end = end;
                this.children.push(operand);
            }
            UnaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vUnaryOp(this, arg);
            };
            return UnaryOp;
        })(AST);
        ast.UnaryOp = UnaryOp;
        var BinaryOp = (function (_super) {
            __extends(BinaryOp, _super);
            function BinaryOp(operator, left, right, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.left = left;
                this.right = right;
                this.start = start;
                this.end = end;
                this.children.push(left, right);
            }
            BinaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vBinaryOp(this, arg);
            };
            return BinaryOp;
        })(AST);
        ast.BinaryOp = BinaryOp;
        var stringToUnaryOp = new Map([["-", 0 /* Minus */], ["+", 1 /* Plus */], ["not", 2 /* Not */], ["old", 3 /* Old */]]);
        var stringToBinaryOp = new Map([["-", 0 /* Minus */], ["+", 1 /* Plus */], ["*", 2 /* Multiplication */], ["/", 3 /* Division */], ["//", 4 /* IntegerDivision */], ["\\\\", 5 /* Modulo */], ["^", 6 /* Exponential */], ["..", 7 /* DotDot */], ["=", 8 /* Identical */], ["/=", 9 /* NotIdentical */], ["~", 10 /* IsEqual */], ["/~", 11 /* NotIsEqual */], ["<", 12 /* LessThan */], [">", 13 /* GreaterThan */], ["<=", 14 /* LessOrEqual */], [">=", 15 /* GreaterOrEqual */], ["and", 16 /* And */], ["and then", 17 /* AndThen */], ["or", 18 /* Or */], ["or else", 19 /* OrElse */], ["xor", 20 /* Xor */], ["implies", 21 /* Implies */]]);
        var CallExpression = (function (_super) {
            __extends(CallExpression, _super);
            function CallExpression(operand, name, parameters) {
                _super.call(this, this);
                this.operand = operand;
                this.name = name;
                this.parameters = parameters;
                this.children.push(operand, name);
                Array.prototype.push.apply(this.children, parameters);
            }
            CallExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCallExpression(this, arg);
            };
            return CallExpression;
        })(AST);
        ast.CallExpression = CallExpression;
        var UnqualifiedCallExpression = (function (_super) {
            __extends(UnqualifiedCallExpression, _super);
            function UnqualifiedCallExpression(identifier, parameters) {
                _super.call(this, this);
                this.identifier = identifier;
                this.parameters = parameters;
                Array.prototype.push.apply(this.children, parameters);
            }
            UnqualifiedCallExpression.prototype.accept = function (visitor, arg) {
                return visitor.vUnqualifiedCallExpression(this, arg);
            };
            return UnqualifiedCallExpression;
        })(AST);
        ast.UnqualifiedCallExpression = UnqualifiedCallExpression;
        var IndexExpression = (function (_super) {
            __extends(IndexExpression, _super);
            function IndexExpression(operand, argument) {
                _super.call(this, this);
                this.operand = operand;
                this.argument = argument;
                this.children.push(operand, argument);
            }
            IndexExpression.prototype.accept = function (visitor, arg) {
                return visitor.vIndexExpression(this, arg);
            };
            return IndexExpression;
        })(AST);
        ast.IndexExpression = IndexExpression;
        var AttachedExpression = (function (_super) {
            __extends(AttachedExpression, _super);
            function AttachedExpression(ofType, expr, newVar, start, end) {
                _super.call(this, this);
                this.ofType = ofType;
                this.expr = expr;
                this.newVar = newVar;
                this.children.push(ofType, expr, newVar);
                this.start = start;
                this.end = end;
            }
            AttachedExpression.prototype.accept = function (visitor, arg) {
                return visitor.vAttachedExpression(this, arg);
            };
            return AttachedExpression;
        })(AST);
        ast.AttachedExpression = AttachedExpression;
        var FromLoop = (function (_super) {
            __extends(FromLoop, _super);
            function FromLoop(initializerBlock, until, loopBlock, variant) {
                _super.call(this, this);
                this.initializerBlock = initializerBlock;
                this.until = until;
                this.loopBlock = loopBlock;
                this.variant = variant;
                Array.prototype.push.apply(this.children, initializerBlock);
                this.children.push(until);
                Array.prototype.push.apply(this.children, loopBlock);
                this.children.push(variant);
            }
            FromLoop.prototype.accept = function (visitor, arg) {
                return visitor.vFromLoop(this, arg);
            };
            return FromLoop;
        })(AST);
        ast.FromLoop = FromLoop;
        var IfElse = (function (_super) {
            __extends(IfElse, _super);
            function IfElse(condition, thenBlock, elseIfs, elseBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.elseIfs = elseIfs;
                this.elseBlock = elseBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
                Array.prototype.push.apply(this.children, elseIfs);
                Array.prototype.push.apply(this.children, elseBlock);
            }
            IfElse.prototype.accept = function (visitor, arg) {
                return visitor.vIfElse(this, arg);
            };
            return IfElse;
        })(AST);
        ast.IfElse = IfElse;
        var ElseIf = (function (_super) {
            __extends(ElseIf, _super);
            function ElseIf(condition, thenBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
            }
            ElseIf.prototype.accept = function (visitor, arg) {
                return visitor.vElseIf(this, arg);
            };
            return ElseIf;
        })(AST);
        ast.ElseIf = ElseIf;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    var builtin;
    (function (builtin) {
        builtin.STD_FILE = {
            put_string: [function (ctx) {}]
        };
    })(builtin = eiffel.builtin || (eiffel.builtin = {}));
})(eiffel || (eiffel = {}));

/// <reference path="visitor.ts" />
/// <reference path="fromJS.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var semantics;
    (function (semantics) {
        var createClassSymbols = function createClassSymbols(asts, analysisContext) {
            asts.forEach(function (ast) {
                if (!(ast instanceof eiffel.ast.Class)) {
                    console.error("Root AST node is not instance of Class", ast);
                    throw new Error("Root AST node is not instance of Class");
                }
                var name = ast.name.name;
                var classSymbol = new eiffel.symbols.ClassSymbol(name, ast);
                analysisContext.classSymbols.set(classSymbol.lowerCaseName, classSymbol);
                analysisContext.allClasses.push(classSymbol);
            });
        };
        var createFeatureSymbols = function createFeatureSymbols(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new FeatureDiscovery(analysisContext, classSymbol), null);
            });
        };
        var createRoutineParamSymbols = function createRoutineParamSymbols(allRoutines) {
            allRoutines.forEach(function (routine) {
                routine.ast.parameters.forEach(function (parameterList) {
                    parameterList.varDecls.forEach(function (varDecl) {
                        var varName = varDecl.name.name;
                        var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                        routine.paramsInOrder.push(variableSymbol);
                        routine.localsAndParamsByName.set(varName, variableSymbol);
                    });
                });
            });
        };
        var createRoutineLocalSymbols = function createRoutineLocalSymbols(analysisContext) {
            analysisContext.allRoutines.forEach(function (routine) {
                var localsBlocks = routine.ast.children.filter(function (child) {
                    return child instanceof eiffel.ast.LocalsBlock;
                });
                localsBlocks.forEach(function (localBlock) {
                    localBlock.varDeclLists.forEach(function (varsDecl) {
                        varsDecl.varDecls.forEach(function (varDecl) {
                            var varName = varDecl.name.name;
                            var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                            routine.locals.push(variableSymbol);
                            routine.localsAndParamsByName.set(varName, variableSymbol);
                        });
                    });
                });
            });
        };
        var parseError = function parseError(builtinSource, e) {
            console.group("Parse Error: " + builtinSource.filename);
            console.log("Found", e.found);
            console.groupCollapsed("Expected");
            console.table(e.expected);
            console.groupEnd();
            console.group("Context");
            var lines = builtinSource.content.split(/\r?\n/);
            var context = lines[e.line - 4] + lines[e.line - 3] + "\n" + lines[e.line - 2] + "\n" + lines[e.line - 1] + "\n" + Array(e.column).join("-") + "^ -- Line: " + e.line + " Column: " + e.column + "\n" + lines[e.line + 0] + lines[e.line + 1] + lines[e.line + 2] + lines[e.line + 3];
            console.log(context);
            console.groupEnd();
            console.groupCollapsed("Source");
            console.log(builtinSource.content);
            console.groupEnd();
            console.log(e);
            console.groupEnd();
        };
        var initAstDictionary = function initAstDictionary(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), analysisContext.astDictionary);
            });
        };
        var initAstDictionaryByClass = function initAstDictionaryByClass(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), classSymbol.ast.dictionary);
            });
        };
        var requireValidClassForAnalysis = function requireClassForAnalysis(name, analysisContext, success, failure) {
            if (analysisContext.classSymbols.hasOwnProperty(name)) {
                return success(analysisContext.classWithName(name), analysisContext);
            } else {
                failure(analysisContext);
                return false;
            }
        };
        function analyze() {
            var manyAsts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                manyAsts[_i - 0] = arguments[_i];
            }
            var parse = function parse(builtinSource) {
                try {
                    return eiffel.parser.parse(builtinSource.content);
                } catch (e) {
                    parseError(builtinSource, e);
                    throw e;
                }
            };
            Array.prototype.push.apply(manyAsts, __eiffel_builtin.map(parse));
            var asts = Array.prototype.concat.apply([], manyAsts);
            var analysisContext = new AnalysisContext();
            createClassSymbols(asts, analysisContext);
            initAstDictionary(analysisContext);
            initAstDictionaryByClass(analysisContext);
            createFeatureSymbols(analysisContext);
            createRoutineParamSymbols(analysisContext.allRoutines);
            createRoutineLocalSymbols(analysisContext);
            var inheritanceBeingChecked = new Set();
            var inheritanceChecked = new Set();
            var inheritanceCycles = [];
            var hasValidHierarchy = function hasValidHierarchy(oneClass, descendants) {
                if (inheritanceBeingChecked.has(oneClass)) {
                    oneClass.hasCyclicInheritance = true;
                    inheritanceCycles.push(descendants.slice(0));
                    return;
                } else if (inheritanceChecked.has(oneClass)) {} else {
                    inheritanceBeingChecked.add(oneClass);
                    oneClass.ast.parentGroups.forEach(function (parentGroup) {
                        parentGroup.parents.forEach(function (parent) {
                            var parentName = parent.rawType.name.name;
                            requireValidClassForAnalysis(parentName, analysisContext, function (parentSymbol) {
                                if (parentSymbol.hasCyclicInheritance) {
                                    /**
                                     * This implies that hasValidHierarchy() has already been called on parentSymbol
                                     * Implying that all the cycles it participates in have already been identified
                                     * Thus, this `oneClass` cannot be inside any such cycle.
                                     *
                                     */
                                    oneClass.inheritsFromCyclicInheritance = true;
                                } else {
                                    descendants.push(oneClass);
                                    hasValidHierarchy(parentSymbol, descendants);
                                    descendants.pop();
                                    oneClass.hasCyclicInheritance = parentSymbol.hasCyclicInheritance;
                                    oneClass.inheritsFromCyclicInheritance = parentSymbol.inheritsFromCyclicInheritance;
                                }
                            }, function failure(ac) {
                                analysisContext.errors.unknownClass(parent.rawType.name);
                            });
                        });
                    });
                    inheritanceBeingChecked["delete"](oneClass);
                    inheritanceChecked.add(oneClass);
                }
            };
            analysisContext.allClasses.forEach(function (oneClass) {
                hasValidHierarchy(oneClass, []);
            });
            if (inheritanceCycles.length > 0) {
                analysisContext.errors.uncategorized("Cyclic inheritance detected");
                console.error("Cycles:", inheritanceCycles);
            }
            ;
            analysisContext.allClasses.map(function (oneClass) {
                oneClass.ast.genericParameters.forEach(function (genericParameter) {
                    new eiffel.symbols.ClassSymbol(genericParameter.name.name, null);
                });
            });
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.creationClause.forEach(function (identifier) {
                    var name = identifier.name;
                    if (classSymbol.procedures.hasOwnProperty(name)) {
                        classSymbol.creationProcedures.set(name, classSymbol.procedures[name]);
                    } else if (classSymbol.functions.hasOwnProperty(name)) {
                        analysisContext.errors.uncategorized("Functions cannot be used as creation procedures " + name);
                    } else {
                        analysisContext.errors.uncategorized("There is not a procedure with name " + name);
                    }
                });
            });
            var newVar = {
                asts: asts,
                errors: analysisContext.errors,
                context: analysisContext };
            return newVar;
        }
        semantics.analyze = analyze;
        var AnalysisContext = (function () {
            function AnalysisContext() {
                this.classSymbols = new Map();
                this.allFunctions = [];
                this.allProcedures = [];
                this.allRoutines = [];
                this.allClasses = [];
                this.astDictionary = new Map();
                this.errors = new ErrorContext();
            }
            AnalysisContext.prototype.allWithPrototype = function (prototype) {
                if (this.astDictionary.has(prototype)) {
                    return this.astDictionary.get(prototype);
                } else {
                    console.error("Prototype is not a key", prototype, this.astDictionary);
                    throw new Error("Prototype is not a key" + prototype);
                }
            };
            AnalysisContext.prototype.classWithName = function (name) {
                var lowerCaseName = name.toLowerCase();
                if (this.classSymbols.has(lowerCaseName)) {
                    return this.classSymbols.get(lowerCaseName);
                } else {
                    throw new Error("There is no class with name: " + name);
                }
            };
            AnalysisContext.prototype.hasClass = function (name) {
                var lowerCaseName = name.toLowerCase();
                return this.classSymbols.has(lowerCaseName);
            };
            return AnalysisContext;
        })();
        var ErrorContext = (function () {
            function ErrorContext() {
                this.errors = [];
            }
            ErrorContext.prototype.add = function (kind, message, ast) {
                var entireMessage = SemanticErrorKind[kind] + ": " + message;
                console.error(entireMessage, ast);
                this.errors.push(entireMessage);
            };
            ErrorContext.prototype.unknownClass = function (identifier) {
                this.add(3, /* UnknownClass */identifier.name, identifier);
            };
            ErrorContext.prototype.duplicateFeature = function (identifier) {
                this.add(0, /* DuplicateFeatureName */identifier.name, identifier);
            };
            ErrorContext.prototype.uncategorized = function (message) {
                this.errors.push(message);
            };
            return ErrorContext;
        })();
        var SemanticVisitor = (function (_super) {
            __extends(SemanticVisitor, _super);
            function SemanticVisitor(analysisContext) {
                _super.call(this);
                this.analysisContext = analysisContext;
                this.classSymbols = analysisContext.classSymbols;
            }
            return SemanticVisitor;
        })(eiffel.ast.Visitor);
        (function (SemanticErrorKind) {
            SemanticErrorKind[SemanticErrorKind.DuplicateFeatureName = 0] = "DuplicateFeatureName";
            SemanticErrorKind[SemanticErrorKind.DuplicateParameterName = 1] = "DuplicateParameterName";
            SemanticErrorKind[SemanticErrorKind.DuplicateClassName = 2] = "DuplicateClassName";
            SemanticErrorKind[SemanticErrorKind.UnknownClass = 3] = "UnknownClass";
            SemanticErrorKind[SemanticErrorKind.InheritanceCycle = 4] = "InheritanceCycle";
        })(semantics.SemanticErrorKind || (semantics.SemanticErrorKind = {}));
        var SemanticErrorKind = semantics.SemanticErrorKind;
        var FeatureDiscovery = (function (_super) {
            __extends(FeatureDiscovery, _super);
            function FeatureDiscovery(analysisContext, classSymbol) {
                _super.call(this, analysisContext);
                this.classSymbol = classSymbol;
            }
            FeatureDiscovery.prototype.vAttr = function (attr, _) {
                attr.frozenNamesAndAliases.map(function (fna) {
                    var name = fna.name.name;
                    var lcName = name.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen, attr);
                    attr.sym = attributeSymbol;
                    this.classSymbol.attributes.set(lcName, attributeSymbol);
                }, this);
                //return super.vAttr(attr, this.classSymbol);
            };
            FeatureDiscovery.prototype.vFunction = function (func, _) {
                func.frozenNamesAndAliases.map(function (fna) {
                    var functionName = fna.name.name;
                    var lcFunctionName = functionName.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcFunctionName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var sym = new eiffel.symbols.FunctionSymbol(lcFunctionName, alias, fna.frozen, func);
                    func.sym = sym;
                    this.classSymbol.functions.set(lcFunctionName, sym);
                    this.classSymbol.routines.set(lcFunctionName, sym);
                    this.analysisContext.allFunctions.push(sym);
                    this.analysisContext.allRoutines.push(sym);
                }, this);
                //return super.vFunction(func, this.classSymbol);
            };
            FeatureDiscovery.prototype.errorOnDuplicateFeature = function (classSymbol, featureName, identifier) {
                if (classSymbol.hasSymbol(featureName)) {
                    this.analysisContext.errors.duplicateFeature(identifier);
                }
            };
            FeatureDiscovery.prototype.vProcedure = function (procedure, _) {
                procedure.frozenNamesAndAliases.map(function (fna) {
                    var procedureName = fna.name.name;
                    var lcProcedureName = procedureName.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcProcedureName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var sym = new eiffel.symbols.ProcedureSymbol(procedureName, alias, fna.frozen, procedure);
                    procedure.sym = sym;
                    this.classSymbol.procedures.set(lcProcedureName, sym);
                    this.classSymbol.routines.set(lcProcedureName, sym);
                    this.analysisContext.allProcedures.push(sym);
                    this.analysisContext.allRoutines.push(sym);
                }, this);
                //return super.vProcedure(procedure, this.classSymbol);
            };
            FeatureDiscovery.prototype.vConstantAttribute = function (constantAttribute, _) {
                constantAttribute.frozenNamesAndAliases.map(function (fna) {
                    var name = fna.name.name;
                    var lcName = name.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen, constantAttribute);
                    constantAttribute.sym = attributeSymbol;
                    this.classSymbol.attributes.set(lcName, attributeSymbol);
                }, this);
                //return super.vConstantAttribute(constantAttribute, this.classSymbol);
            };
            return FeatureDiscovery;
        })(SemanticVisitor);
        var AstToDictionaryByPrototype = (function (_super) {
            __extends(AstToDictionaryByPrototype, _super);
            function AstToDictionaryByPrototype() {
                _super.apply(this, arguments);
            }
            AstToDictionaryByPrototype.prototype.vDefault = function (ast, arg) {
                var prototype = Object.getPrototypeOf(ast);
                if (arg.has(prototype)) {
                    arg.get(prototype).push(ast);
                } else {
                    arg.set(prototype, [ast]);
                }
                return _super.prototype.vDefault.call(this, ast, arg);
            };
            return AstToDictionaryByPrototype;
        })(SemanticVisitor);
        var FeatureTypeConnector = (function (_super) {
            __extends(FeatureTypeConnector, _super);
            function FeatureTypeConnector() {
                _super.apply(this, arguments);
            }
            return FeatureTypeConnector;
        })(SemanticVisitor);
    })(semantics = eiffel.semantics || (eiffel.semantics = {}));
})(eiffel || (eiffel = {}));

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var symbols;
    (function (symbols) {
        var Symbol = (function () {
            function Symbol(name) {
                this.name = name;
                this.lowerCaseName = name.toLowerCase();
            }
            return Symbol;
        })();
        symbols.Symbol = Symbol;
        var FeatureSymbol = (function (_super) {
            __extends(FeatureSymbol, _super);
            function FeatureSymbol(name, alias, isFrozen) {
                _super.call(this, name);
                this.alias = alias;
                this.isFrozen = isFrozen;
            }
            return FeatureSymbol;
        })(Symbol);
        symbols.FeatureSymbol = FeatureSymbol;
        var RoutineSymbol = (function (_super) {
            __extends(RoutineSymbol, _super);
            function RoutineSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen);
                this.locals = [];
                this.localsAndParamsByName = new Map();
                this.paramsInOrder = [];
                this.ast = ast;
            }
            return RoutineSymbol;
        })(FeatureSymbol);
        symbols.RoutineSymbol = RoutineSymbol;
        var FunctionSymbol = (function (_super) {
            __extends(FunctionSymbol, _super);
            function FunctionSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen, ast);
                this.ast = ast;
            }
            return FunctionSymbol;
        })(RoutineSymbol);
        symbols.FunctionSymbol = FunctionSymbol;
        var ProcedureSymbol = (function (_super) {
            __extends(ProcedureSymbol, _super);
            function ProcedureSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen, ast);
                this.ast = ast;
            }
            return ProcedureSymbol;
        })(RoutineSymbol);
        symbols.ProcedureSymbol = ProcedureSymbol;
        var AttributeSymbol = (function (_super) {
            __extends(AttributeSymbol, _super);
            function AttributeSymbol(name, alias, frozen, attr) {
                _super.call(this, name, alias, frozen);
                this.ast = attr;
            }
            return AttributeSymbol;
        })(FeatureSymbol);
        symbols.AttributeSymbol = AttributeSymbol;
        var VariableSymbol = (function (_super) {
            __extends(VariableSymbol, _super);
            function VariableSymbol(name, ast) {
                _super.call(this, name);
                this.ast = ast;
            }
            return VariableSymbol;
        })(Symbol);
        symbols.VariableSymbol = VariableSymbol;
        var ClassSymbol = (function (_super) {
            __extends(ClassSymbol, _super);
            function ClassSymbol(name, ast) {
                _super.call(this, name);
                this.functions = new Map();
                this.procedures = new Map();
                this.routines = new Map();
                this.attributes = new Map();
                this.creationProcedures = new Map();
                this.hasCyclicInheritance = false;
                this.inheritsFromCyclicInheritance = false;
                this.ast = ast;
            }
            ClassSymbol.prototype.hasSymbol = function (name) {
                var lcName = name.toLowerCase();
                if (this.routines.has(lcName)) {
                    return true;
                }
                if (this.attributes.has(lcName)) {
                    return true;
                }
                return false;
            };
            ClassSymbol.prototype.resolveSymbol = function (name) {
                var lcName = name.toLowerCase();
                if (this.routines.has(lcName)) {
                    return this.routines.get(lcName);
                }
                if (this.attributes.has(lcName)) {
                    return this.attributes.get(lcName);
                }
                throw new Error("Symbol " + name + " does not exist in class " + this.name + ".");
            };
            return ClassSymbol;
        })(Symbol);
        symbols.ClassSymbol = ClassSymbol;
    })(symbols = eiffel.symbols || (eiffel.symbols = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    ;
})(eiffel || (eiffel = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvdmlzaXRvci50cyIsInR5cGVzY3JpcHQuanMiLCJDOi9Vc2Vycy9DaHJpc3RpYW4vRG9jdW1lbnRzL0VUSC9laWZmZWwtcGFyc2VyL2FzdC50cyIsIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvYnVpbHRpbi50cyIsIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvc2VtYW50aWNzLnRzIiwiQzovVXNlcnMvQ2hyaXN0aWFuL0RvY3VtZW50cy9FVEgvZWlmZmVsLXBhcnNlci9zeW1ib2xzLnRzIiwiQzovVXNlcnMvQ2hyaXN0aWFuL0RvY3VtZW50cy9FVEgvZWlmZmVsLXBhcnNlci91dGlsLnRzIl0sIm5hbWVzIjpbImVpZmZlbCIsImVpZmZlbC5hc3QiLCJlaWZmZWwuYXN0LlZpc2l0b3IiLCJlaWZmZWwuYXN0LlZpc2l0b3IuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkNsYXNzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZGZWF0dXJlTGlzdCIsImVpZmZlbC5hc3QuVmlzaXRvci52RmVhdHVyZSIsImVpZmZlbC5hc3QuVmlzaXRvci52QXR0ciIsImVpZmZlbC5hc3QuVmlzaXRvci52Um91dGluZSIsImVpZmZlbC5hc3QuVmlzaXRvci52RnVuY3Rpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlByb2NlZHVyZSIsImVpZmZlbC5hc3QuVmlzaXRvci52Q2hpbGRyZW4iLCJlaWZmZWwuYXN0LlZpc2l0b3IudklkZW50aWZpZXIiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlR5cGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlBhcmVudCIsImVpZmZlbC5hc3QuVmlzaXRvci52SW5zdHJ1Y3Rpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudkRlZmF1bHQiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkNyZWF0ZUluc3RydWN0aW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBc3NpZ25tZW50IiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFeHBvcnRDaGFuZ2VzZXQiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlByZWNvbmRpdGlvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52UG9zdGNvbmRpdGlvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52SW52YXJpYW50Y29uZGl0aW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDb25kaXRpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlVuYXJ5T3AiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkJpbmFyeU9wIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDdXJyZW50RXhwciIsImVpZmZlbC5hc3QuVmlzaXRvci52SW50TGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52U3RyaW5nTGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52TGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52Q29uc3RhbnRBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlZhck9yQ29uc3RBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkFsaWFzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDaGFyTGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52Qm9vbGVhbkxpdGVyYWwiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlZvaWRMaXRlcmFsIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDYWxsRXhwcmVzc2lvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52SW5kZXhFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZWYXJEZWNsTGlzdCIsImVpZmZlbC5hc3QuVmlzaXRvci52VmFyRGVjbEVudHJ5IiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZGcm9tTG9vcCIsImVpZmZlbC5hc3QuVmlzaXRvci52SWZFbHNlIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFbHNlSWYiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkV4dGVybmFsIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZSZXN1bHRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBbmNob3JlZFR5cGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudklkZW50aWZpZXJBY2Nlc3MiLCJlaWZmZWwuYXN0LlZpc2l0b3Iudk9ic29sZXRlIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBdHRhY2hlZEV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlR5cGVFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZQYXJlbnRHcm91cCIsImVpZmZlbC5hc3QuVmlzaXRvci52Um91dGluZUluc3RydWN0aW9ucyIsImVpZmZlbC5hc3QuVmlzaXRvci52T25jZUJsb2NrIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZEb0Jsb2NrIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZVbnF1YWxpZmllZENhbGxFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZMb2NhbHNCbG9jayIsImVpZmZlbC5hc3QuVmlzaXRvci52VHlwZUNvbnN0cmFpbnQiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlJlbmFtZSIsImVpZmZlbC5hc3QuVmlzaXRvci52VG9rZW4iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlJlZGVmaW5lcyIsImVpZmZlbC5hc3QuVmlzaXRvci52VW5kZWZpbmVzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZSZW5hbWVzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZTZWxlY3RzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZOZXdFeHBvcnRzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZUdXBsZUV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudkFsbCIsImVpZmZlbC5hc3QuQVNUIiwiZWlmZmVsLmFzdC5BU1QuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LklkZW50aWZpZXIiLCJlaWZmZWwuYXN0LklkZW50aWZpZXIuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LklkZW50aWZpZXIuYWNjZXB0IiwiZWlmZmVsLmFzdC5Ub2tlbiIsImVpZmZlbC5hc3QuVG9rZW4uY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlRva2VuLmFjY2VwdCIsImVpZmZlbC5hc3QuUG9zIiwiZWlmZmVsLmFzdC5Qb3MuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkNsYXNzIiwiZWlmZmVsLmFzdC5DbGFzcy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ2xhc3MuYnlUeXBlIiwiZWlmZmVsLmFzdC5DbGFzcy5hY2NlcHQiLCJlaWZmZWwuYXN0LlR5cGVDb25zdHJhaW50IiwiZWlmZmVsLmFzdC5UeXBlQ29uc3RyYWludC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVHlwZUNvbnN0cmFpbnQuYWNjZXB0IiwiZWlmZmVsLmFzdC5GZWF0dXJlTGlzdCIsImVpZmZlbC5hc3QuRmVhdHVyZUxpc3QuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkZlYXR1cmVMaXN0LmFjY2VwdCIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2VzcyIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2Vzcy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2Vzcy5hY2NlcHQiLCJlaWZmZWwuYXN0LlJvdXRpbmUiLCJlaWZmZWwuYXN0LlJvdXRpbmUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlJvdXRpbmUuYWNjZXB0IiwiZWlmZmVsLmFzdC5Mb2NhbHNCbG9jayIsImVpZmZlbC5hc3QuTG9jYWxzQmxvY2suY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkxvY2Fsc0Jsb2NrLmFjY2VwdCIsImVpZmZlbC5hc3QuRXh0ZXJuYWwiLCJlaWZmZWwuYXN0LkV4dGVybmFsLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5FeHRlcm5hbC5hY2NlcHQiLCJlaWZmZWwuYXN0Lk9ic29sZXRlIiwiZWlmZmVsLmFzdC5PYnNvbGV0ZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuT2Jzb2xldGUuYWNjZXB0IiwiZWlmZmVsLmFzdC5WYXJEZWNsTGlzdCIsImVpZmZlbC5hc3QuVmFyRGVjbExpc3QuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZhckRlY2xMaXN0LmFjY2VwdCIsImVpZmZlbC5hc3QuVmFyRGVjbEVudHJ5IiwiZWlmZmVsLmFzdC5WYXJEZWNsRW50cnkuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZhckRlY2xFbnRyeS5hY2NlcHQiLCJlaWZmZWwuYXN0LlR5cGUiLCJlaWZmZWwuYXN0LlR5cGUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlR5cGUuYWNjZXB0IiwiZWlmZmVsLmFzdC5UdXBsZUV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LlR1cGxlRXhwcmVzc2lvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVHVwbGVFeHByZXNzaW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuVHlwZUV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LlR5cGVFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5UeXBlRXhwcmVzc2lvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LkZ1bmN0aW9uIiwiZWlmZmVsLmFzdC5GdW5jdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuRnVuY3Rpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5Qcm9jZWR1cmUiLCJlaWZmZWwuYXN0LlByb2NlZHVyZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUHJvY2VkdXJlLmFjY2VwdCIsImVpZmZlbC5hc3QuUm91dGluZUluc3RydWN0aW9ucyIsImVpZmZlbC5hc3QuUm91dGluZUluc3RydWN0aW9ucy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUm91dGluZUluc3RydWN0aW9ucy5hY2NlcHQiLCJlaWZmZWwuYXN0LkRvQmxvY2siLCJlaWZmZWwuYXN0LkRvQmxvY2suY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkRvQmxvY2suYWNjZXB0IiwiZWlmZmVsLmFzdC5PbmNlQmxvY2siLCJlaWZmZWwuYXN0Lk9uY2VCbG9jay5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuT25jZUJsb2NrLmFjY2VwdCIsImVpZmZlbC5hc3QuQWxpYXMiLCJlaWZmZWwuYXN0LkFsaWFzLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5BbGlhcy5hY2NlcHQiLCJlaWZmZWwuYXN0LkN1cnJlbnRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5DdXJyZW50RXhwcmVzc2lvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ3VycmVudEV4cHJlc3Npb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuQW5jaG9yZWRUeXBlIiwiZWlmZmVsLmFzdC5BbmNob3JlZFR5cGUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkFuY2hvcmVkVHlwZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUuYWNjZXB0IiwiZWlmZmVsLmFzdC5BdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LkF0dHJpYnV0ZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQXR0cmlidXRlLmFjY2VwdCIsImVpZmZlbC5hc3QuQ29uc3RhbnRBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LkNvbnN0YW50QXR0cmlidXRlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Db25zdGFudEF0dHJpYnV0ZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlBhcmVudEdyb3VwIiwiZWlmZmVsLmFzdC5QYXJlbnRHcm91cC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUGFyZW50R3JvdXAuYWNjZXB0IiwiZWlmZmVsLmFzdC5QYXJlbnQiLCJlaWZmZWwuYXN0LlBhcmVudC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUGFyZW50LmFjY2VwdCIsImVpZmZlbC5hc3QuUmVuYW1lIiwiZWlmZmVsLmFzdC5SZW5hbWUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlJlbmFtZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlJlbmFtZXMiLCJlaWZmZWwuYXN0LlJlbmFtZXMuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlJlbmFtZXMuYWNjZXB0IiwiZWlmZmVsLmFzdC5SZWRlZmluZXMiLCJlaWZmZWwuYXN0LlJlZGVmaW5lcy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUmVkZWZpbmVzLmFjY2VwdCIsImVpZmZlbC5hc3QuU2VsZWN0cyIsImVpZmZlbC5hc3QuU2VsZWN0cy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuU2VsZWN0cy5hY2NlcHQiLCJlaWZmZWwuYXN0LkV4cG9ydENoYW5nZXNldCIsImVpZmZlbC5hc3QuRXhwb3J0Q2hhbmdlc2V0LmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5FeHBvcnRDaGFuZ2VzZXQuYWNjZXB0IiwiZWlmZmVsLmFzdC5OZXdFeHBvcnRzIiwiZWlmZmVsLmFzdC5OZXdFeHBvcnRzLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5OZXdFeHBvcnRzLmFjY2VwdCIsImVpZmZlbC5hc3QuVW5kZWZpbmVzIiwiZWlmZmVsLmFzdC5VbmRlZmluZXMuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlVuZGVmaW5lcy5hY2NlcHQiLCJlaWZmZWwuYXN0LkxpdGVyYWwiLCJlaWZmZWwuYXN0LkxpdGVyYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkNoYXJMaXRlcmFsIiwiZWlmZmVsLmFzdC5DaGFyTGl0ZXJhbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ2hhckxpdGVyYWwuYWNjZXB0IiwiZWlmZmVsLmFzdC5Cb29sZWFuTGl0ZXJhbCIsImVpZmZlbC5hc3QuQm9vbGVhbkxpdGVyYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkJvb2xlYW5MaXRlcmFsLmFjY2VwdCIsImVpZmZlbC5hc3QuSW50TGl0ZXJhbCIsImVpZmZlbC5hc3QuSW50TGl0ZXJhbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuSW50TGl0ZXJhbC5hY2NlcHQiLCJlaWZmZWwuYXN0LlZvaWRMaXRlcmFsIiwiZWlmZmVsLmFzdC5Wb2lkTGl0ZXJhbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVm9pZExpdGVyYWwuYWNjZXB0IiwiZWlmZmVsLmFzdC5TdHJpbmdMaXRlcmFsIiwiZWlmZmVsLmFzdC5TdHJpbmdMaXRlcmFsLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5TdHJpbmdMaXRlcmFsLmFjY2VwdCIsImVpZmZlbC5hc3QuQWxsIiwiZWlmZmVsLmFzdC5BbGwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkFsbC5hY2NlcHQiLCJlaWZmZWwuYXN0LlR5cGVJbnN0YW5jZSIsImVpZmZlbC5hc3QuVHlwZUluc3RhbmNlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Db25kaXRpb24iLCJlaWZmZWwuYXN0LkNvbmRpdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ29uZGl0aW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuUHJlY29uZGl0aW9uIiwiZWlmZmVsLmFzdC5QcmVjb25kaXRpb24uY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlByZWNvbmRpdGlvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LlBvc3Rjb25kaXRpb24iLCJlaWZmZWwuYXN0LlBvc3Rjb25kaXRpb24uY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlBvc3Rjb25kaXRpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5JbnZhcmlhbnRjb25kaXRpb24iLCJlaWZmZWwuYXN0LkludmFyaWFudGNvbmRpdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuSW52YXJpYW50Y29uZGl0aW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuQXNzaWdubWVudCIsImVpZmZlbC5hc3QuQXNzaWdubWVudC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQXNzaWdubWVudC5hY2NlcHQiLCJlaWZmZWwuYXN0LkNyZWF0ZUluc3RydWN0aW9uIiwiZWlmZmVsLmFzdC5DcmVhdGVJbnN0cnVjdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ3JlYXRlSW5zdHJ1Y3Rpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5VbmFyeU9wIiwiZWlmZmVsLmFzdC5VbmFyeU9wLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5VbmFyeU9wLmFjY2VwdCIsImVpZmZlbC5hc3QuQmluYXJ5T3AiLCJlaWZmZWwuYXN0LkJpbmFyeU9wLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5CaW5hcnlPcC5hY2NlcHQiLCJlaWZmZWwuYXN0LkNhbGxFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5DYWxsRXhwcmVzc2lvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ2FsbEV4cHJlc3Npb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5VbnF1YWxpZmllZENhbGxFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5VbnF1YWxpZmllZENhbGxFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5VbnF1YWxpZmllZENhbGxFeHByZXNzaW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuSW5kZXhFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5JbmRleEV4cHJlc3Npb24uY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkluZGV4RXhwcmVzc2lvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LkF0dGFjaGVkRXhwcmVzc2lvbiIsImVpZmZlbC5hc3QuQXR0YWNoZWRFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5BdHRhY2hlZEV4cHJlc3Npb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5Gcm9tTG9vcCIsImVpZmZlbC5hc3QuRnJvbUxvb3AuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkZyb21Mb29wLmFjY2VwdCIsImVpZmZlbC5hc3QuSWZFbHNlIiwiZWlmZmVsLmFzdC5JZkVsc2UuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LklmRWxzZS5hY2NlcHQiLCJlaWZmZWwuYXN0LkVsc2VJZiIsImVpZmZlbC5hc3QuRWxzZUlmLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5FbHNlSWYuYWNjZXB0IiwiZWlmZmVsLmJ1aWx0aW4iLCJlaWZmZWwuc2VtYW50aWNzIiwiZWlmZmVsLnNlbWFudGljcy5wYXJzZUVycm9yIiwiZWlmZmVsLnNlbWFudGljcy5pbml0QXN0RGljdGlvbmFyeSIsImVpZmZlbC5zZW1hbnRpY3MuaW5pdEFzdERpY3Rpb25hcnlCeUNsYXNzIiwiZWlmZmVsLnNlbWFudGljcy5yZXF1aXJlQ2xhc3NGb3JBbmFseXNpcyIsImVpZmZlbC5zZW1hbnRpY3MuYW5hbHl6ZSIsImVpZmZlbC5zZW1hbnRpY3MuYW5hbHl6ZS5wYXJzZSIsImVpZmZlbC5zZW1hbnRpY3MuYW5hbHl6ZS5oYXNWYWxpZEhpZXJhcmNoeSIsImZhaWx1cmUiLCJlaWZmZWwuc2VtYW50aWNzLkFuYWx5c2lzQ29udGV4dCIsImVpZmZlbC5zZW1hbnRpY3MuQW5hbHlzaXNDb250ZXh0LmNvbnN0cnVjdG9yIiwiZWlmZmVsLnNlbWFudGljcy5BbmFseXNpc0NvbnRleHQuYWxsV2l0aFByb3RvdHlwZSIsImVpZmZlbC5zZW1hbnRpY3MuQW5hbHlzaXNDb250ZXh0LmNsYXNzV2l0aE5hbWUiLCJlaWZmZWwuc2VtYW50aWNzLkFuYWx5c2lzQ29udGV4dC5oYXNDbGFzcyIsImVpZmZlbC5zZW1hbnRpY3MuRXJyb3JDb250ZXh0IiwiZWlmZmVsLnNlbWFudGljcy5FcnJvckNvbnRleHQuY29uc3RydWN0b3IiLCJlaWZmZWwuc2VtYW50aWNzLkVycm9yQ29udGV4dC5hZGQiLCJlaWZmZWwuc2VtYW50aWNzLkVycm9yQ29udGV4dC51bmtub3duQ2xhc3MiLCJlaWZmZWwuc2VtYW50aWNzLkVycm9yQ29udGV4dC5kdXBsaWNhdGVGZWF0dXJlIiwiZWlmZmVsLnNlbWFudGljcy5FcnJvckNvbnRleHQudW5jYXRlZ29yaXplZCIsImVpZmZlbC5zZW1hbnRpY3MuU2VtYW50aWNWaXNpdG9yIiwiZWlmZmVsLnNlbWFudGljcy5TZW1hbnRpY1Zpc2l0b3IuY29uc3RydWN0b3IiLCJlaWZmZWwuc2VtYW50aWNzLlNlbWFudGljRXJyb3JLaW5kIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5IiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LmNvbnN0cnVjdG9yIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZBdHRyIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZGdW5jdGlvbiIsImVpZmZlbC5zZW1hbnRpY3MuRmVhdHVyZURpc2NvdmVyeS5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSIsImVpZmZlbC5zZW1hbnRpY3MuRmVhdHVyZURpc2NvdmVyeS52UHJvY2VkdXJlIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZDb25zdGFudEF0dHJpYnV0ZSIsImVpZmZlbC5zZW1hbnRpY3MuQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGUiLCJlaWZmZWwuc2VtYW50aWNzLkFzdFRvRGljdGlvbmFyeUJ5UHJvdG90eXBlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnNlbWFudGljcy5Bc3RUb0RpY3Rpb25hcnlCeVByb3RvdHlwZS52RGVmYXVsdCIsImVpZmZlbC5zZW1hbnRpY3MuRmVhdHVyZVR5cGVDb25uZWN0b3IiLCJlaWZmZWwuc2VtYW50aWNzLkZlYXR1cmVUeXBlQ29ubmVjdG9yLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMiLCJlaWZmZWwuc3ltYm9scy5TeW1ib2wiLCJlaWZmZWwuc3ltYm9scy5TeW1ib2wuY29uc3RydWN0b3IiLCJlaWZmZWwuc3ltYm9scy5GZWF0dXJlU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuRmVhdHVyZVN5bWJvbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzLlJvdXRpbmVTeW1ib2wiLCJlaWZmZWwuc3ltYm9scy5Sb3V0aW5lU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuRnVuY3Rpb25TeW1ib2wiLCJlaWZmZWwuc3ltYm9scy5GdW5jdGlvblN5bWJvbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzLlByb2NlZHVyZVN5bWJvbCIsImVpZmZlbC5zeW1ib2xzLlByb2NlZHVyZVN5bWJvbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbCIsImVpZmZlbC5zeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzLlZhcmlhYmxlU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuVmFyaWFibGVTeW1ib2wuY29uc3RydWN0b3IiLCJlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbCIsImVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wuaGFzU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wucmVzb2x2ZVN5bWJvbCJdLCJtYXBwaW5ncyI6IjtBQUVBLElBQU8sTUFBTSxDQXFRWjtBQXJRRCxDQUFBLFVBQU8sTUFBTSxFQUFBO0FBQUNBLFFBQUFBLEdBQUdBLENBcVFoQkE7QUFyUWFBLEtBQUFBLFVBQUFBLElBQUdBLEVBQUNBO0FBR2hCQyxZQUFhQSxPQUFPQSxHQUFBQSxDQUFBQSxZQUFBQTtBQUFwQkMscUJBQWFBLE9BQU9BLEdBQUFBLEVBaVFuQkM7QUFoUUNELG1CQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxNQUFNQSxHQUFOQSxVQUFPQSxNQUFZQSxFQUFFQSxHQUFLQSxFQUFBQTtBQUN4QkUsdUJBQU9BLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO2FBQ25DQSxDQUFBQTtBQUVERixtQkFBQUEsQ0FBQUEsU0FBQUEsQ0FBQUEsWUFBWUEsR0FBWkEsVUFBYUEsV0FBdUJBLEVBQUVBLEdBQUtBLEVBQUFBO0FBQ3pDRyx1QkFBT0EsSUFBSUEsQ0FB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SUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7YUFDbkZBLENBQUFBO0FBQ0hILG1CQUFBQSxXQUFDQSxDQUFBQTtTQUFBQSxDQUFBQSxDQTVDZ0NmLE1BQU1BLENBQUFBLENBNEN0Q0E7QUE1Q1lBLGVBQUFBLENBQUFBLFdBQVdBLEdBQVhBLFdBNENaQSxDQUFBQTtLQUNGQSxDQUFBQSxDQXhIYTNSLE9BQU9BLEdBQVBBLE1BQUFBLENBQUFBLE9BQU9BLEtBQVBBLE1BQUFBLENBQUFBLE9BQU9BLEdBQUFBLEVBQUFBLENBQUFBLENBQUFBLENBd0hwQkE7Q0FBQUEsQ0FBQUEsQ0F4SE0sTUFBTSxLQUFOLE1BQU0sR0FBQSxFQUFBLENBQUEsQ0FBQSxDQXdIWjs7QUN4SEQsSUFBTyxNQUFNLENBSVo7QUFKRCxDQUFBLFVBQU8sTUFBTSxFQUFDO0FBRTZDQSxLQUFDQTtDQUUzREEsQ0FBQUEsQ0FKTSxNQUFNLEtBQU4sTUFBTSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBSVoiLCJmaWxlIjoidHlwZXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJhc3QudHNcIiAvPlxuXG5tb2R1bGUgZWlmZmVsLmFzdCB7XG5cblxuICBleHBvcnQgY2xhc3MgVmlzaXRvcjxBLCBSPiB7XG4gICAgdkNsYXNzKF9jbGFzczpDbGFzcywgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoX2NsYXNzLCBhcmcpO1xuICAgIH1cblxuICAgIHZGZWF0dXJlTGlzdChmZWF0dXJlTGlzdDpGZWF0dXJlTGlzdCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZmVhdHVyZUxpc3QsIGFyZyk7XG4gICAgfVxuXG4gICAgdkZlYXR1cmUoZmVhdHVyZTpGZWF0dXJlLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChmZWF0dXJlLCBhcmcpO1xuICAgIH1cblxuICAgIHZBdHRyKGF0dHI6QXR0cmlidXRlLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52VmFyT3JDb25zdEF0dHJpYnV0ZShhdHRyLCBhcmcpO1xuICAgIH1cblxuICAgIHZSb3V0aW5lKGZlYXR1cmU6Um91dGluZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkZlYXR1cmUoZmVhdHVyZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2RnVuY3Rpb24oZnVuYzogZWlmZmVsLmFzdC5GdW5jdGlvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudlJvdXRpbmUoZnVuYywgYXJnKTtcbiAgICB9XG5cbiAgICB2UHJvY2VkdXJlKHByb2NlZHVyZTpQcm9jZWR1cmUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lKHByb2NlZHVyZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2Q2hpbGRyZW4oYXN0OkFTVCwgYXJnOkEpOlIge1xuICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICBhc3QuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAodDpBU1QpIHtcbiAgICAgICAgaWYgKHQgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdCA9IHQuX2FjY2VwdG9yLmFjY2VwdCh0aGlzLCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdklkZW50aWZpZXIoaWRlbnRpZmllcjpJZGVudGlmaWVyLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChpZGVudGlmaWVyLCBhcmcpO1xuICAgIH1cblxuICAgIHZUeXBlKHR5cGU6VHlwZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQodHlwZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2UGFyZW50KHBhcmVudDpQYXJlbnQsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHBhcmVudCwgYXJnKTtcbiAgICB9XG5cbiAgICB2SW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb246SW5zdHJ1Y3Rpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGluc3RydWN0aW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZEZWZhdWx0KGFzdDpBU1QsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZDaGlsZHJlbihhc3QsIGFyZyk7XG4gICAgfVxuXG4gICAgdkNyZWF0ZUluc3RydWN0aW9uKGNyZWF0ZUluc3RydWN0aW9uOkNyZWF0ZUluc3RydWN0aW9uLCBhcmc6QSkge1xuICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGNyZWF0ZUluc3RydWN0aW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZBc3NpZ25tZW50KGFzc2lnbm1lbnQ6QXNzaWdubWVudCwgYXJnOkEpIHtcbiAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihhc3NpZ25tZW50LCBhcmcpO1xuICAgIH1cblxuICAgIHZFeHBvcnRDaGFuZ2VzZXQoZXhwb3J0Q2hhbmdlc2V0OkV4cG9ydENoYW5nZXNldCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZXhwb3J0Q2hhbmdlc2V0LCBhcmcpO1xuICAgIH1cblxuICAgIHZQcmVjb25kaXRpb24ocHJlY29uZGl0aW9uOlByZWNvbmRpdGlvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkNvbmRpdGlvbihwcmVjb25kaXRpb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdlBvc3Rjb25kaXRpb24ocG9zdGNvbmRpdGlvbjogUG9zdGNvbmRpdGlvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkNvbmRpdGlvbihwb3N0Y29uZGl0aW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZJbnZhcmlhbnRjb25kaXRpb24oaW52YXJpYW50Y29uZGl0aW9uOiBJbnZhcmlhbnRjb25kaXRpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZDb25kaXRpb24oaW52YXJpYW50Y29uZGl0aW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZDb25kaXRpb24oY29uZGl0aW9uOiBDb25kaXRpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGNvbmRpdGlvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2VW5hcnlPcCh1bmFyeU9wOiBVbmFyeU9wLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbih1bmFyeU9wLCBhcmcpO1xuICAgIH1cblxuICAgIHZCaW5hcnlPcChiaW5hcnlPcDogQmluYXJ5T3AsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGJpbmFyeU9wLCBhcmcpO1xuICAgIH1cblxuICAgIHZFeHByZXNzaW9uKGV4cHJlc3Npb246RXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZXhwcmVzc2lvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2Q3VycmVudEV4cHIoY3VycmVudEV4cHJlc3Npb246IEN1cnJlbnRFeHByZXNzaW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChjdXJyZW50RXhwcmVzc2lvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2SW50TGl0ZXJhbChpbnRMaXRlcmFsOiBJbnRMaXRlcmFsLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52TGl0ZXJhbChpbnRMaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZTdHJpbmdMaXRlcmFsKHN0cmluZ0xpdGVyYWw6IFN0cmluZ0xpdGVyYWwsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKHN0cmluZ0xpdGVyYWwsIGFyZyk7XG4gICAgfVxuXG4gICAgdkxpdGVyYWwobGl0ZXJhbDogTGl0ZXJhbDxhbnk+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChsaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZDb25zdGFudEF0dHJpYnV0ZShjb25zdGFudEF0dHJpYnV0ZTogQ29uc3RhbnRBdHRyaWJ1dGUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZWYXJPckNvbnN0QXR0cmlidXRlKGNvbnN0YW50QXR0cmlidXRlLCBhcmcpO1xuICAgIH1cblxuICAgIHZWYXJPckNvbnN0QXR0cmlidXRlKHZhck9yQ29uc3RBdHRyaWJ1dGU6VmFyT3JDb25zdEF0dHJpYnV0ZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkZlYXR1cmUodmFyT3JDb25zdEF0dHJpYnV0ZSwgYXJnKTtcbiAgICB9XG4gICAgdkFsaWFzKGFsaWFzOiBBbGlhcywgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoYWxpYXMsIGFyZyk7XG4gICAgfVxuXG4gICAgdkNoYXJMaXRlcmFsKGNoYXJMaXRlcmFsOiBDaGFyTGl0ZXJhbCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoY2hhckxpdGVyYWwsIGFyZyk7XG4gICAgfVxuXG4gICAgdkJvb2xlYW5MaXRlcmFsKGJvb2xlYW5MaXRlcmFsOiBCb29sZWFuTGl0ZXJhbCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoYm9vbGVhbkxpdGVyYWwsIGFyZyk7XG4gICAgfVxuXG4gICAgdlZvaWRMaXRlcmFsKHZvaWRMaXRlcmFsOiBWb2lkTGl0ZXJhbCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwodm9pZExpdGVyYWwsIGFyZyk7XG4gICAgfVxuXG4gICAgdkNhbGxFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uOiBDYWxsRXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oY2FsbEV4cHJlc3Npb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdkluZGV4RXhwcmVzc2lvbihpbmRleEV4cHJlc3Npb246IEluZGV4RXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oaW5kZXhFeHByZXNzaW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZWYXJEZWNsTGlzdCh2YXJEZWNsTGlzdDogVmFyRGVjbExpc3QsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHZhckRlY2xMaXN0LCBhcmcpO1xuICAgIH1cblxuICAgIHZWYXJEZWNsRW50cnkodmFyRGVjbEVudHJ5OiBWYXJEZWNsRW50cnksIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHZhckRlY2xFbnRyeSwgYXJnKTtcbiAgICB9XG5cbiAgICB2RnJvbUxvb3AoZnJvbUxvb3A6IEZyb21Mb29wLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52SW5zdHJ1Y3Rpb24oZnJvbUxvb3AsIGFyZyk7XG4gICAgfVxuXG4gICAgdklmRWxzZShpZkVsc2U6IElmRWxzZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGlmRWxzZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2RWxzZUlmKGVsc2VJZjogRWxzZUlmLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52SW5zdHJ1Y3Rpb24oZWxzZUlmLCBhcmcpO1xuICAgIH1cblxuICAgIHZFeHRlcm5hbChleHRlcm5hbDogRXh0ZXJuYWwsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZSZXN1bHRFeHByZXNzaW9uKHJlc3VsdEV4cHJlc3Npb246IFJlc3VsdEV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHJlc3VsdEV4cHJlc3Npb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdkFuY2hvcmVkVHlwZShhbmNob3JlZFR5cGU6IEFuY2hvcmVkVHlwZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoYW5jaG9yZWRUeXBlLCBhcmcpO1xuICAgIH1cblxuICAgIHZJZGVudGlmaWVyQWNjZXNzKGlkZW50aWZpZXJBY2Nlc3M6IElkZW50aWZpZXJBY2Nlc3MsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGlkZW50aWZpZXJBY2Nlc3MsIGFyZyk7XG4gICAgfVxuXG4gICAgdk9ic29sZXRlKG9ic29sZXRlOiBPYnNvbGV0ZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdkF0dGFjaGVkRXhwcmVzc2lvbihhdHRhY2hlZEV4cHJlc3Npb246IEF0dGFjaGVkRXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oYXR0YWNoZWRFeHByZXNzaW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZUeXBlRXhwcmVzc2lvbih0eXBlRXhwcmVzc2lvbjogVHlwZUV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKHR5cGVFeHByZXNzaW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZQYXJlbnRHcm91cChwYXJlbnRHcm91cDogUGFyZW50R3JvdXAsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHBhcmVudEdyb3VwLCBhcmcpO1xuICAgIH1cblxuICAgIHZSb3V0aW5lSW5zdHJ1Y3Rpb25zKHJvdXRpbmVJbnN0cnVjdGlvbnM6IFJvdXRpbmVJbnN0cnVjdGlvbnMsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHJvdXRpbmVJbnN0cnVjdGlvbnMsIGFyZyk7XG4gICAgfVxuXG4gICAgdk9uY2VCbG9jayhvbmNlQmxvY2s6IE9uY2VCbG9jaywgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudlJvdXRpbmVJbnN0cnVjdGlvbnMob25jZUJsb2NrLCBhcmcpO1xuICAgIH1cblxuICAgIHZEb0Jsb2NrKGRvQmxvY2s6IERvQmxvY2ssIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lSW5zdHJ1Y3Rpb25zKGRvQmxvY2ssIGFyZyk7XG4gICAgfVxuXG4gICAgdlVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24odW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbjogVW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24odW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2TG9jYWxzQmxvY2sobG9jYWxzQmxvY2s6IExvY2Fsc0Jsb2NrLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChsb2NhbHNCbG9jaywgYXJnKTtcbiAgICB9XG5cbiAgICB2VHlwZUNvbnN0cmFpbnQodHlwZUNvbnN0cmFpbnQ6IFR5cGVDb25zdHJhaW50LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdCh0eXBlQ29uc3RyYWludCwgYXJnKTtcbiAgICB9XG5cbiAgICB2UmVuYW1lKHJlbmFtZTogUmVuYW1lLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZW5hbWUsIGFyZyk7XG4gICAgfVxuXG4gICAgdlRva2VuKHRva2VuOiBUb2tlbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQodG9rZW4sIGFyZyk7XG4gICAgfVxuXG4gICAgdlJlZGVmaW5lcyhyZWRlZmluZXM6IFJlZGVmaW5lcywgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQocmVkZWZpbmVzLCBhcmcpO1xuICAgIH1cblxuICAgIHZVbmRlZmluZXModW5kZWZpbmVzOiBVbmRlZmluZXMsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHVuZGVmaW5lcywgYXJnKTtcbiAgICB9XG5cbiAgICB2UmVuYW1lcyhyZW5hbWVzOiBSZW5hbWVzLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZW5hbWVzLCBhcmcpO1xuICAgIH1cblxuICAgIHZTZWxlY3RzKHNlbGVjdHM6IFNlbGVjdHMsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHNlbGVjdHMsIGFyZyk7XG4gICAgfVxuXG4gICAgdk5ld0V4cG9ydHMobmV3RXhwb3J0czogTmV3RXhwb3J0cywgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQobmV3RXhwb3J0cywgYXJnKTtcbiAgICB9XG5cbiAgICB2VHVwbGVFeHByZXNzaW9uKHR1cGxlRXhwcmVzc2lvbjogVHVwbGVFeHByZXNzaW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbih0dXBsZUV4cHJlc3Npb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdkFsbChhbGw6IEFsbCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoYWxsLCBhcmcpO1xuICAgIH1cbiAgfVxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImFzdC50c1wiIC8+XG52YXIgZWlmZmVsO1xuKGZ1bmN0aW9uIChlaWZmZWwpIHtcbiAgICB2YXIgYXN0O1xuICAgIChmdW5jdGlvbiAoX2FzdCkge1xuICAgICAgICB2YXIgVmlzaXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBWaXNpdG9yKCkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNsYXNzID0gZnVuY3Rpb24gKF9jbGFzcywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoX2NsYXNzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZGZWF0dXJlTGlzdCA9IGZ1bmN0aW9uIChmZWF0dXJlTGlzdCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZmVhdHVyZUxpc3QsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkZlYXR1cmUgPSBmdW5jdGlvbiAoZmVhdHVyZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZmVhdHVyZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52QXR0ciA9IGZ1bmN0aW9uIChhdHRyLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52VmFyT3JDb25zdEF0dHJpYnV0ZShhdHRyLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZSb3V0aW5lID0gZnVuY3Rpb24gKGZlYXR1cmUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZGZWF0dXJlKGZlYXR1cmUsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lKGZ1bmMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlByb2NlZHVyZSA9IGZ1bmN0aW9uIChwcm9jZWR1cmUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lKHByb2NlZHVyZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Q2hpbGRyZW4gPSBmdW5jdGlvbiAoYXN0LCBhcmcpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBhc3QuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0Ll9hY2NlcHRvci5hY2NlcHQodGhpcywgYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudklkZW50aWZpZXIgPSBmdW5jdGlvbiAoaWRlbnRpZmllciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoaWRlbnRpZmllciwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VHlwZSA9IGZ1bmN0aW9uICh0eXBlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdCh0eXBlLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50LCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChwYXJlbnQsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkluc3RydWN0aW9uID0gZnVuY3Rpb24gKGluc3RydWN0aW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChpbnN0cnVjdGlvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RGVmYXVsdCA9IGZ1bmN0aW9uIChhc3QsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZDaGlsZHJlbihhc3QsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNyZWF0ZUluc3RydWN0aW9uID0gZnVuY3Rpb24gKGNyZWF0ZUluc3RydWN0aW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52SW5zdHJ1Y3Rpb24oY3JlYXRlSW5zdHJ1Y3Rpb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkFzc2lnbm1lbnQgPSBmdW5jdGlvbiAoYXNzaWdubWVudCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGFzc2lnbm1lbnQsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkV4cG9ydENoYW5nZXNldCA9IGZ1bmN0aW9uIChleHBvcnRDaGFuZ2VzZXQsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGV4cG9ydENoYW5nZXNldCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52UHJlY29uZGl0aW9uID0gZnVuY3Rpb24gKHByZWNvbmRpdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkNvbmRpdGlvbihwcmVjb25kaXRpb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlBvc3Rjb25kaXRpb24gPSBmdW5jdGlvbiAocG9zdGNvbmRpdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkNvbmRpdGlvbihwb3N0Y29uZGl0aW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZJbnZhcmlhbnRjb25kaXRpb24gPSBmdW5jdGlvbiAoaW52YXJpYW50Y29uZGl0aW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52Q29uZGl0aW9uKGludmFyaWFudGNvbmRpdGlvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Q29uZGl0aW9uID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoY29uZGl0aW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZVbmFyeU9wID0gZnVuY3Rpb24gKHVuYXJ5T3AsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKHVuYXJ5T3AsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkJpbmFyeU9wID0gZnVuY3Rpb24gKGJpbmFyeU9wLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihiaW5hcnlPcCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChleHByZXNzaW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChleHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDdXJyZW50RXhwciA9IGZ1bmN0aW9uIChjdXJyZW50RXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoY3VycmVudEV4cHJlc3Npb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkludExpdGVyYWwgPSBmdW5jdGlvbiAoaW50TGl0ZXJhbCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoaW50TGl0ZXJhbCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52U3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uIChzdHJpbmdMaXRlcmFsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52TGl0ZXJhbChzdHJpbmdMaXRlcmFsLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZMaXRlcmFsID0gZnVuY3Rpb24gKGxpdGVyYWwsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGxpdGVyYWwsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNvbnN0YW50QXR0cmlidXRlID0gZnVuY3Rpb24gKGNvbnN0YW50QXR0cmlidXRlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52VmFyT3JDb25zdEF0dHJpYnV0ZShjb25zdGFudEF0dHJpYnV0ZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VmFyT3JDb25zdEF0dHJpYnV0ZSA9IGZ1bmN0aW9uICh2YXJPckNvbnN0QXR0cmlidXRlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RmVhdHVyZSh2YXJPckNvbnN0QXR0cmlidXRlLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZBbGlhcyA9IGZ1bmN0aW9uIChhbGlhcywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoYWxpYXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNoYXJMaXRlcmFsID0gZnVuY3Rpb24gKGNoYXJMaXRlcmFsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52TGl0ZXJhbChjaGFyTGl0ZXJhbCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Qm9vbGVhbkxpdGVyYWwgPSBmdW5jdGlvbiAoYm9vbGVhbkxpdGVyYWwsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKGJvb2xlYW5MaXRlcmFsLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZWb2lkTGl0ZXJhbCA9IGZ1bmN0aW9uICh2b2lkTGl0ZXJhbCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwodm9pZExpdGVyYWwsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNhbGxFeHByZXNzaW9uID0gZnVuY3Rpb24gKGNhbGxFeHByZXNzaW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihjYWxsRXhwcmVzc2lvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52SW5kZXhFeHByZXNzaW9uID0gZnVuY3Rpb24gKGluZGV4RXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oaW5kZXhFeHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZWYXJEZWNsTGlzdCA9IGZ1bmN0aW9uICh2YXJEZWNsTGlzdCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQodmFyRGVjbExpc3QsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlZhckRlY2xFbnRyeSA9IGZ1bmN0aW9uICh2YXJEZWNsRW50cnksIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHZhckRlY2xFbnRyeSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RnJvbUxvb3AgPSBmdW5jdGlvbiAoZnJvbUxvb3AsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihmcm9tTG9vcCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52SWZFbHNlID0gZnVuY3Rpb24gKGlmRWxzZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGlmRWxzZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RWxzZUlmID0gZnVuY3Rpb24gKGVsc2VJZiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGVsc2VJZiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RXh0ZXJuYWwgPSBmdW5jdGlvbiAoZXh0ZXJuYWwsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZSZXN1bHRFeHByZXNzaW9uID0gZnVuY3Rpb24gKHJlc3VsdEV4cHJlc3Npb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHJlc3VsdEV4cHJlc3Npb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkFuY2hvcmVkVHlwZSA9IGZ1bmN0aW9uIChhbmNob3JlZFR5cGUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGFuY2hvcmVkVHlwZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52SWRlbnRpZmllckFjY2VzcyA9IGZ1bmN0aW9uIChpZGVudGlmaWVyQWNjZXNzLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihpZGVudGlmaWVyQWNjZXNzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZPYnNvbGV0ZSA9IGZ1bmN0aW9uIChvYnNvbGV0ZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkF0dGFjaGVkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChhdHRhY2hlZEV4cHJlc3Npb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGF0dGFjaGVkRXhwcmVzc2lvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VHlwZUV4cHJlc3Npb24gPSBmdW5jdGlvbiAodHlwZUV4cHJlc3Npb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKHR5cGVFeHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZQYXJlbnRHcm91cCA9IGZ1bmN0aW9uIChwYXJlbnRHcm91cCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQocGFyZW50R3JvdXAsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlJvdXRpbmVJbnN0cnVjdGlvbnMgPSBmdW5jdGlvbiAocm91dGluZUluc3RydWN0aW9ucywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQocm91dGluZUluc3RydWN0aW9ucywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52T25jZUJsb2NrID0gZnVuY3Rpb24gKG9uY2VCbG9jaywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudlJvdXRpbmVJbnN0cnVjdGlvbnMob25jZUJsb2NrLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZEb0Jsb2NrID0gZnVuY3Rpb24gKGRvQmxvY2ssIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lSW5zdHJ1Y3Rpb25zKGRvQmxvY2ssIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24gPSBmdW5jdGlvbiAodW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24odW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52TG9jYWxzQmxvY2sgPSBmdW5jdGlvbiAobG9jYWxzQmxvY2ssIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGxvY2Fsc0Jsb2NrLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZUeXBlQ29uc3RyYWludCA9IGZ1bmN0aW9uICh0eXBlQ29uc3RyYWludCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQodHlwZUNvbnN0cmFpbnQsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlJlbmFtZSA9IGZ1bmN0aW9uIChyZW5hbWUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHJlbmFtZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHRva2VuLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZSZWRlZmluZXMgPSBmdW5jdGlvbiAocmVkZWZpbmVzLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZWRlZmluZXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlVuZGVmaW5lcyA9IGZ1bmN0aW9uICh1bmRlZmluZXMsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHVuZGVmaW5lcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52UmVuYW1lcyA9IGZ1bmN0aW9uIChyZW5hbWVzLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZW5hbWVzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZTZWxlY3RzID0gZnVuY3Rpb24gKHNlbGVjdHMsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHNlbGVjdHMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudk5ld0V4cG9ydHMgPSBmdW5jdGlvbiAobmV3RXhwb3J0cywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQobmV3RXhwb3J0cywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VHVwbGVFeHByZXNzaW9uID0gZnVuY3Rpb24gKHR1cGxlRXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24odHVwbGVFeHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZBbGwgPSBmdW5jdGlvbiAoYWxsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChhbGwsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3I7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIF9hc3QuVmlzaXRvciA9IFZpc2l0b3I7XG4gICAgfSkoYXN0ID0gZWlmZmVsLmFzdCB8fCAoZWlmZmVsLmFzdCA9IHt9KSk7XG59KShlaWZmZWwgfHwgKGVpZmZlbCA9IHt9KSk7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ2aXNpdG9yLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbnZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIGFzdDtcbiAgICAoZnVuY3Rpb24gKGFzdCkge1xuICAgICAgICB2YXIgQVNUID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFTVChpbXBsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXB0b3IgPSBpbXBsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBU1Q7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5BU1QgPSBBU1Q7XG4gICAgICAgIHZhciBJZGVudGlmaWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJZGVudGlmaWVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gSWRlbnRpZmllcihuYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJZGVudGlmaWVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXIodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSWRlbnRpZmllcjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LklkZW50aWZpZXIgPSBJZGVudGlmaWVyO1xuICAgICAgICB2YXIgVG9rZW4gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFRva2VuLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVG9rZW4odGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVG9rZW4ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52VG9rZW4odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVG9rZW47XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Ub2tlbiA9IFRva2VuO1xuICAgICAgICB2YXIgUG9zID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBvcyhvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQb3M7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5Qb3MgPSBQb3M7XG4gICAgICAgIHZhciBDbGFzcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQ2xhc3MsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBDbGFzcyhuYW1lLCBleHBhbmRlZCwgbm90ZSwgcGFyZW50R3JvdXBzLCBnZW5lcmljcywgY3JlYXRpb25DbGF1c2UsIGZlYXR1cmVMaXN0cykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyaWNQYXJhbWV0ZXJzID0gZ2VuZXJpY3M7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRHcm91cHMgPSBwYXJlbnRHcm91cHM7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyZW50R3JvdXBzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0aW9uQ2xhdXNlID0gY3JlYXRpb25DbGF1c2U7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgY3JlYXRpb25DbGF1c2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZUxpc3RzID0gZmVhdHVyZUxpc3RzO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGZlYXR1cmVMaXN0cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xhc3MucHJvdG90eXBlLmJ5VHlwZSA9IGZ1bmN0aW9uIChwcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmdldChwcm90b3R5cGUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIENsYXNzLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkNsYXNzKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENsYXNzO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuQ2xhc3MgPSBDbGFzcztcbiAgICAgICAgdmFyIFR5cGVDb25zdHJhaW50ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhUeXBlQ29uc3RyYWludCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFR5cGVDb25zdHJhaW50KHJ0LCByZW5hbWUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJ0ID0gcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5hbWUgPSByZW5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHJ0LCByZW5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVHlwZUNvbnN0cmFpbnQucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52VHlwZUNvbnN0cmFpbnQodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVHlwZUNvbnN0cmFpbnQ7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5UeXBlQ29uc3RyYWludCA9IFR5cGVDb25zdHJhaW50O1xuICAgICAgICB2YXIgRmVhdHVyZUxpc3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEZlYXR1cmVMaXN0LCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRmVhdHVyZUxpc3QoZXhwb3J0cywgZmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydHMgPSBleHBvcnRzO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGV4cG9ydHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZXMgPSBmZWF0dXJlcztcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBmZWF0dXJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBGZWF0dXJlTGlzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZGZWF0dXJlTGlzdCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBGZWF0dXJlTGlzdDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkZlYXR1cmVMaXN0ID0gRmVhdHVyZUxpc3Q7XG4gICAgICAgIHZhciBJZGVudGlmaWVyQWNjZXNzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJZGVudGlmaWVyQWNjZXNzLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gSWRlbnRpZmllckFjY2VzcyhpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gaWRlbnRpZmllci5zdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGlkZW50aWZpZXIuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSWRlbnRpZmllckFjY2Vzcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZJZGVudGlmaWVyQWNjZXNzKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIElkZW50aWZpZXJBY2Nlc3M7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5JZGVudGlmaWVyQWNjZXNzID0gSWRlbnRpZmllckFjY2VzcztcbiAgICAgICAgdmFyIFJvdXRpbmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFJvdXRpbmUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBSb3V0aW5lKGZyb3plbk5hbWVzQW5kQWxpYXNlcywgcGFyYW1ldGVycywgcnQsIGJvZHlFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvemVuTmFtZXNBbmRBbGlhc2VzID0gZnJvemVuTmFtZXNBbmRBbGlhc2VzO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgXy5wbHVjayhmcm96ZW5OYW1lc0FuZEFsaWFzZXMsIFwibmFtZVwiKSk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhpcy5hbGlhc2VzKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBib2R5RWxlbWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUm91dGluZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZSb3V0aW5lKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFJvdXRpbmU7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Sb3V0aW5lID0gUm91dGluZTtcbiAgICAgICAgdmFyIExvY2Fsc0Jsb2NrID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhMb2NhbHNCbG9jaywgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIExvY2Fsc0Jsb2NrKGxpbmVzT2ZWYXJEZWNsTGlzdHMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVzT2ZWYXJEZWNsTGlzdHMgPSBsaW5lc09mVmFyRGVjbExpc3RzO1xuICAgICAgICAgICAgICAgIHRoaXMudmFyRGVjbExpc3RzID0gXy5mbGF0dGVuKGxpbmVzT2ZWYXJEZWNsTGlzdHMpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHRoaXMudmFyRGVjbExpc3RzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIExvY2Fsc0Jsb2NrLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkxvY2Fsc0Jsb2NrKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIExvY2Fsc0Jsb2NrO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuTG9jYWxzQmxvY2sgPSBMb2NhbHNCbG9jaztcbiAgICAgICAgdmFyIEV4dGVybmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhFeHRlcm5hbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEV4dGVybmFsKGV4cHJlc3Npb25zLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRXh0ZXJuYWwucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52RXh0ZXJuYWwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gRXh0ZXJuYWw7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5FeHRlcm5hbCA9IEV4dGVybmFsO1xuICAgICAgICB2YXIgT2Jzb2xldGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKE9ic29sZXRlLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gT2Jzb2xldGUoZXhwcmVzc2lvbiwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYnNvbGV0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZPYnNvbGV0ZSh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBPYnNvbGV0ZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0Lk9ic29sZXRlID0gT2Jzb2xldGU7XG4gICAgICAgIHZhciBWYXJEZWNsTGlzdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoVmFyRGVjbExpc3QsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBWYXJEZWNsTGlzdCh2YXJEZWNscywgcmF3VHlwZSkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFyRGVjbHMgPSB2YXJEZWNscztcbiAgICAgICAgICAgICAgICB0aGlzLnJhd1R5cGUgPSByYXdUeXBlO1xuICAgICAgICAgICAgICAgIHZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyRGVjbC52YXJEZWNsTGlzdCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdmFyRGVjbHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChyYXdUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZhckRlY2xMaXN0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlZhckRlY2xMaXN0KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFZhckRlY2xMaXN0O1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuVmFyRGVjbExpc3QgPSBWYXJEZWNsTGlzdDtcbiAgICAgICAgdmFyIFZhckRlY2xFbnRyeSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoVmFyRGVjbEVudHJ5LCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVmFyRGVjbEVudHJ5KG5hbWUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZhckRlY2xFbnRyeS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJEZWNsRW50cnkodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVmFyRGVjbEVudHJ5O1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuVmFyRGVjbEVudHJ5ID0gVmFyRGVjbEVudHJ5O1xuICAgICAgICB2YXIgVHlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoVHlwZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFR5cGUobmFtZSwgcGFyYW1ldGVycywgZGV0YWNoYWJsZSwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFjaGFibGUgPSBkZXRhY2hhYmxlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUeXBlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlR5cGUodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVHlwZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlR5cGUgPSBUeXBlO1xuICAgICAgICB2YXIgVHVwbGVFeHByZXNzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhUdXBsZUV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBUdXBsZUV4cHJlc3Npb24oZXhwcmVzc2lvbnMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGV4cHJlc3Npb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFR1cGxlRXhwcmVzc2lvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZUdXBsZUV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVHVwbGVFeHByZXNzaW9uO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuVHVwbGVFeHByZXNzaW9uID0gVHVwbGVFeHByZXNzaW9uO1xuICAgICAgICB2YXIgVHlwZUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFR5cGVFeHByZXNzaW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVHlwZUV4cHJlc3Npb24ocnQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJ0ID0gcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBUeXBlRXhwcmVzc2lvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZUeXBlRXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBUeXBlRXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlR5cGVFeHByZXNzaW9uID0gVHlwZUV4cHJlc3Npb247XG4gICAgICAgIHZhciBGdW5jdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRnVuY3Rpb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBGdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkZ1bmN0aW9uKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uO1xuICAgICAgICB9KShSb3V0aW5lKTtcbiAgICAgICAgYXN0LkZ1bmN0aW9uID0gRnVuY3Rpb247XG4gICAgICAgIHZhciBQcm9jZWR1cmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFByb2NlZHVyZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb2NlZHVyZSgpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb2NlZHVyZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZQcm9jZWR1cmUodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUHJvY2VkdXJlO1xuICAgICAgICB9KShSb3V0aW5lKTtcbiAgICAgICAgYXN0LlByb2NlZHVyZSA9IFByb2NlZHVyZTtcbiAgICAgICAgdmFyIFJvdXRpbmVJbnN0cnVjdGlvbnMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFJvdXRpbmVJbnN0cnVjdGlvbnMsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBSb3V0aW5lSW5zdHJ1Y3Rpb25zKGluc3RydWN0aW9ucykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gaW5zdHJ1Y3Rpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUm91dGluZUluc3RydWN0aW9ucy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZSb3V0aW5lSW5zdHJ1Y3Rpb25zKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFJvdXRpbmVJbnN0cnVjdGlvbnM7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Sb3V0aW5lSW5zdHJ1Y3Rpb25zID0gUm91dGluZUluc3RydWN0aW9ucztcbiAgICAgICAgdmFyIERvQmxvY2sgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKERvQmxvY2ssIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBEb0Jsb2NrKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRG9CbG9jay5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZEb0Jsb2NrKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIERvQmxvY2s7XG4gICAgICAgIH0pKFJvdXRpbmVJbnN0cnVjdGlvbnMpO1xuICAgICAgICBhc3QuRG9CbG9jayA9IERvQmxvY2s7XG4gICAgICAgIHZhciBPbmNlQmxvY2sgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKE9uY2VCbG9jaywgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIE9uY2VCbG9jaygpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9uY2VCbG9jay5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZPbmNlQmxvY2sodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gT25jZUJsb2NrO1xuICAgICAgICB9KShSb3V0aW5lSW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgYXN0Lk9uY2VCbG9jayA9IE9uY2VCbG9jaztcbiAgICAgICAgdmFyIEFsaWFzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhBbGlhcywgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFsaWFzKG5hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBbGlhcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZBbGlhcyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBBbGlhcztcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkFsaWFzID0gQWxpYXM7XG4gICAgICAgIHZhciBDdXJyZW50RXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQ3VycmVudEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBDdXJyZW50RXhwcmVzc2lvbihwb3MsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDdXJyZW50RXhwcmVzc2lvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDdXJyZW50RXhwcih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDdXJyZW50RXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkN1cnJlbnRFeHByZXNzaW9uID0gQ3VycmVudEV4cHJlc3Npb247XG4gICAgICAgIHZhciBSZXN1bHRFeHByZXNzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhSZXN1bHRFeHByZXNzaW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVzdWx0RXhwcmVzc2lvbihwb3MsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZXN1bHRFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlJlc3VsdEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0RXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlJlc3VsdEV4cHJlc3Npb24gPSBSZXN1bHRFeHByZXNzaW9uO1xuICAgICAgICB2YXIgQW5jaG9yZWRUeXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhBbmNob3JlZFR5cGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBBbmNob3JlZFR5cGUoZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBbmNob3JlZFR5cGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52QW5jaG9yZWRUeXBlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEFuY2hvcmVkVHlwZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkFuY2hvcmVkVHlwZSA9IEFuY2hvcmVkVHlwZTtcbiAgICAgICAgdmFyIFZhck9yQ29uc3RBdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFZhck9yQ29uc3RBdHRyaWJ1dGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBWYXJPckNvbnN0QXR0cmlidXRlKGZyb3plbk5hbWVzQW5kQWxpYXNlcywgcmF3VHlwZSkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvemVuTmFtZXNBbmRBbGlhc2VzID0gZnJvemVuTmFtZXNBbmRBbGlhc2VzO1xuICAgICAgICAgICAgICAgIHRoaXMucmF3VHlwZSA9IHJhd1R5cGU7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgXy5wbHVjayhmcm96ZW5OYW1lc0FuZEFsaWFzZXMsIFwibmFtZVwiKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHJhd1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmFyT3JDb25zdEF0dHJpYnV0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJPckNvbnN0QXR0cmlidXRlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFZhck9yQ29uc3RBdHRyaWJ1dGU7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5WYXJPckNvbnN0QXR0cmlidXRlID0gVmFyT3JDb25zdEF0dHJpYnV0ZTtcbiAgICAgICAgdmFyIEF0dHJpYnV0ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQXR0cmlidXRlLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQXR0cmlidXRlKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXR0cmlidXRlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkF0dHIodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQXR0cmlidXRlO1xuICAgICAgICB9KShWYXJPckNvbnN0QXR0cmlidXRlKTtcbiAgICAgICAgYXN0LkF0dHJpYnV0ZSA9IEF0dHJpYnV0ZTtcbiAgICAgICAgdmFyIENvbnN0YW50QXR0cmlidXRlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDb25zdGFudEF0dHJpYnV0ZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENvbnN0YW50QXR0cmlidXRlKGZyb3plbk5hbWVzQW5kQWxpYXNlcywgcmF3VHlwZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBmcm96ZW5OYW1lc0FuZEFsaWFzZXMsIHJhd1R5cGUpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ29uc3RhbnRBdHRyaWJ1dGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52Q29uc3RhbnRBdHRyaWJ1dGUodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RhbnRBdHRyaWJ1dGU7XG4gICAgICAgIH0pKFZhck9yQ29uc3RBdHRyaWJ1dGUpO1xuICAgICAgICBhc3QuQ29uc3RhbnRBdHRyaWJ1dGUgPSBDb25zdGFudEF0dHJpYnV0ZTtcbiAgICAgICAgdmFyIFBhcmVudEdyb3VwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhQYXJlbnRHcm91cCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBhcmVudEdyb3VwKGNvbmZvcm1pbmcsIHBhcmVudHMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZvcm1pbmcgPSBjb25mb3JtaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50cyA9IHBhcmVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQYXJlbnRHcm91cC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZQYXJlbnRHcm91cCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQYXJlbnRHcm91cDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlBhcmVudEdyb3VwID0gUGFyZW50R3JvdXA7XG4gICAgICAgIHZhciBQYXJlbnQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFBhcmVudCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBhcmVudChydCwgYWRhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXdUeXBlID0gcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGlvbnMgPSBhZGFwdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQYXJlbnQucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52UGFyZW50KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFBhcmVudDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlBhcmVudCA9IFBhcmVudDtcbiAgICAgICAgdmFyIFJlbmFtZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUmVuYW1lLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVuYW1lKG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9sZE5hbWUgPSBvbGROYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMubmV3TmFtZSA9IG5ld05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZW5hbWUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52UmVuYW1lKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFJlbmFtZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlJlbmFtZSA9IFJlbmFtZTtcbiAgICAgICAgdmFyIFJlbmFtZXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFJlbmFtZXMsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBSZW5hbWVzKHQsIHJlbmFtZXMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmFtZXMgPSByZW5hbWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVuYW1lcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZSZW5hbWVzKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFJlbmFtZXM7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5SZW5hbWVzID0gUmVuYW1lcztcbiAgICAgICAgdmFyIFJlZGVmaW5lcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUmVkZWZpbmVzLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVkZWZpbmVzKHQsIGlkZW50aWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbiA9IHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGlmaWVycyA9IGlkZW50aWZpZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUmVkZWZpbmVzLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlJlZGVmaW5lcyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBSZWRlZmluZXM7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5SZWRlZmluZXMgPSBSZWRlZmluZXM7XG4gICAgICAgIHZhciBTZWxlY3RzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhTZWxlY3RzLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gU2VsZWN0cyh0LCBpZGVudGlmaWVycykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW4gPSB0O1xuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnMgPSBpZGVudGlmaWVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNlbGVjdHMucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52U2VsZWN0cyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3RzO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuU2VsZWN0cyA9IFNlbGVjdHM7XG4gICAgICAgIHZhciBFeHBvcnRDaGFuZ2VzZXQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEV4cG9ydENoYW5nZXNldCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEV4cG9ydENoYW5nZXNldChhY2Nlc3MsIGZlYXR1cmVTZXQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjY2VzcyA9IGFjY2VzcztcbiAgICAgICAgICAgICAgICB0aGlzLmZlYXR1cmVTZXQgPSBmZWF0dXJlU2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRXhwb3J0Q2hhbmdlc2V0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkV4cG9ydENoYW5nZXNldCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBFeHBvcnRDaGFuZ2VzZXQ7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5FeHBvcnRDaGFuZ2VzZXQgPSBFeHBvcnRDaGFuZ2VzZXQ7XG4gICAgICAgIHZhciBOZXdFeHBvcnRzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhOZXdFeHBvcnRzLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gTmV3RXhwb3J0cyh0LCBleHBvcnRDaGFuZ2VzZXQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydENoYW5nZXNldCA9IGV4cG9ydENoYW5nZXNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE5ld0V4cG9ydHMucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52TmV3RXhwb3J0cyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBOZXdFeHBvcnRzO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuTmV3RXhwb3J0cyA9IE5ld0V4cG9ydHM7XG4gICAgICAgIHZhciBVbmRlZmluZXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFVuZGVmaW5lcywgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVuZGVmaW5lcyh0LCBpZGVudGlmaWVycykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW4gPSB0O1xuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpZmllcnMgPSBpZGVudGlmaWVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFVuZGVmaW5lcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZVbmRlZmluZXModGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVW5kZWZpbmVzO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuVW5kZWZpbmVzID0gVW5kZWZpbmVzO1xuICAgICAgICB2YXIgTGl0ZXJhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoTGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIExpdGVyYWwoKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTGl0ZXJhbDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkxpdGVyYWwgPSBMaXRlcmFsO1xuICAgICAgICB2YXIgQ2hhckxpdGVyYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKENoYXJMaXRlcmFsLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2hhckxpdGVyYWwodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2hhckxpdGVyYWwucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52Q2hhckxpdGVyYWwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQ2hhckxpdGVyYWw7XG4gICAgICAgIH0pKExpdGVyYWwpO1xuICAgICAgICBhc3QuQ2hhckxpdGVyYWwgPSBDaGFyTGl0ZXJhbDtcbiAgICAgICAgdmFyIEJvb2xlYW5MaXRlcmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhCb29sZWFuTGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEJvb2xlYW5MaXRlcmFsKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEJvb2xlYW5MaXRlcmFsLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkJvb2xlYW5MaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW5MaXRlcmFsO1xuICAgICAgICB9KShMaXRlcmFsKTtcbiAgICAgICAgYXN0LkJvb2xlYW5MaXRlcmFsID0gQm9vbGVhbkxpdGVyYWw7XG4gICAgICAgIHZhciBJbnRMaXRlcmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJbnRMaXRlcmFsLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gSW50TGl0ZXJhbCh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJbnRMaXRlcmFsLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkludExpdGVyYWwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSW50TGl0ZXJhbDtcbiAgICAgICAgfSkoTGl0ZXJhbCk7XG4gICAgICAgIGFzdC5JbnRMaXRlcmFsID0gSW50TGl0ZXJhbDtcbiAgICAgICAgdmFyIFZvaWRMaXRlcmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhWb2lkTGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFZvaWRMaXRlcmFsKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBWb2lkTGl0ZXJhbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZWb2lkTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBWb2lkTGl0ZXJhbDtcbiAgICAgICAgfSkoTGl0ZXJhbCk7XG4gICAgICAgIGFzdC5Wb2lkTGl0ZXJhbCA9IFZvaWRMaXRlcmFsO1xuICAgICAgICB2YXIgU3RyaW5nTGl0ZXJhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoU3RyaW5nTGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFN0cmluZ0xpdGVyYWwodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgU3RyaW5nTGl0ZXJhbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZTdHJpbmdMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZ0xpdGVyYWw7XG4gICAgICAgIH0pKExpdGVyYWwpO1xuICAgICAgICBhc3QuU3RyaW5nTGl0ZXJhbCA9IFN0cmluZ0xpdGVyYWw7XG4gICAgICAgIHZhciBBbGwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEFsbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFsbChhbGxUb2tlbikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsVG9rZW4gPSBhbGxUb2tlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEFsbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZBbGwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQWxsO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuQWxsID0gQWxsO1xuICAgICAgICB2YXIgVHlwZUluc3RhbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFR5cGVJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBUeXBlSW5zdGFuY2U7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5UeXBlSW5zdGFuY2UgPSBUeXBlSW5zdGFuY2U7XG4gICAgICAgIHZhciBDb25kaXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKENvbmRpdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENvbmRpdGlvbihsYWJlbCwgY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsYWJlbCwgY29uZGl0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENvbmRpdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2hvdWxkIG5vdCBiZSBjYWxsZWRcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENvbmRpdGlvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkNvbmRpdGlvbiA9IENvbmRpdGlvbjtcbiAgICAgICAgdmFyIFByZWNvbmRpdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUHJlY29uZGl0aW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUHJlY29uZGl0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUHJlY29uZGl0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlByZWNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQcmVjb25kaXRpb247XG4gICAgICAgIH0pKENvbmRpdGlvbik7XG4gICAgICAgIGFzdC5QcmVjb25kaXRpb24gPSBQcmVjb25kaXRpb247XG4gICAgICAgIHZhciBQb3N0Y29uZGl0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhQb3N0Y29uZGl0aW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUG9zdGNvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFBvc3Rjb25kaXRpb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52UG9zdGNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQb3N0Y29uZGl0aW9uO1xuICAgICAgICB9KShDb25kaXRpb24pO1xuICAgICAgICBhc3QuUG9zdGNvbmRpdGlvbiA9IFBvc3Rjb25kaXRpb247XG4gICAgICAgIHZhciBJbnZhcmlhbnRjb25kaXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEludmFyaWFudGNvbmRpdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEludmFyaWFudGNvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEludmFyaWFudGNvbmRpdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZJbnZhcmlhbnRjb25kaXRpb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSW52YXJpYW50Y29uZGl0aW9uO1xuICAgICAgICB9KShDb25kaXRpb24pO1xuICAgICAgICBhc3QuSW52YXJpYW50Y29uZGl0aW9uID0gSW52YXJpYW50Y29uZGl0aW9uO1xuICAgICAgICB2YXIgQXNzaWdubWVudCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQXNzaWdubWVudCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFzc2lnbm1lbnQobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXNzaWdubWVudC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZBc3NpZ25tZW50KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEFzc2lnbm1lbnQ7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Bc3NpZ25tZW50ID0gQXNzaWdubWVudDtcbiAgICAgICAgdmFyIENyZWF0ZUluc3RydWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDcmVhdGVJbnN0cnVjdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZUluc3RydWN0aW9uKHRhcmdldCwgbWV0aG9kLCBhcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgICAgICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGFyZ2V0LCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDcmVhdGVJbnN0cnVjdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDcmVhdGVJbnN0cnVjdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDcmVhdGVJbnN0cnVjdGlvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkNyZWF0ZUluc3RydWN0aW9uID0gQ3JlYXRlSW5zdHJ1Y3Rpb247XG4gICAgICAgIHZhciBVbmFyeU9wID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhVbmFyeU9wLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVW5hcnlPcChvcGVyYXRvciwgb3BlcmFuZCwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVbmFyeU9wLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlVuYXJ5T3AodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVW5hcnlPcDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlVuYXJ5T3AgPSBVbmFyeU9wO1xuICAgICAgICB2YXIgQmluYXJ5T3AgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEJpbmFyeU9wLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQmluYXJ5T3Aob3BlcmF0b3IsIGxlZnQsIHJpZ2h0LCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQmluYXJ5T3AucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52QmluYXJ5T3AodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQmluYXJ5T3A7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5CaW5hcnlPcCA9IEJpbmFyeU9wO1xuICAgICAgICB2YXIgc3RyaW5nVG9VbmFyeU9wID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbXCItXCIsIDAgLyogTWludXMgKi9dLFxuICAgICAgICAgICAgW1wiK1wiLCAxIC8qIFBsdXMgKi9dLFxuICAgICAgICAgICAgW1wibm90XCIsIDIgLyogTm90ICovXSxcbiAgICAgICAgICAgIFtcIm9sZFwiLCAzIC8qIE9sZCAqL10sXG4gICAgICAgIF0pO1xuICAgICAgICB2YXIgc3RyaW5nVG9CaW5hcnlPcCA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgW1wiLVwiLCAwIC8qIE1pbnVzICovXSxcbiAgICAgICAgICAgIFtcIitcIiwgMSAvKiBQbHVzICovXSxcbiAgICAgICAgICAgIFtcIipcIiwgMiAvKiBNdWx0aXBsaWNhdGlvbiAqL10sXG4gICAgICAgICAgICBbXCIvXCIsIDMgLyogRGl2aXNpb24gKi9dLFxuICAgICAgICAgICAgW1wiLy9cIiwgNCAvKiBJbnRlZ2VyRGl2aXNpb24gKi9dLFxuICAgICAgICAgICAgW1wiXFxcXFxcXFxcIiwgNSAvKiBNb2R1bG8gKi9dLFxuICAgICAgICAgICAgW1wiXlwiLCA2IC8qIEV4cG9uZW50aWFsICovXSxcbiAgICAgICAgICAgIFtcIi4uXCIsIDcgLyogRG90RG90ICovXSxcbiAgICAgICAgICAgIFtcIj1cIiwgOCAvKiBJZGVudGljYWwgKi9dLFxuICAgICAgICAgICAgW1wiLz1cIiwgOSAvKiBOb3RJZGVudGljYWwgKi9dLFxuICAgICAgICAgICAgW1wiflwiLCAxMCAvKiBJc0VxdWFsICovXSxcbiAgICAgICAgICAgIFtcIi9+XCIsIDExIC8qIE5vdElzRXF1YWwgKi9dLFxuICAgICAgICAgICAgW1wiPFwiLCAxMiAvKiBMZXNzVGhhbiAqL10sXG4gICAgICAgICAgICBbXCI+XCIsIDEzIC8qIEdyZWF0ZXJUaGFuICovXSxcbiAgICAgICAgICAgIFtcIjw9XCIsIDE0IC8qIExlc3NPckVxdWFsICovXSxcbiAgICAgICAgICAgIFtcIj49XCIsIDE1IC8qIEdyZWF0ZXJPckVxdWFsICovXSxcbiAgICAgICAgICAgIFtcImFuZFwiLCAxNiAvKiBBbmQgKi9dLFxuICAgICAgICAgICAgW1wiYW5kIHRoZW5cIiwgMTcgLyogQW5kVGhlbiAqL10sXG4gICAgICAgICAgICBbXCJvclwiLCAxOCAvKiBPciAqL10sXG4gICAgICAgICAgICBbXCJvciBlbHNlXCIsIDE5IC8qIE9yRWxzZSAqL10sXG4gICAgICAgICAgICBbXCJ4b3JcIiwgMjAgLyogWG9yICovXSxcbiAgICAgICAgICAgIFtcImltcGxpZXNcIiwgMjEgLyogSW1wbGllcyAqL10sXG4gICAgICAgIF0pO1xuICAgICAgICB2YXIgQ2FsbEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKENhbGxFeHByZXNzaW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2FsbEV4cHJlc3Npb24ob3BlcmFuZCwgbmFtZSwgcGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlcmFuZCA9IG9wZXJhbmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChvcGVyYW5kLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENhbGxFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkNhbGxFeHByZXNzaW9uKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENhbGxFeHByZXNzaW9uO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuQ2FsbEV4cHJlc3Npb24gPSBDYWxsRXhwcmVzc2lvbjtcbiAgICAgICAgdmFyIFVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBVbnF1YWxpZmllZENhbGxFeHByZXNzaW9uKGlkZW50aWZpZXIsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVbnF1YWxpZmllZENhbGxFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24gPSBVbnF1YWxpZmllZENhbGxFeHByZXNzaW9uO1xuICAgICAgICB2YXIgSW5kZXhFeHByZXNzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJbmRleEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBJbmRleEV4cHJlc3Npb24ob3BlcmFuZCwgYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgICAgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCwgYXJndW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSW5kZXhFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkluZGV4RXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBJbmRleEV4cHJlc3Npb247XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5JbmRleEV4cHJlc3Npb24gPSBJbmRleEV4cHJlc3Npb247XG4gICAgICAgIHZhciBBdHRhY2hlZEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEF0dGFjaGVkRXhwcmVzc2lvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEF0dGFjaGVkRXhwcmVzc2lvbihvZlR5cGUsIGV4cHIsIG5ld1Zhciwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwciA9IGV4cHI7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXdWYXIgPSBuZXdWYXI7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG9mVHlwZSwgZXhwciwgbmV3VmFyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBdHRhY2hlZEV4cHJlc3Npb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52QXR0YWNoZWRFeHByZXNzaW9uKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEF0dGFjaGVkRXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkF0dGFjaGVkRXhwcmVzc2lvbiA9IEF0dGFjaGVkRXhwcmVzc2lvbjtcbiAgICAgICAgdmFyIEZyb21Mb29wID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhGcm9tTG9vcCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEZyb21Mb29wKGluaXRpYWxpemVyQmxvY2ssIHVudGlsLCBsb29wQmxvY2ssIHZhcmlhbnQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVyQmxvY2sgPSBpbml0aWFsaXplckJsb2NrO1xuICAgICAgICAgICAgICAgIHRoaXMudW50aWwgPSB1bnRpbDtcbiAgICAgICAgICAgICAgICB0aGlzLmxvb3BCbG9jayA9IGxvb3BCbG9jaztcbiAgICAgICAgICAgICAgICB0aGlzLnZhcmlhbnQgPSB2YXJpYW50O1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGluaXRpYWxpemVyQmxvY2spO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh1bnRpbCk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgbG9vcEJsb2NrKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmFyaWFudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBGcm9tTG9vcC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZGcm9tTG9vcCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBGcm9tTG9vcDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkZyb21Mb29wID0gRnJvbUxvb3A7XG4gICAgICAgIHZhciBJZkVsc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKElmRWxzZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIElmRWxzZShjb25kaXRpb24sIHRoZW5CbG9jaywgZWxzZUlmcywgZWxzZUJsb2NrKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy50aGVuQmxvY2sgPSB0aGVuQmxvY2s7XG4gICAgICAgICAgICAgICAgdGhpcy5lbHNlSWZzID0gZWxzZUlmcztcbiAgICAgICAgICAgICAgICB0aGlzLmVsc2VCbG9jayA9IGVsc2VCbG9jaztcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY29uZGl0aW9uKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCB0aGVuQmxvY2spO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGVsc2VJZnMpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGVsc2VCbG9jayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJZkVsc2UucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52SWZFbHNlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIElmRWxzZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LklmRWxzZSA9IElmRWxzZTtcbiAgICAgICAgdmFyIEVsc2VJZiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRWxzZUlmLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRWxzZUlmKGNvbmRpdGlvbiwgdGhlbkJsb2NrKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy50aGVuQmxvY2sgPSB0aGVuQmxvY2s7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhlbkJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVsc2VJZi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZFbHNlSWYodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gRWxzZUlmO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuRWxzZUlmID0gRWxzZUlmO1xuICAgIH0pKGFzdCA9IGVpZmZlbC5hc3QgfHwgKGVpZmZlbC5hc3QgPSB7fSkpO1xufSkoZWlmZmVsIHx8IChlaWZmZWwgPSB7fSkpO1xuXG52YXIgZWlmZmVsO1xuKGZ1bmN0aW9uIChlaWZmZWwpIHtcbiAgICB2YXIgYnVpbHRpbjtcbiAgICAoZnVuY3Rpb24gKGJ1aWx0aW4pIHtcbiAgICAgICAgYnVpbHRpbi5TVERfRklMRSA9IHtcbiAgICAgICAgICAgIFwicHV0X3N0cmluZ1wiOiBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGN0eCkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9KShidWlsdGluID0gZWlmZmVsLmJ1aWx0aW4gfHwgKGVpZmZlbC5idWlsdGluID0ge30pKTtcbn0pKGVpZmZlbCB8fCAoZWlmZmVsID0ge30pKTtcblxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpc2l0b3IudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImZyb21KUy5kLnRzXCIgLz5cbnZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIHNlbWFudGljcztcbiAgICAoZnVuY3Rpb24gKHNlbWFudGljcykge1xuICAgICAgICB2YXIgY3JlYXRlQ2xhc3NTeW1ib2xzID0gZnVuY3Rpb24gKGFzdHMsIGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgYXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChhc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhc3QgaW5zdGFuY2VvZiBlaWZmZWwuYXN0LkNsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIiwgYXN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYXN0Lm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wobmFtZSwgYXN0KTtcbiAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuY2xhc3NTeW1ib2xzLnNldChjbGFzc1N5bWJvbC5sb3dlckNhc2VOYW1lLCBjbGFzc1N5bWJvbCk7XG4gICAgICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMucHVzaChjbGFzc1N5bWJvbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZUZlYXR1cmVTeW1ib2xzID0gZnVuY3Rpb24gKGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICBjbGFzc1N5bWJvbC5hc3QuYWNjZXB0KG5ldyBGZWF0dXJlRGlzY292ZXJ5KGFuYWx5c2lzQ29udGV4dCwgY2xhc3NTeW1ib2wpLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyA9IGZ1bmN0aW9uIChhbGxSb3V0aW5lcykge1xuICAgICAgICAgICAgYWxsUm91dGluZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGluZSkge1xuICAgICAgICAgICAgICAgIHJvdXRpbmUuYXN0LnBhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1ldGVyTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJMaXN0LnZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YXJOYW1lID0gdmFyRGVjbC5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuVmFyaWFibGVTeW1ib2wodmFyTmFtZSwgdmFyRGVjbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lLnBhcmFtc0luT3JkZXIucHVzaCh2YXJpYWJsZVN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lLmxvY2Fsc0FuZFBhcmFtc0J5TmFtZS5zZXQodmFyTmFtZSwgdmFyaWFibGVTeW1ib2wpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlUm91dGluZUxvY2FsU3ltYm9scyA9IGZ1bmN0aW9uIChhbmFseXNpc0NvbnRleHQpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0aW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2Fsc0Jsb2NrcyA9IHJvdXRpbmUuYXN0LmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkIGluc3RhbmNlb2YgZWlmZmVsLmFzdC5Mb2NhbHNCbG9jaztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsb2NhbHNCbG9ja3MuZm9yRWFjaChmdW5jdGlvbiAobG9jYWxCbG9jaykge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbEJsb2NrLnZhckRlY2xMaXN0cy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJzRGVjbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyc0RlY2wudmFyRGVjbHMuZm9yRWFjaChmdW5jdGlvbiAodmFyRGVjbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YXJOYW1lID0gdmFyRGVjbC5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhcmlhYmxlU3ltYm9sID0gbmV3IGVpZmZlbC5zeW1ib2xzLlZhcmlhYmxlU3ltYm9sKHZhck5hbWUsIHZhckRlY2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmUubG9jYWxzLnB1c2godmFyaWFibGVTeW1ib2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRpbmUubG9jYWxzQW5kUGFyYW1zQnlOYW1lLnNldCh2YXJOYW1lLCB2YXJpYWJsZVN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBhcnNlRXJyb3IgPSBmdW5jdGlvbiBwYXJzZUVycm9yKGJ1aWx0aW5Tb3VyY2UsIGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXAoXCJQYXJzZSBFcnJvcjogXCIgKyBidWlsdGluU291cmNlLmZpbGVuYW1lKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRm91bmRcIiwgZS5mb3VuZCk7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKFwiRXhwZWN0ZWRcIik7XG4gICAgICAgICAgICBjb25zb2xlLnRhYmxlKGUuZXhwZWN0ZWQpO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cChcIkNvbnRleHRcIik7XG4gICAgICAgICAgICB2YXIgbGluZXMgPSBidWlsdGluU291cmNlLmNvbnRlbnQuc3BsaXQoL1xccj9cXG4vKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbGluZXNbZS5saW5lIC0gNF0gKyBsaW5lc1tlLmxpbmUgLSAzXSArIFwiXFxuXCIgKyBsaW5lc1tlLmxpbmUgLSAyXSArIFwiXFxuXCIgKyBsaW5lc1tlLmxpbmUgLSAxXSArIFwiXFxuXCIgKyBBcnJheShlLmNvbHVtbikuam9pbihcIi1cIikgKyBcIl4gLS0gTGluZTogXCIgKyBlLmxpbmUgKyBcIiBDb2x1bW46IFwiICsgZS5jb2x1bW4gKyBcIlxcblwiICsgbGluZXNbZS5saW5lICsgMF0gKyBsaW5lc1tlLmxpbmUgKyAxXSArIGxpbmVzW2UubGluZSArIDJdICsgbGluZXNbZS5saW5lICsgM107XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoXCJTb3VyY2VcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhidWlsdGluU291cmNlLmNvbnRlbnQpO1xuICAgICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbml0QXN0RGljdGlvbmFyeSA9IGZ1bmN0aW9uIGluaXRBc3REaWN0aW9uYXJ5KGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICBjbGFzc1N5bWJvbC5hc3QuYWNjZXB0KG5ldyBBc3RUb0RpY3Rpb25hcnlCeVByb3RvdHlwZShhbmFseXNpc0NvbnRleHQpLCBhbmFseXNpc0NvbnRleHQuYXN0RGljdGlvbmFyeSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGluaXRBc3REaWN0aW9uYXJ5QnlDbGFzcyA9IGZ1bmN0aW9uIGluaXRBc3REaWN0aW9uYXJ5QnlDbGFzcyhhbmFseXNpc0NvbnRleHQpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTeW1ib2wuYXN0LmFjY2VwdChuZXcgQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGUoYW5hbHlzaXNDb250ZXh0KSwgY2xhc3NTeW1ib2wuYXN0LmRpY3Rpb25hcnkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXF1aXJlVmFsaWRDbGFzc0ZvckFuYWx5c2lzID0gZnVuY3Rpb24gcmVxdWlyZUNsYXNzRm9yQW5hbHlzaXMobmFtZSwgYW5hbHlzaXNDb250ZXh0LCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgICAgICBpZiAoYW5hbHlzaXNDb250ZXh0LmNsYXNzU3ltYm9scy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWNjZXNzKGFuYWx5c2lzQ29udGV4dC5jbGFzc1dpdGhOYW1lKG5hbWUpLCBhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZShhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gYW5hbHl6ZSgpIHtcbiAgICAgICAgICAgIHZhciBtYW55QXN0cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBtYW55QXN0c1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKGJ1aWx0aW5Tb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWlmZmVsLnBhcnNlci5wYXJzZShidWlsdGluU291cmNlLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUVycm9yKGJ1aWx0aW5Tb3VyY2UsIGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtYW55QXN0cywgX19laWZmZWxfYnVpbHRpbi5tYXAocGFyc2UpKTtcbiAgICAgICAgICAgIHZhciBhc3RzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgbWFueUFzdHMpO1xuICAgICAgICAgICAgdmFyIGFuYWx5c2lzQ29udGV4dCA9IG5ldyBBbmFseXNpc0NvbnRleHQoKTtcbiAgICAgICAgICAgIGNyZWF0ZUNsYXNzU3ltYm9scyhhc3RzLCBhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgaW5pdEFzdERpY3Rpb25hcnkoYW5hbHlzaXNDb250ZXh0KTtcbiAgICAgICAgICAgIGluaXRBc3REaWN0aW9uYXJ5QnlDbGFzcyhhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgY3JlYXRlRmVhdHVyZVN5bWJvbHMoYW5hbHlzaXNDb250ZXh0KTtcbiAgICAgICAgICAgIGNyZWF0ZVJvdXRpbmVQYXJhbVN5bWJvbHMoYW5hbHlzaXNDb250ZXh0LmFsbFJvdXRpbmVzKTtcbiAgICAgICAgICAgIGNyZWF0ZVJvdXRpbmVMb2NhbFN5bWJvbHMoYW5hbHlzaXNDb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBpbmhlcml0YW5jZUJlaW5nQ2hlY2tlZCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIHZhciBpbmhlcml0YW5jZUNoZWNrZWQgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGFuY2VDeWNsZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBoYXNWYWxpZEhpZXJhcmNoeSA9IGZ1bmN0aW9uIGhhc1ZhbGlkSGllcmFyY2h5KG9uZUNsYXNzLCBkZXNjZW5kYW50cykge1xuICAgICAgICAgICAgICAgIGlmIChpbmhlcml0YW5jZUJlaW5nQ2hlY2tlZC5oYXMob25lQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uZUNsYXNzLmhhc0N5Y2xpY0luaGVyaXRhbmNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2VDeWNsZXMucHVzaChkZXNjZW5kYW50cy5zbGljZSgwKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5oZXJpdGFuY2VDaGVja2VkLmhhcyhvbmVDbGFzcykpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlQmVpbmdDaGVja2VkLmFkZChvbmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIG9uZUNsYXNzLmFzdC5wYXJlbnRHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50R3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEdyb3VwLnBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnQucmF3VHlwZS5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVZhbGlkQ2xhc3NGb3JBbmFseXNpcyhwYXJlbnROYW1lLCBhbmFseXNpc0NvbnRleHQsIGZ1bmN0aW9uIChwYXJlbnRTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFN5bWJvbC5oYXNDeWNsaWNJbmhlcml0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGlzIGltcGxpZXMgdGhhdCBoYXNWYWxpZEhpZXJhcmNoeSgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIG9uIHBhcmVudFN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogSW1wbHlpbmcgdGhhdCBhbGwgdGhlIGN5Y2xlcyBpdCBwYXJ0aWNpcGF0ZXMgaW4gaGF2ZSBhbHJlYWR5IGJlZW4gaWRlbnRpZmllZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVGh1cywgdGhpcyBgb25lQ2xhc3NgIGNhbm5vdCBiZSBpbnNpZGUgYW55IHN1Y2ggY3ljbGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVDbGFzcy5pbmhlcml0c0Zyb21DeWNsaWNJbmhlcml0YW5jZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5wdXNoKG9uZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1ZhbGlkSGllcmFyY2h5KHBhcmVudFN5bWJvbCwgZGVzY2VuZGFudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGFudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVDbGFzcy5oYXNDeWNsaWNJbmhlcml0YW5jZSA9IHBhcmVudFN5bWJvbC5oYXNDeWNsaWNJbmhlcml0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZUNsYXNzLmluaGVyaXRzRnJvbUN5Y2xpY0luaGVyaXRhbmNlID0gcGFyZW50U3ltYm9sLmluaGVyaXRzRnJvbUN5Y2xpY0luaGVyaXRhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZmFpbHVyZShhYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnVua25vd25DbGFzcyhwYXJlbnQucmF3VHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2VCZWluZ0NoZWNrZWQuZGVsZXRlKG9uZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2VDaGVja2VkLmFkZChvbmVDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKG9uZUNsYXNzKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsaWRIaWVyYXJjaHkob25lQ2xhc3MsIFtdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRhbmNlQ3ljbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnVuY2F0ZWdvcml6ZWQoXCJDeWNsaWMgaW5oZXJpdGFuY2UgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkN5Y2xlczpcIiwgaW5oZXJpdGFuY2VDeWNsZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMubWFwKGZ1bmN0aW9uIChvbmVDbGFzcykge1xuICAgICAgICAgICAgICAgIG9uZUNsYXNzLmFzdC5nZW5lcmljUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uIChnZW5lcmljUGFyYW1ldGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbChnZW5lcmljUGFyYW1ldGVyLm5hbWUubmFtZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTeW1ib2wuYXN0LmNyZWF0aW9uQ2xhdXNlLmZvckVhY2goZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBpZGVudGlmaWVyLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc1N5bWJvbC5wcm9jZWR1cmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc1N5bWJvbC5jcmVhdGlvblByb2NlZHVyZXMuc2V0KG5hbWUsIGNsYXNzU3ltYm9sLnByb2NlZHVyZXNbbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNsYXNzU3ltYm9sLmZ1bmN0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmVycm9ycy51bmNhdGVnb3JpemVkKFwiRnVuY3Rpb25zIGNhbm5vdCBiZSB1c2VkIGFzIGNyZWF0aW9uIHByb2NlZHVyZXMgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5lcnJvcnMudW5jYXRlZ29yaXplZChcIlRoZXJlIGlzIG5vdCBhIHByb2NlZHVyZSB3aXRoIG5hbWUgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmV3VmFyID0ge1xuICAgICAgICAgICAgICAgIGFzdHM6IGFzdHMsXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBhbmFseXNpc0NvbnRleHQuZXJyb3JzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGFuYWx5c2lzQ29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFyO1xuICAgICAgICB9XG4gICAgICAgIHNlbWFudGljcy5hbmFseXplID0gYW5hbHl6ZTtcbiAgICAgICAgdmFyIEFuYWx5c2lzQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBBbmFseXNpc0NvbnRleHQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1N5bWJvbHMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxGdW5jdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFByb2NlZHVyZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbFJvdXRpbmVzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxDbGFzc2VzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5hc3REaWN0aW9uYXJ5ID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gbmV3IEVycm9yQ29udGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQW5hbHlzaXNDb250ZXh0LnByb3RvdHlwZS5hbGxXaXRoUHJvdG90eXBlID0gZnVuY3Rpb24gKHByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFzdERpY3Rpb25hcnkuaGFzKHByb3RvdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXN0RGljdGlvbmFyeS5nZXQocHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQcm90b3R5cGUgaXMgbm90IGEga2V5XCIsIHByb3RvdHlwZSwgdGhpcy5hc3REaWN0aW9uYXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdG90eXBlIGlzIG5vdCBhIGtleVwiICsgcHJvdG90eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgQW5hbHlzaXNDb250ZXh0LnByb3RvdHlwZS5jbGFzc1dpdGhOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jbGFzc1N5bWJvbHMuaGFzKGxvd2VyQ2FzZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzU3ltYm9scy5nZXQobG93ZXJDYXNlTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBjbGFzcyB3aXRoIG5hbWU6IFwiICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEFuYWx5c2lzQ29udGV4dC5wcm90b3R5cGUuaGFzQ2xhc3MgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzU3ltYm9scy5oYXMobG93ZXJDYXNlTmFtZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEFuYWx5c2lzQ29udGV4dDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdmFyIEVycm9yQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBFcnJvckNvbnRleHQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVycm9yQ29udGV4dC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGtpbmQsIG1lc3NhZ2UsIGFzdCkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRpcmVNZXNzYWdlID0gU2VtYW50aWNFcnJvcktpbmRba2luZF0gKyBcIjogXCIgKyBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZW50aXJlTWVzc2FnZSwgYXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVudGlyZU1lc3NhZ2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEVycm9yQ29udGV4dC5wcm90b3R5cGUudW5rbm93bkNsYXNzID0gZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCgzIC8qIFVua25vd25DbGFzcyAqLywgaWRlbnRpZmllci5uYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBFcnJvckNvbnRleHQucHJvdG90eXBlLmR1cGxpY2F0ZUZlYXR1cmUgPSBmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKDAgLyogRHVwbGljYXRlRmVhdHVyZU5hbWUgKi8sIGlkZW50aWZpZXIubmFtZSwgaWRlbnRpZmllcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRXJyb3JDb250ZXh0LnByb3RvdHlwZS51bmNhdGVnb3JpemVkID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBFcnJvckNvbnRleHQ7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHZhciBTZW1hbnRpY1Zpc2l0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFNlbWFudGljVmlzaXRvciwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFNlbWFudGljVmlzaXRvcihhbmFseXNpc0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dCA9IGFuYWx5c2lzQ29udGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9scyA9IGFuYWx5c2lzQ29udGV4dC5jbGFzc1N5bWJvbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU2VtYW50aWNWaXNpdG9yO1xuICAgICAgICB9KShlaWZmZWwuYXN0LlZpc2l0b3IpO1xuICAgICAgICAoZnVuY3Rpb24gKFNlbWFudGljRXJyb3JLaW5kKSB7XG4gICAgICAgICAgICBTZW1hbnRpY0Vycm9yS2luZFtTZW1hbnRpY0Vycm9yS2luZFtcIkR1cGxpY2F0ZUZlYXR1cmVOYW1lXCJdID0gMF0gPSBcIkR1cGxpY2F0ZUZlYXR1cmVOYW1lXCI7XG4gICAgICAgICAgICBTZW1hbnRpY0Vycm9yS2luZFtTZW1hbnRpY0Vycm9yS2luZFtcIkR1cGxpY2F0ZVBhcmFtZXRlck5hbWVcIl0gPSAxXSA9IFwiRHVwbGljYXRlUGFyYW1ldGVyTmFtZVwiO1xuICAgICAgICAgICAgU2VtYW50aWNFcnJvcktpbmRbU2VtYW50aWNFcnJvcktpbmRbXCJEdXBsaWNhdGVDbGFzc05hbWVcIl0gPSAyXSA9IFwiRHVwbGljYXRlQ2xhc3NOYW1lXCI7XG4gICAgICAgICAgICBTZW1hbnRpY0Vycm9yS2luZFtTZW1hbnRpY0Vycm9yS2luZFtcIlVua25vd25DbGFzc1wiXSA9IDNdID0gXCJVbmtub3duQ2xhc3NcIjtcbiAgICAgICAgICAgIFNlbWFudGljRXJyb3JLaW5kW1NlbWFudGljRXJyb3JLaW5kW1wiSW5oZXJpdGFuY2VDeWNsZVwiXSA9IDRdID0gXCJJbmhlcml0YW5jZUN5Y2xlXCI7XG4gICAgICAgIH0pKHNlbWFudGljcy5TZW1hbnRpY0Vycm9yS2luZCB8fCAoc2VtYW50aWNzLlNlbWFudGljRXJyb3JLaW5kID0ge30pKTtcbiAgICAgICAgdmFyIFNlbWFudGljRXJyb3JLaW5kID0gc2VtYW50aWNzLlNlbWFudGljRXJyb3JLaW5kO1xuICAgICAgICB2YXIgRmVhdHVyZURpc2NvdmVyeSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRmVhdHVyZURpc2NvdmVyeSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEZlYXR1cmVEaXNjb3ZlcnkoYW5hbHlzaXNDb250ZXh0LCBjbGFzc1N5bWJvbCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGFuYWx5c2lzQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1N5bWJvbCA9IGNsYXNzU3ltYm9sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRmVhdHVyZURpc2NvdmVyeS5wcm90b3R5cGUudkF0dHIgPSBmdW5jdGlvbiAoYXR0ciwgXykge1xuICAgICAgICAgICAgICAgIGF0dHIuZnJvemVuTmFtZXNBbmRBbGlhc2VzLm1hcChmdW5jdGlvbiAoZm5hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZm5hLm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxjTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSh0aGlzLmNsYXNzU3ltYm9sLCBsY05hbWUsIGZuYS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFsaWFzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZuYS5hbGlhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlhcyA9IGZuYS5hbGlhcy5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuQXR0cmlidXRlU3ltYm9sKG5hbWUsIGFsaWFzLCBmbmEuZnJvemVuLCBhdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgYXR0ci5zeW0gPSBhdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlcy5zZXQobGNOYW1lLCBhdHRyaWJ1dGVTeW1ib2wpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIHN1cGVyLnZBdHRyKGF0dHIsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEZlYXR1cmVEaXNjb3ZlcnkucHJvdG90eXBlLnZGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBfKSB7XG4gICAgICAgICAgICAgICAgZnVuYy5mcm96ZW5OYW1lc0FuZEFsaWFzZXMubWFwKGZ1bmN0aW9uIChmbmEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGZuYS5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsY0Z1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGxjRnVuY3Rpb25OYW1lLCBmbmEubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGlhcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbmEuYWxpYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMgPSBmbmEuYWxpYXMubmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3ltID0gbmV3IGVpZmZlbC5zeW1ib2xzLkZ1bmN0aW9uU3ltYm9sKGxjRnVuY3Rpb25OYW1lLCBhbGlhcywgZm5hLmZyb3plbiwgZnVuYyk7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuc3ltID0gc3ltO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLmZ1bmN0aW9ucy5zZXQobGNGdW5jdGlvbk5hbWUsIHN5bSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wucm91dGluZXMuc2V0KGxjRnVuY3Rpb25OYW1lLCBzeW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxGdW5jdGlvbnMucHVzaChzeW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5wdXNoKHN5bSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gc3VwZXIudkZ1bmN0aW9uKGZ1bmMsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEZlYXR1cmVEaXNjb3ZlcnkucHJvdG90eXBlLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlID0gZnVuY3Rpb24gKGNsYXNzU3ltYm9sLCBmZWF0dXJlTmFtZSwgaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIGlmIChjbGFzc1N5bWJvbC5oYXNTeW1ib2woZmVhdHVyZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmVycm9ycy5kdXBsaWNhdGVGZWF0dXJlKGlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGZWF0dXJlRGlzY292ZXJ5LnByb3RvdHlwZS52UHJvY2VkdXJlID0gZnVuY3Rpb24gKHByb2NlZHVyZSwgXykge1xuICAgICAgICAgICAgICAgIHByb2NlZHVyZS5mcm96ZW5OYW1lc0FuZEFsaWFzZXMubWFwKGZ1bmN0aW9uIChmbmEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2NlZHVyZU5hbWUgPSBmbmEubmFtZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGNQcm9jZWR1cmVOYW1lID0gcHJvY2VkdXJlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGxjUHJvY2VkdXJlTmFtZSwgZm5hLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxpYXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm5hLmFsaWFzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzID0gZm5hLmFsaWFzLm5hbWUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN5bSA9IG5ldyBlaWZmZWwuc3ltYm9scy5Qcm9jZWR1cmVTeW1ib2wocHJvY2VkdXJlTmFtZSwgYWxpYXMsIGZuYS5mcm96ZW4sIHByb2NlZHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIHByb2NlZHVyZS5zeW0gPSBzeW07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wucHJvY2VkdXJlcy5zZXQobGNQcm9jZWR1cmVOYW1lLCBzeW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLnJvdXRpbmVzLnNldChsY1Byb2NlZHVyZU5hbWUsIHN5bSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmFsbFByb2NlZHVyZXMucHVzaChzeW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5wdXNoKHN5bSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gc3VwZXIudlByb2NlZHVyZShwcm9jZWR1cmUsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEZlYXR1cmVEaXNjb3ZlcnkucHJvdG90eXBlLnZDb25zdGFudEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChjb25zdGFudEF0dHJpYnV0ZSwgXykge1xuICAgICAgICAgICAgICAgIGNvbnN0YW50QXR0cmlidXRlLmZyb3plbk5hbWVzQW5kQWxpYXNlcy5tYXAoZnVuY3Rpb24gKGZuYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGZuYS5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsY05hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JPbkR1cGxpY2F0ZUZlYXR1cmUodGhpcy5jbGFzc1N5bWJvbCwgbGNOYW1lLCBmbmEubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGlhcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbmEuYWxpYXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMgPSBmbmEuYWxpYXMubmFtZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlU3ltYm9sID0gbmV3IGVpZmZlbC5zeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbChuYW1lLCBhbGlhcywgZm5hLmZyb3plbiwgY29uc3RhbnRBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdGFudEF0dHJpYnV0ZS5zeW0gPSBhdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlcy5zZXQobGNOYW1lLCBhdHRyaWJ1dGVTeW1ib2wpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIHN1cGVyLnZDb25zdGFudEF0dHJpYnV0ZShjb25zdGFudEF0dHJpYnV0ZSwgdGhpcy5jbGFzc1N5bWJvbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEZlYXR1cmVEaXNjb3Zlcnk7XG4gICAgICAgIH0pKFNlbWFudGljVmlzaXRvcik7XG4gICAgICAgIHZhciBBc3RUb0RpY3Rpb25hcnlCeVByb3RvdHlwZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBBc3RUb0RpY3Rpb25hcnlCeVByb3RvdHlwZSgpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEFzdFRvRGljdGlvbmFyeUJ5UHJvdG90eXBlLnByb3RvdHlwZS52RGVmYXVsdCA9IGZ1bmN0aW9uIChhc3QsIGFyZykge1xuICAgICAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXN0KTtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLmhhcyhwcm90b3R5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZy5nZXQocHJvdG90eXBlKS5wdXNoKGFzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmcuc2V0KHByb3RvdHlwZSwgW2FzdF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS52RGVmYXVsdC5jYWxsKHRoaXMsIGFzdCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGU7XG4gICAgICAgIH0pKFNlbWFudGljVmlzaXRvcik7XG4gICAgICAgIHZhciBGZWF0dXJlVHlwZUNvbm5lY3RvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRmVhdHVyZVR5cGVDb25uZWN0b3IsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBGZWF0dXJlVHlwZUNvbm5lY3RvcigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBGZWF0dXJlVHlwZUNvbm5lY3RvcjtcbiAgICAgICAgfSkoU2VtYW50aWNWaXNpdG9yKTtcbiAgICB9KShzZW1hbnRpY3MgPSBlaWZmZWwuc2VtYW50aWNzIHx8IChlaWZmZWwuc2VtYW50aWNzID0ge30pKTtcbn0pKGVpZmZlbCB8fCAoZWlmZmVsID0ge30pKTtcblxudmFyIF9fZXh0ZW5kcyA9IHRoaXMuX19leHRlbmRzIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gICAgZC5wcm90b3R5cGUgPSBuZXcgX18oKTtcbn07XG52YXIgZWlmZmVsO1xuKGZ1bmN0aW9uIChlaWZmZWwpIHtcbiAgICB2YXIgc3ltYm9scztcbiAgICAoZnVuY3Rpb24gKHN5bWJvbHMpIHtcbiAgICAgICAgdmFyIFN5bWJvbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBTeW1ib2wobmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN5bWJvbDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgc3ltYm9scy5TeW1ib2wgPSBTeW1ib2w7XG4gICAgICAgIHZhciBGZWF0dXJlU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhGZWF0dXJlU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRmVhdHVyZVN5bWJvbChuYW1lLCBhbGlhcywgaXNGcm96ZW4pIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsaWFzID0gYWxpYXM7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0Zyb3plbiA9IGlzRnJvemVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEZlYXR1cmVTeW1ib2w7XG4gICAgICAgIH0pKFN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuRmVhdHVyZVN5bWJvbCA9IEZlYXR1cmVTeW1ib2w7XG4gICAgICAgIHZhciBSb3V0aW5lU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhSb3V0aW5lU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUm91dGluZVN5bWJvbChuYW1lLCBhbGlhcywgZnJvemVuLCBhc3QpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lLCBhbGlhcywgZnJvemVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FscyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxzQW5kUGFyYW1zQnlOYW1lID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zSW5PcmRlciA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJvdXRpbmVTeW1ib2w7XG4gICAgICAgIH0pKEZlYXR1cmVTeW1ib2wpO1xuICAgICAgICBzeW1ib2xzLlJvdXRpbmVTeW1ib2wgPSBSb3V0aW5lU3ltYm9sO1xuICAgICAgICB2YXIgRnVuY3Rpb25TeW1ib2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEZ1bmN0aW9uU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRnVuY3Rpb25TeW1ib2wobmFtZSwgYWxpYXMsIGZyb3plbiwgYXN0KSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSwgYWxpYXMsIGZyb3plbiwgYXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmFzdCA9IGFzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBGdW5jdGlvblN5bWJvbDtcbiAgICAgICAgfSkoUm91dGluZVN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuRnVuY3Rpb25TeW1ib2wgPSBGdW5jdGlvblN5bWJvbDtcbiAgICAgICAgdmFyIFByb2NlZHVyZVN5bWJvbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUHJvY2VkdXJlU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUHJvY2VkdXJlU3ltYm9sKG5hbWUsIGFsaWFzLCBmcm96ZW4sIGFzdCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUsIGFsaWFzLCBmcm96ZW4sIGFzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvY2VkdXJlU3ltYm9sO1xuICAgICAgICB9KShSb3V0aW5lU3ltYm9sKTtcbiAgICAgICAgc3ltYm9scy5Qcm9jZWR1cmVTeW1ib2wgPSBQcm9jZWR1cmVTeW1ib2w7XG4gICAgICAgIHZhciBBdHRyaWJ1dGVTeW1ib2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEF0dHJpYnV0ZVN5bWJvbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZVN5bWJvbChuYW1lLCBhbGlhcywgZnJvemVuLCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSwgYWxpYXMsIGZyb3plbik7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEF0dHJpYnV0ZVN5bWJvbDtcbiAgICAgICAgfSkoRmVhdHVyZVN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuQXR0cmlidXRlU3ltYm9sID0gQXR0cmlidXRlU3ltYm9sO1xuICAgICAgICB2YXIgVmFyaWFibGVTeW1ib2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFZhcmlhYmxlU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVmFyaWFibGVTeW1ib2wobmFtZSwgYXN0KSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gVmFyaWFibGVTeW1ib2w7XG4gICAgICAgIH0pKFN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuVmFyaWFibGVTeW1ib2wgPSBWYXJpYWJsZVN5bWJvbDtcbiAgICAgICAgdmFyIENsYXNzU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDbGFzc1N5bWJvbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENsYXNzU3ltYm9sKG5hbWUsIGFzdCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2VkdXJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRpbmVzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0aW9uUHJvY2VkdXJlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0N5Y2xpY0luaGVyaXRhbmNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmhlcml0c0Zyb21DeWNsaWNJbmhlcml0YW5jZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xhc3NTeW1ib2wucHJvdG90eXBlLmhhc1N5bWJvbCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxjTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3V0aW5lcy5oYXMobGNOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXMobGNOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIENsYXNzU3ltYm9sLnByb3RvdHlwZS5yZXNvbHZlU3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGNOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvdXRpbmVzLmhhcyhsY05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvdXRpbmVzLmdldChsY05hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmhhcyhsY05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KGxjTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bWJvbCBcIiArIG5hbWUgKyBcIiBkb2VzIG5vdCBleGlzdCBpbiBjbGFzcyBcIiArIHRoaXMubmFtZSArIFwiLlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQ2xhc3NTeW1ib2w7XG4gICAgICAgIH0pKFN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuQ2xhc3NTeW1ib2wgPSBDbGFzc1N5bWJvbDtcbiAgICB9KShzeW1ib2xzID0gZWlmZmVsLnN5bWJvbHMgfHwgKGVpZmZlbC5zeW1ib2xzID0ge30pKTtcbn0pKGVpZmZlbCB8fCAoZWlmZmVsID0ge30pKTtcblxudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgO1xufSkoZWlmZmVsIHx8IChlaWZmZWwgPSB7fSkpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpc2l0b3IudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5tb2R1bGUgZWlmZmVsLmFzdCB7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBWaXNpdG9yQWNjZXB0b3IgZXh0ZW5kcyBBU1Qge1xuICAgIGNoaWxkcmVuOiBBU1RbXTtcbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6IFI7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQVNUIHtcbiAgICBjb25zdHJ1Y3RvcihpbXBsOlZpc2l0b3JBY2NlcHRvcikge1xuICAgICAgdGhpcy5fYWNjZXB0b3IgPSBpbXBsO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIH1cblxuICAgIGNoaWxkcmVuOkFTVFtdO1xuICAgIF9hY2NlcHRvcjpWaXNpdG9yQWNjZXB0b3I7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgSWRlbnRpZmllciBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIHN0YXJ0OmVpZmZlbC5hc3QuUG9zLCBlbmQ6ZWlmZmVsLmFzdC5Qb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuXG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXIodGhpcywgYXJnKTtcbiAgICB9XG5cbiAgICBuYW1lOnN0cmluZztcbiAgICBzdGFydDpQb3M7XG4gICAgZW5kOlBvcztcbiAgfVxuICBleHBvcnQgY2xhc3MgVG9rZW4gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHRleHQ6c3RyaW5nLCBzdGFydDogZWlmZmVsLmFzdC5Qb3MsIGVuZDogZWlmZmVsLmFzdC5Qb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIHRleHQ6IHN0cmluZztcbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlRva2VuKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFBvcyB7XG4gICAgY29uc3RydWN0b3Iob2Zmc2V0KSB7XG4gICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICAvLyBaZXJvIGJhc2VkIGluZGV4IHJlc3BlY3RpdmUgdG8gc3RhcnQgb2YgaW5wdXRcbiAgICBvZmZzZXQ6bnVtYmVyO1xuICAgIC8vIDEgYmFzZWQgbGluZSBudW1iZXJcbiAgICBsaW5lOm51bWJlcjtcbiAgICAvLyAxIGJhc2VkIGNvbHVtbiBudW1iZXJcbiAgICBjb2x1bW46bnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENsYXNzIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIG5hbWU6IElkZW50aWZpZXIsXG4gICAgICBleHBhbmRlZDogVG9rZW4sXG4gICAgICBub3RlOiBhbnksIHBhcmVudEdyb3VwczogUGFyZW50R3JvdXBbXSxcbiAgICAgIGdlbmVyaWNzOiBGb3JtYWxHZW5lcmljUGFyYW1ldGVyW10sXG4gICAgICBjcmVhdGlvbkNsYXVzZTogSWRlbnRpZmllcltdLFxuICAgICAgZmVhdHVyZUxpc3RzOiBGZWF0dXJlTGlzdFtdXG4gICAgKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG5cbiAgICAgIHRoaXMuZ2VuZXJpY1BhcmFtZXRlcnMgPSBnZW5lcmljcztcbiAgICAgIHRoaXMucGFyZW50R3JvdXBzID0gcGFyZW50R3JvdXBzO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyZW50R3JvdXBzKTtcblxuICAgICAgdGhpcy5jcmVhdGlvbkNsYXVzZSA9IGNyZWF0aW9uQ2xhdXNlO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgY3JlYXRpb25DbGF1c2UpO1xuXG4gICAgICB0aGlzLmZlYXR1cmVMaXN0cyA9IGZlYXR1cmVMaXN0cztcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGZlYXR1cmVMaXN0cyk7XG5cbiAgICAgIHRoaXMuZGljdGlvbmFyeSA9IG5ldyBNYXA8YW55LCBlaWZmZWwuYXN0LkFTVFtdPigpO1xuICAgIH1cblxuICAgIGNoaWxkcmVuOkFTVFtdO1xuXG4gICAgbmFtZTpJZGVudGlmaWVyO1xuICAgIGV4cGFuZGVkOiBUb2tlbjtcbiAgICBnZW5lcmljUGFyYW1ldGVyczogRm9ybWFsR2VuZXJpY1BhcmFtZXRlcltdO1xuICAgIHBhcmVudEdyb3VwczpQYXJlbnRHcm91cFtdO1xuICAgIGNyZWF0aW9uQ2xhdXNlOklkZW50aWZpZXJbXTtcbiAgICBmZWF0dXJlTGlzdHM6RmVhdHVyZUxpc3RbXTtcblxuICAgIGRpY3Rpb25hcnk6IE1hcDxhbnksIGVpZmZlbC5hc3QuQVNUW10+O1xuXG4gICAgYnlUeXBlPFQgZXh0ZW5kcyBBU1Q+KHByb3RvdHlwZToge25ldygpOiBUO30pOiBUW10ge1xuICAgICAgcmV0dXJuIDxUW10+IHRoaXMuZGljdGlvbmFyeS5nZXQocHJvdG90eXBlKTtcbiAgICB9XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q2xhc3ModGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBpbnRlcmZhY2UgRm9ybWFsR2VuZXJpY1BhcmFtZXRlciB7XG4gICAgbmFtZTogSWRlbnRpZmllcjtcbiAgICBjb25zdHJhaW50czogVHlwZUNvbnN0cmFpbnRbXTtcbiAgICBjcmVhdG9yczogSWRlbnRpZmllcltdO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFR5cGVDb25zdHJhaW50IGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihydDplaWZmZWwuYXN0LlR5cGUsIHJlbmFtZTplaWZmZWwuYXN0LlJlbmFtZSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnJ0ID0gcnQ7XG4gICAgICB0aGlzLnJlbmFtZSA9IHJlbmFtZTtcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHJ0LCByZW5hbWUpO1xuICAgIH1cblxuICAgIHJ0OiBUeXBlO1xuICAgIHJlbmFtZTogUmVuYW1lO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlR5cGVDb25zdHJhaW50KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEZlYXR1cmVMaXN0IGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihleHBvcnRzOiBJZGVudGlmaWVyW10sIGZlYXR1cmVzOiBGZWF0dXJlW10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5leHBvcnRzID0gZXhwb3J0cztcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGV4cG9ydHMpO1xuICAgICAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgZmVhdHVyZXMpO1xuICAgIH1cblxuICAgIGV4cG9ydHM6SWRlbnRpZmllcltdO1xuICAgIGZlYXR1cmVzOkZlYXR1cmVbXTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZGZWF0dXJlTGlzdCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBJZGVudGlmaWVyQWNjZXNzIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgRXhwcmVzc2lvbiB7XG4gICAgY29uc3RydWN0b3IoaWRlbnRpZmllcjogSWRlbnRpZmllcikge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgdGhpcy5zdGFydCA9IGlkZW50aWZpZXIuc3RhcnQ7XG4gICAgICB0aGlzLmVuZCA9IGlkZW50aWZpZXIuZW5kO1xuICAgIH1cbiAgICBpZGVudGlmaWVyOmVpZmZlbC5hc3QuSWRlbnRpZmllcjtcbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuXG4gICAgc3ltOmVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXJBY2Nlc3ModGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEZlYXR1cmUgZXh0ZW5kcyBBU1QsIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgZnJvemVuTmFtZXNBbmRBbGlhc2VzOiBGcm96ZW5OYW1lQWxpYXNbXTtcbiAgfVxuXG4gIGludGVyZmFjZSBOYW1lQWxpYXMge1xuICAgIG5hbWU6IElkZW50aWZpZXI7XG4gICAgYWxpYXM6IEFsaWFzO1xuICB9XG5cbiAgaW50ZXJmYWNlIEZyb3plbk5hbWVBbGlhcyBleHRlbmRzIE5hbWVBbGlhcyB7XG4gICAgZnJvemVuOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFJvdXRpbmUgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3Rvcihmcm96ZW5OYW1lc0FuZEFsaWFzZXM6IEZyb3plbk5hbWVBbGlhc1tdLCBwYXJhbWV0ZXJzOiBWYXJEZWNsTGlzdFtdLCBydDogVHlwZSwgYm9keUVsZW1lbnRzOiBBU1RbXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmZyb3plbk5hbWVzQW5kQWxpYXNlcyA9IGZyb3plbk5hbWVzQW5kQWxpYXNlcztcbiAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG5cbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIF8ucGx1Y2soZnJvemVuTmFtZXNBbmRBbGlhc2VzLCBcIm5hbWVcIikpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCB0aGlzLmFsaWFzZXMpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgYm9keUVsZW1lbnRzKTtcbiAgICB9XG5cbiAgICBmcm96ZW5OYW1lc0FuZEFsaWFzZXM6IEZyb3plbk5hbWVBbGlhc1tdO1xuICAgIHBhcmFtZXRlcnM6VmFyRGVjbExpc3RbXTtcbiAgICBzeW06IGVpZmZlbC5zeW1ib2xzLlJvdXRpbmVTeW1ib2w7XG4gICAgYWxpYXNlczogQWxpYXNbXTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZSb3V0aW5lKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIExvY2Fsc0Jsb2NrIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lc09mVmFyRGVjbExpc3RzOiBWYXJEZWNsTGlzdFtdW10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5saW5lc09mVmFyRGVjbExpc3RzID0gbGluZXNPZlZhckRlY2xMaXN0cztcbiAgICAgIHRoaXMudmFyRGVjbExpc3RzID0gXy5mbGF0dGVuKGxpbmVzT2ZWYXJEZWNsTGlzdHMpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhpcy52YXJEZWNsTGlzdHMpO1xuICAgIH1cblxuICAgIHZhckRlY2xMaXN0czogVmFyRGVjbExpc3RbXTtcbiAgICBsaW5lc09mVmFyRGVjbExpc3RzOiBWYXJEZWNsTGlzdFtdW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52TG9jYWxzQmxvY2sodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuXG4gIGV4cG9ydCBjbGFzcyBFeHRlcm5hbCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbnM6IEV4cHJlc3Npb25bXSwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuICAgIH1cblxuICAgIGV4cHJlc3Npb25zOiBFeHByZXNzaW9uW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52RXh0ZXJuYWwodGhpcywgYXJnKTtcbiAgICB9XG5cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBPYnNvbGV0ZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbjogRXhwcmVzc2lvbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBleHByZXNzaW9uOiBFeHByZXNzaW9uO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3Iudk9ic29sZXRlKHRoaXMsIGFyZyk7XG4gICAgfVxuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgVmFyRGVjbExpc3QgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHZhckRlY2xzOiBWYXJEZWNsRW50cnlbXSwgcmF3VHlwZTogVHlwZSkgIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy52YXJEZWNscyA9IHZhckRlY2xzO1xuICAgICAgdGhpcy5yYXdUeXBlID0gcmF3VHlwZTtcbiAgICAgIHZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgdmFyRGVjbC52YXJEZWNsTGlzdCA9IHRoaXM7XG4gICAgICB9KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHZhckRlY2xzKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChyYXdUeXBlKTtcbiAgICB9XG5cbiAgICByYXdUeXBlOiBUeXBlO1xuICAgIHZhckRlY2xzOiBWYXJEZWNsRW50cnlbXTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJEZWNsTGlzdCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBWYXJEZWNsRW50cnkgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuXG4gICAgY29uc3RydWN0b3IobmFtZTplaWZmZWwuYXN0LklkZW50aWZpZXIpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuYW1lKTtcbiAgICB9XG5cbiAgICBuYW1lOiBJZGVudGlmaWVyO1xuICAgIHZhckRlY2xMaXN0OiBWYXJEZWNsTGlzdDtcbiAgICBzeW06IHN5bWJvbHMuVmFyaWFibGVTeW1ib2w7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VmFyRGVjbEVudHJ5KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFR5cGUgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGVuZDogZWlmZmVsLmFzdC5Qb3M7XG4gICAgc3RhcnQgOiBlaWZmZWwuYXN0LlBvcztcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBJZGVudGlmaWVyLCBwYXJhbWV0ZXJzOiBUeXBlW10sIGRldGFjaGFibGU6IGJvb2xlYW4sIHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgdGhpcy5kZXRhY2hhYmxlID0gZGV0YWNoYWJsZTtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgbmFtZTpJZGVudGlmaWVyO1xuICAgIHBhcmFtZXRlcnM6VHlwZVtdO1xuICAgIGRldGFjaGFibGU6IGJvb2xlYW47XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VHlwZSh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBUdXBsZUV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uczogZWlmZmVsLmFzdC5FeHByZXNzaW9uW10sIHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuZXhwcmVzc2lvbnMgPSBleHByZXNzaW9ucztcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuXG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBleHByZXNzaW9ucyk7XG4gICAgfVxuXG4gICAgZXhwcmVzc2lvbnM6IEV4cHJlc3Npb25bXTtcbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG4gICAgc3RhcnQ6IFBvcztcbiAgICBlbmQ6IFBvcztcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZUdXBsZUV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVHlwZUV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihydDogZWlmZmVsLmFzdC5UeXBlKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMucnQgPSBydDtcbiAgICB9XG5cbiAgICBydDogVHlwZTtcbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VHlwZUV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRnVuY3Rpb24gZXh0ZW5kcyBSb3V0aW5lIHtcbiAgICBzeW06IHN5bWJvbHMuRnVuY3Rpb25TeW1ib2w7XG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkZ1bmN0aW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFByb2NlZHVyZSBleHRlbmRzIFJvdXRpbmUge1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZQcm9jZWR1cmUodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgUm91dGluZUluc3RydWN0aW9ucyBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihpbnN0cnVjdGlvbnM6ZWlmZmVsLmFzdC5FeHByZXNzaW9uW10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7XG4gICAgfVxuXG4gICAgaW5zdHJ1Y3Rpb25zOiBFeHByZXNzaW9uW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZSb3V0aW5lSW5zdHJ1Y3Rpb25zKHRoaXMsIGFyZyk7XG4gICAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRG9CbG9jayBleHRlbmRzIFJvdXRpbmVJbnN0cnVjdGlvbnMge1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZEb0Jsb2NrKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIE9uY2VCbG9jayBleHRlbmRzIFJvdXRpbmVJbnN0cnVjdGlvbnMge1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZPbmNlQmxvY2sodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQWxpYXMgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIG5hbWU6ZWlmZmVsLmFzdC5TdHJpbmdMaXRlcmFsO1xuICAgIHN0YXJ0OmVpZmZlbC5hc3QuUG9zO1xuICAgIGVuZDplaWZmZWwuYXN0LlBvcztcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IFN0cmluZ0xpdGVyYWwsIHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgIH1cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBbGlhcyh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBDdXJyZW50RXhwcmVzc2lvbiBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKHBvczogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnN0YXJ0ID0gcG9zO1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgc3RhcnQ6IFBvcztcbiAgICBlbmQ6IFBvcztcblxuICAgIHN5bTogVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkN1cnJlbnRFeHByKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFJlc3VsdEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3M6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5zdGFydCA9IHBvcztcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBzeW06IFR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZSZXN1bHRFeHByZXNzaW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEFuY2hvcmVkVHlwZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbjogRXhwcmVzc2lvbikge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIH1cblxuICAgIGV4cHJlc3Npb246IEV4cHJlc3Npb247XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52QW5jaG9yZWRUeXBlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cblxuICBleHBvcnQgY2xhc3MgVmFyT3JDb25zdEF0dHJpYnV0ZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEZlYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKGZyb3plbk5hbWVzQW5kQWxpYXNlczogRnJvemVuTmFtZUFsaWFzW10sIHJhd1R5cGU6IFR5cGUpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5mcm96ZW5OYW1lc0FuZEFsaWFzZXMgPSBmcm96ZW5OYW1lc0FuZEFsaWFzZXM7XG4gICAgICB0aGlzLnJhd1R5cGUgPSByYXdUeXBlO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgXy5wbHVjayhmcm96ZW5OYW1lc0FuZEFsaWFzZXMsIFwibmFtZVwiKSk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gocmF3VHlwZSk7XG4gICAgfVxuXG4gICAgZnJvemVuTmFtZXNBbmRBbGlhc2VzOiBGcm96ZW5OYW1lQWxpYXNbXTtcbiAgICByYXdUeXBlOmVpZmZlbC5hc3QuVHlwZTtcbiAgICBzeW06IGVpZmZlbC5zeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbDtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJPckNvbnN0QXR0cmlidXRlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZSBleHRlbmRzIFZhck9yQ29uc3RBdHRyaWJ1dGUge1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBdHRyKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENvbnN0YW50QXR0cmlidXRlIGV4dGVuZHMgVmFyT3JDb25zdEF0dHJpYnV0ZSB7XG4gICAgY29uc3RydWN0b3IoZnJvemVuTmFtZXNBbmRBbGlhc2VzOiBGcm96ZW5OYW1lQWxpYXNbXSwgcmF3VHlwZTogZWlmZmVsLmFzdC5UeXBlLCB2YWx1ZTogZWlmZmVsLmFzdC5MaXRlcmFsPGFueT4pIHtcbiAgICAgIHN1cGVyKGZyb3plbk5hbWVzQW5kQWxpYXNlcywgcmF3VHlwZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmFsdWUpO1xuICAgIH1cblxuICAgIHZhbHVlOiBMaXRlcmFsPGFueT5cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZDb25zdGFudEF0dHJpYnV0ZSh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBQYXJlbnRHcm91cCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoY29uZm9ybWluZzogZWlmZmVsLmFzdC5JZGVudGlmaWVyW10sIHBhcmVudHM6IGVpZmZlbC5hc3QuUGFyZW50W10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuXG4gICAgICB0aGlzLmNvbmZvcm1pbmcgPSBjb25mb3JtaW5nO1xuICAgICAgdGhpcy5wYXJlbnRzID0gcGFyZW50cztcbiAgICB9XG5cbiAgICBjb25mb3JtaW5nOiBJZGVudGlmaWVyW107XG4gICAgcGFyZW50czogUGFyZW50W107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52UGFyZW50R3JvdXAodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICB0eXBlIEFkYXB0aW9uID0gVW5kZWZpbmVzIHwgUmVkZWZpbmVzIHwgUmVuYW1lcyB8IFNlbGVjdHMgfCBOZXdFeHBvcnRzO1xuXG4gIGV4cG9ydCBjbGFzcyBQYXJlbnQgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHJ0OiBUeXBlLCBhZGFwdGlvbnM6IEFkYXB0aW9uW10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5yYXdUeXBlID0gcnQ7XG4gICAgICB0aGlzLmFkYXB0aW9ucyA9IGFkYXB0aW9ucztcbiAgICB9XG5cbiAgICByYXdUeXBlOiBUeXBlO1xuICAgIG5hbWU6SWRlbnRpZmllcjtcbiAgICBhZGFwdGlvbnM6IEFkYXB0aW9uW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52UGFyZW50KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFJlbmFtZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3Iob2xkTmFtZTplaWZmZWwuYXN0LklkZW50aWZpZXIsIG5ld05hbWU6IE5hbWVBbGlhcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm9sZE5hbWUgPSBvbGROYW1lO1xuICAgICAgdGhpcy5uZXdOYW1lID0gbmV3TmFtZTtcbiAgICB9XG5cbiAgICBvbGROYW1lOiBJZGVudGlmaWVyO1xuICAgIG5ld05hbWU6IE5hbWVBbGlhcztcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZSZW5hbWUodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgUmVuYW1lcyBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IodDogVG9rZW4sIHJlbmFtZXM6ZWlmZmVsLmFzdC5SZW5hbWVbXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgIHRoaXMucmVuYW1lcyA9IHJlbmFtZXM7XG4gICAgfVxuXG4gICAgcmVuYW1lczogUmVuYW1lW107XG4gICAgdG9rZW46IGVpZmZlbC5hc3QuVG9rZW47XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52UmVuYW1lcyh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBSZWRlZmluZXMgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHQ6IFRva2VuLCBpZGVudGlmaWVyczplaWZmZWwuYXN0LklkZW50aWZpZXJbXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgIHRoaXMuaWRlbnRpZmllcnMgPSBpZGVudGlmaWVycztcbiAgICB9XG5cbiAgICBpZGVudGlmaWVyczogSWRlbnRpZmllcltdO1xuICAgIHRva2VuOiBlaWZmZWwuYXN0LlRva2VuO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlJlZGVmaW5lcyh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBTZWxlY3RzIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih0OiBUb2tlbiwgaWRlbnRpZmllcnM6ZWlmZmVsLmFzdC5JZGVudGlmaWVyW10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy50b2tlbiA9IHQ7XG4gICAgICB0aGlzLmlkZW50aWZpZXJzID0gaWRlbnRpZmllcnM7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnM6IElkZW50aWZpZXJbXTtcbiAgICB0b2tlbjogZWlmZmVsLmFzdC5Ub2tlbjtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZTZWxlY3RzKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEV4cG9ydENoYW5nZXNldCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoYWNjZXNzOmVpZmZlbC5hc3QuSWRlbnRpZmllcltdLCBmZWF0dXJlU2V0OmVpZmZlbC5hc3QuSWRlbnRpZmllcltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuYWNjZXNzID0gYWNjZXNzO1xuICAgICAgdGhpcy5mZWF0dXJlU2V0ID0gZmVhdHVyZVNldDtcbiAgICB9XG5cbiAgICBhY2Nlc3M6IElkZW50aWZpZXJbXTtcbiAgICBmZWF0dXJlU2V0OiBJZGVudGlmaWVyW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52RXhwb3J0Q2hhbmdlc2V0KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIE5ld0V4cG9ydHMgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHQ6IFRva2VuLCBleHBvcnRDaGFuZ2VzZXQ6IGVpZmZlbC5hc3QuRXhwb3J0Q2hhbmdlc2V0W10pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy50b2tlbiA9IHQ7XG4gICAgICB0aGlzLmV4cG9ydENoYW5nZXNldCA9IGV4cG9ydENoYW5nZXNldDtcbiAgICB9XG5cbiAgICBleHBvcnRDaGFuZ2VzZXQ6IGVpZmZlbC5hc3QuRXhwb3J0Q2hhbmdlc2V0W107XG4gICAgdG9rZW46IGVpZmZlbC5hc3QuVG9rZW47XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52TmV3RXhwb3J0cyh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBVbmRlZmluZXMgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuXG4gICAgY29uc3RydWN0b3IodDogVG9rZW4sIGlkZW50aWZpZXJzOmVpZmZlbC5hc3QuSWRlbnRpZmllcltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudG9rZW4gPSB0O1xuICAgICAgdGhpcy5pZGVudGlmaWVycyA9IGlkZW50aWZpZXJzO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzOiBJZGVudGlmaWVyW107XG4gICAgdG9rZW46IGVpZmZlbC5hc3QuVG9rZW47XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VW5kZWZpbmVzKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIExpdGVyYWw8VD4gZXh0ZW5kcyBBU1Qge1xuICAgIHZhbHVlOiBUO1xuICAgIGVuZDogZWlmZmVsLmFzdC5Qb3M7XG4gICAgc3RhcnQ6IGVpZmZlbC5hc3QuUG9zO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENoYXJMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbDxzdHJpbmc+IGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q2hhckxpdGVyYWwodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQm9vbGVhbkxpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsPGJvb2xlYW4+IGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogYm9vbGVhbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Qm9vbGVhbkxpdGVyYWwodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgSW50TGl0ZXJhbCBleHRlbmRzIExpdGVyYWw8bnVtYmVyPiBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlciwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgICByZXR1cm4gdmlzaXRvci52SW50TGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFZvaWRMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbDxhbnk+IGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWb2lkTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBTdHJpbmdMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbDxzdHJpbmc+IGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9ye1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcsIHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZTdHJpbmdMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEFsbCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoYWxsVG9rZW46IGVpZmZlbC5hc3QuVG9rZW4pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5hbGxUb2tlbiA9IGFsbFRva2VuO1xuICAgIH1cblxuICAgIGFsbFRva2VuOiBUb2tlbjtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBbGwodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVHlwZUluc3RhbmNlIHtcblxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJbnN0cnVjdGlvbiBleHRlbmRzIEV4cHJlc3Npb24sIFZpc2l0b3JBY2NlcHRvciB7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQ29uZGl0aW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcblxuICAgIGNvbnN0cnVjdG9yKGxhYmVsOiBJZGVudGlmaWVyLCBjb25kaXRpb246IEV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGFiZWwsIGNvbmRpdGlvbik7XG4gICAgfVxuXG4gICAgY29uZGl0aW9uOkV4cHJlc3Npb247XG4gICAgbGFiZWw6SWRlbnRpZmllcjtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOiBWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBub3QgYmUgY2FsbGVkXCIpO1xuICAgIH1cblxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFByZWNvbmRpdGlvbiBleHRlbmRzIENvbmRpdGlvbiBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlByZWNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgIH1cblxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFBvc3Rjb25kaXRpb24gZXh0ZW5kcyBDb25kaXRpb24gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZQb3N0Y29uZGl0aW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgSW52YXJpYW50Y29uZGl0aW9uIGV4dGVuZHMgQ29uZGl0aW9uIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52SW52YXJpYW50Y29uZGl0aW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cblxuICBleHBvcnQgY2xhc3MgQXNzaWdubWVudCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEluc3RydWN0aW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKGxlZnQ6ZWlmZmVsLmFzdC5FeHByZXNzaW9uLCByaWdodDplaWZmZWwuYXN0LkV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsZWZ0LCByaWdodCk7XG4gICAgfVxuXG4gICAgbGVmdDpFeHByZXNzaW9uO1xuICAgIHJpZ2h0OkV4cHJlc3Npb247XG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBc3NpZ25tZW50KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENyZWF0ZUluc3RydWN0aW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgSW5zdHJ1Y3Rpb24ge1xuXG4gICAgY29uc3RydWN0b3IodGFyZ2V0OmVpZmZlbC5hc3QuSWRlbnRpZmllciwgbWV0aG9kOmVpZmZlbC5hc3QuSWRlbnRpZmllciwgYXJndW1lbnRzOmVpZmZlbC5hc3QuRXhwcmVzc2lvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRhcmdldCwgbWV0aG9kKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgdGFyZ2V0OklkZW50aWZpZXI7XG4gICAgbWV0aG9kOiBJZGVudGlmaWVyO1xuICAgIGFyZ3VtZW50czogRXhwcmVzc2lvbltdO1xuICAgIHN5bTpUeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q3JlYXRlSW5zdHJ1Y3Rpb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QsIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgc3ltOiBUeXBlSW5zdGFuY2U7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVW5hcnlPcCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24ge1xuXG4gICAgY29uc3RydWN0b3Iob3BlcmF0b3I6ZWlmZmVsLmFzdC5VbmFyeU9wZXJhdG9yLCBvcGVyYW5kOmVpZmZlbC5hc3QuRXhwcmVzc2lvbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgdGhpcy5vcGVyYW5kID0gb3BlcmFuZDtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCk7XG4gICAgfVxuXG4gICAgb3BlcmF0b3I6VW5hcnlPcGVyYXRvcjtcbiAgICBvcGVyYW5kOkV4cHJlc3Npb247XG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VW5hcnlPcCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBCaW5hcnlPcCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24ge1xuXG4gICAgY29uc3RydWN0b3Iob3BlcmF0b3I6IGVpZmZlbC5hc3QuQmluYXJ5T3BlcmF0b3IsIGxlZnQ6IGVpZmZlbC5hc3QuRXhwcmVzc2lvbiwgcmlnaHQ6ZWlmZmVsLmFzdC5FeHByZXNzaW9uLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsZWZ0LCByaWdodCk7XG4gICAgfVxuXG4gICAgb3BlcmF0b3I6QmluYXJ5T3BlcmF0b3I7XG4gICAgbGVmdDpFeHByZXNzaW9uO1xuICAgIHJpZ2h0OkV4cHJlc3Npb247XG5cbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuXG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZCaW5hcnlPcCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG5cbiAgZXhwb3J0IGNvbnN0IGVudW0gVW5hcnlPcGVyYXRvciB7XG4gICAgTWludXMsXG4gICAgUGx1cyxcbiAgICBOb3QsXG4gICAgT2xkLFxuICB9XG5cbiAgZXhwb3J0IGNvbnN0IGVudW0gQmluYXJ5T3BlcmF0b3Ige1xuICAgIE1pbnVzLFxuICAgIFBsdXMsXG4gICAgTXVsdGlwbGljYXRpb24sXG4gICAgRGl2aXNpb24sXG4gICAgSW50ZWdlckRpdmlzaW9uLFxuICAgIE1vZHVsbyxcbiAgICBFeHBvbmVudGlhbCxcbiAgICBEb3REb3QsXG4gICAgSWRlbnRpY2FsLFxuICAgIE5vdElkZW50aWNhbCxcbiAgICBJc0VxdWFsLFxuICAgIE5vdElzRXF1YWwsXG4gICAgTGVzc1RoYW4sXG4gICAgR3JlYXRlclRoYW4sXG4gICAgTGVzc09yRXF1YWwsXG4gICAgR3JlYXRlck9yRXF1YWwsXG4gICAgQW5kLFxuICAgIEFuZFRoZW4sXG4gICAgT3IsXG4gICAgT3JFbHNlLFxuICAgIFhvcixcbiAgICBJbXBsaWVzLFxuICB9XG5cbiAgdmFyIHN0cmluZ1RvVW5hcnlPcDpMb29rdXBUYWJsZTxVbmFyeU9wZXJhdG9yPiA9IG5ldyBNYXA8c3RyaW5nLCBVbmFyeU9wZXJhdG9yPihbXG4gICAgWzxhbnk+XCItXCIsIFVuYXJ5T3BlcmF0b3IuTWludXNdLFxuICAgIFs8YW55PlwiK1wiLCBVbmFyeU9wZXJhdG9yLlBsdXNdLFxuICAgIFs8YW55Plwibm90XCIsIFVuYXJ5T3BlcmF0b3IuTm90XSxcbiAgICBbPGFueT5cIm9sZFwiLCBVbmFyeU9wZXJhdG9yLk9sZF0sXG4gIF0pO1xuXG5cbiAgdmFyIHN0cmluZ1RvQmluYXJ5T3A6TG9va3VwVGFibGU8QmluYXJ5T3BlcmF0b3I+ID0gbmV3IE1hcDxzdHJpbmcsIEJpbmFyeU9wZXJhdG9yPihbXG4gICAgW1wiLVwiLCBCaW5hcnlPcGVyYXRvci5NaW51c10sXG4gICAgW1wiK1wiLCBCaW5hcnlPcGVyYXRvci5QbHVzXSxcbiAgICBbXCIqXCIsIEJpbmFyeU9wZXJhdG9yLk11bHRpcGxpY2F0aW9uXSxcbiAgICBbXCIvXCIsIEJpbmFyeU9wZXJhdG9yLkRpdmlzaW9uXSxcbiAgICBbXCIvL1wiLCBCaW5hcnlPcGVyYXRvci5JbnRlZ2VyRGl2aXNpb25dLFxuICAgIFtcIlxcXFxcXFxcXCIsIEJpbmFyeU9wZXJhdG9yLk1vZHVsb10sXG4gICAgW1wiXlwiLCBCaW5hcnlPcGVyYXRvci5FeHBvbmVudGlhbF0sXG4gICAgW1wiLi5cIiwgQmluYXJ5T3BlcmF0b3IuRG90RG90XSxcbiAgICBbXCI9XCIsIEJpbmFyeU9wZXJhdG9yLklkZW50aWNhbF0sXG4gICAgW1wiLz1cIiwgQmluYXJ5T3BlcmF0b3IuTm90SWRlbnRpY2FsXSxcbiAgICBbXCJ+XCIsIEJpbmFyeU9wZXJhdG9yLklzRXF1YWxdLFxuICAgIFtcIi9+XCIsIEJpbmFyeU9wZXJhdG9yLk5vdElzRXF1YWxdLFxuICAgIFtcIjxcIiwgQmluYXJ5T3BlcmF0b3IuTGVzc1RoYW5dLFxuICAgIFtcIj5cIiwgQmluYXJ5T3BlcmF0b3IuR3JlYXRlclRoYW5dLFxuICAgIFtcIjw9XCIsIEJpbmFyeU9wZXJhdG9yLkxlc3NPckVxdWFsXSxcbiAgICBbXCI+PVwiLCBCaW5hcnlPcGVyYXRvci5HcmVhdGVyT3JFcXVhbF0sXG4gICAgW1wiYW5kXCIsIEJpbmFyeU9wZXJhdG9yLkFuZF0sXG4gICAgW1wiYW5kIHRoZW5cIiwgQmluYXJ5T3BlcmF0b3IuQW5kVGhlbl0sXG4gICAgW1wib3JcIiwgQmluYXJ5T3BlcmF0b3IuT3JdLFxuICAgIFtcIm9yIGVsc2VcIiwgQmluYXJ5T3BlcmF0b3IuT3JFbHNlXSxcbiAgICBbXCJ4b3JcIiwgQmluYXJ5T3BlcmF0b3IuWG9yXSxcbiAgICBbXCJpbXBsaWVzXCIsIEJpbmFyeU9wZXJhdG9yLkltcGxpZXNdLFxuICBdKTtcblxuICBleHBvcnQgY2xhc3MgQ2FsbEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uLCBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG9wZXJhbmQ6ZWlmZmVsLmFzdC5FeHByZXNzaW9uLCBuYW1lOmVpZmZlbC5hc3QuSWRlbnRpZmllciwgcGFyYW1ldGVyczplaWZmZWwuYXN0LkV4cHJlc3Npb25bXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChvcGVyYW5kLCBuYW1lKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIHN5bTplaWZmZWwuYXN0LlR5cGVJbnN0YW5jZTtcblxuICAgIG9wZXJhbmQ6IEV4cHJlc3Npb247XG4gICAgbmFtZTogSWRlbnRpZmllcjtcbiAgICBwYXJhbWV0ZXJzOiBFeHByZXNzaW9uW107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q2FsbEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVW5xdWFsaWZpZWRDYWxsRXhwcmVzc2lvbiBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24sIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoaWRlbnRpZmllcjogZWlmZmVsLmFzdC5JZGVudGlmaWVyQWNjZXNzLCBwYXJhbWV0ZXJzOmVpZmZlbC5hc3QuRXhwcmVzc2lvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuXG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBvcGVyYW5kOiBFeHByZXNzaW9uO1xuICAgIGlkZW50aWZpZXI6IElkZW50aWZpZXJBY2Nlc3M7XG4gICAgcGFyYW1ldGVyczogRXhwcmVzc2lvbltdO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlVucXVhbGlmaWVkQ2FsbEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgSW5kZXhFeHByZXNzaW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgRXhwcmVzc2lvbiwgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihvcGVyYW5kOiBlaWZmZWwuYXN0LkV4cHJlc3Npb24sIGFyZ3VtZW50OiBlaWZmZWwuYXN0LkV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5vcGVyYW5kID0gb3BlcmFuZDtcbiAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG9wZXJhbmQsIGFyZ3VtZW50KTtcbiAgICB9XG5cbiAgICBvcGVyYW5kOiBFeHByZXNzaW9uO1xuICAgIGFyZ3VtZW50OiBFeHByZXNzaW9uO1xuXG4gICAgc3ltOmVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkluZGV4RXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBBdHRhY2hlZEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uLCBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG9mVHlwZTogVHlwZSwgZXhwcjogRXhwcmVzc2lvbiwgbmV3VmFyOiBJZGVudGlmaWVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICAgICAgdGhpcy5leHByID0gZXhwcjtcbiAgICAgIHRoaXMubmV3VmFyID0gbmV3VmFyO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob2ZUeXBlLCBleHByLCBuZXdWYXIpO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBvZlR5cGU6IFR5cGU7XG4gICAgZXhwcjogRXhwcmVzc2lvbjtcbiAgICBuZXdWYXI6IElkZW50aWZpZXI7XG5cbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52QXR0YWNoZWRFeHByZXNzaW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEZyb21Mb29wIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgSW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxpemVyQmxvY2s6IEluc3RydWN0aW9uW10sIHVudGlsOiBFeHByZXNzaW9uLCBsb29wQmxvY2s6IEluc3RydWN0aW9uW10sIHZhcmlhbnQ6IEV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5pbml0aWFsaXplckJsb2NrID0gaW5pdGlhbGl6ZXJCbG9jaztcbiAgICAgIHRoaXMudW50aWwgPSB1bnRpbDtcbiAgICAgIHRoaXMubG9vcEJsb2NrID0gbG9vcEJsb2NrO1xuICAgICAgdGhpcy52YXJpYW50ID0gdmFyaWFudDtcblxuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgaW5pdGlhbGl6ZXJCbG9jayk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godW50aWwpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgbG9vcEJsb2NrKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh2YXJpYW50KTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplckJsb2NrOmVpZmZlbC5hc3QuSW5zdHJ1Y3Rpb25bXTtcbiAgICB1bnRpbDplaWZmZWwuYXN0LkV4cHJlc3Npb247XG4gICAgbG9vcEJsb2NrOmVpZmZlbC5hc3QuSW5zdHJ1Y3Rpb25bXTtcbiAgICB2YXJpYW50OiBlaWZmZWwuYXN0LkV4cHJlc3Npb247XG5cbiAgICBzeW06IGVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkZyb21Mb29wKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIElmRWxzZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25kaXRpb246IEV4cHJlc3Npb24sIHRoZW5CbG9jazogSW5zdHJ1Y3Rpb25bXSwgZWxzZUlmczogRWxzZUlmW10sIGVsc2VCbG9jazogSW5zdHJ1Y3Rpb25bXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgIHRoaXMudGhlbkJsb2NrID0gdGhlbkJsb2NrO1xuICAgICAgdGhpcy5lbHNlSWZzID0gZWxzZUlmcztcbiAgICAgIHRoaXMuZWxzZUJsb2NrID0gZWxzZUJsb2NrO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY29uZGl0aW9uKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHRoZW5CbG9jayk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBlbHNlSWZzKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGVsc2VCbG9jayk7XG4gICAgfVxuXG4gICAgY29uZGl0aW9uOmVpZmZlbC5hc3QuRXhwcmVzc2lvbjtcbiAgICB0aGVuQmxvY2s6ZWlmZmVsLmFzdC5JbnN0cnVjdGlvbltdO1xuICAgIGVsc2VJZnM6ZWlmZmVsLmFzdC5FbHNlSWZbXTtcbiAgICBlbHNlQmxvY2s6ZWlmZmVsLmFzdC5JbnN0cnVjdGlvbltdO1xuICAgIHN5bTogZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52SWZFbHNlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEVsc2VJZiBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25kaXRpb246IEV4cHJlc3Npb24sIHRoZW5CbG9jazogSW5zdHJ1Y3Rpb25bXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgIHRoaXMudGhlbkJsb2NrID0gdGhlbkJsb2NrO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY29uZGl0aW9uKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHRoZW5CbG9jayk7XG4gICAgfVxuXG4gICAgY29uZGl0aW9uOmVpZmZlbC5hc3QuRXhwcmVzc2lvbjtcbiAgICB0aGVuQmxvY2s6ZWlmZmVsLmFzdC5JbnN0cnVjdGlvbltdO1xuXG4gICAgc3ltOiBlaWZmZWwuYXN0LlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZFbHNlSWYodGhpcywgYXJnKTtcbiAgICB9XG5cbiAgfVxufVxuIiwibW9kdWxlIGVpZmZlbC5idWlsdGluIHtcbiAgZXhwb3J0IHZhciBTVERfRklMRSA9IHtcbiAgICBcInB1dF9zdHJpbmdcIjogW1xuICAgICAgZnVuY3Rpb24gKGN0eCkge1xuXG4gICAgICB9XG4gICAgXVxuICB9XG5cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ2aXNpdG9yLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJmcm9tSlMuZC50c1wiIC8+XG5cbm1vZHVsZSBlaWZmZWwuc2VtYW50aWNzIHtcbiAgaW1wb3J0IHN5bSA9IGVpZmZlbC5zeW1ib2xzO1xuXG4gIHZhciBjcmVhdGVDbGFzc1N5bWJvbHMgPSBmdW5jdGlvbiAoYXN0cywgYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQpIHtcbiAgICBhc3RzLmZvckVhY2goZnVuY3Rpb24gKGFzdDplaWZmZWwuYXN0LkNsYXNzKSB7XG4gICAgICBpZiAoIShhc3QgaW5zdGFuY2VvZiBlaWZmZWwuYXN0LkNsYXNzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIiwgYXN0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gYXN0Lm5hbWUubmFtZTtcbiAgICAgIHZhciBjbGFzc1N5bWJvbCA9IG5ldyBzeW1ib2xzLkNsYXNzU3ltYm9sKG5hbWUsIGFzdCk7XG5cbiAgICAgIGFuYWx5c2lzQ29udGV4dC5jbGFzc1N5bWJvbHMuc2V0KGNsYXNzU3ltYm9sLmxvd2VyQ2FzZU5hbWUsIGNsYXNzU3ltYm9sKTtcbiAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLnB1c2goY2xhc3NTeW1ib2wpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVGZWF0dXJlU3ltYm9scyA9IGZ1bmN0aW9uIChhbmFseXNpc0NvbnRleHQ6IEFuYWx5c2lzQ29udGV4dCkge1xuICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzU3ltYm9sKSB7XG4gICAgICBjbGFzc1N5bWJvbC5hc3QuYWNjZXB0KG5ldyBGZWF0dXJlRGlzY292ZXJ5KGFuYWx5c2lzQ29udGV4dCwgY2xhc3NTeW1ib2wpLCBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyA9IGZ1bmN0aW9uIChhbGxSb3V0aW5lcykge1xuICAgIGFsbFJvdXRpbmVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRpbmU6c3ltYm9scy5Sb3V0aW5lU3ltYm9sKSB7XG4gICAgICByb3V0aW5lLmFzdC5wYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtZXRlckxpc3Q6ZWlmZmVsLmFzdC5WYXJEZWNsTGlzdCkge1xuICAgICAgICBwYXJhbWV0ZXJMaXN0LnZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckRlY2wubmFtZS5uYW1lO1xuICAgICAgICAgIHZhciB2YXJpYWJsZVN5bWJvbCA9IG5ldyBzeW1ib2xzLlZhcmlhYmxlU3ltYm9sKHZhck5hbWUsIHZhckRlY2wpO1xuICAgICAgICAgIHJvdXRpbmUucGFyYW1zSW5PcmRlci5wdXNoKHZhcmlhYmxlU3ltYm9sKTtcbiAgICAgICAgICByb3V0aW5lLmxvY2Fsc0FuZFBhcmFtc0J5TmFtZS5zZXQodmFyTmFtZSwgdmFyaWFibGVTeW1ib2wpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVSb3V0aW5lTG9jYWxTeW1ib2xzID0gZnVuY3Rpb24gKGFuYWx5c2lzQ29udGV4dCkge1xuICAgIGFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0aW5lOnN5bWJvbHMuUm91dGluZVN5bWJvbCkge1xuICAgICAgdmFyIGxvY2Fsc0Jsb2NrczogZWlmZmVsLmFzdC5Mb2NhbHNCbG9ja1tdID0gPGVpZmZlbC5hc3QuTG9jYWxzQmxvY2tbXT4gcm91dGluZS5hc3QuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQgaW5zdGFuY2VvZiBlaWZmZWwuYXN0LkxvY2Fsc0Jsb2NrO1xuICAgICAgfSk7XG5cbiAgICAgIGxvY2Fsc0Jsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uIChsb2NhbEJsb2NrOmVpZmZlbC5hc3QuTG9jYWxzQmxvY2spIHtcbiAgICAgICAgbG9jYWxCbG9jay52YXJEZWNsTGlzdHMuZm9yRWFjaChmdW5jdGlvbiAodmFyc0RlY2wpIHtcbiAgICAgICAgICB2YXJzRGVjbC52YXJEZWNscy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJEZWNsKSB7XG4gICAgICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckRlY2wubmFtZS5uYW1lO1xuICAgICAgICAgICAgdmFyIHZhcmlhYmxlU3ltYm9sID0gbmV3IHN5bWJvbHMuVmFyaWFibGVTeW1ib2wodmFyTmFtZSwgdmFyRGVjbCk7XG4gICAgICAgICAgICByb3V0aW5lLmxvY2Fscy5wdXNoKHZhcmlhYmxlU3ltYm9sKTtcbiAgICAgICAgICAgIHJvdXRpbmUubG9jYWxzQW5kUGFyYW1zQnlOYW1lLnNldCh2YXJOYW1lLCB2YXJpYWJsZVN5bWJvbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHBhcnNlRXJyb3IgPSBmdW5jdGlvbiBwYXJzZUVycm9yKGJ1aWx0aW5Tb3VyY2UsIGUpIHtcbiAgICBjb25zb2xlLmdyb3VwKFwiUGFyc2UgRXJyb3I6IFwiICsgYnVpbHRpblNvdXJjZS5maWxlbmFtZSk7XG4gICAgY29uc29sZS5sb2coXCJGb3VuZFwiLCBlLmZvdW5kKTtcbiAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKFwiRXhwZWN0ZWRcIik7XG4gICAgY29uc29sZS50YWJsZShlLmV4cGVjdGVkKTtcbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgY29uc29sZS5ncm91cChcIkNvbnRleHRcIik7XG4gICAgdmFyIGxpbmVzID0gYnVpbHRpblNvdXJjZS5jb250ZW50LnNwbGl0KC9cXHI/XFxuLyk7XG5cbiAgICB2YXIgY29udGV4dCA9XG4gICAgICBsaW5lc1tlLmxpbmUgLSA0XVxuICAgICAgKyBsaW5lc1tlLmxpbmUgLSAzXSArIFwiXFxuXCJcbiAgICAgICsgbGluZXNbZS5saW5lIC0gMl0gKyBcIlxcblwiXG4gICAgICArIGxpbmVzW2UubGluZSAtIDFdICsgXCJcXG5cIlxuICAgICAgKyBBcnJheShlLmNvbHVtbikuam9pbihcIi1cIikgKyBcIl4gLS0gTGluZTogXCIgKyBlLmxpbmUgKyBcIiBDb2x1bW46IFwiICsgZS5jb2x1bW4gKyBcIlxcblwiXG4gICAgICArIGxpbmVzW2UubGluZSArIDBdXG4gICAgICArIGxpbmVzW2UubGluZSArIDFdXG4gICAgICArIGxpbmVzW2UubGluZSArIDJdXG4gICAgICArIGxpbmVzW2UubGluZSArIDNdO1xuICAgIGNvbnNvbGUubG9nKGNvbnRleHQpO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKFwiU291cmNlXCIpO1xuICAgIGNvbnNvbGUubG9nKGJ1aWx0aW5Tb3VyY2UuY29udGVudCk7XG4gICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbiAgfTtcblxuICB2YXIgaW5pdEFzdERpY3Rpb25hcnkgPSBmdW5jdGlvbiBpbml0QXN0RGljdGlvbmFyeShhbmFseXNpc0NvbnRleHQpIHtcbiAgICBhbmFseXNpc0NvbnRleHQuYWxsQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc1N5bWJvbCkge1xuICAgICAgY2xhc3NTeW1ib2wuYXN0LmFjY2VwdChuZXcgQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGUoYW5hbHlzaXNDb250ZXh0KSwgYW5hbHlzaXNDb250ZXh0LmFzdERpY3Rpb25hcnkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBpbml0QXN0RGljdGlvbmFyeUJ5Q2xhc3MgPSBmdW5jdGlvbiBpbml0QXN0RGljdGlvbmFyeUJ5Q2xhc3MoYW5hbHlzaXNDb250ZXh0KSB7XG4gICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgIGNsYXNzU3ltYm9sLmFzdC5hY2NlcHQobmV3IEFzdFRvRGljdGlvbmFyeUJ5UHJvdG90eXBlKGFuYWx5c2lzQ29udGV4dCksIGNsYXNzU3ltYm9sLmFzdC5kaWN0aW9uYXJ5KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVxdWlyZVZhbGlkQ2xhc3NGb3JBbmFseXNpcyA9IGZ1bmN0aW9uIHJlcXVpcmVDbGFzc0ZvckFuYWx5c2lzKG5hbWU6IHN0cmluZywgYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQsIHN1Y2Nlc3M6IChzeW1ib2w6IGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sLCBjb250ZXh0OiBBbmFseXNpc0NvbnRleHQpID0+IGFueSwgZmFpbHVyZTogKGNvbnRleHQ6IEFuYWx5c2lzQ29udGV4dCkgPT4gYW55KTogYW55IHtcbiAgICBpZiAoYW5hbHlzaXNDb250ZXh0LmNsYXNzU3ltYm9scy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgcmV0dXJuIHN1Y2Nlc3MoYW5hbHlzaXNDb250ZXh0LmNsYXNzV2l0aE5hbWUobmFtZSksIGFuYWx5c2lzQ29udGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmFpbHVyZShhbmFseXNpc0NvbnRleHQpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBhbmFseXplKC4uLm1hbnlBc3RzOiBhc3QuQ2xhc3NbXVtdKTogQW5hbHlzaXNSZXN1bHQge1xuICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKGJ1aWx0aW5Tb3VyY2U6IEJ1aWx0aW5Tb3VyY2UpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBlaWZmZWwucGFyc2VyLnBhcnNlKGJ1aWx0aW5Tb3VyY2UuY29udGVudClcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHBhcnNlRXJyb3IoYnVpbHRpblNvdXJjZSwgZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfTtcbiAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtYW55QXN0cywgX19laWZmZWxfYnVpbHRpbi5tYXAocGFyc2UpKTtcbiAgICB2YXIgYXN0czogYXN0LkNsYXNzW10gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBtYW55QXN0cyk7XG4gICAgdmFyIGFuYWx5c2lzQ29udGV4dCA9IG5ldyBBbmFseXNpc0NvbnRleHQoKTtcbiAgICBjcmVhdGVDbGFzc1N5bWJvbHMoYXN0cywgYW5hbHlzaXNDb250ZXh0KTtcbiAgICBpbml0QXN0RGljdGlvbmFyeShhbmFseXNpc0NvbnRleHQpO1xuICAgIGluaXRBc3REaWN0aW9uYXJ5QnlDbGFzcyhhbmFseXNpc0NvbnRleHQpO1xuICAgIGNyZWF0ZUZlYXR1cmVTeW1ib2xzKGFuYWx5c2lzQ29udGV4dCk7XG4gICAgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyhhbmFseXNpc0NvbnRleHQuYWxsUm91dGluZXMpO1xuICAgIGNyZWF0ZVJvdXRpbmVMb2NhbFN5bWJvbHMoYW5hbHlzaXNDb250ZXh0KTtcblxuICAgIHZhciBpbmhlcml0YW5jZUJlaW5nQ2hlY2tlZDogU2V0PGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sPiA9IG5ldyBTZXQ8ZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2w+KCk7XG4gICAgdmFyIGluaGVyaXRhbmNlQ2hlY2tlZDogU2V0PGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sPiA9IG5ldyBTZXQ8ZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2w+KCk7XG4gICAgdmFyIGluaGVyaXRhbmNlQ3ljbGVzOiBlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbFtdW10gPSBbXTtcbiAgICB2YXIgaGFzVmFsaWRIaWVyYXJjaHkgPSBmdW5jdGlvbiBoYXNWYWxpZEhpZXJhcmNoeShvbmVDbGFzczogZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wsIGRlc2NlbmRhbnRzOiBlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbFtdKSB7XG4gICAgICBpZiAoaW5oZXJpdGFuY2VCZWluZ0NoZWNrZWQuaGFzKG9uZUNsYXNzKSkge1xuICAgICAgICBvbmVDbGFzcy5oYXNDeWNsaWNJbmhlcml0YW5jZSA9IHRydWU7XG4gICAgICAgIGluaGVyaXRhbmNlQ3ljbGVzLnB1c2goZGVzY2VuZGFudHMuc2xpY2UoMCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpbmhlcml0YW5jZUNoZWNrZWQuaGFzKG9uZUNsYXNzKSkge1xuXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaW5oZXJpdGFuY2VCZWluZ0NoZWNrZWQuYWRkKG9uZUNsYXNzKTtcbiAgICAgICAgb25lQ2xhc3MuYXN0LnBhcmVudEdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnRHcm91cDplaWZmZWwuYXN0LlBhcmVudEdyb3VwKSB7XG4gICAgICAgICAgcGFyZW50R3JvdXAucGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQ6ZWlmZmVsLmFzdC5QYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnROYW1lID0gcGFyZW50LnJhd1R5cGUubmFtZS5uYW1lO1xuICAgICAgICAgICAgcmVxdWlyZVZhbGlkQ2xhc3NGb3JBbmFseXNpcyhwYXJlbnROYW1lLCBhbmFseXNpc0NvbnRleHQsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChwYXJlbnRTeW1ib2w6IGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudFN5bWJvbC5oYXNDeWNsaWNJbmhlcml0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgKiBUaGlzIGltcGxpZXMgdGhhdCBoYXNWYWxpZEhpZXJhcmNoeSgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkIG9uIHBhcmVudFN5bWJvbFxuICAgICAgICAgICAgICAgICAgICogSW1wbHlpbmcgdGhhdCBhbGwgdGhlIGN5Y2xlcyBpdCBwYXJ0aWNpcGF0ZXMgaW4gaGF2ZSBhbHJlYWR5IGJlZW4gaWRlbnRpZmllZFxuICAgICAgICAgICAgICAgICAgICogVGh1cywgdGhpcyBgb25lQ2xhc3NgIGNhbm5vdCBiZSBpbnNpZGUgYW55IHN1Y2ggY3ljbGUuXG4gICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICBvbmVDbGFzcy5pbmhlcml0c0Zyb21DeWNsaWNJbmhlcml0YW5jZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZXNjZW5kYW50cy5wdXNoKG9uZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgIGhhc1ZhbGlkSGllcmFyY2h5KHBhcmVudFN5bWJvbCwgZGVzY2VuZGFudHMpO1xuICAgICAgICAgICAgICAgICAgZGVzY2VuZGFudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBvbmVDbGFzcy5oYXNDeWNsaWNJbmhlcml0YW5jZSA9IHBhcmVudFN5bWJvbC5oYXNDeWNsaWNJbmhlcml0YW5jZTtcbiAgICAgICAgICAgICAgICAgIG9uZUNsYXNzLmluaGVyaXRzRnJvbUN5Y2xpY0luaGVyaXRhbmNlID0gcGFyZW50U3ltYm9sLmluaGVyaXRzRnJvbUN5Y2xpY0luaGVyaXRhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZmFpbHVyZShhYzpBbmFseXNpc0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnVua25vd25DbGFzcyhwYXJlbnQucmF3VHlwZS5uYW1lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgaW5oZXJpdGFuY2VCZWluZ0NoZWNrZWQuZGVsZXRlKG9uZUNsYXNzKTtcbiAgICAgICAgaW5oZXJpdGFuY2VDaGVja2VkLmFkZChvbmVDbGFzcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKG9uZUNsYXNzOiBlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbCkge1xuICAgICAgaGFzVmFsaWRIaWVyYXJjaHkob25lQ2xhc3MsIFtdKTtcbiAgICB9KTtcblxuICAgIGlmIChpbmhlcml0YW5jZUN5Y2xlcy5sZW5ndGggPiAwKSB7XG4gICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnVuY2F0ZWdvcml6ZWQoXCJDeWNsaWMgaW5oZXJpdGFuY2UgZGV0ZWN0ZWRcIik7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQ3ljbGVzOlwiLCBpbmhlcml0YW5jZUN5Y2xlcyk7XG4gICAgfTtcblxuXG4gICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMubWFwKGZ1bmN0aW9uIChvbmVDbGFzcykge1xuICAgICAgb25lQ2xhc3MuYXN0LmdlbmVyaWNQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGdlbmVyaWNQYXJhbWV0ZXIpIHtcbiAgICAgICAgbmV3IGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sKGdlbmVyaWNQYXJhbWV0ZXIubmFtZS5uYW1lLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgIGNsYXNzU3ltYm9sLmFzdC5jcmVhdGlvbkNsYXVzZS5mb3JFYWNoKGZ1bmN0aW9uIChpZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBuYW1lOiBzdHJpbmcgPSBpZGVudGlmaWVyLm5hbWU7XG4gICAgICAgIGlmIChjbGFzc1N5bWJvbC5wcm9jZWR1cmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY2xhc3NTeW1ib2wuY3JlYXRpb25Qcm9jZWR1cmVzLnNldChuYW1lLCBjbGFzc1N5bWJvbC5wcm9jZWR1cmVzW25hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbGFzc1N5bWJvbC5mdW5jdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5lcnJvcnMudW5jYXRlZ29yaXplZChcIkZ1bmN0aW9ucyBjYW5ub3QgYmUgdXNlZCBhcyBjcmVhdGlvbiBwcm9jZWR1cmVzIFwiICsgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmVycm9ycy51bmNhdGVnb3JpemVkKFwiVGhlcmUgaXMgbm90IGEgcHJvY2VkdXJlIHdpdGggbmFtZSBcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuXG5cblxuICAgIHZhciBuZXdWYXIgPSB7XG4gICAgICAgIGFzdHM6IGFzdHMsXG4gICAgICAgIGVycm9yczogYW5hbHlzaXNDb250ZXh0LmVycm9ycyxcbiAgICAgICAgY29udGV4dDogYW5hbHlzaXNDb250ZXh0LFxuICAgICAgfTtcbiAgICByZXR1cm4gbmV3VmFyO1xuICB9XG5cbiAgY2xhc3MgQW5hbHlzaXNDb250ZXh0IHtcbiAgICBjbGFzc1N5bWJvbHM6IExvb2t1cFRhYmxlPHN5bS5DbGFzc1N5bWJvbD4gPSBuZXcgTWFwPHN0cmluZywgc3ltLkNsYXNzU3ltYm9sPigpO1xuICAgIGFsbEZ1bmN0aW9uczogc3ltYm9scy5GdW5jdGlvblN5bWJvbFtdID0gW107XG4gICAgYWxsUHJvY2VkdXJlczogc3ltYm9scy5Qcm9jZWR1cmVTeW1ib2xbXSA9IFtdO1xuICAgIGFsbFJvdXRpbmVzOiBzeW1ib2xzLlJvdXRpbmVTeW1ib2xbXSA9IFtdO1xuICAgIGFsbENsYXNzZXM6IHN5bWJvbHMuQ2xhc3NTeW1ib2xbXSA9IFtdO1xuICAgIGFzdERpY3Rpb25hcnk6IE1hcDxhbnksIGVpZmZlbC5hc3QuQVNUW10+ID0gbmV3IE1hcDxhbnksIGVpZmZlbC5hc3QuQVNUW10+KCk7XG5cbiAgICBhbGxXaXRoUHJvdG90eXBlKHByb3RvdHlwZSkge1xuICAgICAgaWYgKHRoaXMuYXN0RGljdGlvbmFyeS5oYXMocHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3REaWN0aW9uYXJ5LmdldChwcm90b3R5cGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQcm90b3R5cGUgaXMgbm90IGEga2V5XCIsIHByb3RvdHlwZSwgdGhpcy5hc3REaWN0aW9uYXJ5KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvdG90eXBlIGlzIG5vdCBhIGtleVwiICsgcHJvdG90eXBlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbGFzc1dpdGhOYW1lKG5hbWU6IHN0cmluZyk6IGVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sIHtcbiAgICAgIHZhciBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHRoaXMuY2xhc3NTeW1ib2xzLmhhcyhsb3dlckNhc2VOYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc1N5bWJvbHMuZ2V0KGxvd2VyQ2FzZU5hbWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZXJlIGlzIG5vIGNsYXNzIHdpdGggbmFtZTogXCIgKyBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNDbGFzcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgIHZhciBsb3dlckNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuY2xhc3NTeW1ib2xzLmhhcyhsb3dlckNhc2VOYW1lKTtcbiAgICB9XG5cbiAgICBlcnJvcnM6IEVycm9yQ29udGV4dCA9IG5ldyBFcnJvckNvbnRleHQoKTtcbiAgfVxuXG4gIGNsYXNzIEVycm9yQ29udGV4dCB7XG4gICAgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgYWRkKGtpbmQ6IFNlbWFudGljRXJyb3JLaW5kLCBtZXNzYWdlOiBzdHJpbmcsIGFzdD86IGVpZmZlbC5hc3QuQVNUKSB7XG4gICAgICB2YXIgZW50aXJlTWVzc2FnZSA9IFNlbWFudGljRXJyb3JLaW5kW2tpbmRdICsgXCI6IFwiICsgbWVzc2FnZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZW50aXJlTWVzc2FnZSwgYXN0KTtcbiAgICAgIHRoaXMuZXJyb3JzLnB1c2goZW50aXJlTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgdW5rbm93bkNsYXNzKGlkZW50aWZpZXI6IGVpZmZlbC5hc3QuSWRlbnRpZmllcikge1xuICAgICAgdGhpcy5hZGQoU2VtYW50aWNFcnJvcktpbmQuVW5rbm93bkNsYXNzLCBpZGVudGlmaWVyLm5hbWUsIGlkZW50aWZpZXIpO1xuICAgIH1cblxuICAgIGR1cGxpY2F0ZUZlYXR1cmUoaWRlbnRpZmllcjogZWlmZmVsLmFzdC5JZGVudGlmaWVyKSB7XG4gICAgICB0aGlzLmFkZChTZW1hbnRpY0Vycm9yS2luZC5EdXBsaWNhdGVGZWF0dXJlTmFtZSwgaWRlbnRpZmllci5uYW1lLCBpZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICB1bmNhdGVnb3JpemVkKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgdGhpcy5lcnJvcnMucHVzaChtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBjbGFzcyBTZW1hbnRpY1Zpc2l0b3I8QSwgUj4gZXh0ZW5kcyBhc3QuVmlzaXRvcjxBLCBSPiB7XG4gICAgY2xhc3NTeW1ib2xzOkxvb2t1cFRhYmxlPHN5bS5DbGFzc1N5bWJvbD47XG4gICAgYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQ7XG5cblxuICAgIGNvbnN0cnVjdG9yKGFuYWx5c2lzQ29udGV4dDogQW5hbHlzaXNDb250ZXh0KSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpcy5hbmFseXNpc0NvbnRleHQgPSBhbmFseXNpc0NvbnRleHQ7XG4gICAgICB0aGlzLmNsYXNzU3ltYm9scyA9IGFuYWx5c2lzQ29udGV4dC5jbGFzc1N5bWJvbHM7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGVudW0gU2VtYW50aWNFcnJvcktpbmQge1xuICAgIER1cGxpY2F0ZUZlYXR1cmVOYW1lLFxuICAgIER1cGxpY2F0ZVBhcmFtZXRlck5hbWUsXG4gICAgRHVwbGljYXRlQ2xhc3NOYW1lLFxuICAgIFVua25vd25DbGFzcyxcbiAgICBJbmhlcml0YW5jZUN5Y2xlLFxuICB9XG5cbiAgY2xhc3MgRmVhdHVyZURpc2NvdmVyeSBleHRlbmRzIFNlbWFudGljVmlzaXRvcjxhbnksIGFueT4ge1xuXG4gICAgY29uc3RydWN0b3IoYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQsIGNsYXNzU3ltYm9sOnN5bWJvbHMuQ2xhc3NTeW1ib2wpIHtcbiAgICAgIHN1cGVyKGFuYWx5c2lzQ29udGV4dCk7XG4gICAgICB0aGlzLmNsYXNzU3ltYm9sID0gY2xhc3NTeW1ib2w7XG4gICAgfVxuXG4gICAgY2xhc3NTeW1ib2w6IHN5bWJvbHMuQ2xhc3NTeW1ib2w7XG5cbiAgICB2QXR0cihhdHRyOmVpZmZlbC5hc3QuQXR0cmlidXRlLCBfOmFueSk6YW55IHtcbiAgICAgIGF0dHIuZnJvemVuTmFtZXNBbmRBbGlhc2VzLm1hcChmdW5jdGlvbiAoZm5hKSB7XG4gICAgICAgIHZhciBuYW1lID0gZm5hLm5hbWUubmFtZTtcbiAgICAgICAgdmFyIGxjTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdGhpcy5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSh0aGlzLmNsYXNzU3ltYm9sLCBsY05hbWUsIGZuYS5uYW1lKTtcblxuICAgICAgICB2YXIgYWxpYXM6IHN0cmluZyA9IG51bGw7XG4gICAgICAgIGlmIChmbmEuYWxpYXMgIT0gbnVsbCkge1xuICAgICAgICAgIGFsaWFzID0gZm5hLmFsaWFzLm5hbWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZVN5bWJvbCA9IG5ldyBzeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbChuYW1lLCBhbGlhcywgZm5hLmZyb3plbiwgYXR0cik7XG5cbiAgICAgICAgYXR0ci5zeW0gPSBhdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlcy5zZXQobGNOYW1lLCBhdHRyaWJ1dGVTeW1ib2wpO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIC8vcmV0dXJuIHN1cGVyLnZBdHRyKGF0dHIsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgIH1cblxuICAgIHZGdW5jdGlvbihmdW5jOmVpZmZlbC5hc3QuRnVuY3Rpb24sIF86YW55KTphbnkge1xuICAgICAgZnVuYy5mcm96ZW5OYW1lc0FuZEFsaWFzZXMubWFwKGZ1bmN0aW9uIChmbmEpIHtcbiAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGZuYS5uYW1lLm5hbWU7XG4gICAgICAgIHZhciBsY0Z1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGxjRnVuY3Rpb25OYW1lLCBmbmEubmFtZSk7XG5cbiAgICAgICAgdmFyIGFsaWFzOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBpZiAoZm5hLmFsaWFzICE9IG51bGwpIHtcbiAgICAgICAgICBhbGlhcyA9IGZuYS5hbGlhcy5uYW1lLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzeW0gPSBuZXcgc3ltYm9scy5GdW5jdGlvblN5bWJvbChsY0Z1bmN0aW9uTmFtZSwgYWxpYXMsIGZuYS5mcm96ZW4sIGZ1bmMpO1xuXG4gICAgICAgIGZ1bmMuc3ltID0gc3ltO1xuICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLmZ1bmN0aW9ucy5zZXQobGNGdW5jdGlvbk5hbWUsIHN5bSk7XG4gICAgICAgIHRoaXMuY2xhc3NTeW1ib2wucm91dGluZXMuc2V0KGxjRnVuY3Rpb25OYW1lLCBzeW0pO1xuICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxGdW5jdGlvbnMucHVzaChzeW0pO1xuICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5wdXNoKHN5bSk7XG4gICAgICB9LCB0aGlzKTtcblxuICAgICAgLy9yZXR1cm4gc3VwZXIudkZ1bmN0aW9uKGZ1bmMsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXJyb3JPbkR1cGxpY2F0ZUZlYXR1cmUoY2xhc3NTeW1ib2wsIGZlYXR1cmVOYW1lLCBpZGVudGlmaWVyKSB7XG4gICAgICBpZiAoY2xhc3NTeW1ib2wuaGFzU3ltYm9sKGZlYXR1cmVOYW1lKSkge1xuICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5lcnJvcnMuZHVwbGljYXRlRmVhdHVyZShpZGVudGlmaWVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2UHJvY2VkdXJlKHByb2NlZHVyZTplaWZmZWwuYXN0LlByb2NlZHVyZSwgXzphbnkpOmFueSB7XG4gICAgICBwcm9jZWR1cmUuZnJvemVuTmFtZXNBbmRBbGlhc2VzLm1hcChmdW5jdGlvbiAoZm5hKSB7XG5cbiAgICAgICAgdmFyIHByb2NlZHVyZU5hbWUgPSBmbmEubmFtZS5uYW1lO1xuICAgICAgICB2YXIgbGNQcm9jZWR1cmVOYW1lID0gcHJvY2VkdXJlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGxjUHJvY2VkdXJlTmFtZSwgZm5hLm5hbWUpO1xuXG4gICAgICAgIHZhciBhbGlhczogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKGZuYS5hbGlhcyAhPSBudWxsKSB7XG4gICAgICAgICAgYWxpYXMgPSBmbmEuYWxpYXMubmFtZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3ltID0gbmV3IHN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sKHByb2NlZHVyZU5hbWUsIGFsaWFzLCBmbmEuZnJvemVuLCBwcm9jZWR1cmUpO1xuXG4gICAgICAgIHByb2NlZHVyZS5zeW0gPSBzeW07XG4gICAgICAgIHRoaXMuY2xhc3NTeW1ib2wucHJvY2VkdXJlcy5zZXQobGNQcm9jZWR1cmVOYW1lLCBzeW0pO1xuICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLnJvdXRpbmVzLnNldChsY1Byb2NlZHVyZU5hbWUsIHN5bSk7XG4gICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmFsbFByb2NlZHVyZXMucHVzaChzeW0pO1xuICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5wdXNoKHN5bSk7XG4gICAgICB9LCB0aGlzKTtcbiAgICAgIC8vcmV0dXJuIHN1cGVyLnZQcm9jZWR1cmUocHJvY2VkdXJlLCB0aGlzLmNsYXNzU3ltYm9sKTtcbiAgICB9XG5cbiAgICB2Q29uc3RhbnRBdHRyaWJ1dGUoY29uc3RhbnRBdHRyaWJ1dGU6ZWlmZmVsLmFzdC5Db25zdGFudEF0dHJpYnV0ZSwgXzphbnkpOmFueSB7XG4gICAgICBjb25zdGFudEF0dHJpYnV0ZS5mcm96ZW5OYW1lc0FuZEFsaWFzZXMubWFwKGZ1bmN0aW9uIChmbmEpIHtcblxuICAgICAgICB2YXIgbmFtZSA9IGZuYS5uYW1lLm5hbWU7XG4gICAgICAgIHZhciBsY05hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHRoaXMuZXJyb3JPbkR1cGxpY2F0ZUZlYXR1cmUodGhpcy5jbGFzc1N5bWJvbCwgbGNOYW1lLCBmbmEubmFtZSk7XG5cbiAgICAgICAgdmFyIGFsaWFzOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBpZiAoZm5hLmFsaWFzICE9IG51bGwpIHtcbiAgICAgICAgICBhbGlhcyA9IGZuYS5hbGlhcy5uYW1lLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhdHRyaWJ1dGVTeW1ib2wgPSBuZXcgc3ltYm9scy5BdHRyaWJ1dGVTeW1ib2wobmFtZSwgYWxpYXMsIGZuYS5mcm96ZW4sIGNvbnN0YW50QXR0cmlidXRlKTtcblxuICAgICAgICBjb25zdGFudEF0dHJpYnV0ZS5zeW0gPSBhdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlcy5zZXQobGNOYW1lLCBhdHRyaWJ1dGVTeW1ib2wpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgICAvL3JldHVybiBzdXBlci52Q29uc3RhbnRBdHRyaWJ1dGUoY29uc3RhbnRBdHRyaWJ1dGUsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgIH1cbiAgfVxuXG5cbiAgY2xhc3MgQXN0VG9EaWN0aW9uYXJ5QnlQcm90b3R5cGUgZXh0ZW5kcyBTZW1hbnRpY1Zpc2l0b3I8YW55LCBhbnk+IHtcbiAgICB2RGVmYXVsdChhc3Q6ZWlmZmVsLmFzdC5BU1QsIGFyZzphbnkpOmFueSB7XG4gICAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGFzdCk7XG4gICAgICBpZiAoYXJnLmhhcyhwcm90b3R5cGUpKSB7XG4gICAgICAgIGFyZy5nZXQocHJvdG90eXBlKS5wdXNoKGFzdCk7XG4gICAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyZy5zZXQocHJvdG90eXBlLCBbYXN0XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwZXIudkRlZmF1bHQoYXN0LCBhcmcpO1xuICAgIH1cbiAgfVxuXG5cbiAgY2xhc3MgRmVhdHVyZVR5cGVDb25uZWN0b3IgZXh0ZW5kcyBTZW1hbnRpY1Zpc2l0b3I8YW55LCBhbnk+IHtcblxuXG4gIH1cblxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBBbmFseXNpc1Jlc3VsdCB7XG4gICAgYXN0czogZWlmZmVsLmFzdC5DbGFzc1tdO1xuICAgIGVycm9yczogRXJyb3JDb250ZXh0O1xuICAgIGNvbnRleHQ6IEFuYWx5c2lzQ29udGV4dDtcbiAgfVxufVxuIiwibW9kdWxlIGVpZmZlbC5zeW1ib2xzIHtcbiAgICBleHBvcnQgY2xhc3MgU3ltYm9sIHtcblxuICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubG93ZXJDYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cblxuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgbG93ZXJDYXNlTmFtZTogc3RyaW5nO1xuICAgIH1cblxuICBleHBvcnQgY2xhc3MgRmVhdHVyZVN5bWJvbCBleHRlbmRzIFN5bWJvbCB7XG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFsaWFzOnN0cmluZywgaXNGcm96ZW46Ym9vbGVhbikge1xuICAgICAgc3VwZXIobmFtZSk7XG4gICAgICB0aGlzLmFsaWFzID0gYWxpYXM7XG4gICAgICB0aGlzLmlzRnJvemVuID0gaXNGcm96ZW47XG4gICAgfVxuXG4gICAgYWxpYXM6IHN0cmluZztcbiAgICBpc0Zyb3plbjogYm9vbGVhbjtcbiAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIFJvdXRpbmVTeW1ib2wgZXh0ZW5kcyBGZWF0dXJlU3ltYm9sIHtcbiAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgYWxpYXM6IHN0cmluZywgZnJvemVuOiBib29sZWFuLCBhc3Q6YXN0LlJvdXRpbmUpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYWxpYXMsIGZyb3plbik7XG4gICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgICAgfVxuXG4gICAgICBsb2NhbHM6IFZhcmlhYmxlU3ltYm9sW10gPSBbXTtcbiAgICAgIGxvY2Fsc0FuZFBhcmFtc0J5TmFtZTogTG9va3VwVGFibGU8VmFyaWFibGVTeW1ib2w+ID0gbmV3IE1hcDxzdHJpbmcsIFZhcmlhYmxlU3ltYm9sPigpO1xuICAgICAgcGFyYW1zSW5PcmRlcjogVmFyaWFibGVTeW1ib2xbXSA9IFtdO1xuICAgICAgYXN0OiBhc3QuUm91dGluZTtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgRnVuY3Rpb25TeW1ib2wgZXh0ZW5kcyBSb3V0aW5lU3ltYm9sIHtcbiAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgYWxpYXM6IHN0cmluZywgZnJvemVuOiBib29sZWFuLCBhc3Q6YXN0LkZ1bmN0aW9uKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIGFsaWFzLCBmcm96ZW4sIGFzdCk7XG4gICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgICAgfVxuXG4gICAgICBhc3Q6IGFzdC5GdW5jdGlvbjtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgUHJvY2VkdXJlU3ltYm9sIGV4dGVuZHMgUm91dGluZVN5bWJvbCB7XG5cblxuICAgICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFsaWFzOiBzdHJpbmcsIGZyb3plbjogYm9vbGVhbiwgYXN0OmFzdC5Qcm9jZWR1cmUpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYWxpYXMsIGZyb3plbiwgYXN0KTtcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICB9XG5cbiAgICAgIGFzdDogYXN0LlByb2NlZHVyZTtcbiAgICB9XG5cbiAgZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVN5bWJvbCBleHRlbmRzIEZlYXR1cmVTeW1ib2wge1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBhbGlhczogc3RyaW5nLCBmcm96ZW46IGJvb2xlYW4sIGF0dHI6YXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUpIHtcbiAgICAgIHN1cGVyKG5hbWUsIGFsaWFzLCBmcm96ZW4pO1xuICAgICAgdGhpcy5hc3QgPSBhdHRyO1xuICAgIH1cblxuICAgIGFzdDogYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGU7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVmFyaWFibGVTeW1ib2wgZXh0ZW5kcyBTeW1ib2wge1xuXG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFzdDphc3QuVmFyRGVjbEVudHJ5KSB7XG4gICAgICBzdXBlcihuYW1lKTtcbiAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgIH1cblxuICAgIGFzdDogYXN0LlZhckRlY2xFbnRyeTtcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBDbGFzc1N5bWJvbCBleHRlbmRzIFN5bWJvbCB7XG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFzdDogYXN0LkNsYXNzKSB7XG4gICAgICBzdXBlcihuYW1lKTtcbiAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgIH1cblxuICAgIGFzdDogYXN0LkNsYXNzO1xuICAgIGZ1bmN0aW9uczogTG9va3VwVGFibGU8RnVuY3Rpb25TeW1ib2w+ID0gbmV3IE1hcDxzdHJpbmcsIEZ1bmN0aW9uU3ltYm9sPigpO1xuICAgIHByb2NlZHVyZXM6IExvb2t1cFRhYmxlPFByb2NlZHVyZVN5bWJvbD4gPSBuZXcgTWFwPHN0cmluZywgUHJvY2VkdXJlU3ltYm9sPigpO1xuICAgIHJvdXRpbmVzOiBMb29rdXBUYWJsZTxSb3V0aW5lU3ltYm9sPiA9IG5ldyBNYXA8c3RyaW5nLCBSb3V0aW5lU3ltYm9sPigpO1xuICAgIGF0dHJpYnV0ZXM6IExvb2t1cFRhYmxlPEF0dHJpYnV0ZVN5bWJvbD4gPSBuZXcgTWFwPHN0cmluZywgQXR0cmlidXRlU3ltYm9sPigpO1xuICAgIGNyZWF0aW9uUHJvY2VkdXJlczogTG9va3VwVGFibGU8UHJvY2VkdXJlU3ltYm9sPiA9IG5ldyBNYXA8c3RyaW5nLCBQcm9jZWR1cmVTeW1ib2w+KCk7XG4gICAgaGFzQ3ljbGljSW5oZXJpdGFuY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBpbmhlcml0c0Zyb21DeWNsaWNJbmhlcml0YW5jZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgaXNFZmZlY3RpdmU6IGJvb2xlYW47XG4gICAgaXNFeHBhbmRlZDogYm9vbGVhbjtcbiAgICBpc0Zyb3plbjogYm9vbGVhbjtcbiAgICBpc0RlZmVycmVkOiBib29sZWFuO1xuXG4gICAgZ2VuZXJpY1BhcmFtZXRlcnNCeU5hbWU6IExvb2t1cFRhYmxlPENsYXNzU3ltYm9sPjtcblxuXG4gICAgaGFzU3ltYm9sKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgdmFyIGxjTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICh0aGlzLnJvdXRpbmVzLmhhcyhsY05hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXMobGNOYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXNvbHZlU3ltYm9sKG5hbWU6IHN0cmluZyk6IFN5bWJvbCB7XG4gICAgICB2YXIgbGNOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHRoaXMucm91dGluZXMuaGFzKGxjTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm91dGluZXMuZ2V0KGxjTmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmhhcyhsY05hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0KGxjTmFtZSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW1ib2wgXCIgKyBuYW1lICsgXCIgZG9lcyBub3QgZXhpc3QgaW4gY2xhc3MgXCIgKyB0aGlzLm5hbWUgKyBcIi5cIik7XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUgZWlmZmVsIHtcblxuICBleHBvcnQgaW50ZXJmYWNlIExvb2t1cFRhYmxlPFY+IGV4dGVuZHMgTWFwPHN0cmluZywgVj4ge307XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==