/// reference path="visitor.ts"
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var AST = (function () {
        function AST(impl) {
            this._acceptor = impl;
        }
        return AST;
    })();
    eiffel.AST = AST;
    var Identifier = (function (_super) {
        __extends(Identifier, _super);
        function Identifier() {
            _super.apply(this, arguments);
        }
        Identifier.prototype.accept = function (visitor, arg) {
            return undefined;
        };
        return Identifier;
    })(AST);
    eiffel.Identifier = Identifier;
    var Pos = (function () {
        function Pos(offset, line, column) {
            this.offset = offset;
            this.line = line;
            this.column = column;
        }
        return Pos;
    })();
    eiffel.Pos = Pos;
    var Class = (function (_super) {
        __extends(Class, _super);
        function Class() {
            _super.call(this, this);
        }
        Class.prototype.accept = function (visitor, arg) {
            return visitor.vClass(this, arg);
        };
        return Class;
    })(AST);
    eiffel.Class = Class;
    var FeatureList = (function (_super) {
        __extends(FeatureList, _super);
        function FeatureList() {
            _super.call(this, this);
        }
        FeatureList.prototype.accept = function (visitor, arg) {
            return visitor.vFeatureList(this, arg);
        };
        return FeatureList;
    })(AST);
    eiffel.FeatureList = FeatureList;
    var Parameter = (function (_super) {
        __extends(Parameter, _super);
        function Parameter() {
            _super.call(this, this);
        }
        Parameter.prototype.accept = function (visitor, arg) {
            return visitor.vParameter(this, arg);
        };
        return Parameter;
    })(AST);
    eiffel.Parameter = Parameter;
    var Type = (function (_super) {
        __extends(Type, _super);
        function Type() {
            _super.call(this, this);
        }
        Type.prototype.accept = function (visitor, arg) {
            return visitor.vType(this, arg);
        };
        return Type;
    })(AST);
    eiffel.Type = Type;
    var Function = (function (_super) {
        __extends(Function, _super);
        function Function() {
            _super.call(this, this);
        }
        Function.prototype.accept = function (visitor, arg) {
            return visitor.vFunction(this, arg);
        };
        return Function;
    })(AST);
    eiffel.Function = Function;
    var Procedure = (function (_super) {
        __extends(Procedure, _super);
        function Procedure() {
            _super.call(this, this);
        }
        Procedure.prototype.accept = function (visitor, arg) {
            return visitor.vProcedure(this, arg);
        };
        return Procedure;
    })(AST);
    eiffel.Procedure = Procedure;
    var Attribute = (function (_super) {
        __extends(Attribute, _super);
        function Attribute() {
            _super.call(this, this);
        }
        Attribute.prototype.accept = function (visitor, arg) {
            return visitor.vAttr(this, arg);
        };
        return Attribute;
    })(AST);
    eiffel.Attribute = Attribute;
    var CreationClause = (function (_super) {
        __extends(CreationClause, _super);
        function CreationClause(identifiers) {
            _super.call(this, this);
            this.features = identifiers;
        }
        CreationClause.prototype.accept = function (visitor, arg) {
            return visitor.vCreationClause(this, arg);
        };
        return CreationClause;
    })(AST);
    eiffel.CreationClause = CreationClause;
    var Parent = (function (_super) {
        __extends(Parent, _super);
        function Parent() {
            _super.call(this, this);
        }
        Parent.prototype.accept = function (visitor, arg) {
            return visitor.vParent(this, arg);
        };
        return Parent;
    })(AST);
    eiffel.Parent = Parent;
    var All = (function () {
        function All() {}
        return All;
    })();
    eiffel.All = All;
    var ExportChangeSet = (function (_super) {
        __extends(ExportChangeSet, _super);
        function ExportChangeSet() {
            _super.call(this, this);
        }
        ExportChangeSet.prototype.accept = function (visitor, arg) {
            return visitor.vExportChangeSet(this, arg);
        };
        return ExportChangeSet;
    })(AST);
    eiffel.ExportChangeSet = ExportChangeSet;
    var TypeInstance = (function () {
        function TypeInstance() {}
        return TypeInstance;
    })();
    eiffel.TypeInstance = TypeInstance;
    var IfElse = (function (_super) {
        __extends(IfElse, _super);
        function IfElse() {
            _super.apply(this, arguments);
        }
        IfElse.prototype.accept = function (visitor, arg) {
            return visitor.vIfElse(this, arg);
        };
        return IfElse;
    })(AST);
    eiffel.IfElse = IfElse;
    var Condition = (function (_super) {
        __extends(Condition, _super);
        function Condition() {
            _super.apply(this, arguments);
        }
        return Condition;
    })(AST);
    eiffel.Condition = Condition;
    var Precondition = (function (_super) {
        __extends(Precondition, _super);
        function Precondition() {
            _super.apply(this, arguments);
        }
        Precondition.prototype.accept = function (visitor, arg) {
            return visitor.vPrecondition(this, arg);
        };
        return Precondition;
    })(Condition);
    eiffel.Precondition = Precondition;
    var Postcondition = (function (_super) {
        __extends(Postcondition, _super);
        function Postcondition() {
            _super.apply(this, arguments);
        }
        Postcondition.prototype.accept = function (visitor, arg) {
            return visitor.vPostcondition(this, arg);
        };
        return Postcondition;
    })(Condition);
    eiffel.Postcondition = Postcondition;
    var ForUntilInstruction = (function (_super) {
        __extends(ForUntilInstruction, _super);
        function ForUntilInstruction() {
            _super.apply(this, arguments);
        }
        ForUntilInstruction.prototype.accept = function (visitor, arg) {
            return visitor.vForUntil(this, arg);
        };
        return ForUntilInstruction;
    })(AST);
    eiffel.ForUntilInstruction = ForUntilInstruction;
    var Assignment = (function (_super) {
        __extends(Assignment, _super);
        function Assignment() {
            _super.apply(this, arguments);
        }
        Assignment.prototype.accept = function (visitor, arg) {
            return visitor.vAssignment(this, arg);
        };
        return Assignment;
    })(AST);
    eiffel.Assignment = Assignment;
    var CreateInstruction = (function (_super) {
        __extends(CreateInstruction, _super);
        function CreateInstruction() {
            _super.apply(this, arguments);
        }
        CreateInstruction.prototype.accept = function (visitor, arg) {
            return visitor.vCreateInstruction(this, arg);
        };
        return CreateInstruction;
    })(AST);
    eiffel.CreateInstruction = CreateInstruction;
    var UnaryOp = (function (_super) {
        __extends(UnaryOp, _super);
        function UnaryOp() {
            _super.apply(this, arguments);
        }
        UnaryOp.prototype.accept = function (visitor, arg) {
            return visitor.vUnaryOp(this, arg);
        };
        return UnaryOp;
    })(AST);
    eiffel.UnaryOp = UnaryOp;
    var BinaryOp = (function (_super) {
        __extends(BinaryOp, _super);
        function BinaryOp() {
            _super.apply(this, arguments);
        }
        BinaryOp.prototype.accept = function (visitor, arg) {
            return visitor.vBinaryOp(this, arg);
        };
        return BinaryOp;
    })(AST);
    eiffel.BinaryOp = BinaryOp;
    var stringToUnaryOp = {
        "-": 0 /* Minus */,
        "+": 1 /* Plus */,
        not: 2 /* Not */,
        old: 3 /* Old */ };
    var stringToBinaryOp = {
        "-": 0 /* Minus */,
        "+": 1 /* Plus */,
        "*": 2 /* Multiplication */,
        "/": 3 /* Division */,
        "//": 4 /* IntegerDivision */,
        "\\\\": 5 /* Modulo */,
        "^": 6 /* Exponential */,
        "..": 7 /* DotDot */,
        "=": 8 /* Identical */,
        "/=": 9 /* NotIdentical */,
        "~": 10 /* IsEqual */,
        "/~": 11 /* NotIsEqual */,
        "<": 12 /* LessThan */,
        ">": 13 /* GreaterThan */,
        "<=": 14 /* LessOrEqual */,
        ">=": 15 /* GreaterOrEqual */,
        and: 16 /* And */,
        "and then": 17 /* AndThen */,
        or: 18 /* Or */,
        "or else": 19 /* OrElse */,
        xor: 20 /* Xor */,
        implies: 21 /* Implies */ };
})(eiffel || (eiffel = {}));

/// reference path="ast.ts"
var eiffel;
(function (eiffel) {
    var Visitor = (function () {
        function Visitor() {}
        Visitor.prototype.vClass = function (_class, arg) {
            return this.vDefault(_class, arg);
        };
        Visitor.prototype.vFeatureList = function (featureList, arg) {
            return this.vDefault(featureList, arg);
        };
        Visitor.prototype.vFeature = function (feature, arg) {
            return feature._acceptor.accept(this, arg);
        };
        Visitor.prototype.vAttr = function (attr, arg) {
            return this.vFeature(attr, arg);
        };
        Visitor.prototype.vRoutine = function (feature, arg) {
            return this.vFeature(feature, arg);
        };
        Visitor.prototype.vFunction = function (func, arg) {
            return this.vRoutine(func, arg);
        };
        Visitor.prototype.vProcedure = function (procedure, arg) {
            return this.vRoutine(procedure, arg);
        };
        Visitor.prototype.vChildren = function (ast, arg) {
            var result = null;
            ast.children.forEach(function (t) {
                result = t._acceptor.accept(this, arg);
            });
            return result;
        };
        Visitor.prototype.vIdentifier = function (identifier, arg) {
            return this.vDefault(identifier, arg);
        };
        Visitor.prototype.vType = function (type, arg) {
            return this.vDefault(type, arg);
        };
        Visitor.prototype.vParent = function (parent, arg) {
            return this.vDefault(parent, arg);
        };
        Visitor.prototype.vParameter = function (parameter, arg) {
            return this.vDefault(parameter, arg);
        };
        Visitor.prototype.vInstruction = function (instruction, arg) {
            return this.vDefault(instruction, arg);
        };
        Visitor.prototype.vDefault = function (ast, arg) {
            return this.vChildren(ast, arg);
        };
        Visitor.prototype.vCreationClause = function (creationClause, arg) {
            return this.vInstruction(creationClause, arg);
        };
        Visitor.prototype.vCreateInstruction = function (createInstruction, arg) {
            return this.vInstruction(createInstruction, arg);
        };
        Visitor.prototype.vIfElse = function (ifElse, arg) {
            return this.vInstruction(ifElse, arg);
        };
        Visitor.prototype.vAssignment = function (assignment, arg) {
            return this.vInstruction(assignment, arg);
        };
        Visitor.prototype.vForUntil = function (forUntil, arg) {
            return this.vInstruction(forUntil, arg);
        };
        Visitor.prototype.vExportChangeSet = function (exportChangeSet, arg) {
            return this.vDefault(exportChangeSet, arg);
        };
        Visitor.prototype.vPrecondition = function (precondition, arg) {
            return this.vCondition(precondition, arg);
        };
        Visitor.prototype.vPostcondition = function (postcondition, arg) {
            return this.vCondition(postcondition, arg);
        };
        Visitor.prototype.vCondition = function (condition, arg) {
            return this.vDefault(condition, arg);
        };
        Visitor.prototype.vUnaryOp = function (unaryOp, arg) {
            return this.vExpression(unaryOp, arg);
        };
        Visitor.prototype.vBinaryOp = function (binaryOp, arg) {
            return this.vExpression(binaryOp, arg);
        };
        Visitor.prototype.vExpression = function (expression, arg) {
            return this.vDefault(expression, arg);
        };
        return Visitor;
    })();
    eiffel.Visitor = Visitor;
})(eiffel || (eiffel = {}));
//# sourceMappingURL=data:application/json;base64,