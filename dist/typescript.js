/// <reference path="ast.ts" />
var eiffel;
(function (eiffel) {
    var ast;
    (function (_ast) {
        var Visitor = (function () {
            function Visitor() {}
            Visitor.prototype.vClass = function (_class, arg) {
                return this.vDefault(_class, arg);
            };
            Visitor.prototype.vFeatureList = function (featureList, arg) {
                return this.vDefault(featureList, arg);
            };
            Visitor.prototype.vFeature = function (feature, arg) {
                return this.vDefault(feature, arg);
            };
            Visitor.prototype.vAttr = function (attr, arg) {
                return this.vVarOrConstAttribute(attr, arg);
            };
            Visitor.prototype.vRoutine = function (feature, arg) {
                return this.vFeature(feature, arg);
            };
            Visitor.prototype.vFunction = function (func, arg) {
                return this.vRoutine(func, arg);
            };
            Visitor.prototype.vProcedure = function (procedure, arg) {
                return this.vRoutine(procedure, arg);
            };
            Visitor.prototype.vChildren = function (ast, arg) {
                var result = null;
                ast.children.forEach(function (t) {
                    if (t != null) {
                        result = t._acceptor.accept(this, arg);
                    }
                }, this);
                return result;
            };
            Visitor.prototype.vIdentifier = function (identifier, arg) {
                return this.vDefault(identifier, arg);
            };
            Visitor.prototype.vType = function (type, arg) {
                return this.vDefault(type, arg);
            };
            Visitor.prototype.vParent = function (parent, arg) {
                return this.vDefault(parent, arg);
            };
            Visitor.prototype.vInstruction = function (instruction, arg) {
                return this.vDefault(instruction, arg);
            };
            Visitor.prototype.vDefault = function (ast, arg) {
                return this.vChildren(ast, arg);
            };
            Visitor.prototype.vCreateInstruction = function (createInstruction, arg) {
                return this.vInstruction(createInstruction, arg);
            };
            Visitor.prototype.vAssignment = function (assignment, arg) {
                return this.vInstruction(assignment, arg);
            };
            Visitor.prototype.vExportChangeset = function (exportChangeset, arg) {
                return this.vDefault(exportChangeset, arg);
            };
            Visitor.prototype.vPrecondition = function (precondition, arg) {
                return this.vCondition(precondition, arg);
            };
            Visitor.prototype.vPostcondition = function (postcondition, arg) {
                return this.vCondition(postcondition, arg);
            };
            Visitor.prototype.vInvariantcondition = function (invariantcondition, arg) {
                return this.vCondition(invariantcondition, arg);
            };
            Visitor.prototype.vCondition = function (condition, arg) {
                return this.vDefault(condition, arg);
            };
            Visitor.prototype.vUnaryOp = function (unaryOp, arg) {
                return this.vExpression(unaryOp, arg);
            };
            Visitor.prototype.vBinaryOp = function (binaryOp, arg) {
                return this.vExpression(binaryOp, arg);
            };
            Visitor.prototype.vExpression = function (expression, arg) {
                return this.vDefault(expression, arg);
            };
            Visitor.prototype.vCurrentExpr = function (currentExpression, arg) {
                return this.vDefault(currentExpression, arg);
            };
            Visitor.prototype.vCreateExpression = function (createExpression, arg) {
                return this.vExpression(createExpression, arg);
            };
            Visitor.prototype.vIntLiteral = function (intLiteral, arg) {
                return this.vLiteral(intLiteral, arg);
            };
            Visitor.prototype.vRealLiteral = function (realLiteral, arg) {
                return this.vLiteral(realLiteral, arg);
            };
            Visitor.prototype.vStringLiteral = function (stringLiteral, arg) {
                return this.vLiteral(stringLiteral, arg);
            };
            Visitor.prototype.vLiteral = function (literal, arg) {
                return this.vDefault(literal, arg);
            };
            Visitor.prototype.vConstantAttribute = function (constantAttribute, arg) {
                return this.vVarOrConstAttribute(constantAttribute, arg);
            };
            Visitor.prototype.vVarOrConstAttribute = function (varOrConstAttribute, arg) {
                return this.vFeature(varOrConstAttribute, arg);
            };
            Visitor.prototype.vAlias = function (alias, arg) {
                return this.vDefault(alias, arg);
            };
            Visitor.prototype.vCharLiteral = function (charLiteral, arg) {
                return this.vLiteral(charLiteral, arg);
            };
            Visitor.prototype.vBooleanLiteral = function (booleanLiteral, arg) {
                return this.vLiteral(booleanLiteral, arg);
            };
            Visitor.prototype.vVoidLiteral = function (voidLiteral, arg) {
                return this.vLiteral(voidLiteral, arg);
            };
            Visitor.prototype.vCallExpression = function (callExpression, arg) {
                return this.vExpression(callExpression, arg);
            };
            Visitor.prototype.vIndexExpression = function (indexExpression, arg) {
                return this.vExpression(indexExpression, arg);
            };
            Visitor.prototype.vVarDeclList = function (varDeclList, arg) {
                return this.vDefault(varDeclList, arg);
            };
            Visitor.prototype.vVarDeclEntry = function (varDeclEntry, arg) {
                return this.vDefault(varDeclEntry, arg);
            };
            Visitor.prototype.vFromLoop = function (fromLoop, arg) {
                return this.vInstruction(fromLoop, arg);
            };
            Visitor.prototype.vIfElse = function (ifElse, arg) {
                return this.vInstruction(ifElse, arg);
            };
            Visitor.prototype.vElseIf = function (elseIf, arg) {
                return this.vInstruction(elseIf, arg);
            };
            Visitor.prototype.vCheckInstruction = function (checkInstruction, arg) {
                return this.vInstruction(checkInstruction, arg);
            };
            Visitor.prototype.vExternal = function (external, arg) {
                return null;
            };
            Visitor.prototype.vResultExpression = function (resultExpression, arg) {
                return this.vDefault(resultExpression, arg);
            };
            Visitor.prototype.vAnchoredType = function (anchoredType, arg) {
                return this.vDefault(anchoredType, arg);
            };
            Visitor.prototype.vIdentifierAccess = function (identifierAccess, arg) {
                return this.vExpression(identifierAccess, arg);
            };
            Visitor.prototype.vObsolete = function (obsolete, arg) {
                return null;
            };
            Visitor.prototype.vAttachedExpression = function (attachedExpression, arg) {
                return this.vExpression(attachedExpression, arg);
            };
            Visitor.prototype.vTypeExpression = function (typeExpression, arg) {
                return this.vExpression(typeExpression, arg);
            };
            Visitor.prototype.vParentGroup = function (parentGroup, arg) {
                return this.vDefault(parentGroup, arg);
            };
            Visitor.prototype.vRoutineInstructions = function (routineInstructions, arg) {
                return this.vDefault(routineInstructions, arg);
            };
            Visitor.prototype.vOnceBlock = function (onceBlock, arg) {
                return this.vRoutineInstructions(onceBlock, arg);
            };
            Visitor.prototype.vDoBlock = function (doBlock, arg) {
                return this.vRoutineInstructions(doBlock, arg);
            };
            Visitor.prototype.vDeferredBlock = function (deferredBlock, arg) {
                return this.vRoutineInstructions(deferredBlock, arg);
            };
            Visitor.prototype.vUnqualifiedCallExpression = function (unqualifiedCallExpression, arg) {
                return this.vExpression(unqualifiedCallExpression, arg);
            };
            Visitor.prototype.vLocalsBlock = function (localsBlock, arg) {
                return this.vDefault(localsBlock, arg);
            };
            Visitor.prototype.vTypeConstraint = function (typeConstraint, arg) {
                return this.vDefault(typeConstraint, arg);
            };
            Visitor.prototype.vRename = function (rename, arg) {
                return this.vDefault(rename, arg);
            };
            Visitor.prototype.vToken = function (token, arg) {
                return this.vDefault(token, arg);
            };
            Visitor.prototype.vRedefines = function (redefines, arg) {
                return this.vDefault(redefines, arg);
            };
            Visitor.prototype.vUndefines = function (undefines, arg) {
                return this.vDefault(undefines, arg);
            };
            Visitor.prototype.vRenames = function (renames, arg) {
                return this.vDefault(renames, arg);
            };
            Visitor.prototype.vSelects = function (selects, arg) {
                return this.vDefault(selects, arg);
            };
            Visitor.prototype.vNewExports = function (newExports, arg) {
                return this.vDefault(newExports, arg);
            };
            Visitor.prototype.vTupleExpression = function (tupleExpression, arg) {
                return this.vExpression(tupleExpression, arg);
            };
            Visitor.prototype.vAll = function (all, arg) {
                return this.vDefault(all, arg);
            };
            return Visitor;
        })();
        _ast.Visitor = Visitor;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

/// <reference path="visitor.ts" />
/// <reference path="../../typings/tsd.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var ast;
    (function (ast) {
        var sym = eiffel.symbols;
        var AST = (function () {
            function AST(impl) {
                this._acceptor = impl;
                this.children = [];
            }
            return AST;
        })();
        ast.AST = AST;
        var Identifier = (function (_super) {
            __extends(Identifier, _super);
            function Identifier(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
            }
            Identifier.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifier(this, arg);
            };
            return Identifier;
        })(AST);
        ast.Identifier = Identifier;
        var Token = (function (_super) {
            __extends(Token, _super);
            function Token(text, start, end) {
                _super.call(this, this);
                this.text = text;
                this.start = start;
                this.end = end;
            }
            Token.prototype.accept = function (visitor, arg) {
                return visitor.vToken(this, arg);
            };
            return Token;
        })(AST);
        ast.Token = Token;
        var Pos = (function () {
            function Pos(offset) {
                this.offset = offset;
            }
            return Pos;
        })();
        ast.Pos = Pos;
        var Class = (function (_super) {
            __extends(Class, _super);
            function Class(name, deferred, frozen, expanded, note, parentGroups, generics, creationClause, featureLists) {
                _super.call(this, this);
                this.name = name;
                this.deferred = deferred;
                this.frozen = frozen;
                this.expanded = expanded;
                this.children.push(name);
                this.genericParameters = generics;
                this.parentGroups = parentGroups;
                Array.prototype.push.apply(this.children, parentGroups);
                this.creationClause = creationClause;
                Array.prototype.push.apply(this.children, creationClause);
                this.featureLists = featureLists;
                Array.prototype.push.apply(this.children, featureLists);
                this.dictionary = new Map();
            }
            Class.prototype.byType = function (prototype) {
                return this.dictionary.get(prototype);
            };
            Class.prototype.accept = function (visitor, arg) {
                return visitor.vClass(this, arg);
            };
            return Class;
        })(AST);
        ast.Class = Class;
        var TypeConstraint = (function (_super) {
            __extends(TypeConstraint, _super);
            function TypeConstraint(rt, rename) {
                _super.call(this, this);
                this.rt = rt;
                this.rename = rename;
                this.children.push(rt, rename);
            }
            TypeConstraint.prototype.accept = function (visitor, arg) {
                return visitor.vTypeConstraint(this, arg);
            };
            return TypeConstraint;
        })(AST);
        ast.TypeConstraint = TypeConstraint;
        var FeatureList = (function (_super) {
            __extends(FeatureList, _super);
            function FeatureList(exports, features) {
                _super.call(this, this);
                this.exports = exports;
                Array.prototype.push.apply(this.children, exports);
                this.features = features;
                Array.prototype.push.apply(this.children, features);
            }
            FeatureList.prototype.accept = function (visitor, arg) {
                return visitor.vFeatureList(this, arg);
            };
            return FeatureList;
        })(AST);
        ast.FeatureList = FeatureList;
        var IdentifierAccess = (function (_super) {
            __extends(IdentifierAccess, _super);
            function IdentifierAccess(identifier) {
                _super.call(this, this);
                this.identifier = identifier;
                this.start = identifier.start;
                this.end = identifier.end;
            }
            IdentifierAccess.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifierAccess(this, arg);
            };
            return IdentifierAccess;
        })(AST);
        ast.IdentifierAccess = IdentifierAccess;
        var Routine = (function (_super) {
            __extends(Routine, _super);
            function Routine(frozenNamesAndAliases, parameters, rawType, bodyElements) {
                _super.call(this, this);
                this.frozenNamesAndAliases = frozenNamesAndAliases;
                this.parameters = parameters;
                Array.prototype.push.apply(this.children, _.pluck(frozenNamesAndAliases, "name"));
                Array.prototype.push.apply(this.children, parameters);
                Array.prototype.push.apply(this.children, this.aliases);
                Array.prototype.push.apply(this.children, bodyElements);
            }
            Routine.prototype.accept = function (visitor, arg) {
                return visitor.vRoutine(this, arg);
            };
            return Routine;
        })(AST);
        ast.Routine = Routine;
        var LocalsBlock = (function (_super) {
            __extends(LocalsBlock, _super);
            function LocalsBlock(linesOfVarDeclLists) {
                _super.call(this, this);
                this.linesOfVarDeclLists = linesOfVarDeclLists;
                this.varDeclLists = _.flatten(linesOfVarDeclLists);
                Array.prototype.push.apply(this.children, this.varDeclLists);
            }
            LocalsBlock.prototype.accept = function (visitor, arg) {
                return visitor.vLocalsBlock(this, arg);
            };
            return LocalsBlock;
        })(AST);
        ast.LocalsBlock = LocalsBlock;
        var External = (function (_super) {
            __extends(External, _super);
            function External(expressions, start, end) {
                _super.call(this, this);
                this.expressions = expressions;
            }
            External.prototype.accept = function (visitor, arg) {
                return visitor.vExternal(this, arg);
            };
            return External;
        })(AST);
        ast.External = External;
        var Obsolete = (function (_super) {
            __extends(Obsolete, _super);
            function Obsolete(expression, start, end) {
                _super.call(this, this);
                this.expression = expression;
            }
            Obsolete.prototype.accept = function (visitor, arg) {
                return visitor.vObsolete(this, arg);
            };
            return Obsolete;
        })(AST);
        ast.Obsolete = Obsolete;
        var VarDeclList = (function (_super) {
            __extends(VarDeclList, _super);
            function VarDeclList(varDecls, rawType) {
                _super.call(this, this);
                this.varDecls = varDecls;
                this.rawType = rawType;
                varDecls.forEach(function (varDecl) {
                    varDecl.varDeclList = this;
                });
                Array.prototype.push.apply(this.children, varDecls);
                this.children.push(rawType);
            }
            VarDeclList.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclList(this, arg);
            };
            return VarDeclList;
        })(AST);
        ast.VarDeclList = VarDeclList;
        var VarDeclEntry = (function (_super) {
            __extends(VarDeclEntry, _super);
            function VarDeclEntry(name) {
                _super.call(this, this);
                this.name = name;
                this.children.push(name);
            }
            VarDeclEntry.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclEntry(this, arg);
            };
            return VarDeclEntry;
        })(AST);
        ast.VarDeclEntry = VarDeclEntry;
        var Type = (function (_super) {
            __extends(Type, _super);
            function Type(name, parameters, detachable, start, end) {
                _super.call(this, this);
                this.name = name;
                this.parameters = parameters;
                this.detachable = detachable;
                this.start = start;
                this.end = end;
                this.children.push(name);
                Array.prototype.push.apply(this.children, parameters);
            }
            Type.prototype.accept = function (visitor, arg) {
                return visitor.vType(this, arg);
            };
            return Type;
        })(AST);
        ast.Type = Type;
        var TupleExpression = (function (_super) {
            __extends(TupleExpression, _super);
            function TupleExpression(expressions, start, end) {
                _super.call(this, this);
                this.expressions = expressions;
                this.start = start;
                this.end = end;
                Array.prototype.push.apply(this.children, expressions);
            }
            TupleExpression.prototype.accept = function (visitor, arg) {
                return visitor.vTupleExpression(this, arg);
            };
            return TupleExpression;
        })(AST);
        ast.TupleExpression = TupleExpression;
        var TypeExpression = (function (_super) {
            __extends(TypeExpression, _super);
            function TypeExpression(rt) {
                _super.call(this, this);
                this.rt = rt;
            }
            TypeExpression.prototype.accept = function (visitor, arg) {
                return visitor.vTypeExpression(this, arg);
            };
            return TypeExpression;
        })(AST);
        ast.TypeExpression = TypeExpression;
        var Function = (function (_super) {
            __extends(Function, _super);
            function Function() {
                _super.apply(this, arguments);
            }
            Function.prototype.accept = function (visitor, arg) {
                return visitor.vFunction(this, arg);
            };
            return Function;
        })(Routine);
        ast.Function = Function;
        var Procedure = (function (_super) {
            __extends(Procedure, _super);
            function Procedure() {
                _super.apply(this, arguments);
            }
            Procedure.prototype.accept = function (visitor, arg) {
                return visitor.vProcedure(this, arg);
            };
            return Procedure;
        })(Routine);
        ast.Procedure = Procedure;
        var RoutineInstructions = (function (_super) {
            __extends(RoutineInstructions, _super);
            function RoutineInstructions(instructions) {
                _super.call(this, this);
                this.instructions = instructions;
            }
            RoutineInstructions.prototype.accept = function (visitor, arg) {
                return visitor.vRoutineInstructions(this, arg);
            };
            return RoutineInstructions;
        })(AST);
        ast.RoutineInstructions = RoutineInstructions;
        var DoBlock = (function (_super) {
            __extends(DoBlock, _super);
            function DoBlock() {
                _super.apply(this, arguments);
            }
            DoBlock.prototype.accept = function (visitor, arg) {
                return visitor.vDoBlock(this, arg);
            };
            return DoBlock;
        })(RoutineInstructions);
        ast.DoBlock = DoBlock;
        var DeferredBlock = (function (_super) {
            __extends(DeferredBlock, _super);
            function DeferredBlock() {
                _super.apply(this, arguments);
            }
            DeferredBlock.prototype.accept = function (visitor, arg) {
                return visitor.vDeferredBlock(this, arg);
            };
            return DeferredBlock;
        })(RoutineInstructions);
        ast.DeferredBlock = DeferredBlock;
        var OnceBlock = (function (_super) {
            __extends(OnceBlock, _super);
            function OnceBlock() {
                _super.apply(this, arguments);
            }
            OnceBlock.prototype.accept = function (visitor, arg) {
                return visitor.vOnceBlock(this, arg);
            };
            return OnceBlock;
        })(RoutineInstructions);
        ast.OnceBlock = OnceBlock;
        var Alias = (function (_super) {
            __extends(Alias, _super);
            function Alias(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
                this.children.push(name);
            }
            Alias.prototype.accept = function (visitor, arg) {
                return visitor.vAlias(this, arg);
            };
            return Alias;
        })(AST);
        ast.Alias = Alias;
        var CurrentExpression = (function (_super) {
            __extends(CurrentExpression, _super);
            function CurrentExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            CurrentExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCurrentExpr(this, arg);
            };
            return CurrentExpression;
        })(AST);
        ast.CurrentExpression = CurrentExpression;
        var ResultExpression = (function (_super) {
            __extends(ResultExpression, _super);
            function ResultExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            ResultExpression.prototype.accept = function (visitor, arg) {
                return visitor.vResultExpression(this, arg);
            };
            return ResultExpression;
        })(AST);
        ast.ResultExpression = ResultExpression;
        var AnchoredType = (function (_super) {
            __extends(AnchoredType, _super);
            function AnchoredType(expression) {
                _super.call(this, this);
                this.expression = expression;
            }
            AnchoredType.prototype.accept = function (visitor, arg) {
                return visitor.vAnchoredType(this, arg);
            };
            return AnchoredType;
        })(AST);
        ast.AnchoredType = AnchoredType;
        var VarOrConstAttribute = (function (_super) {
            __extends(VarOrConstAttribute, _super);
            function VarOrConstAttribute(frozenNamesAndAliases, rawType) {
                _super.call(this, this);
                this.frozenNamesAndAliases = frozenNamesAndAliases;
                this.rawType = rawType;
                Array.prototype.push.apply(this.children, _.pluck(frozenNamesAndAliases, "name"));
                this.children.push(rawType);
            }
            VarOrConstAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vVarOrConstAttribute(this, arg);
            };
            return VarOrConstAttribute;
        })(AST);
        ast.VarOrConstAttribute = VarOrConstAttribute;
        var Attribute = (function (_super) {
            __extends(Attribute, _super);
            function Attribute() {
                _super.apply(this, arguments);
            }
            Attribute.prototype.accept = function (visitor, arg) {
                return visitor.vAttr(this, arg);
            };
            return Attribute;
        })(VarOrConstAttribute);
        ast.Attribute = Attribute;
        var ConstantAttribute = (function (_super) {
            __extends(ConstantAttribute, _super);
            function ConstantAttribute(frozenNamesAndAliases, rawType, value) {
                _super.call(this, frozenNamesAndAliases, rawType);
                this.value = value;
                this.children.push(value);
            }
            ConstantAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vConstantAttribute(this, arg);
            };
            return ConstantAttribute;
        })(VarOrConstAttribute);
        ast.ConstantAttribute = ConstantAttribute;
        var ParentGroup = (function (_super) {
            __extends(ParentGroup, _super);
            function ParentGroup(conforming, parents) {
                _super.call(this, this);
                this.conforming = conforming;
                this.parents = parents;
            }
            ParentGroup.prototype.accept = function (visitor, arg) {
                return visitor.vParentGroup(this, arg);
            };
            return ParentGroup;
        })(AST);
        ast.ParentGroup = ParentGroup;
        var Parent = (function (_super) {
            __extends(Parent, _super);
            function Parent(rt, adaptions) {
                _super.call(this, this);
                this.rawType = rt;
                this.adaptions = adaptions;
            }
            Parent.prototype.accept = function (visitor, arg) {
                return visitor.vParent(this, arg);
            };
            return Parent;
        })(AST);
        ast.Parent = Parent;
        var Rename = (function (_super) {
            __extends(Rename, _super);
            function Rename(oldName, newName) {
                _super.call(this, this);
                this.oldName = oldName;
                this.newName = newName;
            }
            Rename.prototype.accept = function (visitor, arg) {
                return visitor.vRename(this, arg);
            };
            return Rename;
        })(AST);
        ast.Rename = Rename;
        var Renames = (function (_super) {
            __extends(Renames, _super);
            function Renames(t, renames) {
                _super.call(this, this);
                this.token = t;
                this.renames = renames;
            }
            Renames.prototype.accept = function (visitor, arg) {
                return visitor.vRenames(this, arg);
            };
            return Renames;
        })(AST);
        ast.Renames = Renames;
        var Redefines = (function (_super) {
            __extends(Redefines, _super);
            function Redefines(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Redefines.prototype.accept = function (visitor, arg) {
                return visitor.vRedefines(this, arg);
            };
            return Redefines;
        })(AST);
        ast.Redefines = Redefines;
        var Selects = (function (_super) {
            __extends(Selects, _super);
            function Selects(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Selects.prototype.accept = function (visitor, arg) {
                return visitor.vSelects(this, arg);
            };
            return Selects;
        })(AST);
        ast.Selects = Selects;
        var ExportChangeset = (function (_super) {
            __extends(ExportChangeset, _super);
            function ExportChangeset(access, featureSet) {
                _super.call(this, this);
                this.access = access;
                this.featureSet = featureSet;
            }
            ExportChangeset.prototype.accept = function (visitor, arg) {
                return visitor.vExportChangeset(this, arg);
            };
            return ExportChangeset;
        })(AST);
        ast.ExportChangeset = ExportChangeset;
        var NewExports = (function (_super) {
            __extends(NewExports, _super);
            function NewExports(t, exportChangeset) {
                _super.call(this, this);
                this.token = t;
                this.exportChangeset = exportChangeset;
            }
            NewExports.prototype.accept = function (visitor, arg) {
                return visitor.vNewExports(this, arg);
            };
            return NewExports;
        })(AST);
        ast.NewExports = NewExports;
        var Undefines = (function (_super) {
            __extends(Undefines, _super);
            function Undefines(t, identifiers) {
                _super.call(this, this);
                this.token = t;
                this.identifiers = identifiers;
            }
            Undefines.prototype.accept = function (visitor, arg) {
                return visitor.vUndefines(this, arg);
            };
            return Undefines;
        })(AST);
        ast.Undefines = Undefines;
        var Literal = (function (_super) {
            __extends(Literal, _super);
            function Literal(vac, rawValue) {
                _super.call(this, vac);
                this.rawValue = rawValue;
            }
            return Literal;
        })(AST);
        ast.Literal = Literal;
        var CharLiteral = (function (_super) {
            __extends(CharLiteral, _super);
            function CharLiteral(value, start, end) {
                _super.call(this, this, value);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            CharLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vCharLiteral(this, arg);
            };
            return CharLiteral;
        })(Literal);
        ast.CharLiteral = CharLiteral;
        var BooleanLiteral = (function (_super) {
            __extends(BooleanLiteral, _super);
            function BooleanLiteral(value, start, end) {
                _super.call(this, this, value);
                this.value = value.toLowerCase() === "true";
                this.start = start;
                this.end = end;
            }
            BooleanLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vBooleanLiteral(this, arg);
            };
            return BooleanLiteral;
        })(Literal);
        ast.BooleanLiteral = BooleanLiteral;
        var IntLiteral = (function (_super) {
            __extends(IntLiteral, _super);
            function IntLiteral(value, start, end) {
                _super.call(this, this, value);
                this.value = parseInt(value);
                this.start = start;
                this.end = end;
            }
            IntLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vIntLiteral(this, arg);
            };
            return IntLiteral;
        })(Literal);
        ast.IntLiteral = IntLiteral;
        var RealLiteral = (function (_super) {
            __extends(RealLiteral, _super);
            function RealLiteral(value, start, end) {
                _super.call(this, this, value);
                this.value = parseFloat(value);
                this.start = start;
                this.end = end;
            }
            RealLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vRealLiteral(this, arg);
            };
            return RealLiteral;
        })(Literal);
        ast.RealLiteral = RealLiteral;
        var VoidLiteral = (function (_super) {
            __extends(VoidLiteral, _super);
            function VoidLiteral(start, end) {
                _super.call(this, this, null);
                this.value = null;
                this.start = start;
                this.end = end;
            }
            VoidLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vVoidLiteral(this, arg);
            };
            return VoidLiteral;
        })(Literal);
        ast.VoidLiteral = VoidLiteral;
        var StringLiteral = (function (_super) {
            __extends(StringLiteral, _super);
            function StringLiteral(value, start, end) {
                _super.call(this, this, value);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            StringLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vStringLiteral(this, arg);
            };
            return StringLiteral;
        })(Literal);
        ast.StringLiteral = StringLiteral;
        var All = (function (_super) {
            __extends(All, _super);
            function All(allToken) {
                _super.call(this, this);
                this.allToken = allToken;
            }
            All.prototype.accept = function (visitor, arg) {
                return visitor.vAll(this, arg);
            };
            return All;
        })(AST);
        ast.All = All;
        var Condition = (function (_super) {
            __extends(Condition, _super);
            function Condition(label, condition) {
                _super.call(this, this);
                this.condition = condition;
                this.label = label;
                this.children.push(label, condition);
            }
            Condition.prototype.accept = function (visitor, arg) {
                throw new Error("This should not be called");
            };
            return Condition;
        })(AST);
        ast.Condition = Condition;
        var Precondition = (function (_super) {
            __extends(Precondition, _super);
            function Precondition() {
                _super.apply(this, arguments);
            }
            Precondition.prototype.accept = function (visitor, arg) {
                return visitor.vPrecondition(this, arg);
            };
            return Precondition;
        })(Condition);
        ast.Precondition = Precondition;
        var Postcondition = (function (_super) {
            __extends(Postcondition, _super);
            function Postcondition() {
                _super.apply(this, arguments);
            }
            Postcondition.prototype.accept = function (visitor, arg) {
                return visitor.vPostcondition(this, arg);
            };
            return Postcondition;
        })(Condition);
        ast.Postcondition = Postcondition;
        var CheckInstruction = (function (_super) {
            __extends(CheckInstruction, _super);
            function CheckInstruction(e) {
                _super.call(this, this);
            }
            CheckInstruction.prototype.accept = function (visitor, arg) {
                return visitor.vCheckInstruction(this, arg);
            };
            return CheckInstruction;
        })(AST);
        ast.CheckInstruction = CheckInstruction;
        var Invariantcondition = (function (_super) {
            __extends(Invariantcondition, _super);
            function Invariantcondition() {
                _super.apply(this, arguments);
            }
            Invariantcondition.prototype.accept = function (visitor, arg) {
                return visitor.vInvariantcondition(this, arg);
            };
            return Invariantcondition;
        })(Condition);
        ast.Invariantcondition = Invariantcondition;
        var Assignment = (function (_super) {
            __extends(Assignment, _super);
            function Assignment(left, right) {
                _super.call(this, this);
                this.left = left;
                this.right = right;
                this.children.push(left, right);
            }
            Assignment.prototype.accept = function (visitor, arg) {
                return visitor.vAssignment(this, arg);
            };
            return Assignment;
        })(AST);
        ast.Assignment = Assignment;
        var CreateInstruction = (function (_super) {
            __extends(CreateInstruction, _super);
            function CreateInstruction(target, method, arguments) {
                _super.call(this, this);
                this.target = target;
                this.method = method;
                this.arguments = arguments;
                this.children.push(target, method);
                Array.prototype.push.apply(this.children, arguments);
            }
            CreateInstruction.prototype.accept = function (visitor, arg) {
                return visitor.vCreateInstruction(this, arg);
            };
            return CreateInstruction;
        })(AST);
        ast.CreateInstruction = CreateInstruction;
        var CreateExpression = (function (_super) {
            __extends(CreateExpression, _super);
            function CreateExpression(rawType, method, arguments) {
                _super.call(this, this);
                this.rawType = rawType;
                this.method = method;
                this.arguments = arguments;
                this.children.push(rawType, method);
                Array.prototype.push.apply(this.children, arguments);
            }
            CreateExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCreateExpression(this, arg);
            };
            return CreateExpression;
        })(AST);
        ast.CreateExpression = CreateExpression;
        var UnaryOp = (function (_super) {
            __extends(UnaryOp, _super);
            function UnaryOp(operator, operand, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.operand = operand;
                this.start = start;
                this.end = end;
                this.children.push(operand);
            }
            UnaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vUnaryOp(this, arg);
            };
            return UnaryOp;
        })(AST);
        ast.UnaryOp = UnaryOp;
        var BinaryOp = (function (_super) {
            __extends(BinaryOp, _super);
            function BinaryOp(operator, left, right, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.left = left;
                this.right = right;
                this.start = start;
                this.end = end;
                this.children.push(left, right);
            }
            BinaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vBinaryOp(this, arg);
            };
            return BinaryOp;
        })(AST);
        ast.BinaryOp = BinaryOp;
        var stringToUnaryOp = new Map([["-", 0 /* Minus */], ["+", 1 /* Plus */], ["not", 2 /* Not */], ["old", 3 /* Old */]]);
        var stringToBinaryOp = new Map([["-", 0 /* Minus */], ["+", 1 /* Plus */], ["*", 2 /* Multiplication */], ["/", 3 /* Division */], ["//", 4 /* IntegerDivision */], ["\\\\", 5 /* Modulo */], ["^", 6 /* Exponential */], ["..", 7 /* DotDot */], ["=", 8 /* Identical */], ["/=", 9 /* NotIdentical */], ["~", 10 /* IsEqual */], ["/~", 11 /* NotIsEqual */], ["<", 12 /* LessThan */], [">", 13 /* GreaterThan */], ["<=", 14 /* LessOrEqual */], [">=", 15 /* GreaterOrEqual */], ["and", 16 /* And */], ["and then", 17 /* AndThen */], ["or", 18 /* Or */], ["or else", 19 /* OrElse */], ["xor", 20 /* Xor */], ["implies", 21 /* Implies */]]);
        var CallExpression = (function (_super) {
            __extends(CallExpression, _super);
            function CallExpression(operand, name, parameters) {
                _super.call(this, this);
                this.operand = operand;
                this.name = name;
                this.parameters = parameters;
                this.children.push(operand, name);
                Array.prototype.push.apply(this.children, parameters);
            }
            CallExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCallExpression(this, arg);
            };
            return CallExpression;
        })(AST);
        ast.CallExpression = CallExpression;
        var UnqualifiedCallExpression = (function (_super) {
            __extends(UnqualifiedCallExpression, _super);
            function UnqualifiedCallExpression(identifier, parameters) {
                _super.call(this, this);
                this.identifier = identifier;
                this.parameters = parameters;
                Array.prototype.push.apply(this.children, parameters);
            }
            UnqualifiedCallExpression.prototype.accept = function (visitor, arg) {
                return visitor.vUnqualifiedCallExpression(this, arg);
            };
            return UnqualifiedCallExpression;
        })(AST);
        ast.UnqualifiedCallExpression = UnqualifiedCallExpression;
        var IndexExpression = (function (_super) {
            __extends(IndexExpression, _super);
            function IndexExpression(operand, argument) {
                _super.call(this, this);
                this.operand = operand;
                this.argument = argument;
                this.children.push(operand, argument);
            }
            IndexExpression.prototype.accept = function (visitor, arg) {
                return visitor.vIndexExpression(this, arg);
            };
            return IndexExpression;
        })(AST);
        ast.IndexExpression = IndexExpression;
        var AttachedExpression = (function (_super) {
            __extends(AttachedExpression, _super);
            function AttachedExpression(ofType, expr, newVar, start, end) {
                _super.call(this, this);
                this.ofType = ofType;
                this.expr = expr;
                this.newVar = newVar;
                this.children.push(ofType, expr, newVar);
                this.start = start;
                this.end = end;
            }
            AttachedExpression.prototype.accept = function (visitor, arg) {
                return visitor.vAttachedExpression(this, arg);
            };
            return AttachedExpression;
        })(AST);
        ast.AttachedExpression = AttachedExpression;
        var FromLoop = (function (_super) {
            __extends(FromLoop, _super);
            function FromLoop(initializerBlock, until, loopBlock, variant) {
                _super.call(this, this);
                this.initializerBlock = initializerBlock;
                this.until = until;
                this.loopBlock = loopBlock;
                this.variant = variant;
                Array.prototype.push.apply(this.children, initializerBlock);
                this.children.push(until);
                Array.prototype.push.apply(this.children, loopBlock);
                this.children.push(variant);
            }
            FromLoop.prototype.accept = function (visitor, arg) {
                return visitor.vFromLoop(this, arg);
            };
            return FromLoop;
        })(AST);
        ast.FromLoop = FromLoop;
        var IfElse = (function (_super) {
            __extends(IfElse, _super);
            function IfElse(condition, thenBlock, elseIfs, elseBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.elseIfs = elseIfs;
                this.elseBlock = elseBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
                Array.prototype.push.apply(this.children, elseIfs);
                Array.prototype.push.apply(this.children, elseBlock);
            }
            IfElse.prototype.accept = function (visitor, arg) {
                return visitor.vIfElse(this, arg);
            };
            return IfElse;
        })(AST);
        ast.IfElse = IfElse;
        var ElseIf = (function (_super) {
            __extends(ElseIf, _super);
            function ElseIf(condition, thenBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
            }
            ElseIf.prototype.accept = function (visitor, arg) {
                return visitor.vElseIf(this, arg);
            };
            return ElseIf;
        })(AST);
        ast.ElseIf = ElseIf;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    var builtin;
    (function (builtin) {
        builtin.STD_FILE = {
            put_string: [function (ctx) {}]
        };
    })(builtin = eiffel.builtin || (eiffel.builtin = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    var interpreter;
    (function (interpreter) {
        var Interpreter = (function () {
            function Interpreter(rootClass, rootFeature) {}
            return Interpreter;
        })();
        interpreter.Interpreter = Interpreter;
        var EObject = (function () {
            function EObject() {
                this.data = new Map();
            }
            return EObject;
        })();
        interpreter.EObject = EObject;
        var StackEntry = (function () {
            function StackEntry() {}
            return StackEntry;
        })();
        interpreter.StackEntry = StackEntry;
        var Context = (function () {
            function Context(obj, routine) {}
            return Context;
        })();
        interpreter.Context = Context;
        var IntObject = (function () {
            function IntObject() {}
            IntObject.prototype.repr = function () {
                return undefined;
            };
            return IntObject;
        })();
        interpreter.IntObject = IntObject;
        var BuiltinProcessor = (function () {
            function BuiltinProcessor() {}
            return BuiltinProcessor;
        })();
        interpreter.BuiltinProcessor = BuiltinProcessor;
    })(interpreter = eiffel.interpreter || (eiffel.interpreter = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    var util;
    (function (util) {
        ;
        function caseIgnoreEquals(one, other) {
            var oneIsNull = one === null;
            var otherIsNull = other === null;
            if (oneIsNull !== otherIsNull) {
                // exactly one of both is null
                console.warn("caseIgnore with null values", one, other);
                return false;
            }
            if (oneIsNull && otherIsNull) {
                console.warn("caseIgnore with two null values");
                return true;
            }
            // both not null
            var firstNotAString = !(typeof one === "string");
            if (firstNotAString) {
                console.error("First param is not a string", one);
            }
            var secondNotAString = !(typeof other === "string");
            if (secondNotAString) {
                console.error("Second param is not a string", other);
            }
            if (firstNotAString || secondNotAString) {
                throw new Error("Type error in caseIgnoreEquals");
            }
            return one.toUpperCase() === other.toUpperCase();
        }
        util.caseIgnoreEquals = caseIgnoreEquals;
        function cartesianProduct() {
            var arrays = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arrays[_i - 0] = arguments[_i];
            }
            return _.reduce(arrays, function (reduced, values) {
                var partialCartesians = reduced;
                return _.flatten(_.map(partialCartesians, function (partialCartesian) {
                    return _.map(values, function (value) {
                        return partialCartesian.concat([value]);
                    });
                }), true);
            }, [[]]);
        }
        util.cartesianProduct = cartesianProduct;
        function pairs(ts) {
            var result = [];
            for (var i = 0; i < ts.length; i++) {
                for (var j = i + 1; j < ts.length; j++) {
                    result.push([ts[i], ts[j]]);
                }
            }
            return result;
        }
        util.pairs = pairs;
    })(util = eiffel.util || (eiffel.util = {}));
})(eiffel || (eiffel = {}));

/// <reference path="visitor.ts" />
/// <reference path="util.ts" />
/// <reference path="fromJS.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var semantics;
    (function (semantics) {
        var caseIgnoreEquals = eiffel.util.caseIgnoreEquals;
        var pairs = eiffel.util.pairs;
        var createClassSymbols = function createClassSymbols(asts, analysisContext) {
            asts.forEach(function (ast) {
                if (!(ast instanceof eiffel.ast.Class)) {
                    console.error("Root AST node is not instance of Class", ast);
                    throw new Error("Root AST node is not instance of Class");
                }
                var name = ast.name.name;
                var classSymbol = new eiffel.symbols.ClassSymbol(name, ast);
                analysisContext.classSymbols.set(classSymbol.lowerCaseName, classSymbol);
                analysisContext.allClasses.push(classSymbol);
            });
        };
        var createFeatureSymbols = function createFeatureSymbols(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new FeatureDiscovery(analysisContext, classSymbol), null);
            });
        };
        var createRoutineParamSymbols = function createRoutineParamSymbols(allRoutines) {
            allRoutines.forEach(function (routine) {
                routine.ast.parameters.forEach(function (parameterList) {
                    parameterList.varDecls.forEach(function (varDecl) {
                        var varName = varDecl.name.name;
                        var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                        routine.paramsInOrder.push(variableSymbol);
                        routine.localsAndParamsByName.set(varName, variableSymbol);
                    });
                });
            });
        };
        var createRoutineLocalSymbols = function createRoutineLocalSymbols(analysisContext) {
            analysisContext.allRoutines.forEach(function (routine) {
                var localsBlocks = routine.ast.children.filter(function (child) {
                    return child instanceof eiffel.ast.LocalsBlock;
                });
                localsBlocks.forEach(function (localBlock) {
                    localBlock.varDeclLists.forEach(function (varsDecl) {
                        varsDecl.varDecls.forEach(function (varDecl) {
                            var varName = varDecl.name.name;
                            var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                            routine.locals.push(variableSymbol);
                            routine.localsAndParamsByName.set(varName, variableSymbol);
                        });
                    });
                });
            });
        };
        var makeTypeInstanceIn = function makeTypeInstanceIn(sourceClass, rawType, analysisContext) {
            var resolveType = function resolveType(identifier) {
                var name = identifier.name;
                if (sourceClass.hasGenericParameterWithName(name)) {
                    return sourceClass.genericParameterWithName(name);
                } else if (analysisContext.hasClass(name)) {
                    return analysisContext.classWithName(name);
                } else {
                    analysisContext.errors.unknownClass(identifier);
                    return null;
                }
            };
            var baseType = resolveType(rawType.name);
            var typeParamInstances = rawType.parameters.map(function (rawTypeParameter) {
                return makeTypeInstanceIn(sourceClass, rawTypeParameter, analysisContext);
            });
            return new eiffel.symbols.TypeInstance(baseType, typeParamInstances, sourceClass);
        };
        var validateTypeInstance = function validateTypeInstance(instance, context) {
            // TODO implement constraints
            var sourceClass = instance.sourceClass;
            var baseType = instance.baseType;
            var expectedParamCount = baseType.genericParametersInOrder.length;
            var actualParamCount = instance.typeParameters.length;
            if (expectedParamCount < actualParamCount) {
                var difference = actualParamCount - expectedParamCount;
                context.errors.uncategorized("Missing " + difference + " generic parameters.");
            } else if (expectedParamCount > actualParamCount) {
                context.errors.uncategorized("Too many generic arguments, you can only have " + expectedParamCount + ", but you have " + actualParamCount);
            }
            instance.typeParameters.forEach(_.partial(validateTypeInstance, _, context));
        };
        var initParentTypeInstancesAndValidate = function initParentTypeInstancesAndValidate(analysisContext) {
            var typeInstances = [];
            analysisContext.allClasses.forEach(function (oneClass) {
                oneClass.ast.parentGroups.forEach(function (parentGroup) {
                    parentGroup.parents.forEach(function (parent) {
                        parent.parentType = makeTypeInstanceIn(oneClass, parent.rawType, analysisContext);
                        typeInstances.push(parent.parentType);
                        oneClass.parentTypes.push(parent.parentType);
                    });
                });
                if (oneClass.ast.parentGroups.length === 0) {
                    if (oneClass.lowerCaseName !== "any") {
                        var anyInstance = new eiffel.symbols.TypeInstance(analysisContext.classWithName("ANY"), [], oneClass);
                        oneClass.parentTypes.push(anyInstance);
                        typeInstances.push(anyInstance);
                    }
                }
            });
            // Validate all
            typeInstances.map(_.partial(validateTypeInstance, _, analysisContext));
        };
        var parseError = function parseError(builtinSource, e) {
            console.group("Parse Error: " + builtinSource.filename);
            console.log("Found", e.found);
            console.groupCollapsed("Expected");
            console.table(e.expected);
            console.groupEnd();
            console.group("Context");
            var lines = builtinSource.content.split(/\r?\n/);
            var context = lines[e.line - 4] + lines[e.line - 3] + "\n" + lines[e.line - 2] + "\n" + lines[e.line - 1] + "\n" + Array(e.column).join("-") + "^ -- Line: " + e.line + " Column: " + e.column + "\n" + lines[e.line + 0] + lines[e.line + 1] + lines[e.line + 2] + lines[e.line + 3];
            console.log(context);
            console.groupEnd();
            console.groupCollapsed("Source");
            console.log(builtinSource.content);
            console.groupEnd();
            console.log(e);
            console.groupEnd();
        };
        var initAstDictionary = function initAstDictionary(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), analysisContext.astDictionary);
            });
        };
        var initAstDictionaryByClass = function initAstDictionaryByClass(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), classSymbol.ast.dictionary);
            });
        };
        var requireValidClassForAnalysis = function requireClassForAnalysis(name, analysisContext, success, failure) {
            if (analysisContext.hasClass(name)) {
                return success(analysisContext.classWithName(name), analysisContext);
            } else {
                failure(analysisContext);
                return false;
            }
        };
        var checkCyclicInheritance = function checkCyclicInheritance(analysisContext) {
            var inheritanceBeingChecked = new Set();
            var inheritanceChecked = new Set();
            var inheritanceCycles = [];
            var hasValidHierarchy = function hasValidHierarchy(oneClass, descendants) {
                if (inheritanceBeingChecked.has(oneClass)) {
                    oneClass.hasCyclicInheritance = true;
                    analysisContext.errors.inheritanceCycle(descendants.slice(descendants.indexOf(oneClass)));
                    inheritanceCycles.push(descendants.slice());
                    return;
                } else if (inheritanceChecked.has(oneClass)) {
                    /**
                     * Already done, do nothing
                     */
                    return;
                } else {
                    inheritanceBeingChecked.add(oneClass);
                    oneClass.ast.parentGroups.forEach(function (parentGroup) {
                        parentGroup.parents.forEach(function (parent) {
                            var parentName = parent.rawType.name.name;
                            requireValidClassForAnalysis(parentName, analysisContext, function (parentSymbol) {
                                if (parentSymbol.hasCyclicInheritance) {
                                    /**
                                     * This implies that hasValidHierarchy() has already been called on parentSymbol
                                     * Implying that all the cycles it participates in have already been identified
                                     * Thus, this `oneClass` cannot be inside any such cycle.
                                     *
                                     */
                                    oneClass.inheritsFromCyclicInheritance = true;
                                } else {
                                    descendants.push(oneClass);
                                    hasValidHierarchy(parentSymbol, descendants);
                                    descendants.pop();
                                    oneClass.hasCyclicInheritance = parentSymbol.hasCyclicInheritance;
                                    oneClass.inheritsFromCyclicInheritance = parentSymbol.inheritsFromCyclicInheritance;
                                }
                            }, function failure(ac) {
                                analysisContext.errors.unknownClass(parent.rawType.name);
                            });
                        });
                    });
                    inheritanceBeingChecked["delete"](oneClass);
                    inheritanceChecked.add(oneClass);
                }
            };
            analysisContext.allClasses.forEach(function (oneClass) {
                hasValidHierarchy(oneClass, []);
            });
            if (inheritanceCycles.length > 0) {
                analysisContext.errors.uncategorized("Cyclic inheritance detected");
                console.error("Cycles:", inheritanceCycles);
            }
        };
        var initGenericParamSyms = function initGenericParamSyms(analysisContext) {
            analysisContext.allClasses.map(function (oneClass) {
                oneClass.ast.genericParameters.forEach(function (genericParameter) {
                    var name = genericParameter.name.name;
                    var genericParamSym = new eiffel.symbols.ClassSymbol(name, null);
                    genericParameter.sym = genericParamSym;
                    oneClass.genericParametersInOrder.push(genericParamSym);
                    if (oneClass.hasGenericParameterWithName(name)) {
                        analysisContext.errors.duplicateGenericParameter(genericParameter.name);
                    } else {
                        oneClass.genericParametersByName.set(name.toLowerCase(), genericParamSym);
                    }
                });
            });
        };
        var handDownFeatures = function handDownFeatures(analysisContext) {
            var seen = new Set();
            var process = function process(oneClass, descendants) {
                if (seen.has(oneClass)) {
                    /**
                     * Already finalized features, don't do anything
                     */
                    return;
                } else {
                    oneClass.ast.parentGroups.forEach(function (parentGroup) {
                        parentGroup.parents.forEach(function (parent) {
                            if (parent.parentType !== null) {}
                        });
                    });
                }
            };
        };
        var checkValidty_8_6_13_parent_rule = function checkValidty_8_6_13_parent_rule(analysisContext) {
            analysisContext.allClasses.forEach(function (oneClass) {
                // For every class
                // 1 In every Parent part for a class B, B is not a descendant of D.
                // 2 No conforming parent is a frozen class.
                // 3 If two or more Parent parts are for classes which have a common ancestor A, D meets the conditions of the Repeated Inheritance Consistency constraint for A.
                // DELAYED
                // 4 At least one of the Parent parts is conforming.
                // 5 No two ancestor types of D are different generic derivations of the same class.
                // 6 Every Parent is generic-creation-ready
                var conformingCount = 0;
                if (oneClass.ast.parentGroups.length == 0) {
                    // Implicit ANY ancestor
                    conformingCount = 1;
                }
                var allParents = [];
                oneClass.ast.parentGroups.forEach(function (parentGroup) {
                    var nonConforming = false;
                    if (parentGroup.conforming != null) {
                        if (caseIgnoreEquals(parentGroup.conforming.name, "NONE")) {
                            nonConforming = true;
                        } else {
                            analysisContext.errors.uncategorized("Invalid nonconformance modifier: " + parentGroup.conforming.name + " in class " + oneClass.name);
                        }
                    }
                    if (!nonConforming) {
                        conformingCount++;
                    }
                    parentGroup.parents.forEach(function (parent) {
                        // POINT 2
                        allParents.push(parent);
                        if (parent.parentType.baseType.isFrozen && nonConforming) {
                            analysisContext.errors.noFrozenParent(oneClass, parent);
                        }
                    });
                });
                if (conformingCount == 0) {
                    analysisContext.errors.noConformingParent(oneClass);
                }
                oneClass.ancestorTypesByBaseType.forEach(function (typesWithSameBase) {
                    pairs(typesWithSameBase).forEach(function (a) {
                        if (a[0].differentGenericDerivationThan(a[1])) {
                            debugger;
                            a[0].differentGenericDerivationThan(a[1]);
                            analysisContext.errors.differentGenericDerivations(oneClass, a[0], a[1]);
                        }
                    });
                });
            });
        };
        function traverseInheritance(f, analysisContext) {
            var classes = analysisContext.allClasses;
            var seen = new Set();
            function processClass(clazz) {
                if (!seen.has(clazz)) {
                    seen.add(clazz);
                    if (clazz.inheritsFromCyclicInheritance) {
                        return;
                    }
                    if (clazz.hasCyclicInheritance) {
                        return;
                    }
                    // Good to go, not in any cycles
                    // Make sure all parents have been processed
                    clazz.ast.parentGroups.forEach(function (parentGroup) {
                        parentGroup.parents.forEach(function (parent) {
                            processClass(parent.parentType.baseType);
                        });
                    });
                    f(clazz);
                }
            }
            processClass(analysisContext.classWithName("ANY"));
            classes.forEach(processClass);
        }
        semantics.traverseInheritance = traverseInheritance;
        function gatherAncestors(oneClass) {
            var genericInstances = oneClass.genericParametersInOrder.map(function (genericParam) {
                return new eiffel.symbols.TypeInstance(genericParam, [], oneClass);
            });
            oneClass.ancestorTypes.push(new eiffel.symbols.TypeInstance(oneClass, genericInstances, oneClass));
            oneClass.parentTypes.forEach(function (parentType) {
                var substitutedAncestors = parentType.baseType.ancestorTypes.map(function (ancestorType) {
                    return parentType.substitute(ancestorType);
                });
                Array.prototype.push.apply(oneClass.ancestorTypes, substitutedAncestors);
            });
            oneClass.ancestorTypes.forEach(function (ancestorType) {
                var key = ancestorType.baseType;
                if (!oneClass.ancestorTypesByBaseType.has(key)) {
                    oneClass.ancestorTypesByBaseType.set(key, []);
                }
                oneClass.ancestorTypesByBaseType.get(key).push(ancestorType);
            });
        }
        semantics.gatherAncestors = gatherAncestors;
        function inheritFeatures(oneClass) {
            var inheritedFeatures = [];
            oneClass.parentTypes.forEach(function (ancestorType) {
                if (ancestorType.baseType === oneClass) {
                    console.error("Parents should not contain itself");
                    debugger;
                } else {}
            });
            var genericInstances = oneClass.genericParametersInOrder.map(function (genericParam) {
                return new eiffel.symbols.TypeInstance(genericParam, [], oneClass);
            });
            oneClass.ancestorTypes.push(new eiffel.symbols.TypeInstance(oneClass, genericInstances, oneClass));
            oneClass.parentTypes.forEach(function (parentType) {
                var substitutedAncestors = parentType.baseType.ancestorTypes.map(function (ancestorType) {
                    return parentType.substitute(ancestorType);
                });
                Array.prototype.push.apply(oneClass.ancestorTypes, substitutedAncestors);
            });
            oneClass.ancestorTypes.forEach(function (ancestorType) {
                var key = ancestorType.baseType;
                if (!oneClass.ancestorTypesByBaseType.has(key)) {
                    oneClass.ancestorTypesByBaseType.set(key, []);
                }
                oneClass.ancestorTypesByBaseType.get(key).push(ancestorType);
            });
        }
        semantics.inheritFeatures = inheritFeatures;
        function analyze() {
            var manyAsts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                manyAsts[_i - 0] = arguments[_i];
            }
            var parse = function parse(builtinSource) {
                try {
                    return eiffel.parser.parse(builtinSource.content);
                } catch (e) {
                    parseError(builtinSource, e);
                    throw e;
                }
            };
            Array.prototype.push.apply(manyAsts, __eiffel_builtin.map(parse));
            var asts = Array.prototype.concat.apply([], manyAsts);
            var analysisContext = new AnalysisContext();
            createClassSymbols(asts, analysisContext);
            initGenericParamSyms(analysisContext);
            initAstDictionary(analysisContext);
            initAstDictionaryByClass(analysisContext);
            createFeatureSymbols(analysisContext);
            createRoutineParamSymbols(analysisContext.allRoutines);
            createRoutineLocalSymbols(analysisContext);
            checkCyclicInheritance(analysisContext);
            initParentTypeInstancesAndValidate(analysisContext);
            traverseInheritance(gatherAncestors, analysisContext);
            checkValidty_8_6_13_parent_rule(analysisContext);
            traverseInheritance(inheritFeatures, analysisContext);
            analysisContext.allClasses.forEach(function (oneClass) {
                oneClass.ast.parentGroups.forEach(function (parentGroup) {
                    parentGroup.parents.forEach(function (parent) {
                        validateTypeInstance(parent.parentType, analysisContext);
                    });
                });
            });
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.declaredFeatures.forEach(function (fSym) {
                    if (!fSym.isCommand) {
                        fSym.typeInstance = makeTypeInstanceIn(classSymbol, fSym.ast.rawType, analysisContext);
                    }
                });
            });
            handDownFeatures(analysisContext);
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.creationClause.forEach(function (identifier) {
                    var name = identifier.name;
                    if (classSymbol.declaredProcedures.has(name)) {
                        classSymbol.creationProcedures.set(name, classSymbol.declaredProcedures.get(name));
                    } else if (classSymbol.declaredFunctions.has(name)) {
                        analysisContext.errors.uncategorized("Functions cannot be used as creation procedures " + name);
                    } else {
                        analysisContext.errors.uncategorized("There is no procedure with name " + name);
                    }
                });
            });
            var newVar = {
                asts: asts,
                errors: analysisContext.errors,
                context: analysisContext };
            return newVar;
        }
        semantics.analyze = analyze;
        var AnalysisContext = (function () {
            function AnalysisContext() {
                this.classSymbols = new Map();
                this.allFunctions = [];
                this.allProcedures = [];
                this.allRoutines = [];
                this.allClasses = [];
                this.astDictionary = new Map();
                this.typeInstances = [];
                this.errors = new ErrorContext();
            }
            AnalysisContext.prototype.allWithPrototype = function (prototype) {
                if (this.astDictionary.has(prototype)) {
                    return this.astDictionary.get(prototype);
                } else {
                    console.error("Prototype is not a key", prototype, this.astDictionary);
                    throw new Error("Prototype is not a key" + prototype);
                }
            };
            AnalysisContext.prototype.classWithName = function (name) {
                var lowerCaseName = this.redirectToSized(name).toLowerCase();
                if (this.classSymbols.has(lowerCaseName)) {
                    return this.classSymbols.get(lowerCaseName);
                } else {
                    throw new Error("There is no class with name: " + name);
                }
            };
            AnalysisContext.prototype.hasClass = function (name) {
                var lowerCaseName = this.redirectToSized(name).toLowerCase();
                return this.classSymbols.has(lowerCaseName);
            };
            AnalysisContext.prototype.redirectToSized = function (name) {
                var mapping = {
                    integer: "INTEGER_32" };
                var lowerCaseName = name.toLowerCase();
                if (mapping.hasOwnProperty(lowerCaseName)) {
                    return mapping[lowerCaseName];
                } else {
                    return name;
                }
            };
            return AnalysisContext;
        })();
        semantics.AnalysisContext = AnalysisContext;
        var ErrorContext = (function () {
            function ErrorContext() {
                this.errors = [];
            }
            ErrorContext.prototype.add = function (kind, message, ast) {
                var entireMessage = SemanticErrorKind[kind] + ": " + message;
                console.error(entireMessage, ast);
                this.errors.push(entireMessage);
            };
            ErrorContext.prototype.unknownClass = function (identifier) {
                this.add(3, /* UnknownClass */identifier.name, identifier);
            };
            ErrorContext.prototype.duplicateFeature = function (identifier) {
                this.add(0, /* DuplicateFeatureName */identifier.name, identifier);
            };
            ErrorContext.prototype.duplicateGenericParameter = function (identifier) {
                this.add(5, /* DuplicateGenericParameter */identifier.name, identifier);
            };
            ErrorContext.prototype.inheritanceCycle = function (descendants) {
                /**
                 * We want to have the first element as last one too, to make clear that it's a cycle
                 */
                descendants.push(descendants[0]);
                /**
                 * Also add second element (might also be first element because of push() above^
                 */
                descendants.push(descendants[1]);
                this.add(4, /* InheritanceCycle */"... -> " + _.pluck(descendants, "name").join(" -> ") + " -> ...");
            };
            ErrorContext.prototype.uncategorized = function (message) {
                this.errors.push(message);
            };
            ErrorContext.prototype.noConformingParent = function (oneClass) {
                this.add(6, /* NoConformingParents */"No conforming inheritance part found in class" + oneClass.name);
            };
            ErrorContext.prototype.noFrozenParent = function (sourceClass, parent) {
                this.add(7, /* CannotExtendFrozenClass */sourceClass.name + " is trying to extend a frozen class", parent);
            };
            ErrorContext.prototype.differentGenericDerivations = function (oneClass, deriv1, deriv2) {
                this.add(8, /* TwoAncestorsWithDifferentGenericDerivations */"For class " + oneClass.name + ": " + deriv1.repr + ", " + deriv2.repr);
            };
            return ErrorContext;
        })();
        var SemanticVisitor = (function (_super) {
            __extends(SemanticVisitor, _super);
            function SemanticVisitor(analysisContext) {
                _super.call(this);
                this.analysisContext = analysisContext;
                this.classSymbols = analysisContext.classSymbols;
            }
            return SemanticVisitor;
        })(eiffel.ast.Visitor);
        (function (SemanticErrorKind) {
            SemanticErrorKind[SemanticErrorKind.DuplicateFeatureName = 0] = "DuplicateFeatureName";
            SemanticErrorKind[SemanticErrorKind.DuplicateParameterName = 1] = "DuplicateParameterName";
            SemanticErrorKind[SemanticErrorKind.DuplicateClassName = 2] = "DuplicateClassName";
            SemanticErrorKind[SemanticErrorKind.UnknownClass = 3] = "UnknownClass";
            SemanticErrorKind[SemanticErrorKind.InheritanceCycle = 4] = "InheritanceCycle";
            SemanticErrorKind[SemanticErrorKind.DuplicateGenericParameter = 5] = "DuplicateGenericParameter";
            SemanticErrorKind[SemanticErrorKind.NoConformingParents = 6] = "NoConformingParents";
            SemanticErrorKind[SemanticErrorKind.CannotExtendFrozenClass = 7] = "CannotExtendFrozenClass";
            SemanticErrorKind[SemanticErrorKind.TwoAncestorsWithDifferentGenericDerivations = 8] = "TwoAncestorsWithDifferentGenericDerivations";
        })(semantics.SemanticErrorKind || (semantics.SemanticErrorKind = {}));
        var SemanticErrorKind = semantics.SemanticErrorKind;
        var FeatureDiscovery = (function (_super) {
            __extends(FeatureDiscovery, _super);
            function FeatureDiscovery(analysisContext, classSymbol) {
                _super.call(this, analysisContext);
                this.classSymbol = classSymbol;
            }
            FeatureDiscovery.prototype.vAttr = function (attr, _) {
                attr.frozenNamesAndAliases.map(function (fna) {
                    var name = fna.name.name;
                    var lcName = name.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen, attr);
                    attr.sym = attributeSymbol;
                    this.classSymbol.declaredFeatures.set(lcName, attributeSymbol);
                    this.classSymbol.declaredAttributes.set(lcName, attributeSymbol);
                }, this);
                //return super.vAttr(attr, this.classSymbol);
            };
            FeatureDiscovery.prototype.vFunction = function (func, _) {
                func.frozenNamesAndAliases.map(function (fna) {
                    var functionName = fna.name.name;
                    var lcFunctionName = functionName.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcFunctionName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var sym = new eiffel.symbols.FunctionSymbol(lcFunctionName, alias, fna.frozen, func);
                    func.sym = sym;
                    this.classSymbol.declaredFeatures.set(lcFunctionName, sym);
                    this.classSymbol.declaredFunctions.set(lcFunctionName, sym);
                    this.classSymbol.declaredRoutines.set(lcFunctionName, sym);
                    this.analysisContext.allFunctions.push(sym);
                    this.analysisContext.allRoutines.push(sym);
                }, this);
                //return super.vFunction(func, this.classSymbol);
            };
            FeatureDiscovery.prototype.errorOnDuplicateFeature = function (classSymbol, featureName, identifier) {
                if (classSymbol.hasSymbol(featureName)) {
                    this.analysisContext.errors.duplicateFeature(identifier);
                }
            };
            FeatureDiscovery.prototype.vProcedure = function (procedure, _) {
                procedure.frozenNamesAndAliases.map(function (fna) {
                    var procedureName = fna.name.name;
                    var lcProcedureName = procedureName.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcProcedureName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var sym = new eiffel.symbols.ProcedureSymbol(procedureName, alias, fna.frozen, procedure);
                    procedure.sym = sym;
                    this.classSymbol.declaredFeatures.set(lcProcedureName, sym);
                    this.classSymbol.declaredProcedures.set(lcProcedureName, sym);
                    this.classSymbol.declaredRoutines.set(lcProcedureName, sym);
                    this.analysisContext.allProcedures.push(sym);
                    this.analysisContext.allRoutines.push(sym);
                }, this);
                //return super.vProcedure(procedure, this.classSymbol);
            };
            FeatureDiscovery.prototype.vConstantAttribute = function (constantAttribute, _) {
                constantAttribute.frozenNamesAndAliases.map(function (fna) {
                    var name = fna.name.name;
                    var lcName = name.toLowerCase();
                    this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);
                    var alias = null;
                    if (fna.alias != null) {
                        alias = fna.alias.name.value;
                    }
                    var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen, constantAttribute);
                    constantAttribute.sym = attributeSymbol;
                    this.classSymbol.declaredFeatures.set(lcName, attributeSymbol);
                    this.classSymbol.declaredAttributes.set(lcName, attributeSymbol);
                }, this);
                //return super.vConstantAttribute(constantAttribute, this.classSymbol);
            };
            return FeatureDiscovery;
        })(SemanticVisitor);
        var AstToDictionaryByPrototype = (function (_super) {
            __extends(AstToDictionaryByPrototype, _super);
            function AstToDictionaryByPrototype() {
                _super.apply(this, arguments);
            }
            AstToDictionaryByPrototype.prototype.vDefault = function (ast, arg) {
                var prototype = Object.getPrototypeOf(ast);
                if (arg.has(prototype)) {
                    arg.get(prototype).push(ast);
                } else {
                    arg.set(prototype, [ast]);
                }
                return _super.prototype.vDefault.call(this, ast, arg);
            };
            return AstToDictionaryByPrototype;
        })(SemanticVisitor);
        var FeatureTypeConnector = (function (_super) {
            __extends(FeatureTypeConnector, _super);
            function FeatureTypeConnector() {
                _super.apply(this, arguments);
            }
            return FeatureTypeConnector;
        })(SemanticVisitor);
    })(semantics = eiffel.semantics || (eiffel.semantics = {}));
})(eiffel || (eiffel = {}));

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var symbols;
    (function (symbols) {
        var Symbol = (function () {
            function Symbol(name) {
                this.name = name;
                this.lowerCaseName = name.toLowerCase();
            }
            return Symbol;
        })();
        symbols.Symbol = Symbol;
        var FeatureSymbol = (function (_super) {
            __extends(FeatureSymbol, _super);
            function FeatureSymbol(name, alias, isFrozen, ast) {
                _super.call(this, name);
                this.alias = alias;
                this.isFrozen = isFrozen;
                this.ast = ast;
                this.isCommand = this.ast.rawType == null;
            }
            return FeatureSymbol;
        })(Symbol);
        symbols.FeatureSymbol = FeatureSymbol;
        var RoutineSymbol = (function (_super) {
            __extends(RoutineSymbol, _super);
            function RoutineSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen, ast);
                this.locals = [];
                this.localsAndParamsByName = new Map();
                this.paramsInOrder = [];
            }
            return RoutineSymbol;
        })(FeatureSymbol);
        symbols.RoutineSymbol = RoutineSymbol;
        var FunctionSymbol = (function (_super) {
            __extends(FunctionSymbol, _super);
            function FunctionSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen, ast);
            }
            return FunctionSymbol;
        })(RoutineSymbol);
        symbols.FunctionSymbol = FunctionSymbol;
        var ProcedureSymbol = (function (_super) {
            __extends(ProcedureSymbol, _super);
            function ProcedureSymbol(name, alias, frozen, ast) {
                _super.call(this, name, alias, frozen, ast);
            }
            return ProcedureSymbol;
        })(RoutineSymbol);
        symbols.ProcedureSymbol = ProcedureSymbol;
        var AttributeSymbol = (function (_super) {
            __extends(AttributeSymbol, _super);
            function AttributeSymbol(name, alias, frozen, attr) {
                _super.call(this, name, alias, frozen, attr);
            }
            return AttributeSymbol;
        })(FeatureSymbol);
        symbols.AttributeSymbol = AttributeSymbol;
        var VariableSymbol = (function (_super) {
            __extends(VariableSymbol, _super);
            function VariableSymbol(name, ast) {
                _super.call(this, name);
                this.ast = ast;
            }
            return VariableSymbol;
        })(Symbol);
        symbols.VariableSymbol = VariableSymbol;
        var ClassSymbol = (function (_super) {
            __extends(ClassSymbol, _super);
            function ClassSymbol(name, ast) {
                _super.call(this, name);
                this.declaredFeatures = new Map();
                this.declaredFunctions = new Map();
                this.declaredProcedures = new Map();
                this.declaredRoutines = new Map();
                this.declaredAttributes = new Map();
                this.creationProcedures = new Map();
                this.inheritedFeatures = [];
                this.finalFeatures = new Map();
                this.ancestorTypes = [];
                this.ancestorTypesByBaseType = new Map();
                this.parentTypes = [];
                this.hasCyclicInheritance = false;
                this.inheritsFromCyclicInheritance = false;
                this.genericParametersInOrder = [];
                this.genericParametersByName = new Map();
                this.ast = ast;
            }
            ClassSymbol.prototype.genericParameterWithName = function (name) {
                var lcName = name.toLowerCase();
                if (this.hasGenericParameterWithName(name)) {
                    return this.genericParametersByName.get(lcName);
                } else {
                    throw new Error("No Generic Parameter by name " + name + " in class " + this.name);
                }
            };
            ClassSymbol.prototype.hasGenericParameterWithName = function (name) {
                return this.genericParametersByName.has(name.toLowerCase());
            };
            ClassSymbol.prototype.hasSymbol = function (name) {
                var lcName = name.toLowerCase();
                if (this.declaredRoutines.has(lcName)) {
                    return true;
                }
                if (this.declaredAttributes.has(lcName)) {
                    return true;
                }
                return false;
            };
            ClassSymbol.prototype.resolveSymbol = function (name) {
                var lcName = name.toLowerCase();
                if (this.declaredRoutines.has(lcName)) {
                    return this.declaredRoutines.get(lcName);
                }
                if (this.declaredAttributes.has(lcName)) {
                    return this.declaredAttributes.get(lcName);
                }
                throw new Error("Symbol " + name + " does not exist in class " + this.name + ".");
            };
            return ClassSymbol;
        })(Symbol);
        symbols.ClassSymbol = ClassSymbol;
        var FinalFeature = (function () {
            function FinalFeature() {}
            return FinalFeature;
        })();
        symbols.FinalFeature = FinalFeature;
        var TypeInstance = (function () {
            function TypeInstance(baseType, typeParameters, sourceClass) {
                this.baseType = baseType;
                this.typeParameters = typeParameters;
                this.typeParameters.forEach(function (typeParam) {
                    if (typeParam === undefined) {
                        debugger;
                    }
                });
                if (this.baseType instanceof TypeInstance) {
                    debugger;
                }
                this.sourceClass = sourceClass;
                this.repr = this.baseType.name;
                if (this.typeParameters.length >= 1) {
                    this.repr += "[" + _.pluck(this.typeParameters, "repr").join(", ") + "]";
                }
            }
            TypeInstance.prototype.toString = function () {
                return this.repr;
            };
            /**
             * Performs generic substitution of a formal generic parameter with its corresponding type instance
             *
             * Returns type if it isn't a generic parameter
             */
            TypeInstance.prototype.substitute = function (typeInstance) {
                var _this = this;
                var substSymbol = function substSymbol(symbol) {
                    if (_this.baseType.hasGenericParameterWithName(symbol.name)) {
                        var formalGenericParam = _this.baseType.genericParameterWithName(symbol.name);
                        var indexOfGenericParam = _this.baseType.genericParametersInOrder.indexOf(formalGenericParam);
                        return _this.typeParameters[indexOfGenericParam];
                    } else {
                        return symbol;
                    }
                };
                var substBaseSymbol = substSymbol(typeInstance.baseType);
                var substTypeParams = typeInstance.typeParameters.map(this.substitute, this);
                if (substBaseSymbol instanceof TypeInstance) {
                    if (substTypeParams.length >= 1) {
                        throw new Error("Higher order polymorphism detected");
                    }
                    return substBaseSymbol;
                } else if (substBaseSymbol instanceof ClassSymbol) {
                    return new TypeInstance(substBaseSymbol, substTypeParams, this.sourceClass);
                } else {
                    console.error("This case should not happen", substBaseSymbol);
                    debugger;
                }
            };
            TypeInstance.prototype.equals = function (other) {
                if (this.baseType != other.baseType) {
                    return false;
                } else {
                    if (this.typeParameters.length != other.typeParameters.length) {
                        throw new Error("Invalid State: both should have same amount of type parameters");
                    }
                    var isEqual = true;
                    this.typeParameters.forEach(function (typeParam, i) {
                        if (!typeParam.equals(other.typeParameters[i])) {
                            isEqual = false;
                        }
                    });
                    return isEqual;
                }
            };
            TypeInstance.prototype.differentGenericDerivationThan = function (other) {
                if (this.baseType != other.baseType) {
                    return false;
                } else {
                    if (this.typeParameters.length != other.typeParameters.length) {
                        throw new Error("Invalid State: both should have same amount of type parameters");
                    }
                    var isDifferent = false;
                    this.typeParameters.forEach(function (typeParam, i) {
                        if (!typeParam.equals(other.typeParameters[i])) {
                            isDifferent = true;
                        }
                    });
                    return isDifferent;
                }
            };
            return TypeInstance;
        })();
        symbols.TypeInstance = TypeInstance;
    })(symbols = eiffel.symbols || (eiffel.symbols = {}));
})(eiffel || (eiffel = {}));
//# sourceMappingURL=data:application/json;base64,