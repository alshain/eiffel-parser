var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var ast;(function(_ast){var sym=eiffel.symbols;var Source=(function(){function Source(){}return Source;})();_ast.Source = Source;function duplicateAll(es){if(es == null){return null;}return es.map(function(ast){if(ast == null){return null;}return ast.deepClone();});}function deepClone(e){if(e == null){return null;}else {return e.deepClone();}}var AST=(function(){function AST(impl){this._acceptor = impl;this.children = [];}AST.prototype.deepClone = function(){console.error("Should not call this method, missing override in: " + this.constructor.name);debugger;};return AST;})();_ast.AST = AST;var Identifier=(function(_super){__extends(Identifier, _super);function Identifier(name, start, end){_super.call(this, this);this.name = name;this.start = start;this.end = end;}Identifier.prototype.accept = function(visitor, arg){return visitor.vIdentifier(this, arg);};Identifier.prototype.deepClone = function(){return new Identifier(this.name, deepClone(this.start), deepClone(this.end));};return Identifier;})(AST);_ast.Identifier = Identifier;var Token=(function(_super){__extends(Token, _super);function Token(text, start, end){_super.call(this, this);this.text = text;this.start = start;this.end = end;}Token.prototype.accept = function(visitor, arg){return visitor.vToken(this, arg);};Token.prototype.deepClone = function(){return new Token(this.text, deepClone(this.start), deepClone(this.end));};return Token;})(AST);_ast.Token = Token;var Pos=(function(){function Pos(offset){this.offset = offset;}Pos.prototype.deepClone = function(){return new Pos(this.offset);};return Pos;})();_ast.Pos = Pos;var Class=(function(_super){__extends(Class, _super);function Class(name, deferred, frozen, expanded, note, parentGroups, generics, creationClauses, featureLists, start, end){_super.call(this, this);this.name = name;this.deferred = deferred;this.frozen = frozen;this.expanded = expanded;this.children.push(name, deferred, frozen, expanded);this.parentGroups = parentGroups;Array.prototype.push.apply(this.children, parentGroups);this.genericParameters = generics;Array.prototype.push.apply(this.children, generics);this.creationClauses = creationClauses;Array.prototype.push.apply(this.children, creationClauses);this.featureLists = featureLists;Array.prototype.push.apply(this.children, featureLists);this.dictionary = new Map();this.start = start;this.end = end;}Class.prototype.byType = function(prototype){return this.dictionary.get(prototype);};Class.prototype.accept = function(visitor, arg){return visitor.vClass(this, arg);};Class.prototype.duplicate = function(){return new Class(deepClone(this.name), deepClone(this.deferred), deepClone(this.frozen), deepClone(this.expanded), null, duplicateAll(this.parentGroups), duplicateAll(this.genericParameters), duplicateAll(this.creationClauses), duplicateAll(this.featureLists), deepClone(this.start), deepClone(this.end));};return Class;})(AST);_ast.Class = Class;var CreationClause=(function(_super){__extends(CreationClause, _super);function CreationClause(clients, features, start, end){_super.call(this, this);this.clients = clients;this.features = features;this.start = start;this.end = end;Array.prototype.push.apply(this.children, this.clients);Array.prototype.push.apply(this.children, this.features);}CreationClause.prototype.accept = function(visitor, arg){return visitor.vCreationClause(this, arg);};CreationClause.prototype.deepClone = function(){return new CreationClause(duplicateAll(this.clients), duplicateAll(this.features), deepClone(this.start), deepClone(this.end));};return CreationClause;})(AST);_ast.CreationClause = CreationClause;var FormalGenericParameter=(function(_super){__extends(FormalGenericParameter, _super);function FormalGenericParameter(name, constraints, creators){_super.call(this, this);this.name = name;this.constraints = constraints;this.creators = creators;this.children.push(name);Array.prototype.push.apply(this.children, constraints);Array.prototype.push.apply(this.children, creators);}FormalGenericParameter.prototype.accept = function(visitor, arg){return visitor.vFormalGenericParameter(this, arg);};FormalGenericParameter.prototype.deepClone = function(){return new FormalGenericParameter(deepClone(this.name), duplicateAll(this.constraints), duplicateAll(this.creators));};return FormalGenericParameter;})(AST);_ast.FormalGenericParameter = FormalGenericParameter;var TypeConstraint=(function(_super){__extends(TypeConstraint, _super);function TypeConstraint(rt, rename){_super.call(this, this);this.rt = rt;this.rename = rename;this.children.push(rt, rename);}TypeConstraint.prototype.accept = function(visitor, arg){return visitor.vTypeConstraint(this, arg);};TypeConstraint.prototype.deepClone = function(){return new TypeConstraint(deepClone(this.rt), deepClone(this.rename));};return TypeConstraint;})(AST);_ast.TypeConstraint = TypeConstraint;var FeatureList=(function(_super){__extends(FeatureList, _super);function FeatureList(exports, features, start, end){_super.call(this, this);this.exports = exports;Array.prototype.push.apply(this.children, exports);this.features = features;Array.prototype.push.apply(this.children, features);this.start = start;this.end = end;}FeatureList.prototype.accept = function(visitor, arg){return visitor.vFeatureList(this, arg);};FeatureList.prototype.deepClone = function(){return new FeatureList(duplicateAll(this.exports), duplicateAll(this.features), deepClone(this.start), deepClone(this.end));};return FeatureList;})(AST);_ast.FeatureList = FeatureList;var IdentifierAccess=(function(_super){__extends(IdentifierAccess, _super);function IdentifierAccess(identifier){_super.call(this, this);this.identifier = identifier;this.start = identifier.start;this.end = identifier.end;this.children.push(this.identifier);}IdentifierAccess.prototype.accept = function(visitor, arg){return visitor.vIdentifierAccess(this, arg);};IdentifierAccess.prototype.deepClone = function(){return new IdentifierAccess(deepClone(this.identifier));};return IdentifierAccess;})(AST);_ast.IdentifierAccess = IdentifierAccess;var ExtendedFeatureName=(function(_super){__extends(ExtendedFeatureName, _super);function ExtendedFeatureName(name, alias, start, end){_super.call(this, this);this.name = name;this.alias = alias;this.children.push(this.name, this.alias);this.start = start;this.end = end;}ExtendedFeatureName.prototype.accept = function(visitor, arg){return visitor.vExtendedFeatureName(this, arg);};ExtendedFeatureName.prototype.deepClone = function(){return new ExtendedFeatureName(deepClone(this.name), deepClone(this.alias), deepClone(this.start), deepClone(this.end));};return ExtendedFeatureName;})(AST);_ast.ExtendedFeatureName = ExtendedFeatureName;var FrozenNameAlias=(function(_super){__extends(FrozenNameAlias, _super);function FrozenNameAlias(name, alias, frozen, start, end){_super.call(this, name, alias, start, end);this.frozen = frozen;}FrozenNameAlias.prototype.accept = function(visitor, arg){return visitor.vFrozenNameAlias(this, arg);};FrozenNameAlias.prototype.deepClone = function(){return new FrozenNameAlias(deepClone(this.name), deepClone(this.alias), deepClone(this.frozen), deepClone(this.start), deepClone(this.end));};return FrozenNameAlias;})(ExtendedFeatureName);_ast.FrozenNameAlias = FrozenNameAlias;var Routine=(function(_super){__extends(Routine, _super);function Routine(frozenNamesAndAliases, parameters, rawType, bodyElements, start, end){_super.call(this, this);this.frozenNamesAndAliases = frozenNamesAndAliases;this.parameters = parameters;this.bodyElements = bodyElements;this.rawType = rawType;Array.prototype.push.apply(this.children, frozenNamesAndAliases);Array.prototype.push.apply(this.children, parameters);Array.prototype.push.apply(this.children, this.aliases);this.children.push(this.rawType);Array.prototype.push.apply(this.children, bodyElements);this.start = start;this.end = end;}Routine.prototype.accept = function(visitor, arg){return visitor.vRoutine(this, arg);};Routine.prototype.deepClone = function(){return new Routine(duplicateAll(this.frozenNamesAndAliases), duplicateAll(this.parameters), deepClone(this.rawType), duplicateAll(this.bodyElements), deepClone(this.start), deepClone(this.end));};return Routine;})(AST);_ast.Routine = Routine;var LocalsBlock=(function(_super){__extends(LocalsBlock, _super);function LocalsBlock(localToken, linesOfVarDeclLists, start, end){_super.call(this, this);this.localToken = localToken;this.children.push(this.localToken);this.linesOfVarDeclLists = linesOfVarDeclLists;this.varDeclLists = eiffel.util.flatten(linesOfVarDeclLists);Array.prototype.push.apply(this.children, this.varDeclLists);this.start = start;this.end = end;}LocalsBlock.prototype.accept = function(visitor, arg){return visitor.vLocalsBlock(this, arg);};LocalsBlock.prototype.deepClone = function(){return new LocalsBlock(deepClone(this.localToken), this.linesOfVarDeclLists.map(duplicateAll), deepClone(this.start), deepClone(this.end));};return LocalsBlock;})(AST);_ast.LocalsBlock = LocalsBlock;var VarDeclList=(function(_super){__extends(VarDeclList, _super);function VarDeclList(varDecls, rawType){var _this=this;_super.call(this, this);this.varDecls = varDecls;this.rawType = rawType;varDecls.forEach(function(varDecl){varDecl.varDeclList = _this;});Array.prototype.push.apply(this.children, varDecls);this.children.push(rawType);}VarDeclList.prototype.accept = function(visitor, arg){return visitor.vVarDeclList(this, arg);};VarDeclList.prototype.deepClone = function(){return new VarDeclList(duplicateAll(this.varDecls), deepClone(this.rawType));};return VarDeclList;})(AST);_ast.VarDeclList = VarDeclList;var VarDeclEntry=(function(_super){__extends(VarDeclEntry, _super);function VarDeclEntry(name){_super.call(this, this);this.name = name;this.children.push(name);}VarDeclEntry.prototype.accept = function(visitor, arg){return visitor.vVarDeclEntry(this, arg);};VarDeclEntry.prototype.deepClone = function(){return new VarDeclEntry(deepClone(this.name));};return VarDeclEntry;})(AST);_ast.VarDeclEntry = VarDeclEntry;var Type=(function(_super){__extends(Type, _super);function Type(name, parameters, detachable, start, end){_super.call(this, this);this.name = name;this.parameters = parameters;this.detachable = detachable;this.start = start;this.end = end;this.children.push(name);Array.prototype.push.apply(this.children, parameters);}Type.prototype.accept = function(visitor, arg){return visitor.vType(this, arg);};Type.prototype.toString = function(){var text=this.name.name;if(this.parameters !== null){text += "[" + this.parameters.join(", ") + "]";}return text;};Type.prototype.deepClone = function(){return new Type(deepClone(this.name), duplicateAll(this.parameters), this.detachable, deepClone(this.start), deepClone(this.end));};return Type;})(AST);_ast.Type = Type;var TupleExpression=(function(_super){__extends(TupleExpression, _super);function TupleExpression(expressions, start, end){_super.call(this, this);this.expressions = expressions;this.start = start;this.end = end;Array.prototype.push.apply(this.children, expressions);}TupleExpression.prototype.accept = function(visitor, arg){return visitor.vTupleExpression(this, arg);};TupleExpression.prototype.deepClone = function(){return new TupleExpression(duplicateAll(this.expressions), deepClone(this.start), deepClone(this.end));};return TupleExpression;})(AST);_ast.TupleExpression = TupleExpression;var NonObjectCall=(function(_super){__extends(NonObjectCall, _super);function NonObjectCall(rt, featureName, start, end){_super.call(this, this);this.rt = rt;this.featureName = featureName;this.children.push(this.rt, this.featureName);this.start = start;this.end = end;}NonObjectCall.prototype.accept = function(visitor, arg){return visitor.vNonObjectCall(this, arg);};NonObjectCall.prototype.deepClone = function(){return new NonObjectCall(deepClone(this.rt), deepClone(this.featureName), deepClone(this.start), deepClone(this.end));};return NonObjectCall;})(AST);_ast.NonObjectCall = NonObjectCall;var TypeExpression=(function(_super){__extends(TypeExpression, _super);function TypeExpression(rt, start, end){_super.call(this, this);this.rt = rt;this.children.push(this.rt);this.start = start;this.end = end;}TypeExpression.prototype.accept = function(visitor, arg){return visitor.vTypeExpression(this, arg);};TypeExpression.prototype.deepClone = function(){return new TypeExpression(deepClone(this.rt), deepClone(this.start), deepClone(this.end));};return TypeExpression;})(AST);_ast.TypeExpression = TypeExpression;var Function=(function(_super){__extends(Function, _super);function Function(){_super.apply(this, arguments);}Function.prototype.accept = function(visitor, arg){return visitor.vFunction(this, arg);};Function.prototype.deepClone = function(){return new Function(duplicateAll(this.frozenNamesAndAliases), duplicateAll(this.parameters), deepClone(this.rawType), duplicateAll(this.bodyElements), deepClone(this.start), deepClone(this.end));};return Function;})(Routine);_ast.Function = Function;var Procedure=(function(_super){__extends(Procedure, _super);function Procedure(){_super.apply(this, arguments);}Procedure.prototype.accept = function(visitor, arg){return visitor.vProcedure(this, arg);};Procedure.prototype.deepClone = function(){return new Procedure(duplicateAll(this.frozenNamesAndAliases), duplicateAll(this.parameters), null, duplicateAll(this.bodyElements), deepClone(this.start), deepClone(this.end));};return Procedure;})(Routine);_ast.Procedure = Procedure;var RoutineInstructions=(function(_super){__extends(RoutineInstructions, _super);function RoutineInstructions(token, instructions, start, end){_super.call(this, this);this.instructions = instructions;this.start = start;this.end = end;this.token = token;this.children.push(token);Array.prototype.push.apply(this.children, this.instructions);}RoutineInstructions.prototype.accept = function(visitor, arg){if(true){console.error("Should not call this method, missing override in: " + this.constructor.name);debugger;throw new Error("Should not call this method, missing override in: " + this.constructor.name);}else {return null;}};return RoutineInstructions;})(AST);_ast.RoutineInstructions = RoutineInstructions;var DoBlock=(function(_super){__extends(DoBlock, _super);function DoBlock(){_super.apply(this, arguments);}DoBlock.prototype.accept = function(visitor, arg){return visitor.vDoBlock(this, arg);};DoBlock.prototype.deepClone = function(){return new DoBlock(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return DoBlock;})(RoutineInstructions);_ast.DoBlock = DoBlock;var DeferredBlock=(function(_super){__extends(DeferredBlock, _super);function DeferredBlock(){_super.apply(this, arguments);}DeferredBlock.prototype.accept = function(visitor, arg){return visitor.vDeferredBlock(this, arg);};DeferredBlock.prototype.deepClone = function(){return new DeferredBlock(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return DeferredBlock;})(RoutineInstructions);_ast.DeferredBlock = DeferredBlock;var OnceBlock=(function(_super){__extends(OnceBlock, _super);function OnceBlock(){_super.apply(this, arguments);}OnceBlock.prototype.accept = function(visitor, arg){return visitor.vOnceBlock(this, arg);};OnceBlock.prototype.deepClone = function(){return new OnceBlock(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return OnceBlock;})(RoutineInstructions);_ast.OnceBlock = OnceBlock;var ExternalBlock=(function(_super){__extends(ExternalBlock, _super);function ExternalBlock(){_super.apply(this, arguments);}ExternalBlock.prototype.accept = function(visitor, arg){return visitor.vExternalBlock(this, arg);};ExternalBlock.prototype.deepClone = function(){return new ExternalBlock(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return ExternalBlock;})(RoutineInstructions);_ast.ExternalBlock = ExternalBlock;var ObsoleteBlock=(function(_super){__extends(ObsoleteBlock, _super);function ObsoleteBlock(){_super.apply(this, arguments);}ObsoleteBlock.prototype.accept = function(visitor, arg){return visitor.vObsoleteBlock(this, arg);};ObsoleteBlock.prototype.deepClone = function(){return new ObsoleteBlock(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return ObsoleteBlock;})(RoutineInstructions);_ast.ObsoleteBlock = ObsoleteBlock;var ConditionBlock=(function(_super){__extends(ConditionBlock, _super);function ConditionBlock(t1, t2, conditions, start, end){_super.call(this, this);this.conditions = conditions;this.start = start;this.end = end;Array.prototype.push.apply(this.children, this.conditions);}ConditionBlock.prototype.accept = function(visitor, arg){if(true){console.error("Should not call this method, missing override in: " + this.constructor.name);debugger;throw new Error("Should not call this method, missing override in: " + this.constructor.name);}else {return null;}};return ConditionBlock;})(AST);_ast.ConditionBlock = ConditionBlock;var PostconditionBlock=(function(_super){__extends(PostconditionBlock, _super);function PostconditionBlock(){_super.apply(this, arguments);}PostconditionBlock.prototype.accept = function(visitor, arg){return visitor.vPostconditionBlock(this, arg);};PostconditionBlock.prototype.deepClone = function(){return new PostconditionBlock(deepClone(this.token), deepClone(this.token2), duplicateAll(this.conditions), deepClone(this.start), deepClone(this.end));};return PostconditionBlock;})(ConditionBlock);_ast.PostconditionBlock = PostconditionBlock;var PreconditionBlock=(function(_super){__extends(PreconditionBlock, _super);function PreconditionBlock(){_super.apply(this, arguments);}PreconditionBlock.prototype.accept = function(visitor, arg){return visitor.vPreconditionBlock(this, arg);};PreconditionBlock.prototype.deepClone = function(){return new PreconditionBlock(deepClone(this.token), deepClone(this.token2), duplicateAll(this.conditions), deepClone(this.start), deepClone(this.end));};return PreconditionBlock;})(ConditionBlock);_ast.PreconditionBlock = PreconditionBlock;var Alias=(function(_super){__extends(Alias, _super);function Alias(name, start, end){_super.call(this, this);this.name = name;this.start = start;this.end = end;this.children.push(name);}Alias.prototype.accept = function(visitor, arg){return visitor.vAlias(this, arg);};Alias.prototype.deepClone = function(){return new Alias(deepClone(this.name), deepClone(this.start), deepClone(this.end));};return Alias;})(AST);_ast.Alias = Alias;var CurrentExpression=(function(_super){__extends(CurrentExpression, _super);function CurrentExpression(pos, end){_super.call(this, this);this.start = pos;this.end = end;}CurrentExpression.prototype.accept = function(visitor, arg){return visitor.vCurrentExpr(this, arg);};CurrentExpression.prototype.deepClone = function(){return new CurrentExpression(deepClone(this.start), deepClone(this.end));};return CurrentExpression;})(AST);_ast.CurrentExpression = CurrentExpression;var ResultExpression=(function(_super){__extends(ResultExpression, _super);function ResultExpression(pos, end){_super.call(this, this);this.start = pos;this.end = end;}ResultExpression.prototype.accept = function(visitor, arg){return visitor.vResultExpression(this, arg);};ResultExpression.prototype.deepClone = function(){return new ResultExpression(deepClone(this.start), deepClone(this.end));};return ResultExpression;})(AST);_ast.ResultExpression = ResultExpression;var AnchoredType=(function(_super){__extends(AnchoredType, _super);function AnchoredType(expression){_super.call(this, this);this.expression = expression;}AnchoredType.prototype.accept = function(visitor, arg){return visitor.vAnchoredType(this, arg);};AnchoredType.prototype.deepClone = function(){return new AnchoredType(deepClone(this.expression));};return AnchoredType;})(AST);_ast.AnchoredType = AnchoredType;var VarOrConstAttribute=(function(_super){__extends(VarOrConstAttribute, _super);function VarOrConstAttribute(frozenNamesAndAliases, rawType, start, end){_super.call(this, this);this.frozenNamesAndAliases = frozenNamesAndAliases;this.rawType = rawType;Array.prototype.push.apply(this.children, frozenNamesAndAliases);this.children.push(rawType);this.start = start;this.end = end;}VarOrConstAttribute.prototype.accept = function(visitor, arg){return visitor.vVarOrConstAttribute(this, arg);};VarOrConstAttribute.prototype.deepClone = function(){return new VarOrConstAttribute(duplicateAll(this.frozenNamesAndAliases), deepClone(this.rawType), deepClone(this.start), deepClone(this.end));};return VarOrConstAttribute;})(AST);_ast.VarOrConstAttribute = VarOrConstAttribute;var Attribute=(function(_super){__extends(Attribute, _super);function Attribute(){_super.apply(this, arguments);}Attribute.prototype.accept = function(visitor, arg){return visitor.vAttr(this, arg);};return Attribute;})(VarOrConstAttribute);_ast.Attribute = Attribute;var ConstantAttribute=(function(_super){__extends(ConstantAttribute, _super);function ConstantAttribute(frozenNamesAndAliases, rawType, value, start, end){_super.call(this, frozenNamesAndAliases, rawType, start, end);this.value = value;this.children.push(value);}ConstantAttribute.prototype.accept = function(visitor, arg){return visitor.vConstantAttribute(this, arg);};ConstantAttribute.prototype.deepClone = function(){return new ConstantAttribute(duplicateAll(this.frozenNamesAndAliases), deepClone(this.rawType), deepClone(this.value), deepClone(this.start), deepClone(this.end));};return ConstantAttribute;})(VarOrConstAttribute);_ast.ConstantAttribute = ConstantAttribute;var ParentGroup=(function(_super){__extends(ParentGroup, _super);function ParentGroup(conforming, parents, start, end){_super.call(this, this);this.conforming = conforming;this.parents = parents;this.children.push(conforming);Array.prototype.push.apply(this.children, parents);this.start = start;this.end = end;}ParentGroup.prototype.accept = function(visitor, arg){return visitor.vParentGroup(this, arg);};ParentGroup.prototype.deepClone = function(){return new ParentGroup(deepClone(this.conforming), duplicateAll(this.parents), deepClone(this.start), deepClone(this.end));};return ParentGroup;})(AST);_ast.ParentGroup = ParentGroup;var Parent=(function(_super){__extends(Parent, _super);function Parent(rt, adaptions, start, end){_super.call(this, this);this.rawType = rt;this.children.push(rt);this.adaptions = adaptions == null?[]:adaptions;this.nullAdaptions = adaptions;Array.prototype.push.apply(this.children, adaptions);this.start = start;this.end = end;}Parent.prototype.accept = function(visitor, arg){return visitor.vParent(this, arg);};Parent.prototype.deepClone = function(){return new Parent(deepClone(this.rawType), duplicateAll(this.adaptions), deepClone(this.start), deepClone(this.end));};return Parent;})(AST);_ast.Parent = Parent;var Rename=(function(_super){__extends(Rename, _super);function Rename(oldName, newName){_super.call(this, this);this.oldName = oldName;this.newName = newName;}Rename.prototype.accept = function(visitor, arg){return visitor.vRename(this, arg);};Rename.prototype.deepClone = function(){return new Rename(deepClone(this.oldName), deepClone(this.newName));};return Rename;})(AST);_ast.Rename = Rename;var Renames=(function(_super){__extends(Renames, _super);function Renames(t, renames){_super.call(this, this);this.token = t;this.renames = renames;}Renames.prototype.accept = function(visitor, arg){return visitor.vRenames(this, arg);};return Renames;})(AST);_ast.Renames = Renames;var Redefines=(function(_super){__extends(Redefines, _super);function Redefines(t, identifiers){_super.call(this, this);this.token = t;this.identifiers = identifiers;}Redefines.prototype.accept = function(visitor, arg){return visitor.vRedefines(this, arg);};Redefines.prototype.deepClone = function(){return new Redefines(deepClone(this.token), duplicateAll(this.identifiers));};return Redefines;})(AST);_ast.Redefines = Redefines;var Selects=(function(_super){__extends(Selects, _super);function Selects(t, identifiers){_super.call(this, this);this.token = t;this.identifiers = identifiers;}Selects.prototype.accept = function(visitor, arg){return visitor.vSelects(this, arg);};Selects.prototype.deepClone = function(){return new Selects(deepClone(this.token), duplicateAll(this.identifiers));};return Selects;})(AST);_ast.Selects = Selects;var ExportChangeset=(function(_super){__extends(ExportChangeset, _super);function ExportChangeset(access, featureSet){_super.call(this, this);this.access = access;this.featureSet = featureSet;}ExportChangeset.prototype.accept = function(visitor, arg){return visitor.vExportChangeset(this, arg);};ExportChangeset.prototype.deepClone = function(){return new ExportChangeset(duplicateAll(this.access), duplicateAll(this.featureSet));};return ExportChangeset;})(AST);_ast.ExportChangeset = ExportChangeset;var NewExports=(function(_super){__extends(NewExports, _super);function NewExports(t, exportChangeset){_super.call(this, this);this.token = t;this.exportChangeset = exportChangeset;}NewExports.prototype.accept = function(visitor, arg){return visitor.vNewExports(this, arg);};NewExports.prototype.deepClone = function(){return new NewExports(deepClone(this.token), duplicateAll(this.exportChangeset));};return NewExports;})(AST);_ast.NewExports = NewExports;var Undefines=(function(_super){__extends(Undefines, _super);function Undefines(t, identifiers){_super.call(this, this);this.token = t;this.identifiers = identifiers;}Undefines.prototype.accept = function(visitor, arg){return visitor.vUndefines(this, arg);};Undefines.prototype.deepClone = function(){return new Undefines(deepClone(this.token), duplicateAll(this.identifiers));};return Undefines;})(AST);_ast.Undefines = Undefines;var Literal=(function(_super){__extends(Literal, _super);function Literal(vac, rawValue){_super.call(this, vac);this.rawValue = rawValue;}Literal.prototype.deepClone = function(){throw new Error("Should not call Literal<T>.deepClone() directly");};return Literal;})(AST);_ast.Literal = Literal;var CharLiteral=(function(_super){__extends(CharLiteral, _super);function CharLiteral(value, start, end){_super.call(this, this, value);this.value = value;this.start = start;this.end = end;}CharLiteral.prototype.accept = function(visitor, arg){return visitor.vCharLiteral(this, arg);};CharLiteral.prototype.deepClone = function(){return new CharLiteral(this.rawValue, deepClone(this.start), deepClone(this.end));};return CharLiteral;})(Literal);_ast.CharLiteral = CharLiteral;var BooleanLiteral=(function(_super){__extends(BooleanLiteral, _super);function BooleanLiteral(value, start, end){_super.call(this, this, value);this.value = value.toLowerCase() === "true";this.start = start;this.end = end;}BooleanLiteral.prototype.accept = function(visitor, arg){return visitor.vBooleanLiteral(this, arg);};BooleanLiteral.prototype.deepClone = function(){return new BooleanLiteral(this.rawValue, deepClone(this.start), deepClone(this.end));};return BooleanLiteral;})(Literal);_ast.BooleanLiteral = BooleanLiteral;var IntLiteral=(function(_super){__extends(IntLiteral, _super);function IntLiteral(value, start, end){_super.call(this, this, value);this.value = parseInt(value);this.start = start;this.end = end;}IntLiteral.prototype.accept = function(visitor, arg){return visitor.vIntLiteral(this, arg);};IntLiteral.prototype.deepClone = function(){return new IntLiteral(this.value + "", deepClone(this.start), deepClone(this.end));};return IntLiteral;})(Literal);_ast.IntLiteral = IntLiteral;var RealLiteral=(function(_super){__extends(RealLiteral, _super);function RealLiteral(value, start, end){_super.call(this, this, value);this.rawValue = value;this.value = parseFloat(value);this.start = start;this.end = end;}RealLiteral.prototype.accept = function(visitor, arg){return visitor.vRealLiteral(this, arg);};RealLiteral.prototype.deepClone = function(){return new RealLiteral(this.rawValue, deepClone(this.start), deepClone(this.end));};return RealLiteral;})(Literal);_ast.RealLiteral = RealLiteral;var VoidLiteral=(function(_super){__extends(VoidLiteral, _super);function VoidLiteral(start, end){_super.call(this, this, null);this.value = null;this.start = start;this.end = end;}VoidLiteral.prototype.accept = function(visitor, arg){return visitor.vVoidLiteral(this, arg);};VoidLiteral.prototype.deepClone = function(){return new VoidLiteral(deepClone(this.start), deepClone(this.end));};return VoidLiteral;})(Literal);_ast.VoidLiteral = VoidLiteral;var StringLiteral=(function(_super){__extends(StringLiteral, _super);function StringLiteral(value, start, end){_super.call(this, this, value);this.value = value;this.start = start;this.end = end;}StringLiteral.prototype.accept = function(visitor, arg){return visitor.vStringLiteral(this, arg);};StringLiteral.prototype.deepClone = function(){return new StringLiteral(this.rawValue, deepClone(this.start), deepClone(this.end));};return StringLiteral;})(Literal);_ast.StringLiteral = StringLiteral;var All=(function(_super){__extends(All, _super);function All(allToken){_super.call(this, this);this.allToken = allToken;}All.prototype.accept = function(visitor, arg){return visitor.vAll(this, arg);};All.prototype.deepClone = function(){return new All(deepClone(this.allToken));};return All;})(AST);_ast.All = All;var Condition=(function(_super){__extends(Condition, _super);function Condition(label, condition){_super.call(this, this);this.condition = condition;this.label = label;this.children.push(label, condition);}Condition.prototype.accept = function(visitor, arg){throw new Error("This should not be called");};return Condition;})(AST);_ast.Condition = Condition;var Precondition=(function(_super){__extends(Precondition, _super);function Precondition(){_super.apply(this, arguments);}Precondition.prototype.accept = function(visitor, arg){return visitor.vPrecondition(this, arg);};Precondition.prototype.deepClone = function(){return new Precondition(deepClone(this.label), deepClone(this.condition));};return Precondition;})(Condition);_ast.Precondition = Precondition;var Postcondition=(function(_super){__extends(Postcondition, _super);function Postcondition(){_super.apply(this, arguments);}Postcondition.prototype.accept = function(visitor, arg){return visitor.vPostcondition(this, arg);};Postcondition.prototype.deepClone = function(){return new Postcondition(deepClone(this.label), deepClone(this.condition));};return Postcondition;})(Condition);_ast.Postcondition = Postcondition;var CheckInstruction=(function(_super){__extends(CheckInstruction, _super);function CheckInstruction(e){_super.call(this, this);this.expression = e;}CheckInstruction.prototype.accept = function(visitor, arg){return visitor.vCheckInstruction(this, arg);};CheckInstruction.prototype.deepClone = function(){return new CheckInstruction(deepClone(this.expression));};return CheckInstruction;})(AST);_ast.CheckInstruction = CheckInstruction;var Invariantcondition=(function(_super){__extends(Invariantcondition, _super);function Invariantcondition(){_super.apply(this, arguments);}Invariantcondition.prototype.accept = function(visitor, arg){return visitor.vInvariantcondition(this, arg);};Invariantcondition.prototype.deepClone = function(){return new Invariantcondition(deepClone(this.label), deepClone(this.condition));};return Invariantcondition;})(Condition);_ast.Invariantcondition = Invariantcondition;var SetterAssignment=(function(_super){__extends(SetterAssignment, _super);function SetterAssignment(token, left, right, start, end){_super.call(this, this);this.token = token;this.children.push(token);this.left = left;this.right = right;this.children.push(left, right);this.start = start;this.end = end;}SetterAssignment.prototype.accept = function(visitor, arg){return visitor.vSetterAssignment(this, arg);};SetterAssignment.prototype.deepClone = function(){return new SetterAssignment(deepClone(this.token), deepClone(this.left), deepClone(this.right), deepClone(this.start), deepClone(this.end));};return SetterAssignment;})(AST);_ast.SetterAssignment = SetterAssignment;var SimpleAssignment=(function(_super){__extends(SimpleAssignment, _super);function SimpleAssignment(token, left, right, start, end){_super.call(this, this);this.token = token;this.children.push(token);this.left = left;this.right = right;this.children.push(left, right);this.start = start;this.end = end;}SimpleAssignment.prototype.accept = function(visitor, arg){return visitor.vSimpleAssignment(this, arg);};SimpleAssignment.prototype.deepClone = function(){return new SimpleAssignment(deepClone(this.token), deepClone(this.left), deepClone(this.right), deepClone(this.start), deepClone(this.end));};return SimpleAssignment;})(AST);_ast.SimpleAssignment = SimpleAssignment;var InvalidAssignment=(function(_super){__extends(InvalidAssignment, _super);function InvalidAssignment(token, left, right, start, end){_super.call(this, this);this.token = token;this.children.push(token);this.left = left;this.right = right;this.children.push(left, right);this.start = start;this.end = end;}InvalidAssignment.prototype.accept = function(visitor, arg){return visitor.vInvalidAssignment(this, arg);};InvalidAssignment.prototype.deepClone = function(){return new InvalidAssignment(deepClone(this.token), deepClone(this.left), deepClone(this.right), deepClone(this.start), deepClone(this.end));};return InvalidAssignment;})(AST);_ast.InvalidAssignment = InvalidAssignment;var CreateInstruction=(function(_super){__extends(CreateInstruction, _super);function CreateInstruction(target, method, arguments, start, end){_super.call(this, this);this.target = target;this.method = method;this.arguments = arguments;this.children.push(target, method);Array.prototype.push.apply(this.children, arguments);this.start = start;this.end = end;}CreateInstruction.prototype.accept = function(visitor, arg){return visitor.vCreateInstruction(this, arg);};CreateInstruction.prototype.deepClone = function(){return new CreateInstruction(deepClone(this.target), deepClone(this.method), duplicateAll(this.arguments), deepClone(this.start), deepClone(this.end));};return CreateInstruction;})(AST);_ast.CreateInstruction = CreateInstruction;var CreateExpression=(function(_super){__extends(CreateExpression, _super);function CreateExpression(rawType, method, arguments, start, end){_super.call(this, this);this.rawType = rawType;this.method = method;this.arguments = arguments;this.children.push(rawType, method);Array.prototype.push.apply(this.children, arguments);this.start = start;this.end = end;}CreateExpression.prototype.accept = function(visitor, arg){return visitor.vCreateExpression(this, arg);};CreateExpression.prototype.deepClone = function(){return new CreateExpression(deepClone(this.rawType), deepClone(this.method), duplicateAll(this.arguments), deepClone(this.start), deepClone(this.end));};return CreateExpression;})(AST);_ast.CreateExpression = CreateExpression;var AgentCall=(function(_super){__extends(AgentCall, _super);function AgentCall(token, callExpression, start, end){_super.call(this, this);this.token = token;this.callExpression = callExpression;this.start = start;this.end = end;this.children.push(callExpression);}AgentCall.prototype.accept = function(visitor, arg){return visitor.vAgentCall(this, arg);};AgentCall.prototype.deepClone = function(){return new AgentCall(this.token, deepClone(this.callExpression), deepClone(this.start), deepClone(this.end));};return AgentCall;})(AST);_ast.AgentCall = AgentCall;var UnaryOp=(function(_super){__extends(UnaryOp, _super);function UnaryOp(operator, operand, start, end){_super.call(this, this);this.operator = operator;this.operand = operand;this.start = start;this.end = end;this.children.push(operand);}UnaryOp.prototype.accept = function(visitor, arg){return visitor.vUnaryOp(this, arg);};UnaryOp.prototype.deepClone = function(){return new UnaryOp(this.operator, deepClone(this.operand), deepClone(this.start), deepClone(this.end));};return UnaryOp;})(AST);_ast.UnaryOp = UnaryOp;var BinaryOp=(function(_super){__extends(BinaryOp, _super);function BinaryOp(operator, left, right, start, end){_super.call(this, this);this.operator = operator;this.left = left;this.right = right;this.start = start;this.end = end;if(end === undefined){debugger;}this.children.push(left, right);}BinaryOp.prototype.accept = function(visitor, arg){return visitor.vBinaryOp(this, arg);};BinaryOp.prototype.deepClone = function(){return new BinaryOp(this.operator, deepClone(this.left), deepClone(this.right), deepClone(this.start), deepClone(this.end));};return BinaryOp;})(AST);_ast.BinaryOp = BinaryOp;var stringToUnaryOp=new Map([["-", 0], ["+", 1], ["not", 2], ["old", 3]]);var stringToBinaryOp=new Map([["-", 0], ["+", 1], ["*", 2], ["/", 3], ["//", 4], ["\\\\", 5], ["^", 6], ["..", 7], ["=", 8], ["/=", 9], ["~", 10], ["/~", 11], ["<", 12], [">", 13], ["<=", 14], [">=", 15], ["and", 16], ["and then", 17], ["or", 18], ["or else", 19], ["xor", 20], ["implies", 21]]);var CallExpression=(function(_super){__extends(CallExpression, _super);function CallExpression(operand, name, parameters, start, end){_super.call(this, this);this.operand = operand;this.name = name;this.parameters = parameters;this.children.push(name);Array.prototype.push.apply(this.children, parameters);if(operand){this.children.push(operand);}this.start = start;this.end = end;}CallExpression.prototype.accept = function(visitor, arg){return visitor.vCallExpression(this, arg);};CallExpression.prototype.deepClone = function(){return new CallExpression(deepClone(this.operand), deepClone(this.name), duplicateAll(this.parameters), deepClone(this.start), deepClone(this.end));};return CallExpression;})(AST);_ast.CallExpression = CallExpression;var UnqualifiedCallExpression=(function(_super){__extends(UnqualifiedCallExpression, _super);function UnqualifiedCallExpression(identifier, parameters, start, end){_super.call(this, this);this.identifier = identifier;this.parameters = parameters;this.children.push(this.identifier);Array.prototype.push.apply(this.children, parameters);this.start = start;this.end = end;}UnqualifiedCallExpression.prototype.accept = function(visitor, arg){return visitor.vUnqualifiedCallExpression(this, arg);};UnqualifiedCallExpression.prototype.deepClone = function(){return new UnqualifiedCallExpression(deepClone(this.identifier), duplicateAll(this.parameters), deepClone(this.start), deepClone(this.end));};return UnqualifiedCallExpression;})(AST);_ast.UnqualifiedCallExpression = UnqualifiedCallExpression;var IndexExpression=(function(_super){__extends(IndexExpression, _super);function IndexExpression(operand, arguments, start, end){_super.call(this, this);this.operand = operand;this.arguments = arguments;this.children.push(operand);Array.prototype.push.apply(this.children, arguments);this.start = start;this.end = end;}IndexExpression.prototype.accept = function(visitor, arg){return visitor.vIndexExpression(this, arg);};IndexExpression.prototype.deepClone = function(){return new IndexExpression(deepClone(this.operand), duplicateAll(this.arguments), deepClone(this.start), deepClone(this.end));};return IndexExpression;})(AST);_ast.IndexExpression = IndexExpression;var AttachedExpression=(function(_super){__extends(AttachedExpression, _super);function AttachedExpression(ofType, expr, newVar, start, end){_super.call(this, this);this.ofType = ofType;this.expr = expr;this.newVar = newVar;this.children.push(ofType, expr, newVar);this.start = start;this.end = end;}AttachedExpression.prototype.accept = function(visitor, arg){return visitor.vAttachedExpression(this, arg);};AttachedExpression.prototype.deepClone = function(){return new AttachedExpression(deepClone(this.ofType), deepClone(this.expr), deepClone(this.newVar), deepClone(this.start), deepClone(this.end));};return AttachedExpression;})(AST);_ast.AttachedExpression = AttachedExpression;var FromLoop=(function(_super){__extends(FromLoop, _super);function FromLoop(initializerBlock, until, loopBlock, variant){_super.call(this, this);this.initializerBlock = initializerBlock;this.until = until;this.loopBlock = loopBlock;this.variant = variant;Array.prototype.push.apply(this.children, initializerBlock);this.children.push(until);Array.prototype.push.apply(this.children, loopBlock);this.children.push(variant);}FromLoop.prototype.accept = function(visitor, arg){return visitor.vFromLoop(this, arg);};FromLoop.prototype.deepClone = function(){return new FromLoop(duplicateAll(this.initializerBlock), deepClone(this.until), duplicateAll(this.loopBlock), deepClone(this.variant));};return FromLoop;})(AST);_ast.FromLoop = FromLoop;var IfElse=(function(_super){__extends(IfElse, _super);function IfElse(condition, thenBlock, elseIfs, elseBlock){_super.call(this, this);this.condition = condition;this.thenBlock = thenBlock;this.elseIfs = elseIfs;this.elseBlock = elseBlock;this.children.push(condition);Array.prototype.push.apply(this.children, thenBlock);Array.prototype.push.apply(this.children, elseIfs);Array.prototype.push.apply(this.children, elseBlock);}IfElse.prototype.accept = function(visitor, arg){return visitor.vIfElse(this, arg);};IfElse.prototype.deepClone = function(){return new IfElse(deepClone(this.condition), duplicateAll(this.thenBlock), duplicateAll(this.elseIfs), duplicateAll(this.elseBlock));};return IfElse;})(AST);_ast.IfElse = IfElse;var ElseIf=(function(_super){__extends(ElseIf, _super);function ElseIf(condition, thenBlock){_super.call(this, this);this.condition = condition;this.thenBlock = thenBlock;this.children.push(condition);Array.prototype.push.apply(this.children, thenBlock);}ElseIf.prototype.accept = function(visitor, arg){return visitor.vElseIf(this, arg);};ElseIf.prototype.deepClone = function(){return new ElseIf(deepClone(this.condition), duplicateAll(this.thenBlock));};return ElseIf;})(AST);_ast.ElseIf = ElseIf;var PrecursorCall=(function(_super){__extends(PrecursorCall, _super);function PrecursorCall(token, parentQualifier, arguments, start, end){_super.call(this, this);this.token = token;this.parentQualifier = parentQualifier;this.arguments = arguments;this.start = start;this.end = end;this.children.push(token, parentQualifier);Array.prototype.push.apply(this.children, this.arguments);}PrecursorCall.prototype.accept = function(visitor, arg){return visitor.vPrecursorCall(this, arg);};PrecursorCall.prototype.deepClone = function(){return new PrecursorCall(deepClone(this.token), deepClone(this.parentQualifier), duplicateAll(this.arguments), deepClone(this.start), deepClone(this.end));};return PrecursorCall;})(AST);_ast.PrecursorCall = PrecursorCall;var TypeLike=(function(){function TypeLike(){}return TypeLike;})();_ast.TypeLike = TypeLike;var TypeLikeCurrent=(function(_super){__extends(TypeLikeCurrent, _super);function TypeLikeCurrent(token, current){_super.call(this, this);this.token = token;this.current = current;this.children.push(token, current);this.start = this.token.start;this.end = this.current.end;}TypeLikeCurrent.prototype.accept = function(visitor, arg){return visitor.vTypeLikeCurrent(this, arg);};TypeLikeCurrent.prototype.deepClone = function(){return new TypeLikeCurrent(deepClone(this.token), deepClone(this.current));};return TypeLikeCurrent;})(AST);_ast.TypeLikeCurrent = TypeLikeCurrent;var TypeLikeFeature=(function(_super){__extends(TypeLikeFeature, _super);function TypeLikeFeature(token, typeName, featureName){_super.call(this, this);this.token = token;this.typeName = typeName;this.featureName = featureName;this.children.push(token, typeName, featureName);this.start = this.token.start;this.end = this.featureName.end;}TypeLikeFeature.prototype.accept = function(visitor, arg){return visitor.vTypeLikeFeature(this, arg);};TypeLikeFeature.prototype.deepClone = function(){return new TypeLikeFeature(deepClone(this.token), deepClone(this.typeName), deepClone(this.featureName));};return TypeLikeFeature;})(AST);_ast.TypeLikeFeature = TypeLikeFeature;var AliasBlock=(function(_super){__extends(AliasBlock, _super);function AliasBlock(token, expression, start, end){_super.call(this, this);this.token = token;this.expression = expression;this.start = start;this.end = end;this.children.push(this.token, this.expression);}AliasBlock.prototype.accept = function(visitor, arg){return visitor.vAliasBlock(this, arg);};AliasBlock.prototype.deepClone = function(){return new AliasBlock(deepClone(this.token), deepClone(this.expression), deepClone(this.start), deepClone(this.end));};return AliasBlock;})(AST);_ast.AliasBlock = AliasBlock;var Address=(function(_super){__extends(Address, _super);function Address(variable, start, end){_super.call(this, this);this.variable = variable;this.start = start;this.end = end;this.children.push(this.variable);}Address.prototype.accept = function(visitor, arg){return visitor.vAddress(this, arg);};Address.prototype.deepClone = function(){return new Address(deepClone(this.variable), deepClone(this.start), deepClone(this.end));};return Address;})(AST);_ast.Address = Address;var InspectInstruction=(function(_super){__extends(InspectInstruction, _super);function InspectInstruction(inspectToken, condition, whens, elseBlock, start, end){_super.call(this, this);this.inspectToken = inspectToken;this.condition = condition;this.whens = whens;this.elseBlock = elseBlock;this.start = start;this.end = end;this.children.push(inspectToken);Array.prototype.push.apply(this.children, whens);Array.prototype.push.apply(this.children, this.elseBlock);}InspectInstruction.prototype.accept = function(visitor, arg){return visitor.vInspectInstruction(this, arg);};InspectInstruction.prototype.deepClone = function(){return new InspectInstruction(deepClone(this.inspectToken), deepClone(this.condition), duplicateAll(this.whens), duplicateAll(this.elseBlock), deepClone(this.start), deepClone(this.end));};return InspectInstruction;})(AST);_ast.InspectInstruction = InspectInstruction;var WhenPart=(function(_super){__extends(WhenPart, _super);function WhenPart(whenToken, choices, thenToken, instructions, start, end){_super.call(this, this);this.whenToken = whenToken;this.choices = choices;this.thenToken = thenToken;this.instructions = instructions;this.start = start;this.end = end;this.children.push(this.whenToken);Array.prototype.push.apply(this.children, this.choices);this.children.push(this.thenToken);Array.prototype.push.apply(this.children, this.instructions);}WhenPart.prototype.accept = function(visitor, arg){return visitor.vWhenPart(this, arg);};WhenPart.prototype.deepClone = function(){return new WhenPart(deepClone(this.whenToken), duplicateAll(this.choices), deepClone(this.thenToken), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return WhenPart;})(AST);_ast.WhenPart = WhenPart;var Loop=(function(_super){__extends(Loop, _super);function Loop(loopElements, endToken, start, end){_super.call(this, this);this.loopElements = loopElements;this.endToken = endToken;this.start = start;this.end = end;Array.prototype.push.apply(this.children, this.loopElements);}Loop.prototype.accept = function(visitor, arg){return visitor.vLoop(this, arg);};Loop.prototype.deepClone = function(){return new Loop(duplicateAll(this.loopElements), deepClone(this.endToken), deepClone(this.start), deepClone(this.end));};return Loop;})(AST);_ast.Loop = Loop;var LoopElement=(function(_super){__extends(LoopElement, _super);function LoopElement(token, start, end){_super.call(this, this);this.token = token;this.start = start;this.end = end;}LoopElement.prototype.accept = function(visitor, arg){return visitor.vLoopElement(this, arg);};return LoopElement;})(AST);_ast.LoopElement = LoopElement;var AcrossAs=(function(_super){__extends(AcrossAs, _super);function AcrossAs(token, expression, asToken, identifier, start, end){_super.call(this, token, start, end);this.expression = expression;this.asToken = asToken;this.identifier = identifier;}AcrossAs.prototype.accept = function(visitor, arg){return visitor.vAcrossAs(this, arg);};AcrossAs.prototype.deepClone = function(){return new AcrossAs(deepClone(this.token), deepClone(this.expression), deepClone(this.asToken), deepClone(this.identifier), deepClone(this.start), deepClone(this.end));};return AcrossAs;})(LoopElement);_ast.AcrossAs = AcrossAs;var LoopFrom=(function(_super){__extends(LoopFrom, _super);function LoopFrom(token, instructions, start, end){_super.call(this, token, start, end);this.instructions = instructions;this.children.push(this.token);Array.prototype.push.apply(this.children, this.instructions);}LoopFrom.prototype.accept = function(visitor, arg){return visitor.vLoopFrom(this, arg);};LoopFrom.prototype.deepClone = function(){return new LoopFrom(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return LoopFrom;})(LoopElement);_ast.LoopFrom = LoopFrom;var LoopBody=(function(_super){__extends(LoopBody, _super);function LoopBody(token, instructions, start, end){_super.call(this, token, start, end);this.instructions = instructions;this.children.push(this.token);Array.prototype.push.apply(this.children, this.instructions);}LoopBody.prototype.accept = function(visitor, arg){return visitor.vLoopBody(this, arg);};LoopBody.prototype.deepClone = function(){return new LoopBody(deepClone(this.token), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return LoopBody;})(LoopElement);_ast.LoopBody = LoopBody;var AcrossSomeOrAll=(function(_super){__extends(AcrossSomeOrAll, _super);function AcrossSomeOrAll(token, expression, start, end){_super.call(this, token, start, end);this.expression = expression;this.children.push(this.expression);}AcrossSomeOrAll.prototype.accept = function(visitor, arg){throw new Error("Called ACrossSomeOrAll.accept directly. This should not happen");};return AcrossSomeOrAll;})(LoopElement);_ast.AcrossSomeOrAll = AcrossSomeOrAll;var AcrossSome=(function(_super){__extends(AcrossSome, _super);function AcrossSome(){_super.apply(this, arguments);}AcrossSome.prototype.accept = function(visitor, arg){return visitor.vAcrossSome(this, arg);};AcrossSome.prototype.deepClone = function(){return new AcrossSome(deepClone(this.token), deepClone(this.expression), deepClone(this.start), deepClone(this.end));};return AcrossSome;})(AcrossSomeOrAll);_ast.AcrossSome = AcrossSome;var AcrossAll=(function(_super){__extends(AcrossAll, _super);function AcrossAll(){_super.apply(this, arguments);}AcrossAll.prototype.accept = function(visitor, arg){return visitor.vAcrossAll(this, arg);};AcrossAll.prototype.deepClone = function(){return new AcrossAll(deepClone(this.token), deepClone(this.expression), deepClone(this.start), deepClone(this.end));};return AcrossAll;})(AcrossSomeOrAll);_ast.AcrossAll = AcrossAll;var LoopUntil=(function(_super){__extends(LoopUntil, _super);function LoopUntil(token, expression, start, end){_super.call(this, token, start, end);this.expression = expression;this.children.push(this.token, this.expression);}LoopUntil.prototype.accept = function(visitor, arg){return visitor.vLoopUntil(this, arg);};LoopUntil.prototype.deepClone = function(){return new LoopUntil(deepClone(this.token), deepClone(this.expression), deepClone(this.start), deepClone(this.end));};return LoopUntil;})(LoopElement);_ast.LoopUntil = LoopUntil;var LoopVariant=(function(_super){__extends(LoopVariant, _super);function LoopVariant(token, expression, start, end){_super.call(this, token, start, end);this.expression = expression;this.children.push(this.token, this.expression);}LoopVariant.prototype.accept = function(visitor, arg){return visitor.vLoopVariant(this, arg);};LoopVariant.prototype.deepClone = function(){return new LoopVariant(deepClone(this.token), deepClone(this.expression), deepClone(this.start), deepClone(this.end));};return LoopVariant;})(LoopElement);_ast.LoopVariant = LoopVariant;var LoopInvariant=(function(_super){__extends(LoopInvariant, _super);function LoopInvariant(token, invariants, start, end){_super.call(this, token, start, end);this.invariants = invariants;this.children.push(token);Array.prototype.push.apply(this.children, this.invariants);}LoopInvariant.prototype.accept = function(visitor, arg){return visitor.vLoopInvariant(this, arg);};LoopInvariant.prototype.deepClone = function(){return new LoopInvariant(deepClone(this.token), duplicateAll(this.invariants), deepClone(this.start), deepClone(this.end));};return LoopInvariant;})(LoopElement);_ast.LoopInvariant = LoopInvariant;var DebugBlock=(function(_super){__extends(DebugBlock, _super);function DebugBlock(args, instructions, start, end){_super.call(this, this);this.args = args;this.instructions = instructions;this.start = start;this.end = end;}DebugBlock.prototype.accept = function(visitor, arg){return visitor.vDebugBlock(this, arg);};DebugBlock.prototype.deepClone = function(){return new DebugBlock(duplicateAll(this.args), duplicateAll(this.instructions), deepClone(this.start), deepClone(this.end));};return DebugBlock;})(AST);_ast.DebugBlock = DebugBlock;var ManifestConstant=(function(_super){__extends(ManifestConstant, _super);function ManifestConstant(type, value, start, end){_super.call(this, this);this.type = type;this.value = value;this.start = start;this.end = end;this.children.push(type, value);}ManifestConstant.prototype.deepClone = function(){return new ManifestConstant(deepClone(this.type), deepClone(this.value), deepClone(this.start), deepClone(this.end));};ManifestConstant.prototype.accept = function(visitor, arg){return visitor.vManifestConstant(this, arg);};return ManifestConstant;})(AST);_ast.ManifestConstant = ManifestConstant;var NoOp=(function(_super){__extends(NoOp, _super);function NoOp(start, end){_super.call(this, this);this.start = start;this.end = end;}NoOp.prototype.accept = function(visitor, arg){return visitor.vNoOp(this, arg);};NoOp.prototype.deepClone = function(){return new NoOp(deepClone(this.start), deepClone(this.end));};return NoOp;})(AST);_ast.NoOp = NoOp;})(ast = eiffel.ast || (eiffel.ast = {}));})(eiffel || (eiffel = {}));var eiffel;(function(eiffel){var ast;(function(_ast){var Visitor=(function(){function Visitor(){}Visitor.prototype.vClass = function(_class, arg){return this.vDefault(_class, arg);};Visitor.prototype.vFeatureList = function(featureList, arg){return this.vDefault(featureList, arg);};Visitor.prototype.vFeature = function(feature, arg){return this.vDefault(feature, arg);};Visitor.prototype.vAttr = function(attr, arg){return this.vVarOrConstAttribute(attr, arg);};Visitor.prototype.vRoutine = function(feature, arg){return this.vFeature(feature, arg);};Visitor.prototype.vFunction = function(func, arg){return this.vRoutine(func, arg);};Visitor.prototype.vProcedure = function(procedure, arg){return this.vRoutine(procedure, arg);};Visitor.prototype.vChildren = function(ast, arg){var result=null;ast.children.forEach(function(t){if(t != null){result = t._acceptor.accept(this, arg);}}, this);return result;};Visitor.prototype.vIdentifier = function(identifier, arg){return this.vDefault(identifier, arg);};Visitor.prototype.vType = function(type, arg){return this.vDefault(type, arg);};Visitor.prototype.vParent = function(parent, arg){return this.vDefault(parent, arg);};Visitor.prototype.vInstruction = function(instruction, arg){return this.vDefault(instruction, arg);};Visitor.prototype.vDefault = function(ast, arg){return this.vChildren(ast, arg);};Visitor.prototype.vCreateInstruction = function(createInstruction, arg){return this.vInstruction(createInstruction, arg);};Visitor.prototype.vSetterAssignment = function(assignment, arg){return this.vInstruction(assignment, arg);};Visitor.prototype.vSimpleAssignment = function(simpleAssignment, arg){return this.vInstruction(simpleAssignment, arg);};Visitor.prototype.vInvalidAssignment = function(invalidAssignment, arg){return this.vInstruction(invalidAssignment, arg);};Visitor.prototype.vExportChangeset = function(exportChangeset, arg){return this.vDefault(exportChangeset, arg);};Visitor.prototype.vPrecondition = function(precondition, arg){return this.vCondition(precondition, arg);};Visitor.prototype.vPostcondition = function(postcondition, arg){return this.vCondition(postcondition, arg);};Visitor.prototype.vInvariantcondition = function(invariantcondition, arg){return this.vCondition(invariantcondition, arg);};Visitor.prototype.vCondition = function(condition, arg){return this.vDefault(condition, arg);};Visitor.prototype.vUnaryOp = function(unaryOp, arg){return this.vExpression(unaryOp, arg);};Visitor.prototype.vBinaryOp = function(binaryOp, arg){return this.vExpression(binaryOp, arg);};Visitor.prototype.vExpression = function(expression, arg){return this.vDefault(expression, arg);};Visitor.prototype.vCurrentExpr = function(currentExpression, arg){return this.vDefault(currentExpression, arg);};Visitor.prototype.vCreateExpression = function(createExpression, arg){return this.vExpression(createExpression, arg);};Visitor.prototype.vIntLiteral = function(intLiteral, arg){return this.vLiteral(intLiteral, arg);};Visitor.prototype.vRealLiteral = function(realLiteral, arg){return this.vLiteral(realLiteral, arg);};Visitor.prototype.vStringLiteral = function(stringLiteral, arg){return this.vLiteral(stringLiteral, arg);};Visitor.prototype.vLiteral = function(literal, arg){return this.vDefault(literal, arg);};Visitor.prototype.vConstantAttribute = function(constantAttribute, arg){return this.vVarOrConstAttribute(constantAttribute, arg);};Visitor.prototype.vVarOrConstAttribute = function(varOrConstAttribute, arg){return this.vFeature(varOrConstAttribute, arg);};Visitor.prototype.vAlias = function(alias, arg){return this.vDefault(alias, arg);};Visitor.prototype.vCharLiteral = function(charLiteral, arg){return this.vLiteral(charLiteral, arg);};Visitor.prototype.vBooleanLiteral = function(booleanLiteral, arg){return this.vLiteral(booleanLiteral, arg);};Visitor.prototype.vVoidLiteral = function(voidLiteral, arg){return this.vLiteral(voidLiteral, arg);};Visitor.prototype.vCallExpression = function(callExpression, arg){return this.vExpression(callExpression, arg);};Visitor.prototype.vIndexExpression = function(indexExpression, arg){return this.vExpression(indexExpression, arg);};Visitor.prototype.vVarDeclList = function(varDeclList, arg){return this.vDefault(varDeclList, arg);};Visitor.prototype.vVarDeclEntry = function(varDeclEntry, arg){return this.vDefault(varDeclEntry, arg);};Visitor.prototype.vFromLoop = function(fromLoop, arg){return this.vInstruction(fromLoop, arg);};Visitor.prototype.vIfElse = function(ifElse, arg){return this.vInstruction(ifElse, arg);};Visitor.prototype.vElseIf = function(elseIf, arg){return this.vInstruction(elseIf, arg);};Visitor.prototype.vCheckInstruction = function(checkInstruction, arg){return this.vInstruction(checkInstruction, arg);};Visitor.prototype.vExternalBlock = function(externalBlock, arg){return this.vDefault(externalBlock, arg);};Visitor.prototype.vResultExpression = function(resultExpression, arg){return this.vDefault(resultExpression, arg);};Visitor.prototype.vAnchoredType = function(anchoredType, arg){return this.vDefault(anchoredType, arg);};Visitor.prototype.vIdentifierAccess = function(identifierAccess, arg){return this.vExpression(identifierAccess, arg);};Visitor.prototype.vObsoleteBlock = function(obsoleteBlock, arg){return this.vRoutineInstructions(obsoleteBlock, arg);};Visitor.prototype.vAttachedExpression = function(attachedExpression, arg){return this.vExpression(attachedExpression, arg);};Visitor.prototype.vTypeExpression = function(typeExpression, arg){return this.vExpression(typeExpression, arg);};Visitor.prototype.vParentGroup = function(parentGroup, arg){return this.vDefault(parentGroup, arg);};Visitor.prototype.vRoutineInstructions = function(routineInstructions, arg){return this.vDefault(routineInstructions, arg);};Visitor.prototype.vOnceBlock = function(onceBlock, arg){return this.vRoutineInstructions(onceBlock, arg);};Visitor.prototype.vDoBlock = function(doBlock, arg){return this.vRoutineInstructions(doBlock, arg);};Visitor.prototype.vDeferredBlock = function(deferredBlock, arg){return this.vRoutineInstructions(deferredBlock, arg);};Visitor.prototype.vPreconditionBlock = function(preconditionBlock, arg){return this.vConditionBlock(preconditionBlock, arg);};Visitor.prototype.vConditionBlock = function(conditionBlock, arg){return this.vDefault(conditionBlock, arg);};Visitor.prototype.vPostconditionBlock = function(postconditionBlock, arg){return this.vDefault(postconditionBlock, arg);};Visitor.prototype.vUnqualifiedCallExpression = function(unqualifiedCallExpression, arg){return this.vExpression(unqualifiedCallExpression, arg);};Visitor.prototype.vLocalsBlock = function(localsBlock, arg){return this.vDefault(localsBlock, arg);};Visitor.prototype.vTypeConstraint = function(typeConstraint, arg){return this.vDefault(typeConstraint, arg);};Visitor.prototype.vRename = function(rename, arg){return this.vDefault(rename, arg);};Visitor.prototype.vToken = function(token, arg){return this.vDefault(token, arg);};Visitor.prototype.vRedefines = function(redefines, arg){return this.vDefault(redefines, arg);};Visitor.prototype.vUndefines = function(undefines, arg){return this.vDefault(undefines, arg);};Visitor.prototype.vRenames = function(renames, arg){return this.vDefault(renames, arg);};Visitor.prototype.vSelects = function(selects, arg){return this.vDefault(selects, arg);};Visitor.prototype.vNewExports = function(newExports, arg){return this.vDefault(newExports, arg);};Visitor.prototype.vTupleExpression = function(tupleExpression, arg){return this.vExpression(tupleExpression, arg);};Visitor.prototype.vAll = function(all, arg){return this.vDefault(all, arg);};Visitor.prototype.vFormalGenericParameter = function(formalGenericParameter, arg){return this.vDefault(formalGenericParameter, arg);};Visitor.prototype.vExtendedFeatureName = function(extendedFeatureName, arg){return this.vDefault(extendedFeatureName, arg);};Visitor.prototype.vFrozenNameAlias = function(frozenNameAlias, arg){return this.vExtendedFeatureName(frozenNameAlias, arg);};Visitor.prototype.vPrecursorCall = function(precursorCall, arg){return this.vInstruction(precursorCall, arg);};Visitor.prototype.vTypeLikeFeature = function(typeLikeFeature, arg){return this.vDefault(typeLikeFeature, arg);};Visitor.prototype.vTypeLikeCurrent = function(typeLikeCurrent, arg){return this.vDefault(typeLikeCurrent, arg);};Visitor.prototype.vAliasBlock = function(aliasBlock, arg){return this.vDefault(aliasBlock, arg);};Visitor.prototype.vAddress = function(address, arg){return this.vExpression(address, arg);};Visitor.prototype.vInspectInstruction = function(inspectInstruction, arg){return this.vInstruction(inspectInstruction, arg);};Visitor.prototype.vWhenPart = function(whenPart, arg){return this.vDefault(whenPart, arg);};Visitor.prototype.vLoopElement = function(loopElement, arg){return this.vDefault(loopElement, arg);};Visitor.prototype.vAcrossAs = function(acrossAs, arg){return this.vLoopElement(acrossAs, arg);};Visitor.prototype.vAcrossSomeOrAll = function(acrossSomeOrAll, arg){return this.vLoopElement(acrossSomeOrAll, arg);};Visitor.prototype.vAcrossSome = function(acrossSome, arg){return this.vAcrossSomeOrAll(acrossSome, arg);};Visitor.prototype.vAcrossAll = function(acrossAll, arg){return this.vAcrossSomeOrAll(acrossAll, arg);};Visitor.prototype.vLoopBody = function(loopInstructions, arg){return this.vLoopElement(loopInstructions, arg);};Visitor.prototype.vLoopFrom = function(loopFrom, arg){return this.vLoopElement(loopFrom, arg);};Visitor.prototype.vLoop = function(loop, arg){return this.vInstruction(loop, arg);};Visitor.prototype.vLoopUntil = function(loopUntil, arg){return this.vLoopElement(loopUntil, arg);};Visitor.prototype.vLoopVariant = function(loopVariant, arg){return this.vLoopElement(loopVariant, arg);};Visitor.prototype.vLoopInvariant = function(loopInvariant, arg){return this.vLoopElement(loopInvariant, arg);};Visitor.prototype.vDebugBlock = function(debugBlock, arg){return this.vInstruction(debugBlock, arg);};Visitor.prototype.vManifestConstant = function(manifestConstant, arg){return this.vDefault(manifestConstant, arg);};Visitor.prototype.vNonObjectCall = function(nonObjectCall, arg){return this.vExpression(nonObjectCall, arg);};Visitor.prototype.vNoOp = function(noOp, arg){return this.vDefault(noOp, arg);};Visitor.prototype.vCreationClause = function(creationClause, arg){return this.vDefault(creationClause, arg);};Visitor.prototype.vAgentCall = function(agentCall, arg){return this.vExpression(agentCall, arg);};return Visitor;})();_ast.Visitor = Visitor;})(ast = eiffel.ast || (eiffel.ast = {}));})(eiffel || (eiffel = {}));var eiffel;(function(eiffel){var util;(function(util){;function caseIgnoreEquals(one, other){var oneIsNull=one === null;var otherIsNull=other === null;if(oneIsNull !== otherIsNull){console.warn("caseIgnore with null values", one, other);return false;}if(oneIsNull && otherIsNull){console.warn("caseIgnore with two null values");return true;}var firstNotAString=!(typeof one === "string");if(firstNotAString){console.error("First param is not a string", one);}var secondNotAString=!(typeof other === "string");if(secondNotAString){console.error("Second param is not a string", other);}if(firstNotAString || secondNotAString){throw new Error("Type error in caseIgnoreEquals");}return one.toUpperCase() === other.toUpperCase();}util.caseIgnoreEquals = caseIgnoreEquals;function cartesianProduct(){var arrays=[];for(var _i=0; _i < arguments.length; _i++) {arrays[_i - 0] = arguments[_i];}return arrays.reduce(function(reduced, values){var partialCartesians=reduced;return flatten(partialCartesians.map(function(partialCartesian){return values.map(function(value){return partialCartesian.concat([value]);});}));}, [[]]);}util.cartesianProduct = cartesianProduct;function flatten(xs){var result=[];xs.forEach(function(x){Array.prototype.push.apply(result, x);});return result;}util.flatten = flatten;function all(xs, f){for(var i=0; i < xs.length; i++) {var x=xs[i];if(!f(x)){return false;}}return true;}util.all = all;function pairs(ts){var result=[];for(var i=0; i < ts.length; i++) {for(var j=i + 1; j < ts.length; j++) {result.push([ts[i], ts[j]]);}}return result;}util.pairs = pairs;function group(vs, groupBy){var result=new Map();vs.forEach(function(v){var key=groupBy(v);if(!result.has(key)){result.set(key, []);}result.get(key).push(v);});return result;}util.group = group;function zip(xs, ys){var result=[];var maxI=Math.min(xs.length, ys.length);for(var i=0; i < maxI; i++) {result.push([xs[i], ys[i]]);}return result;}util.zip = zip;function debugAssert(mustBeTrue, message){if(!mustBeTrue){console.error(message);debugger;throw new Error(message);}}util.debugAssert = debugAssert;var Graph=(function(){function Graph(nodes, options){this.nodes = new Set();this.edges = new Map();if(options instanceof Object && options.hasOwnProperty("autoAdd")){this.autoAdd = options.autoAdd;}nodes.forEach(function(node){debugAssert(!this.nodes.has(node), "Duplicate node in graph");this.nodes.add(node);}, this);}Graph.prototype.addNode = function(node, ignoreDuplicate){if(ignoreDuplicate === void 0){ignoreDuplicate = true;}if(!ignoreDuplicate){debugAssert(!this.nodes.has(node), "Adding node that is already in graph");}this.nodes.add(node);return this;};Graph.prototype.connect = function(from, to, debugDuplicate){if(debugDuplicate === void 0){debugDuplicate = false;}debugAssert(from !== null && from !== undefined, "First argument is null or undefiined");debugAssert(to !== null && to !== undefined, "Second argument is null or undefiined");if(this.autoAdd){if(!this.nodes.has(from)){this.addNode(from);}if(!this.nodes.has(to)){this.addNode(to);}}else {debugAssert(this.nodes.has(from), "Cannot work with nodes that aren't in graph");debugAssert(this.nodes.has(to), "Cannot work with nodes that aren't in graph");}debugAssert(from !== to, "self-cycles are not supported");var edges=this.edgesFor(from);if(debugDuplicate && edges.has(to)){debugAssert(true, "Edge already exists in graph");}var incomingEdges=this.edgesTo(to);edges.add(to);incomingEdges.add(from);return this;};Graph.prototype.disconnect = function(from, to, debugMissing){if(debugMissing === void 0){debugMissing = false;}debugAssert(from !== null && from !== undefined, "First argument is null or undefiined");debugAssert(to !== null && to !== undefined, "Second argument is null or undefiined");if(this.autoAdd){if(!this.nodes.has(from)){this.addNode(from);}if(!this.nodes.has(to)){this.addNode(to);}}else {debugAssert(this.nodes.has(from), "Cannot work with nodes that aren't in graph");debugAssert(this.nodes.has(to), "Cannot work with nodes that aren't in graph");}debugAssert(from !== to, "self-cycles are not supported");var edges=this.edgesFor(from);if(debugMissing && !edges.has(to)){debugAssert(true, "Edge to be removed does not exist");}var incomingEdges=this.edgesTo(to);edges["delete"](to);incomingEdges["delete"](from);return this;};Graph.prototype.goesTo = function(from, potentialTarget){return this.edgesFor(from).has(potentialTarget);};Graph.prototype.edgesFor = function(node){debugAssert(this.nodes.has(node), "Node is not in graph");if(!this.edges.has(node)){this.edges.set(node, new Set());}return this.edges.get(node);};Graph.prototype.edgesTo = function(node){debugAssert(this.nodes.has(node), "Node is not in graph");if(!this.incomingEdges.has(node)){this.incomingEdges.set(node, new Set());}return this.incomingEdges.get(node);};Graph.prototype.tarjan = function(){var stack=[];var onStack=new Set();var assignment=new Map();var lowLinks=new Map();var results=[];var index=0;var graph=this;function getStronglyConnectedComponent(node){if(assignment.has(node)){return;}else {stack.push(node);onStack.add(node);assignment.set(node, index);lowLinks.set(node, index);index++;}var edges=graph.edgesFor(node);edges.forEach(function(targetNode){if(!assignment.has(targetNode)){getStronglyConnectedComponent(targetNode);lowLinks.set(node, Math.min(lowLinks.get(node), lowLinks.get(targetNode)));}else if(onStack.has(targetNode)){lowLinks.set(node, Math.min(lowLinks.get(node), lowLinks.get(targetNode)));}});if(lowLinks.get(node) === assignment.get(node)){var component=[];var stackNode;do {stackNode = stack.pop();component.push(stackNode);onStack["delete"](stackNode);}while(stackNode !== node);results.push(component);}}debugAssert(stack.length === 0, "Stack is not empty");this.nodes.forEach(getStronglyConnectedComponent);return results;};return Graph;})();util.Graph = Graph;function mapToArray(map){var result=[];map.forEach(function(x){return result.push(x);});return result;}util.mapToArray = mapToArray;function exactlyOne(){var xs=[];for(var _i=0; _i < arguments.length; _i++) {xs[_i - 0] = arguments[_i];}var one=false;var moreThanOne=false;xs.forEach(function(x){if(x && !one){one = true;}else if(x && one){moreThanOne = true;}});if(moreThanOne){return false;}return one;}util.exactlyOne = exactlyOne;var ExecutionEdge=(function(){function ExecutionEdge(label, data, fromNode, toNode){this.fromNode = fromNode;this.toNode = toNode;this.fromIndex = fromNode.edgesOut.length;this.toIndex = toNode.edgesIn.length;fromNode.edgesOut.push(this);toNode.edgesIn.push(this);this.label = label;this.data = data;}return ExecutionEdge;})();util.ExecutionEdge = ExecutionEdge;var ExecutionNode=(function(){function ExecutionNode(data){this.edgesOut = [];this.edgesIn = [];this.data = data;}ExecutionNode.prototype.connectTo = function(to, label, data){new ExecutionEdge(label, data, this, to);return to;};ExecutionNode.prototype.connectNew = function(data, label, edgeData){new ExecutionEdge(label, edgeData, this, new ExecutionNode(data));};return ExecutionNode;})();util.ExecutionNode = ExecutionNode;var ExecutionGraph=(function(){function ExecutionGraph(){}return ExecutionGraph;})();util.ExecutionGraph = ExecutionGraph;})(util = eiffel.util || (eiffel.util = {}));})(eiffel || (eiffel = {}));var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var explain;(function(explain){var RangeGatherer=(function(_super){__extends(RangeGatherer, _super);function RangeGatherer(){_super.call(this);this.ranges = [];}RangeGatherer.prototype.vDefault = function(ast, parent){if(ast.start && ast.end){this.ranges.push({start:ast.start.offset, end:ast.end.offset, id:ast});}return _super.prototype.vDefault.call(this, ast, ast);};return RangeGatherer;})(eiffel.ast.Visitor);explain.RangeGatherer = RangeGatherer;var AstExplanation=(function(){function AstExplanation(nodeThenParentThenAncestors){if(!nodeThenParentThenAncestors){console.error("AstExplainer: Missing array argument");}if(nodeThenParentThenAncestors.length === 0){console.log("AstExplainer: Empty array, no node provided");}this.node = nodeThenParentThenAncestors[0];this.parent = nodeThenParentThenAncestors.length >= 2?nodeThenParentThenAncestors[1]:null;this.parentsThenAncestors = nodeThenParentThenAncestors.slice(1);if(this.node && this.parent){this.context = this.parent._acceptor.accept(new ContextExplainer(), this.node);}}return AstExplanation;})();explain.AstExplanation = AstExplanation;var ContextExplanation=(function(){function ContextExplanation(title, description, node){this.title = title;this.description = description;this.node = node;}return ContextExplanation;})();explain.ContextExplanation = ContextExplanation;var TechnicalExplanation=(function(){function TechnicalExplanation(){}return TechnicalExplanation;})();explain.TechnicalExplanation = TechnicalExplanation;function context(mapping, ast, child){console.log("Requesting context for", mapping, ast, child);function explainArray(key, array, explainer, ast, child){if(key.endsWith("[]")){var key=key.substr(0, key.length - 2);console.log(key);if(key.endsWith("[]")){console.error("nested arrays not supported currently");}else {if(array && array.length > 0){var index=array.indexOf(child);if(index !== -1){console.log("Array match found");explainer(ast, child, index, array);}}else {return undefined;}}}else {console.error("Invoked explainArray without an array");}}for(var key in mapping) {if(mapping.hasOwnProperty(key)){if(key.endsWith("[]")){if(ast[key] && ast[key].length){}}else {if(ast[key] === child){return mapping[key](ast, child);}}}}return undefined;}var TechnicalExplainer=(function(_super){__extends(TechnicalExplainer, _super);function TechnicalExplainer(){_super.apply(this, arguments);}TechnicalExplainer.prototype.vClass = function(_class, arg){context({name:function name(){return new ContextExplanation("Classname", "This is the name of the class", arg);}}, eiffel.ast, arg);return _super.prototype.vClass.call(this, _class, arg);};TechnicalExplainer.prototype.vFeatureList = function(featureList, arg){return _super.prototype.vFeatureList.call(this, featureList, arg);};TechnicalExplainer.prototype.vFeature = function(feature, arg){return _super.prototype.vFeature.call(this, feature, arg);};TechnicalExplainer.prototype.vAttr = function(attr, arg){return _super.prototype.vAttr.call(this, attr, arg);};TechnicalExplainer.prototype.vRoutine = function(feature, arg){return _super.prototype.vRoutine.call(this, feature, arg);};TechnicalExplainer.prototype.vFunction = function(func, arg){return _super.prototype.vFunction.call(this, func, arg);};TechnicalExplainer.prototype.vProcedure = function(procedure, arg){return _super.prototype.vProcedure.call(this, procedure, arg);};TechnicalExplainer.prototype.vChildren = function(ast, arg){return _super.prototype.vChildren.call(this, ast, arg);};TechnicalExplainer.prototype.vIdentifier = function(identifier, arg){return "An 'identifier' is a name";};TechnicalExplainer.prototype.vType = function(type, arg){return _super.prototype.vType.call(this, type, arg);};TechnicalExplainer.prototype.vParent = function(parent, arg){return "This specifies a type, from which the class features, which can be modified with adaptions.";};TechnicalExplainer.prototype.vInstruction = function(instruction, arg){return _super.prototype.vInstruction.call(this, instruction, arg);};TechnicalExplainer.prototype.vDefault = function(ast, arg){return undefined;};TechnicalExplainer.prototype.vCreateInstruction = function(createInstruction, arg){return _super.prototype.vCreateInstruction.call(this, createInstruction, arg);};TechnicalExplainer.prototype.vAssignment = function(assignment, arg){return _super.prototype.vSetterAssignment.call(this, assignment, arg);};TechnicalExplainer.prototype.vExportChangeset = function(exportChangeset, arg){return _super.prototype.vExportChangeset.call(this, exportChangeset, arg);};TechnicalExplainer.prototype.vPrecondition = function(precondition, arg){return _super.prototype.vPrecondition.call(this, precondition, arg);};TechnicalExplainer.prototype.vPostcondition = function(postcondition, arg){return _super.prototype.vPostcondition.call(this, postcondition, arg);};TechnicalExplainer.prototype.vInvariantcondition = function(invariantcondition, arg){return _super.prototype.vInvariantcondition.call(this, invariantcondition, arg);};TechnicalExplainer.prototype.vCondition = function(condition, arg){return _super.prototype.vCondition.call(this, condition, arg);};TechnicalExplainer.prototype.vUnaryOp = function(unaryOp, arg){return _super.prototype.vUnaryOp.call(this, unaryOp, arg);};TechnicalExplainer.prototype.vBinaryOp = function(binaryOp, arg){return _super.prototype.vBinaryOp.call(this, binaryOp, arg);};TechnicalExplainer.prototype.vExpression = function(expression, arg){return _super.prototype.vExpression.call(this, expression, arg);};TechnicalExplainer.prototype.vCurrentExpr = function(currentExpression, arg){return _super.prototype.vCurrentExpr.call(this, currentExpression, arg);};TechnicalExplainer.prototype.vCreateExpression = function(createExpression, arg){return _super.prototype.vCreateExpression.call(this, createExpression, arg);};TechnicalExplainer.prototype.vIntLiteral = function(intLiteral, arg){return _super.prototype.vIntLiteral.call(this, intLiteral, arg);};TechnicalExplainer.prototype.vRealLiteral = function(realLiteral, arg){return _super.prototype.vRealLiteral.call(this, realLiteral, arg);};TechnicalExplainer.prototype.vStringLiteral = function(stringLiteral, arg){return _super.prototype.vStringLiteral.call(this, stringLiteral, arg);};TechnicalExplainer.prototype.vLiteral = function(literal, arg){return _super.prototype.vLiteral.call(this, literal, arg);};TechnicalExplainer.prototype.vConstantAttribute = function(constantAttribute, arg){return _super.prototype.vConstantAttribute.call(this, constantAttribute, arg);};TechnicalExplainer.prototype.vVarOrConstAttribute = function(varOrConstAttribute, arg){return _super.prototype.vVarOrConstAttribute.call(this, varOrConstAttribute, arg);};TechnicalExplainer.prototype.vAlias = function(alias, arg){return _super.prototype.vAlias.call(this, alias, arg);};TechnicalExplainer.prototype.vCharLiteral = function(charLiteral, arg){return _super.prototype.vCharLiteral.call(this, charLiteral, arg);};TechnicalExplainer.prototype.vBooleanLiteral = function(booleanLiteral, arg){return _super.prototype.vBooleanLiteral.call(this, booleanLiteral, arg);};TechnicalExplainer.prototype.vVoidLiteral = function(voidLiteral, arg){return _super.prototype.vVoidLiteral.call(this, voidLiteral, arg);};TechnicalExplainer.prototype.vCallExpression = function(callExpression, arg){return _super.prototype.vCallExpression.call(this, callExpression, arg);};TechnicalExplainer.prototype.vIndexExpression = function(indexExpression, arg){return _super.prototype.vIndexExpression.call(this, indexExpression, arg);};TechnicalExplainer.prototype.vVarDeclList = function(varDeclList, arg){return _super.prototype.vVarDeclList.call(this, varDeclList, arg);};TechnicalExplainer.prototype.vVarDeclEntry = function(varDeclEntry, arg){return _super.prototype.vVarDeclEntry.call(this, varDeclEntry, arg);};TechnicalExplainer.prototype.vFromLoop = function(fromLoop, arg){return _super.prototype.vFromLoop.call(this, fromLoop, arg);};TechnicalExplainer.prototype.vIfElse = function(ifElse, arg){return _super.prototype.vIfElse.call(this, ifElse, arg);};TechnicalExplainer.prototype.vElseIf = function(elseIf, arg){return _super.prototype.vElseIf.call(this, elseIf, arg);};TechnicalExplainer.prototype.vCheckInstruction = function(checkInstruction, arg){return _super.prototype.vCheckInstruction.call(this, checkInstruction, arg);};TechnicalExplainer.prototype.vExternalBlock = function(externalBlock, arg){return _super.prototype.vExternalBlock.call(this, externalBlock, arg);};TechnicalExplainer.prototype.vResultExpression = function(resultExpression, arg){return _super.prototype.vResultExpression.call(this, resultExpression, arg);};TechnicalExplainer.prototype.vAnchoredType = function(anchoredType, arg){return _super.prototype.vAnchoredType.call(this, anchoredType, arg);};TechnicalExplainer.prototype.vIdentifierAccess = function(identifierAccess, arg){return _super.prototype.vIdentifierAccess.call(this, identifierAccess, arg);};TechnicalExplainer.prototype.vObsoleteBlock = function(obsoleteBlock, arg){return _super.prototype.vObsoleteBlock.call(this, obsoleteBlock, arg);};TechnicalExplainer.prototype.vAttachedExpression = function(attachedExpression, arg){return _super.prototype.vAttachedExpression.call(this, attachedExpression, arg);};TechnicalExplainer.prototype.vTypeExpression = function(typeExpression, arg){return _super.prototype.vTypeExpression.call(this, typeExpression, arg);};TechnicalExplainer.prototype.vParentGroup = function(parentGroup, arg){return _super.prototype.vParentGroup.call(this, parentGroup, arg);};TechnicalExplainer.prototype.vRoutineInstructions = function(routineInstructions, arg){return _super.prototype.vRoutineInstructions.call(this, routineInstructions, arg);};TechnicalExplainer.prototype.vOnceBlock = function(onceBlock, arg){return _super.prototype.vOnceBlock.call(this, onceBlock, arg);};TechnicalExplainer.prototype.vDoBlock = function(doBlock, arg){return _super.prototype.vDoBlock.call(this, doBlock, arg);};TechnicalExplainer.prototype.vDeferredBlock = function(deferredBlock, arg){return _super.prototype.vDeferredBlock.call(this, deferredBlock, arg);};TechnicalExplainer.prototype.vPreconditionBlock = function(preconditionBlock, arg){return _super.prototype.vPreconditionBlock.call(this, preconditionBlock, arg);};TechnicalExplainer.prototype.vConditionBlock = function(conditionBlock, arg){return _super.prototype.vConditionBlock.call(this, conditionBlock, arg);};TechnicalExplainer.prototype.vPostconditionBlock = function(postconditionBlock, arg){return _super.prototype.vPostconditionBlock.call(this, postconditionBlock, arg);};TechnicalExplainer.prototype.vUnqualifiedCallExpression = function(unqualifiedCallExpression, arg){return _super.prototype.vUnqualifiedCallExpression.call(this, unqualifiedCallExpression, arg);};TechnicalExplainer.prototype.vLocalsBlock = function(localsBlock, arg){return _super.prototype.vLocalsBlock.call(this, localsBlock, arg);};TechnicalExplainer.prototype.vTypeConstraint = function(typeConstraint, arg){return _super.prototype.vTypeConstraint.call(this, typeConstraint, arg);};TechnicalExplainer.prototype.vRename = function(rename, arg){return _super.prototype.vRename.call(this, rename, arg);};TechnicalExplainer.prototype.vToken = function(token, arg){return _super.prototype.vToken.call(this, token, arg);};TechnicalExplainer.prototype.vRedefines = function(redefines, arg){return _super.prototype.vRedefines.call(this, redefines, arg);};TechnicalExplainer.prototype.vUndefines = function(undefines, arg){return _super.prototype.vUndefines.call(this, undefines, arg);};TechnicalExplainer.prototype.vRenames = function(renames, arg){return _super.prototype.vRenames.call(this, renames, arg);};TechnicalExplainer.prototype.vSelects = function(selects, arg){return _super.prototype.vSelects.call(this, selects, arg);};TechnicalExplainer.prototype.vNewExports = function(newExports, arg){return _super.prototype.vNewExports.call(this, newExports, arg);};TechnicalExplainer.prototype.vTupleExpression = function(tupleExpression, arg){return _super.prototype.vTupleExpression.call(this, tupleExpression, arg);};TechnicalExplainer.prototype.vAll = function(all, arg){return _super.prototype.vAll.call(this, all, arg);};TechnicalExplainer.prototype.vFormalGenericParameter = function(formalGenericParameter, arg){return _super.prototype.vFormalGenericParameter.call(this, formalGenericParameter, arg);};TechnicalExplainer.prototype.vExtendedFeatureName = function(extendedFeatureName, arg){return explain({name:function name(){return "This is the name of the feature.";}}, extendedFeatureName, arg);};TechnicalExplainer.prototype.vFrozenNameAlias = function(frozenNameAlias, arg){return _super.prototype.vFrozenNameAlias.call(this, frozenNameAlias, arg);};TechnicalExplainer.prototype.vPrecursorCall = function(precursorCall, arg){return _super.prototype.vPrecursorCall.call(this, precursorCall, arg);};TechnicalExplainer.prototype.vTypeLikeFeature = function(typeLikeFeature, arg){return _super.prototype.vTypeLikeFeature.call(this, typeLikeFeature, arg);};TechnicalExplainer.prototype.vTypeLikeCurrent = function(typeLikeCurrent, arg){return _super.prototype.vTypeLikeCurrent.call(this, typeLikeCurrent, arg);};TechnicalExplainer.prototype.vAliasBlock = function(aliasBlock, arg){return _super.prototype.vAliasBlock.call(this, aliasBlock, arg);};TechnicalExplainer.prototype.vAddress = function(address, arg){return _super.prototype.vAddress.call(this, address, arg);};TechnicalExplainer.prototype.vInspectInstruction = function(inspectInstruction, arg){return _super.prototype.vInspectInstruction.call(this, inspectInstruction, arg);};TechnicalExplainer.prototype.vWhenPart = function(whenPart, arg){return _super.prototype.vWhenPart.call(this, whenPart, arg);};TechnicalExplainer.prototype.vLoopElement = function(loopElement, arg){return _super.prototype.vLoopElement.call(this, loopElement, arg);};TechnicalExplainer.prototype.vAcrossAs = function(acrossAs, arg){return _super.prototype.vAcrossAs.call(this, acrossAs, arg);};TechnicalExplainer.prototype.vAcrossSomeOrAll = function(acrossSomeOrAll, arg){return _super.prototype.vAcrossSomeOrAll.call(this, acrossSomeOrAll, arg);};TechnicalExplainer.prototype.vAcrossSome = function(acrossSome, arg){return _super.prototype.vAcrossSome.call(this, acrossSome, arg);};TechnicalExplainer.prototype.vAcrossAll = function(acrossAll, arg){return _super.prototype.vAcrossAll.call(this, acrossAll, arg);};TechnicalExplainer.prototype.vLoopBody = function(loopInstructions, arg){return _super.prototype.vLoopBody.call(this, loopInstructions, arg);};TechnicalExplainer.prototype.vLoopFrom = function(loopFrom, arg){return _super.prototype.vLoopFrom.call(this, loopFrom, arg);};TechnicalExplainer.prototype.vLoop = function(loop, arg){return _super.prototype.vLoop.call(this, loop, arg);};TechnicalExplainer.prototype.vLoopUntil = function(loopUntil, arg){return _super.prototype.vLoopUntil.call(this, loopUntil, arg);};TechnicalExplainer.prototype.vLoopVariant = function(loopVariant, arg){return _super.prototype.vLoopVariant.call(this, loopVariant, arg);};TechnicalExplainer.prototype.vLoopInvariant = function(loopInvariant, arg){return _super.prototype.vLoopInvariant.call(this, loopInvariant, arg);};TechnicalExplainer.prototype.vDebugBlock = function(debugBlock, arg){return _super.prototype.vDebugBlock.call(this, debugBlock, arg);};TechnicalExplainer.prototype.vManifestConstant = function(manifestConstant, arg){return _super.prototype.vManifestConstant.call(this, manifestConstant, arg);};TechnicalExplainer.prototype.vNonObjectCall = function(nonObjectCall, arg){return _super.prototype.vNonObjectCall.call(this, nonObjectCall, arg);};TechnicalExplainer.prototype.vNoOp = function(noOp, arg){return _super.prototype.vNoOp.call(this, noOp, arg);};TechnicalExplainer.prototype.vCreationClause = function(creationClause, arg){return _super.prototype.vCreationClause.call(this, creationClause, arg);};TechnicalExplainer.prototype.vAgentCall = function(agentCall, arg){return _super.prototype.vAgentCall.call(this, agentCall, arg);};return TechnicalExplainer;})(eiffel.ast.Visitor);explain.TechnicalExplainer = TechnicalExplainer;var ContextExplainer=(function(_super){__extends(ContextExplainer, _super);function ContextExplainer(){_super.apply(this, arguments);}ContextExplainer.prototype.vClass = function(_class, arg){return context({name:function name(){console.log("Explained class Name");return new ContextExplanation("Classname", "This is the name of the class", arg);}}, _class, arg);};ContextExplainer.prototype.vFeatureList = function(featureList, arg){return _super.prototype.vFeatureList.call(this, featureList, arg);};ContextExplainer.prototype.vFeature = function(feature, arg){return context({rawType:function rawType(){return new ContextExplanation("Type of feature", "This is the type of object you will receive when calling this feature", arg);}}, feature, arg);};ContextExplainer.prototype.vAttr = function(attr, arg){return _super.prototype.vAttr.call(this, attr, arg);};ContextExplainer.prototype.vRoutine = function(feature, arg){return _super.prototype.vRoutine.call(this, feature, arg);};ContextExplainer.prototype.vFunction = function(func, arg){return _super.prototype.vFunction.call(this, func, arg);};ContextExplainer.prototype.vProcedure = function(procedure, arg){return _super.prototype.vProcedure.call(this, procedure, arg);};ContextExplainer.prototype.vChildren = function(ast, arg){return _super.prototype.vChildren.call(this, ast, arg);};ContextExplainer.prototype.vIdentifier = function(identifier, arg){return _super.prototype.vIdentifier.call(this, identifier, arg);};ContextExplainer.prototype.vType = function(type, arg){return _super.prototype.vType.call(this, type, arg);};ContextExplainer.prototype.vParent = function(parent, arg){return _super.prototype.vParent.call(this, parent, arg);};ContextExplainer.prototype.vInstruction = function(instruction, arg){return _super.prototype.vInstruction.call(this, instruction, arg);};ContextExplainer.prototype.vDefault = function(ast, arg){return null;};ContextExplainer.prototype.vCreateInstruction = function(createInstruction, arg){return _super.prototype.vCreateInstruction.call(this, createInstruction, arg);};ContextExplainer.prototype.vSetterAssignment = function(assignment, arg){return _super.prototype.vSetterAssignment.call(this, assignment, arg);};ContextExplainer.prototype.vExportChangeset = function(exportChangeset, arg){return _super.prototype.vExportChangeset.call(this, exportChangeset, arg);};ContextExplainer.prototype.vPrecondition = function(precondition, arg){return _super.prototype.vPrecondition.call(this, precondition, arg);};ContextExplainer.prototype.vPostcondition = function(postcondition, arg){return _super.prototype.vPostcondition.call(this, postcondition, arg);};ContextExplainer.prototype.vInvariantcondition = function(invariantcondition, arg){return _super.prototype.vInvariantcondition.call(this, invariantcondition, arg);};ContextExplainer.prototype.vCondition = function(condition, arg){return _super.prototype.vCondition.call(this, condition, arg);};ContextExplainer.prototype.vUnaryOp = function(unaryOp, arg){return _super.prototype.vUnaryOp.call(this, unaryOp, arg);};ContextExplainer.prototype.vBinaryOp = function(binaryOp, arg){return _super.prototype.vBinaryOp.call(this, binaryOp, arg);};ContextExplainer.prototype.vExpression = function(expression, arg){return _super.prototype.vExpression.call(this, expression, arg);};ContextExplainer.prototype.vCurrentExpr = function(currentExpression, arg){return _super.prototype.vCurrentExpr.call(this, currentExpression, arg);};ContextExplainer.prototype.vCreateExpression = function(createExpression, arg){return _super.prototype.vCreateExpression.call(this, createExpression, arg);};ContextExplainer.prototype.vIntLiteral = function(intLiteral, arg){return _super.prototype.vIntLiteral.call(this, intLiteral, arg);};ContextExplainer.prototype.vRealLiteral = function(realLiteral, arg){return _super.prototype.vRealLiteral.call(this, realLiteral, arg);};ContextExplainer.prototype.vStringLiteral = function(stringLiteral, arg){return _super.prototype.vStringLiteral.call(this, stringLiteral, arg);};ContextExplainer.prototype.vLiteral = function(literal, arg){return _super.prototype.vLiteral.call(this, literal, arg);};ContextExplainer.prototype.vConstantAttribute = function(constantAttribute, arg){return _super.prototype.vConstantAttribute.call(this, constantAttribute, arg);};ContextExplainer.prototype.vVarOrConstAttribute = function(varOrConstAttribute, arg){return _super.prototype.vVarOrConstAttribute.call(this, varOrConstAttribute, arg);};ContextExplainer.prototype.vAlias = function(alias, arg){return _super.prototype.vAlias.call(this, alias, arg);};ContextExplainer.prototype.vCharLiteral = function(charLiteral, arg){return _super.prototype.vCharLiteral.call(this, charLiteral, arg);};ContextExplainer.prototype.vBooleanLiteral = function(booleanLiteral, arg){return _super.prototype.vBooleanLiteral.call(this, booleanLiteral, arg);};ContextExplainer.prototype.vVoidLiteral = function(voidLiteral, arg){return _super.prototype.vVoidLiteral.call(this, voidLiteral, arg);};ContextExplainer.prototype.vCallExpression = function(callExpression, arg){return _super.prototype.vCallExpression.call(this, callExpression, arg);};ContextExplainer.prototype.vIndexExpression = function(indexExpression, arg){return _super.prototype.vIndexExpression.call(this, indexExpression, arg);};ContextExplainer.prototype.vVarDeclList = function(varDeclList, arg){return _super.prototype.vVarDeclList.call(this, varDeclList, arg);};ContextExplainer.prototype.vVarDeclEntry = function(varDeclEntry, arg){return _super.prototype.vVarDeclEntry.call(this, varDeclEntry, arg);};ContextExplainer.prototype.vFromLoop = function(fromLoop, arg){return _super.prototype.vFromLoop.call(this, fromLoop, arg);};ContextExplainer.prototype.vIfElse = function(ifElse, arg){return _super.prototype.vIfElse.call(this, ifElse, arg);};ContextExplainer.prototype.vElseIf = function(elseIf, arg){return _super.prototype.vElseIf.call(this, elseIf, arg);};ContextExplainer.prototype.vCheckInstruction = function(checkInstruction, arg){return _super.prototype.vCheckInstruction.call(this, checkInstruction, arg);};ContextExplainer.prototype.vExternalBlock = function(externalBlock, arg){return _super.prototype.vExternalBlock.call(this, externalBlock, arg);};ContextExplainer.prototype.vResultExpression = function(resultExpression, arg){return _super.prototype.vResultExpression.call(this, resultExpression, arg);};ContextExplainer.prototype.vAnchoredType = function(anchoredType, arg){return _super.prototype.vAnchoredType.call(this, anchoredType, arg);};ContextExplainer.prototype.vIdentifierAccess = function(identifierAccess, arg){return _super.prototype.vIdentifierAccess.call(this, identifierAccess, arg);};ContextExplainer.prototype.vObsoleteBlock = function(obsoleteBlock, arg){return _super.prototype.vObsoleteBlock.call(this, obsoleteBlock, arg);};ContextExplainer.prototype.vAttachedExpression = function(attachedExpression, arg){return _super.prototype.vAttachedExpression.call(this, attachedExpression, arg);};ContextExplainer.prototype.vTypeExpression = function(typeExpression, arg){return _super.prototype.vTypeExpression.call(this, typeExpression, arg);};ContextExplainer.prototype.vParentGroup = function(parentGroup, arg){return _super.prototype.vParentGroup.call(this, parentGroup, arg);};ContextExplainer.prototype.vRoutineInstructions = function(routineInstructions, arg){return _super.prototype.vRoutineInstructions.call(this, routineInstructions, arg);};ContextExplainer.prototype.vOnceBlock = function(onceBlock, arg){return _super.prototype.vOnceBlock.call(this, onceBlock, arg);};ContextExplainer.prototype.vDoBlock = function(doBlock, arg){return _super.prototype.vDoBlock.call(this, doBlock, arg);};ContextExplainer.prototype.vDeferredBlock = function(deferredBlock, arg){return _super.prototype.vDeferredBlock.call(this, deferredBlock, arg);};ContextExplainer.prototype.vPreconditionBlock = function(preconditionBlock, arg){return _super.prototype.vPreconditionBlock.call(this, preconditionBlock, arg);};ContextExplainer.prototype.vConditionBlock = function(conditionBlock, arg){return _super.prototype.vConditionBlock.call(this, conditionBlock, arg);};ContextExplainer.prototype.vPostconditionBlock = function(postconditionBlock, arg){return _super.prototype.vPostconditionBlock.call(this, postconditionBlock, arg);};ContextExplainer.prototype.vUnqualifiedCallExpression = function(unqualifiedCallExpression, arg){return _super.prototype.vUnqualifiedCallExpression.call(this, unqualifiedCallExpression, arg);};ContextExplainer.prototype.vLocalsBlock = function(localsBlock, arg){return _super.prototype.vLocalsBlock.call(this, localsBlock, arg);};ContextExplainer.prototype.vTypeConstraint = function(typeConstraint, arg){return _super.prototype.vTypeConstraint.call(this, typeConstraint, arg);};ContextExplainer.prototype.vRename = function(rename, arg){return _super.prototype.vRename.call(this, rename, arg);};ContextExplainer.prototype.vToken = function(token, arg){return _super.prototype.vToken.call(this, token, arg);};ContextExplainer.prototype.vRedefines = function(redefines, arg){return _super.prototype.vRedefines.call(this, redefines, arg);};ContextExplainer.prototype.vUndefines = function(undefines, arg){return _super.prototype.vUndefines.call(this, undefines, arg);};ContextExplainer.prototype.vRenames = function(renames, arg){return _super.prototype.vRenames.call(this, renames, arg);};ContextExplainer.prototype.vSelects = function(selects, arg){return _super.prototype.vSelects.call(this, selects, arg);};ContextExplainer.prototype.vNewExports = function(newExports, arg){return _super.prototype.vNewExports.call(this, newExports, arg);};ContextExplainer.prototype.vTupleExpression = function(tupleExpression, arg){return _super.prototype.vTupleExpression.call(this, tupleExpression, arg);};ContextExplainer.prototype.vAll = function(all, arg){return _super.prototype.vAll.call(this, all, arg);};ContextExplainer.prototype.vFormalGenericParameter = function(formalGenericParameter, arg){return _super.prototype.vFormalGenericParameter.call(this, formalGenericParameter, arg);};ContextExplainer.prototype.vExtendedFeatureName = function(extendedFeatureName, arg){return context({name:function name(){return "This is the name of the feature.";}}, extendedFeatureName, arg);};ContextExplainer.prototype.vFrozenNameAlias = function(frozenNameAlias, arg){return _super.prototype.vFrozenNameAlias.call(this, frozenNameAlias, arg);};ContextExplainer.prototype.vPrecursorCall = function(precursorCall, arg){return _super.prototype.vPrecursorCall.call(this, precursorCall, arg);};ContextExplainer.prototype.vTypeLikeFeature = function(typeLikeFeature, arg){return _super.prototype.vTypeLikeFeature.call(this, typeLikeFeature, arg);};ContextExplainer.prototype.vTypeLikeCurrent = function(typeLikeCurrent, arg){return _super.prototype.vTypeLikeCurrent.call(this, typeLikeCurrent, arg);};ContextExplainer.prototype.vAliasBlock = function(aliasBlock, arg){return _super.prototype.vAliasBlock.call(this, aliasBlock, arg);};ContextExplainer.prototype.vAddress = function(address, arg){return _super.prototype.vAddress.call(this, address, arg);};ContextExplainer.prototype.vInspectInstruction = function(inspectInstruction, arg){return _super.prototype.vInspectInstruction.call(this, inspectInstruction, arg);};ContextExplainer.prototype.vWhenPart = function(whenPart, arg){return _super.prototype.vWhenPart.call(this, whenPart, arg);};ContextExplainer.prototype.vLoopElement = function(loopElement, arg){return _super.prototype.vLoopElement.call(this, loopElement, arg);};ContextExplainer.prototype.vAcrossAs = function(acrossAs, arg){return _super.prototype.vAcrossAs.call(this, acrossAs, arg);};ContextExplainer.prototype.vAcrossSomeOrAll = function(acrossSomeOrAll, arg){return _super.prototype.vAcrossSomeOrAll.call(this, acrossSomeOrAll, arg);};ContextExplainer.prototype.vAcrossSome = function(acrossSome, arg){return _super.prototype.vAcrossSome.call(this, acrossSome, arg);};ContextExplainer.prototype.vAcrossAll = function(acrossAll, arg){return _super.prototype.vAcrossAll.call(this, acrossAll, arg);};ContextExplainer.prototype.vLoopBody = function(loopInstructions, arg){return _super.prototype.vLoopBody.call(this, loopInstructions, arg);};ContextExplainer.prototype.vLoopFrom = function(loopFrom, arg){return _super.prototype.vLoopFrom.call(this, loopFrom, arg);};ContextExplainer.prototype.vLoop = function(loop, arg){return _super.prototype.vLoop.call(this, loop, arg);};ContextExplainer.prototype.vLoopUntil = function(loopUntil, arg){return _super.prototype.vLoopUntil.call(this, loopUntil, arg);};ContextExplainer.prototype.vLoopVariant = function(loopVariant, arg){return _super.prototype.vLoopVariant.call(this, loopVariant, arg);};ContextExplainer.prototype.vLoopInvariant = function(loopInvariant, arg){return _super.prototype.vLoopInvariant.call(this, loopInvariant, arg);};ContextExplainer.prototype.vDebugBlock = function(debugBlock, arg){return _super.prototype.vDebugBlock.call(this, debugBlock, arg);};ContextExplainer.prototype.vManifestConstant = function(manifestConstant, arg){return _super.prototype.vManifestConstant.call(this, manifestConstant, arg);};ContextExplainer.prototype.vNonObjectCall = function(nonObjectCall, arg){return _super.prototype.vNonObjectCall.call(this, nonObjectCall, arg);};ContextExplainer.prototype.vNoOp = function(noOp, arg){return _super.prototype.vNoOp.call(this, noOp, arg);};ContextExplainer.prototype.vCreationClause = function(creationClause, arg){return _super.prototype.vCreationClause.call(this, creationClause, arg);};ContextExplainer.prototype.vAgentCall = function(agentCall, arg){return _super.prototype.vAgentCall.call(this, agentCall, arg);};return ContextExplainer;})(eiffel.ast.Visitor);explain.ContextExplainer = ContextExplainer;})(explain = eiffel.explain || (eiffel.explain = {}));})(eiffel || (eiffel = {}));var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var app;(function(app){app.debug = true;var Model=(function(){function Model(){this.nextWorkspaceId = 0;this.isInitialized = false;this.loadingProgress = 0;this.onInitialized = new OneOffEvent("onInitialized");this.subscribers = [];this.workspaces = [];this.addWorkspace();if(!app.debug){this.start();}else {this.finishInitialization();}}Model.prototype.subscribe = function(f){this.subscribers.push(f);};Model.prototype.start = function(){var that=this;function parseUpdate(progress){that.loadingProgress = progress;that.update();}function done(){that.finishInitialization();}function error(e){console.error("Error", e);that.finishInitialization();}eiffel.semantics.start(parseUpdate, done, error);};Model.prototype.addWorkspace = function(){var workspace=new Workspace(this, this.nextWorkspaceId);this.workspaces.push(workspace);workspace.setActive();this.update();this.nextWorkspaceId++;};Model.prototype.deleteWorkspace = function(){var currentIndex=this.workspaces.indexOf(this.activeWorkspace);if(currentIndex === -1){console.error("Active workspace not found in array");debugger;}this.workspaces.splice(currentIndex, 1);if(currentIndex > 0){this.workspaces[currentIndex - 1].setActive();}else if(currentIndex === 0 && this.workspaces.length >= 1){this.workspaces[currentIndex].setActive();}else if(this.workspaces.length === 0){this.addWorkspace();}};Model.prototype.finishInitialization = function(){this.isInitialized = true;this.onInitialized.trigger();this.update();};Model.prototype.update = function(){var _this=this;this.subscribers.forEach(function(f){f(_this);});};return Model;})();app.Model = Model;var Workspace=(function(){function Workspace(model, reactKey){this.files = [];this.errorMessage = "";this.nextFileId = 0;this.model = model;this.reactKey = reactKey;}Workspace.prototype.analyze = function(){var astsArray=this.files.map(function(f){return {filename:f.getFilename(), asts:f.asts};});this.analysis = eiffel.semantics.analyze(astsArray);};Workspace.prototype.setActive = function(){if(this.model.activeWorkspace){this.model.activeWorkspace.active = false;}this.model.activeWorkspace = this;this.active = true;this.model.update();};Workspace.prototype.importFile = function(filename, content){var file=new EiffelFile(filename, content, this.nextFileId, this);this.nextFileId++;this.addFile(file);};Workspace.prototype.addFile = function(file){var _this=this;this.files.push(file);if(this.files.length === 1){this.activeFile = file;file.isActive = true;}file.onError.subscribe(function(){_this.hasError = true;_this.model.update();});file.onParseSuccessful.subscribe(function(){_this.hasError = _this.files.some(function(f){return f.hasError;});if(!_this.hasError){_this.hasError = false;}_this.model.update();});this.model.update();};Workspace.prototype.addEmptyFile = function(){var file=new EiffelFile(null, "class TEST end", this.nextFileId, this);this.nextFileId++;this.addFile(file);};Workspace.prototype.removeFile = function(file){var index=this.files.indexOf(file);if(index === -1){console.error("Requested deletion of unmanaged file", file);if(eiffel.app.debug){debugger;}return false;}else {this.files.splice(index, 1);return true;}};return Workspace;})();app.Workspace = Workspace;var EiffelFile=(function(){function EiffelFile(filename, content, reactKey, workspace){var _this=this;this.onError = new OneOffEvent("Editor.onParseError");this.onParseSuccessful = new OneOffEvent("Editor.onParseSuccessful");this.onSetCodeMirror = new OneOffEvent("Editor.onSetCodeMirror");this.onAstHierarchyChange = new Event("Editor.onAstHierarchyChange");this.onActivate = new Event("onActivate");this.filename = filename;this.dynamicFilename = undefined;this.code = content;this.reactKey = reactKey;this.workspace = workspace;this.onActivate.subscribe(function(){if(_this.workspace.activeFile){_this.workspace.activeFile.isActive = false;}_this.isActive = true;_this.workspace.activeFile = _this;setTimeout(function(){_this.codeMirror.refresh();_this.onAstHierarchyChange.trigger(_this.astHierarchy);}, 100);});var displayAstHint=function displayAstHint(){if(_this.hasError){_this.astHierarchy = undefined;_this.onAstHierarchyChange.trigger(undefined);}else if(_this.astMapping === null){_this.astHierarchy = [];_this.onAstHierarchyChange.trigger(_this.astHierarchy);}else {var astMapping;var offset;(function(){var sortIntervalsByLengthDescending=function(i_a, i_b){var lengthA=i_a.end - i_a.start;var lengthB=i_b.end - i_b.start;return lengthB - lengthA;};astMapping = _this.astMapping;offset = _this.codeMirror.indexFromPos(_this.codeMirror.getCursor());astMapping.query({point:offset}, function(interval){var sorted=interval.sort(sortIntervalsByLengthDescending).map(function(x){return x.data;});if(_this.differentAstHierarchies(_this.astHierarchy, sorted)){_this.astHierarchy = sorted;_this.onAstHierarchyChange.trigger(sorted);console.log(sorted);}});})();}};this.onParseSuccessful.subscribe(function(_, asts){var ranges=new eiffel.explain.RangeGatherer();asts.map(function(ast){return ast.accept(ranges, null);});if(ranges.ranges.length > 0){var segmentTree=null;sTree(function(tree){segmentTree = tree;ranges.ranges.forEach(function(range){tree.push(range.start, range.end, range.id);});tree.build();});_this.astMapping = segmentTree;console.log(_this.astMapping);}else {_this.astMapping = null;}displayAstHint();});this.onError.subscribe(function(){_this.astMapping = undefined;displayAstHint();});this.onSetCodeMirror.subscribe(function(){_this.codeMirror.on("cursorActivity", displayAstHint);});}EiffelFile.prototype.differentAstHierarchies = function(one, other){if(one === other){return false;}if(!!one !== !!other){return true;}if(one.length === other.length){for(var i=0; i < other.length; i++) {var obj=other[i];if(obj === one[i]){continue;}else {return true;}}return false;}else {return true;}};EiffelFile.prototype.getFilename = function(){var unnamedFilename="Unnamed File " + (this.reactKey + 1);if(this.filename){return this.filename;}else {if(this.hasError){if(this.dynamicFilename){return this.dynamicFilename;}else {return unnamedFilename;}}else if(this.asts && this.asts.length >= 1){this.dynamicFilename = this.asts[0].name.name + ".e";return this.dynamicFilename;}else {return unnamedFilename;}}};EiffelFile.prototype.parse = function(){var _this=this;try{this.asts = eiffel.parser.parse(this.code);console.info("Parsing successful: " + this.filename);this.hasError = false;this.onParseSuccessful.reset();this.onError.reset();this.onParseSuccessful.trigger(this, this.asts);}catch(e) {if(!this.hasError){setTimeout(function(){return _this.codeMirror.refresh();}, 100);}this.hasError = true;this.onParseSuccessful.reset();this.onError.reset();this.onError.trigger(e.line, e.column, e);console.error("Parse error: ", e);}};EiffelFile.prototype.updateCode = function(code){var _this=this;var parseDelayInMs=300;this.code = code;clearTimeout(this.timeout);this.timeout = setTimeout(function(){_this.parse();}, parseDelayInMs);};return EiffelFile;})();app.EiffelFile = EiffelFile;var EditorTab=(function(){function EditorTab(){}return EditorTab;})();app.EditorTab = EditorTab;var Event=(function(){function Event(name){this.subscribed = new Set();this.name = name;}Event.prototype.subscribe = function(f){this.subscribed.add(f);};Event.prototype.trigger = function(){var _this=this;var data=[];for(var _i=0; _i < arguments.length; _i++) {data[_i - 0] = arguments[_i];}if(this.debugFlag){console.debug("Triggering: " + this.name + " with data ", data);debugger;}this.subscribed.forEach(function(f){if(_this.debugFlag){console.debug("Executing callback: ", f);debugger;}f.apply(window, data);});};Event.prototype.unsubscribe = function(f){this.subscribed["delete"](f);};Event.prototype.debug = function(falseForDisable){if(falseForDisable === false){this.debugFlag = false;}else {this.debugFlag = true;}};return Event;})();app.Event = Event;var OneOffEvent=(function(_super){__extends(OneOffEvent, _super);function OneOffEvent(){_super.apply(this, arguments);this.executed = false;this.executedData = undefined;}OneOffEvent.prototype.trigger = function(){var data=[];for(var _i=0; _i < arguments.length; _i++) {data[_i - 0] = arguments[_i];}if(this.executed){console.error("Invalid state: Event already triggered");debugger;}else {this.executedData = data;this.executed = true;_super.prototype.trigger.apply(this, data);}};OneOffEvent.prototype.subscribe = function(f){if(this.executed){f(this.executedData);}else {_super.prototype.subscribe.call(this, f);}};OneOffEvent.prototype.reset = function(){this.executed = false;this.executedData = undefined;};return OneOffEvent;})(Event);app.OneOffEvent = OneOffEvent;})(app = eiffel.app || (eiffel.app = {}));})(eiffel || (eiffel = {}));var eiffel;(function(eiffel){var builtin;(function(builtin){builtin.STD_FILE = {put_string:[function(ctx){}]};})(builtin = eiffel.builtin || (eiffel.builtin = {}));})(eiffel || (eiffel = {}));var eiffel;(function(eiffel){var interpreter;(function(interpreter){var Interpreter=(function(){function Interpreter(rootClass, rootFeature){}return Interpreter;})();interpreter.Interpreter = Interpreter;var EObject=(function(){function EObject(){this.data = new Map();}return EObject;})();interpreter.EObject = EObject;var StackEntry=(function(){function StackEntry(){}return StackEntry;})();interpreter.StackEntry = StackEntry;var Context=(function(){function Context(obj, routine){}return Context;})();interpreter.Context = Context;var IntObject=(function(){function IntObject(){}IntObject.prototype.repr = function(){return undefined;};return IntObject;})();interpreter.IntObject = IntObject;var BuiltinProcessor=(function(){function BuiltinProcessor(){}return BuiltinProcessor;})();interpreter.BuiltinProcessor = BuiltinProcessor;})(interpreter = eiffel.interpreter || (eiffel.interpreter = {}));})(eiffel || (eiffel = {}));var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var semantics;(function(semantics){var caseIgnoreEquals=eiffel.util.caseIgnoreEquals;var pairs=eiffel.util.pairs;var debugAssert=eiffel.util.debugAssert;var exactlyOne=eiffel.util.exactlyOne;var started=false;semantics.builtinContext;var createClassSymbols=function createClassSymbols(asts, analysisContext){asts.forEach(function(ast){if(!(ast instanceof eiffel.ast.Class)){console.error("Root AST node is not instance of Class", ast);throw new Error("Root AST node is not instance of Class");}var name=ast.name.name;var classSymbol=new eiffel.symbols.ClassSymbol(name, name, ast);analysisContext.classSymbols.set(classSymbol.lowerCaseName, classSymbol);analysisContext.allClasses.push(classSymbol);});};var createFeatureSymbols=function createFeatureSymbols(analysisContext){analysisContext.allClasses.forEach(function(classSymbol){classSymbol.ast.accept(new FeatureDiscovery(analysisContext, classSymbol), null);});};var createRoutineLocalSymbols=function createRoutineLocalSymbols(analysisContext){analysisContext.classSymbols.forEach(function(oneClass){oneClass.declaredRoutines.forEach(function(routine){var localsBlocks=routine.ast.children.filter(function(child){return child instanceof eiffel.ast.LocalsBlock;});localsBlocks.forEach(function(localBlock){localBlock.varDeclLists.forEach(function(varsDecl){varsDecl.varDecls.forEach(function(varDecl){var varName=varDecl.name.name;var lcName=varName.toLowerCase();var variableSymbol=new eiffel.symbols.VariableSymbol(varName, varDecl, varsDecl.rawType);routine.locals.push(variableSymbol);routine.localsByName.set(lcName, variableSymbol);routine.localsAndParamsByName.set(lcName, variableSymbol);});});});});});};function makeActualTypeIn(sourceClass, rawType, analysisContext, likeInClass, inFeature, typeFor){var isGenericParam=function isGenericParam(){if(rawType instanceof eiffel.ast.Type){return sourceClass.hasGenericParameterWithName(rawType.name.name);}else {return false;}};if(rawType instanceof eiffel.ast.TypeLikeFeature){if(rawType.typeName !== null){return makeActualTypeIn(sourceClass, rawType.typeName, analysisContext).typeForCall(rawType.featureName.name);}else {var lcName=rawType.featureName.name.toLowerCase();if(typeFor === 0 && inFeature.localsByName.has(lcName)){return inFeature.localsByName.get(lcName).type.duplicate();}else if(inFeature.parametersByName.has(lcName)){return inFeature.parametersByName.get(lcName).type.duplicate();}else if(likeInClass.finalFeatures.has(lcName)){return likeInClass.finalFeatures.get(lcName).typeInstance.duplicate();}else {console.error("Invalid case", lcName, sourceClass, rawType);}}}else if(rawType instanceof eiffel.ast.Type && isGenericParam()){if(rawType.parameters.length !== 0){analysisContext.errors.uncategorized("You cannot use a generic parameter as the base class of a generic type.");}return sourceClass.genericParameterWithName(rawType.name.name);}else {return makeTypeInstanceIn(sourceClass, rawType, analysisContext, likeInClass, inFeature, typeFor);}}function makeTypeInstanceIn(sourceClass, rawType, analysisContext, likeInClass, inFeature, typeFor){if(rawType instanceof eiffel.ast.TypeLikeFeature){console.warn("Type like feature used, not yet implemented");return null;}else if(rawType instanceof eiffel.ast.TypeLikeCurrent){if(sourceClass.typeInstance === null){console.error("sourceClass.typeInstance not initialized");}return sourceClass.typeInstance.duplicate();}if(rawType instanceof eiffel.ast.Type){var baseName=rawType.name.name;var isGenericParam=function isGenericParam(name){return sourceClass.hasGenericParameterWithName(name);};var isClassName=function isClassName(name){return analysisContext.hasClass(name);};if(isGenericParam(baseName)){debugger;analysisContext.errors.uncategorized("You must use the name of a class here, you've given the name of a generic parameter however." + baseName);}else if(isClassName(baseName)){var baseType=analysisContext.classWithName(baseName);var missingParam=false;var substitutions=new eiffel.symbols.Substitution();var typeParamInstances=rawType.parameters.map(function(rawTypeParameter, i){var result=makeActualTypeIn(sourceClass, rawTypeParameter, analysisContext, likeInClass, inFeature, typeFor);if(result == null){missingParam = true;}else if(baseType instanceof eiffel.symbols.ClassSymbol){substitutions.addSubstitution(baseType.genericParametersInOrder[i], result);}return result;});return new eiffel.symbols.TypeInstance(baseType, typeParamInstances, sourceClass, substitutions);}else {analysisContext.errors.unknownClass(rawType.name);}}else {console.error(rawType);throw new Error("Invalid AST type for type: ");}}var validateTypeInstance=function validateTypeInstance(actualType, context){if(actualType instanceof eiffel.symbols.TypeInstance){var instance=actualType;if(instance instanceof eiffel.symbols.GenericParameterSymbol){return true;}var sourceClass=instance.sourceClass;var baseType=instance.baseType;var expectedParamCount=baseType.genericParametersInOrder.length;var actualParamCount=instance.typeParameters.length;if(expectedParamCount < actualParamCount){var difference=actualParamCount - expectedParamCount;context.errors.uncategorized("Missing " + difference + " generic parameters.");}else if(expectedParamCount > actualParamCount){context.errors.uncategorized("Too many generic arguments, you can only have " + expectedParamCount + ", but you have " + actualParamCount);}instance.typeParameters.forEach(function(actualType){return validateTypeInstance(actualType, context);});}else {}};var initParentTypeInstancesAndValidate=function initParentTypeInstancesAndValidate(analysisContext){var defaultParentGroup=eiffel.parser.parse(" inherit\n  ANY", {startRule:"ParentGroup"});var typeInstances=[];analysisContext.allClasses.forEach(function(oneClass){function processParentGroup(parentGroup){parentGroup.parents.forEach(function(parent){var typeInstance=makeTypeInstanceIn(oneClass, parent.rawType, analysisContext);var parentSymbol=new eiffel.symbols.ParentSymbol(parent, parentGroup, typeInstance, oneClass);parent.parentSymbol = parentSymbol;typeInstances.push(parent.parentSymbol.parentType);oneClass.parentSymbols.push(parentSymbol);});}oneClass.ast.parentGroups.forEach(processParentGroup);if(oneClass.ast.parentGroups.length === 0){if(oneClass.lowerCaseName !== "any"){processParentGroup(defaultParentGroup);}}});typeInstances.map(function(typeInstance){return validateTypeInstance(typeInstance, analysisContext);});};var parseError=function parseError(builtinSource, e){console.group("Parse Error: " + builtinSource.filename);console.log("Found", e.found);console.groupCollapsed("Expected");console.table(e.expected);console.groupEnd();console.group("Context");var lines=builtinSource.content.split(/\r?\n/);var context=lines[e.line - 4] + lines[e.line - 3] + "\n" + lines[e.line - 2] + "\n" + lines[e.line - 1] + "\n" + Array(e.column).join("-") + "^ -- Line: " + e.line + " Column: " + e.column + "\n" + lines[e.line + 0] + lines[e.line + 1] + lines[e.line + 2] + lines[e.line + 3];console.log(context);console.groupEnd();console.groupCollapsed("Source");console.log(builtinSource.content);console.groupEnd();console.log(e);console.groupEnd();};var initAstDictionary=function initAstDictionary(analysisContext){analysisContext.allClasses.forEach(function(classSymbol){classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), analysisContext.astDictionary);});};var initAstDictionaryByClass=function initAstDictionaryByClass(analysisContext){analysisContext.allClasses.forEach(function(classSymbol){classSymbol.ast.accept(new AstToDictionaryByPrototype(analysisContext), classSymbol.ast.dictionary);});};var requireValidClassForAnalysis=function requireClassForAnalysis(name, analysisContext, success, failure){if(analysisContext.hasClass(name)){return success(analysisContext.classWithName(name), analysisContext);}else {failure(analysisContext);return false;}};var checkCyclicInheritance=function checkCyclicInheritance(analysisContext){var inheritanceBeingChecked=new Set();var inheritanceChecked=new Set();var inheritanceCycles=[];var hasValidHierarchy=function hasValidHierarchy(oneClass, descendants){if(inheritanceBeingChecked.has(oneClass)){oneClass.hasCyclicInheritance = true;analysisContext.errors.inheritanceCycle(descendants.slice(descendants.indexOf(oneClass)));inheritanceCycles.push(descendants.slice());return;}else if(inheritanceChecked.has(oneClass)){return;}else {inheritanceBeingChecked.add(oneClass);oneClass.ast.parentGroups.forEach(function(parentGroup){parentGroup.parents.forEach(function(parent){var parentName=parent.rawType.name.name;requireValidClassForAnalysis(parentName, analysisContext, function(parentSymbol){if(parentSymbol.hasCyclicInheritance){oneClass.inheritsFromCyclicInheritance = true;}else {descendants.push(oneClass);hasValidHierarchy(parentSymbol, descendants);descendants.pop();oneClass.hasCyclicInheritance = parentSymbol.hasCyclicInheritance;oneClass.inheritsFromCyclicInheritance = parentSymbol.inheritsFromCyclicInheritance;}}, function failure(ac){analysisContext.errors.unknownClass(parent.rawType.name);});});});inheritanceBeingChecked["delete"](oneClass);inheritanceChecked.add(oneClass);}};analysisContext.allClasses.forEach(function(oneClass){hasValidHierarchy(oneClass, []);});if(inheritanceCycles.length > 0){analysisContext.errors.uncategorized("Cyclic inheritance detected");console.error("Cycles:", inheritanceCycles);}};var initGenericParamSyms=function initGenericParamSyms(analysisContext){analysisContext.allClasses.map(function(oneClass){oneClass.ast.genericParameters.forEach(function(genericParameter){var name=genericParameter.name.name;var fqName=oneClass.name + "." + genericParameter.name.name;var genericParamSym=new eiffel.symbols.GenericParameterSymbol(name, fqName, oneClass);genericParameter.sym = genericParamSym;oneClass.genericParametersInOrder.push(genericParamSym);if(oneClass.hasGenericParameterWithName(name)){analysisContext.errors.duplicateGenericParameter(genericParameter.name);}else {oneClass.genericParametersByName.set(name.toLowerCase(), genericParamSym);}});});};var initClassSymbolTypeInstances=function initClassSymbolTypeInstances(analysisContext){analysisContext.allClasses.map(function(oneClass){oneClass.typeInstance = new eiffel.symbols.TypeInstance(oneClass, oneClass.genericParametersInOrder, oneClass, new eiffel.symbols.Substitution());});};var checkValidty_8_6_13_parent_rule=function checkValidty_8_6_13_parent_rule(analysisContext){analysisContext.allClasses.forEach(function(oneClass){var conformingCount=0;if(oneClass.ast.parentGroups.length == 0){conformingCount = 1;}var allParents=[];oneClass.ast.parentGroups.forEach(function(parentGroup){var nonConforming=false;if(parentGroup.conforming != null){if(caseIgnoreEquals(parentGroup.conforming.name, "NONE")){nonConforming = true;}else {analysisContext.errors.uncategorized("Invalid nonconformance modifier: " + parentGroup.conforming.name + " in class " + oneClass.name);}}if(!nonConforming){conformingCount++;}parentGroup.parents.forEach(function(parent){allParents.push(parent);if(parent.parentSymbol.parentType.baseType.isFrozen && nonConforming){analysisContext.errors.noFrozenParent(oneClass, parent);}});});if(conformingCount == 0){analysisContext.errors.noConformingParent(oneClass);}oneClass.ancestorTypesByBaseType.forEach(function(typesWithSameBase){pairs(typesWithSameBase).forEach(function(a){if(a[0].differentGenericDerivationThan(a[1])){debugger;a[0].differentGenericDerivationThan(a[1]);analysisContext.errors.differentGenericDerivations(oneClass, a[0], a[1]);}});});});};function traverseInheritance(f, analysisContext, arg){var classes=analysisContext.allClasses;var seen=new Set();function processClass(clazz){if(!seen.has(clazz)){seen.add(clazz);if(clazz.inheritsFromCyclicInheritance){return;}if(clazz.hasCyclicInheritance){return;}clazz.ast.parentGroups.forEach(function(parentGroup){parentGroup.parents.forEach(function(parent){processClass(parent.parentSymbol.parentType.baseType);});});f(clazz, analysisContext, arg);}}processClass(analysisContext.classWithName("ANY"));classes.forEach(processClass);}semantics.traverseInheritance = traverseInheritance;function populateAncestorTypes(oneClass){oneClass.ancestorTypes.push(new eiffel.symbols.TypeInstance(oneClass, oneClass.genericParametersInOrder.slice(), oneClass, null));oneClass.parentSymbols.forEach(function(parentSymbol){var substitutedAncestors=parentSymbol.parentType.baseType.ancestorTypes.map(function(ancestorType){return parentSymbol.parentType;});Array.prototype.push.apply(oneClass.ancestorTypes, substitutedAncestors);});oneClass.ancestorTypes.forEach(function(ancestorType){var key=ancestorType.baseType;if(!oneClass.ancestorTypesByBaseType.has(key)){oneClass.ancestorTypesByBaseType.set(key, []);}oneClass.ancestorTypesByBaseType.get(key).push(ancestorType);});}semantics.populateAncestorTypes = populateAncestorTypes;function inheritFeatures(oneClass, context){var precursors=[];var uniqueFeatures=new Map();var pretenders=new Map();if(oneClass.lowerCaseName === "any"){return;}oneClass.parentSymbols.forEach(function(parentSymbol){if(parentSymbol.isNonConforming){console.error("Nonconforming inheritance is not supported");debugger;}if(parentSymbol.parentType.baseType === oneClass){console.error("Parents should not contain itself");debugger;}else {var errorPrefix;var parentFinalFeatures;var oldNameToNewName;var newNameToOldName;var undefines;var redefines;var selected;(function(){var getNewName=function(name){if(oldNameToNewName.has(name.toLowerCase())){return oldNameToNewName.get(name.toLowerCase());}return name;};var getOldName=function(oldName){if(newNameToOldName.has(oldName.toLowerCase())){return newNameToOldName.get(oldName.toLowerCase());}return oldName;};errorPrefix = oneClass.name + " extends " + parentSymbol.parentType.baseType.toString() + ": ";parentFinalFeatures = parentSymbol.inheritFeatures();oldNameToNewName = new Map();parentSymbol.renames.forEach(function makeRenameMapping(rename){var oldName=rename.oldName.name;var lcOldName=oldName.toLowerCase();if(!parentFinalFeatures.has(lcOldName)){context.errors.unknownOldFeatureInRename(rename, parentSymbol);}else {if(oldNameToNewName.has(lcOldName)){context.errors.alreadyRenamed(rename, oldNameToNewName.get(lcOldName), parentSymbol);}else {oldNameToNewName.set(lcOldName, rename.newName.name.name);}}});newNameToOldName = new Map();oldNameToNewName.forEach(function(newName, oldName){return newNameToOldName.set(newName, oldName);});undefines = new Set();parentSymbol.undefines.forEach(function(identifier){var lcUndefine=identifier.name.toLowerCase();if(!parentFinalFeatures.has(getOldName(lcUndefine))){if(parentFinalFeatures.has(lcUndefine)){context.errors.uncategorized(errorPrefix + "You have tried undefining a feature by its old name, you need to use " + getNewName(lcUndefine) + " instead!");}else {context.errors.uncategorized(errorPrefix + "VDUS_1, tried undefining feature that does not exist in parent: " + lcUndefine);}}if(undefines.has(lcUndefine)){context.errors.uncategorized(errorPrefix + "VDUS_4, why undefine the same feature multiple times?" + lcUndefine);}undefines.add(lcUndefine);});redefines = new Set();parentSymbol.redefines.forEach(function(identifier){var lcRedefine=identifier.name.toLowerCase();if(!parentFinalFeatures.has(getOldName(lcRedefine))){if(parentFinalFeatures.has(lcRedefine)){context.errors.uncategorized(errorPrefix + "You have tried redefining a feature by its old name, you need to use " + getNewName(lcRedefine) + " instead!");}else {context.errors.uncategorized(errorPrefix + "tried redefining feature that does not exist in parent: " + lcRedefine);}}if(redefines.has(lcRedefine)){context.errors.uncategorized(errorPrefix + "You don't need to specify redefine for a feature multiple times: " + lcRedefine);}redefines.add(lcRedefine);});selected = new Set();parentSymbol.selects.forEach(function(identifier){var lcSelected=identifier.name.toLowerCase();if(!parentFinalFeatures.has(getOldName(lcSelected))){if(parentFinalFeatures.has(lcSelected)){context.errors.uncategorized(errorPrefix + "You have tried selecting a feature by its old name, you need to use " + getNewName(lcSelected) + " instead!");}else {context.errors.uncategorized(errorPrefix + "tried selecting feature that does not exist in parent: " + lcSelected);}}if(selected.has(lcSelected)){context.errors.uncategorized(errorPrefix + "You don't need to specify select for a feature multiple times: " + lcSelected);}selected.add(lcSelected);});parentFinalFeatures.forEach(function(finalFeature, lcOldName){debugAssert(lcOldName === lcOldName.toLowerCase(), lcOldName + " is not lower case");var finalFeatureName=finalFeature.name;if(oldNameToNewName.has(lcOldName)){finalFeatureName = oldNameToNewName.get(lcOldName);finalFeature.name = finalFeatureName;finalFeature.lowerCaseName = finalFeatureName.toLowerCase();}var lcName=finalFeatureName.toLowerCase();if(!pretenders.has(lcName)){pretenders.set(lcName, new eiffel.symbols.FeaturePretenders());}var featurePretenders=pretenders.get(lcName);var pretenderSource=new eiffel.symbols.PretenderSource();pretenderSource.feature = finalFeature;pretenderSource.wasUndefined = undefines.has(lcName);pretenderSource.wasRedefined = redefines.has(lcName);pretenderSource.wasSelected = selected.has(lcName);pretenderSource.parentSymbol = parentSymbol;if(pretenderSource.wasRedefined){featurePretenders.redefined.push(pretenderSource);}else if(pretenderSource.wasUndefined){featurePretenders.deferred.push(pretenderSource);}else if(pretenderSource.feature.isDeferred){featurePretenders.deferred.push(pretenderSource);}else {featurePretenders.effective.push(pretenderSource);}if(pretenderSource.wasSelected){featurePretenders.selected.push(pretenderSource);}});})();}});pretenders.forEach(function(pretender, lcName){var errorPrefix=oneClass.name + "." + lcName + ": ";var declaredFeature=oneClass.declaredFeatures.get(lcName);var hasError=false;var hasMultiple=false;var hasDeclaredFeature=declaredFeature instanceof eiffel.symbols.FeatureSymbol;var hasDeclaredEffectiveFeature=hasDeclaredFeature && !declaredFeature.isDeferred;var hasDeclaredDeferredFeature=hasDeclaredFeature && declaredFeature.isDeferred;var inheritedFeature=null;if(declaredFeature === null){if(pretender.redefined.length > 1){context.errors.uncategorized(errorPrefix + "You have told eiffel that you want to redefine the inherited feature " + lcName + " but you didn't provide a new definition for the feature in the class " + oneClass.name);hasError = true;}}if(pretender.effective.length == 0){if(pretender.redefined.length >= 1){inheritedFeature = declaredFeature;}else if(pretender.deferred.length >= 1){inheritedFeature = pretender.deferred[0].feature;}}else if(pretender.effective.length >= 1){if(hasDeclaredFeature){hasError = true;hasMultiple = true;context.errors.uncategorized(errorPrefix + "You have inherited a feature " + lcName + " as effective. However, you have defined a new feature with the same name, but you cannot have two features with the same name.");}else {if(pretender.effective.length > 1){var asts=new Set();pretender.effective.forEach(function(x){return asts.add(x.feature.ast);});if(asts.size === 1){}else {hasError = true;hasMultiple = true;console.error(pretender);debugger;context.errors.uncategorized(errorPrefix + "You have inherited multiple different features under the same name " + lcName + ". You can undefine all but one, or you can rename such that all have different names, or define them into a common version.");}}if(!hasMultiple){if(pretender.redefined.length == 0){inheritedFeature = pretender.effective[0].feature;}else {hasError = true;pretender.redefined.forEach(function(redefined){if(redefined.wasUndefined){context.errors.uncategorized(errorPrefix + "You have inherited one feature as effective. Also, you have marked a different inherited feature as undefined and redefined. You can remove the entry in undefined");}else {context.errors.uncategorized(errorPrefix + "You have inherited one feature as effetice. Also, you have marked a different inherited feature to be redefined, did you want to undefine that feature instead?");}});}}else {}}}if(!hasMultiple){oneClass.inheritedFeatures.set(lcName, inheritedFeature);inheritedFeature.precursors = new Set();pretender.all().forEach(function(source){source.feature.precursors.forEach(function(precursor){inheritedFeature.precursors.add(precursor);});if(hasDeclaredFeature){inheritedFeature.precursors.add(inheritedFeature);}});oneClass.finalFeatures.set(lcName, inheritedFeature);}else {console.error("Multiple versions for " + lcName + " in class " + oneClass.name, oneClass);}});oneClass.declaredFeatures.forEach(function(declaredFeature, lcName){if(!oneClass.finalFeatures.has(lcName)){oneClass.finalFeatures.set(lcName, declaredFeature);}});}semantics.inheritFeatures = inheritFeatures;function initAdaptions(context){var parents=context.astDictionary.get(eiffel.ast.Parent);if(parents === undefined){return;}parents.forEach(function(parent){var parentSymbol=parent.parentSymbol;var seen=new Set();var errored=new Set();parent.adaptions.forEach(function addAdaptionToParentSymbol(adaption){var constructor=Object.getPrototypeOf(adaption).constructor;if(seen.has(constructor)){if(!errored.has(constructor)){errored.add(constructor);context.errors.duplicateAdaptionsOfType(constructor.name, adaption);}}else {seen.add(constructor);}if(adaption instanceof eiffel.ast.Renames){Array.prototype.push.apply(parentSymbol.renames, adaption.renames);}if(adaption instanceof eiffel.ast.Undefines){Array.prototype.push.apply(parentSymbol.undefines, adaption.identifiers);}if(adaption instanceof eiffel.ast.Redefines){Array.prototype.push.apply(parentSymbol.redefines, adaption.identifiers);}if(adaption instanceof eiffel.ast.Selects){Array.prototype.push.apply(parentSymbol.selects, adaption.identifiers);}});});}function initAny(context){var anySym=context.classWithName("ANY");anySym.declaredFeatures.forEach(function initAnyFeature(feature, featureName){anySym.finalFeatures.set(featureName, feature);feature.routineId = new eiffel.symbols.RoutineId(anySym, feature);});}function initReturnTypeTypeInstances(analysisContext){analysisContext.allClasses.forEach(function(classSymbol){classSymbol.declaredFeatures.forEach(function(fSym){if(fSym.isCommand){fSym.typeInstance = null;}else {fSym.typeInstance = makeActualTypeIn(classSymbol, fSym.ast.rawType, analysisContext);}});});}function initSignatures(analysisContext){analysisContext.allClasses.forEach(function(classSymbol){classSymbol.declaredFeatures.forEach(function(fSym){fSym.signature = new eiffel.symbols.Signature(fSym.parameters.map(function(x){return x.type;}), fSym.typeInstance);});});}function setupRoutineIds(oneClass, context){var seedToFeatureGraph=new eiffel.util.Graph([], {autoAdd:true});oneClass.inheritedFeatures.forEach(function(feature, lcName){feature.pretenders.all().forEach(function(pretenderSource){console.log(pretenderSource.feature.seeds);});});}function initParameters(oneClass, context){oneClass.finalFeatures.forEach(function(featureSym){if(featureSym instanceof eiffel.symbols.RoutineSymbol){var paramNames=new Set();var ast=featureSym.ast;ast.parameters.forEach(function(varDeclList){varDeclList.varDecls.forEach(function(varDeclEntry){var paramName=varDeclEntry.name.name;if(paramNames.has(paramName)){context.errors.uncategorized("VREG?? Duplicate argument name");}paramNames.add(paramName);varDeclEntry.sym = new eiffel.symbols.VariableSymbol(paramName, varDeclEntry, varDeclList.rawType);featureSym.parameters.push(varDeclEntry.sym);featureSym.parametersByName.set(paramName.toLowerCase(), varDeclEntry.sym);});});}});}function checkFeatureBlocks(context){context.allClasses.forEach(function(oneClass){oneClass.declaredRoutines.forEach(function(routine){var seenBlockKind=new Map();var errorPrefix=oneClass.name + "." + routine.name + ": ";routine.ast.bodyElements.forEach(function(bodyElement){if(bodyElement instanceof eiffel.ast.RoutineInstructions){if(seenBlockKind.has(bodyElement.constructor)){context.errors.uncategorized("You can only have one " + bodyElement.constructor.name);}seenBlockKind.set(bodyElement.constructor, bodyElement);}});var hasDeferred=seenBlockKind.has(eiffel.ast.DeferredBlock);var hasDo=seenBlockKind.has(eiffel.ast.DoBlock);var hasObsolete=seenBlockKind.has(eiffel.ast.ObsoleteBlock);var hasOnce=seenBlockKind.has(eiffel.ast.OnceBlock);var hasExternal=seenBlockKind.has(eiffel.ast.ExternalBlock);if(exactlyOne(hasDeferred, hasDo, hasExternal, hasOnce)){if(hasDeferred){routine.isDeferred = true;}}else {context.errors.uncategorized(errorPrefix + "You must have exactly one of the following: deferred marker, do block, external marker or once block.");}});});}var TypeFor;(function(TypeFor){TypeFor[TypeFor.LOCAL = 0] = "LOCAL";TypeFor[TypeFor.PARAM = 1] = "PARAM";TypeFor[TypeFor.FEATURE = 2] = "FEATURE";})(TypeFor || (TypeFor = {}));function evaluateLikeDependencies(oneClass, context, depGraph){var features=oneClass.finalFeatures;function getDependencies(currentFeature, type, typeFor){if(type instanceof eiffel.ast.TypeLikeCurrent){return [];}else if(type instanceof eiffel.ast.TypeLikeFeature){var depTarget=oneClass.lowerCaseName + ".";var lcName=type.featureName.name.toLowerCase();if(type.typeName === null){if(typeFor === 0 && currentFeature.localsByName.has(lcName)){context.errors.uncategorized("You cannot use 'like' to refer to the type of another variable");return [depTarget + currentFeature.lowerCaseName + ".l." + lcName];}if(currentFeature.parametersByName.has(lcName)){return [depTarget + currentFeature.lowerCaseName + ".p." + lcName];}else {if(oneClass.finalFeatures.has(lcName)){return [depTarget + lcName];}else {context.errors.uncategorized("Invalid anchored type: a type in the signature of feature " + oneClass.name + "." + currentFeature.name + " depends on '" + lcName + "' which does not exist");return [];}}}else {var depTarget=type.typeName.name.name.toLowerCase();if(context.classWithName(depTarget).finalFeatures.has(lcName)){return [depTarget + "." + lcName];}}}else if(type instanceof eiffel.ast.Type){return Array.prototype.concat.apply([], type.parameters.map(function(x){return getDependencies(currentFeature, x, typeFor);}));}else {console.error("Unexpected AST type: ", type);debugger;return [];}}var classPrefix=oneClass.lowerCaseName + ".";features.forEach(function(feature, featureName){var prefix=classPrefix + feature.lowerCaseName;feature.locals.forEach(function(local){var rtDepds=getDependencies(feature, local.ast.varDeclList.rawType, 1);var fromName=prefix + ".l." + local.lowerCaseName;depGraph.addNode(fromName);rtDepds.forEach(function(depName){depGraph.connect(fromName, depName);});});feature.parameters.forEach(function(parameter){var rtDepds=getDependencies(feature, parameter.ast.varDeclList.rawType, 1);var fromName=prefix + ".p." + parameter.lowerCaseName;depGraph.addNode(fromName);rtDepds.forEach(function(depName){depGraph.connect(fromName, depName);});});if(feature.ast.rawType != null){depGraph.addNode(prefix);var rtDepds=getDependencies(feature, feature.ast.rawType, 2);rtDepds.forEach(function(depName){depGraph.connect(prefix, depName);});}});}var parse=function parse(builtinSource){try{return eiffel.parser.parse(builtinSource.content);}catch(e) {parseError(builtinSource, e);throw e;}};function initializeAllTypes(likeDependencyGraph, context){console.log("Dependency graph: ", likeDependencyGraph);var topoSort=likeDependencyGraph.tarjan();if(topoSort.length === likeDependencyGraph.nodes.size){console.log("Anchored type analysis complete: No errors");}else {context.errors.uncategorized("Cycle in anchored types");return;}var localOrParamLength="class.feature.p.paramName".split(".").length;topoSort.forEach(function(stronglyConnectedComponent){debugAssert(stronglyConnectedComponent.length === 1, "More than one node in t he componenet");var typeLocation=stronglyConnectedComponent[0];var splitted=typeLocation.split(".");debugAssert(splitted.length >= 2, "Need to have format CLASS.FEATURE at the very least");var classSym=context.classWithName(splitted[0]);var fSym=classSym.finalFeatures.get(splitted[1]);if(splitted.length === localOrParamLength){if(splitted[2] === "p"){var paramSym=fSym.parametersByName.get(splitted[3]);paramSym.type = makeActualTypeIn(fSym.declaredIn, paramSym.rawType, context, classSym, fSym, 1);}else if(splitted[2] === "l"){var localSym=fSym.localsByName.get(splitted[3]);localSym.type = makeActualTypeIn(fSym.declaredIn, localSym.rawType, context, classSym, fSym, 0);}else {console.error("Invalid splitted[2]: ", splitted[2], splitted, typeLocation);debugger;}}else if(splitted.length === 2){fSym.typeInstance = makeActualTypeIn(fSym.declaredIn, fSym.ast.rawType, context, classSym, fSym, 2);}else {console.warn("Unsupported splitted.length: ", splitted, typeLocation);}});}function analyze(manyAsts){if(!started){start();}var asts=[];manyAsts.forEach(function(x){return Array.prototype.push.apply(asts, x.asts);});var analysisContext=new AnalysisContext();if(semantics.builtinContext != null){analysisContext.parentContext = semantics.builtinContext;}createClassSymbols(asts, analysisContext);initGenericParamSyms(analysisContext);initClassSymbolTypeInstances(analysisContext);initAstDictionary(analysisContext);initAstDictionaryByClass(analysisContext);createFeatureSymbols(analysisContext);checkFeatureBlocks(analysisContext);createRoutineLocalSymbols(analysisContext);checkCyclicInheritance(analysisContext);initParentTypeInstancesAndValidate(analysisContext);traverseInheritance(populateAncestorTypes, analysisContext);initAdaptions(analysisContext);checkValidty_8_6_13_parent_rule(analysisContext);if(semantics.builtinContext == null){initAny(analysisContext);}traverseInheritance(inheritFeatures, analysisContext);traverseInheritance(setupRoutineIds, analysisContext);traverseInheritance(initParameters, analysisContext);var likeDependencyGraph=new eiffel.util.Graph([], {autoAdd:true});traverseInheritance(evaluateLikeDependencies, analysisContext, likeDependencyGraph);initializeAllTypes(likeDependencyGraph, analysisContext);analysisContext.allClasses.forEach(function(oneClass){oneClass.ast.parentGroups.forEach(function(parentGroup){parentGroup.parents.forEach(function(parent){validateTypeInstance(parent.parentSymbol.parentType, analysisContext);});});});analysisContext.allClasses.forEach(function(classSymbol){classSymbol.ast.creationClauses.forEach(function(creationClause){creationClause.features.forEach(function(identifier){var name=identifier.name;var lcName=name.toLowerCase();if(classSymbol.finalFeatures.has(lcName)){var feature=classSymbol.finalFeatures.get(lcName);if(feature instanceof eiffel.symbols.ProcedureSymbol){classSymbol.creationProcedures.set(lcName, feature);}else if(feature instanceof eiffel.symbols.FunctionSymbol){analysisContext.errors.uncategorized("Functions cannot be used as creation procedures.");}else if(feature instanceof eiffel.symbols.AttributeSymbol){analysisContext.errors.uncategorized("Attributes cannot be used as creation procedures.");}else {console.error(feature, creationClause, classSymbol, analysisContext);throw new Error("Unsupported symbol in finalFeatures");}}else {analysisContext.errors.uncategorized("There is no procedure with name " + name + " in class " + classSymbol.name);}});});});console.log(analysisContext);var newVar={asts:asts, errors:analysisContext.errors, context:analysisContext};return newVar;}semantics.analyze = analyze;var AnalysisContext=(function(){function AnalysisContext(){this.classSymbols = new Map();this.allFunctions = [];this.allProcedures = [];this.allRoutines = [];this.allClasses = [];this.astDictionary = new Map();this.typeInstances = [];this.errors = new ErrorContext();}AnalysisContext.prototype.allWithPrototype = function(prototype){if(this.astDictionary.has(prototype)){return this.astDictionary.get(prototype);}else {console.error("Prototype is not a key", prototype, this.astDictionary);throw new Error("Prototype is not a key" + prototype);}};AnalysisContext.prototype.classWithName = function(name){var lowerCaseName=this.redirectToSized(name).toLowerCase();if(this.classSymbols.has(lowerCaseName)){return this.classSymbols.get(lowerCaseName);}else if(this.parentContext != null){return this.parentContext.classWithName(name);}else {throw new Error("There is no class with name: " + name);}};AnalysisContext.prototype.hasClass = function(name){var lowerCaseName=this.redirectToSized(name).toLowerCase();if(this.parentContext != null){return this.classSymbols.has(lowerCaseName) || this.parentContext.hasClass(name);}else {return this.classSymbols.has(lowerCaseName);}};AnalysisContext.prototype.redirectToSized = function(name){var mapping={integer:"INTEGER_32", character:"CHARACTER_32", double:"REAL_64", real:"REAL_32"};var lowerCaseName=name.toLowerCase();if(mapping.hasOwnProperty(lowerCaseName)){return mapping[lowerCaseName];}else {return name;}};return AnalysisContext;})();semantics.AnalysisContext = AnalysisContext;var ErrorContext=(function(){function ErrorContext(){this.errors = [];}ErrorContext.prototype.add = function(kind, message, ast){var entireMessage=SemanticErrorKind[kind] + ": " + message;console.error(entireMessage, ast);this.errors.push(entireMessage);};ErrorContext.prototype.unknownClass = function(identifier){this.add(3, identifier.name, identifier);};ErrorContext.prototype.duplicateFeature = function(identifier){this.add(0, identifier.name, identifier);};ErrorContext.prototype.duplicateGenericParameter = function(identifier){this.add(5, identifier.name, identifier);};ErrorContext.prototype.inheritanceCycle = function(descendants){descendants.push(descendants[0]);descendants.push(descendants[1]);this.add(4, "... -> " + descendants.map(function(x){return x.name;}).join(" -> ") + " -> ...");};ErrorContext.prototype.uncategorized = function(message){this.errors.push(message);};ErrorContext.prototype.noConformingParent = function(oneClass){this.add(6, "No conforming inheritance part found in class" + oneClass.name);};ErrorContext.prototype.noFrozenParent = function(sourceClass, parent){this.add(7, sourceClass.name + " is trying to extend a frozen class", parent);};ErrorContext.prototype.differentGenericDerivations = function(oneClass, deriv1, deriv2){this.add(8, "For class " + oneClass.name + ": " + deriv1.repr + ", " + deriv2.repr);};ErrorContext.prototype.duplicateAdaptionsOfType = function(name, adaption){this.add(9, "Duplicate adaption: " + name);};ErrorContext.prototype.unknownOldFeatureInRename = function(rename, parentSymbol){var parentClassName=parentSymbol.parentType.baseType.name;this.add(10, parentClassName + " has no feature " + rename.oldName.name + ". You told Eiffel to inherit a feature named '" + rename.oldName.name + "' from a class called '" + parentClassName + "' under a new name inside class " + parentSymbol.owningClass.name);};ErrorContext.prototype.alreadyRenamed = function(rename, oldNewName, parentSymbol){var parentClassName=parentSymbol.parentType.baseType.name;this.add(11, rename.oldName.name + " has already been renamed to " + oldNewName);};return ErrorContext;})();var SemanticVisitor=(function(_super){__extends(SemanticVisitor, _super);function SemanticVisitor(analysisContext){_super.call(this);this.analysisContext = analysisContext;this.classSymbols = analysisContext.classSymbols;}return SemanticVisitor;})(eiffel.ast.Visitor);(function(SemanticErrorKind){SemanticErrorKind[SemanticErrorKind.DuplicateFeatureName = 0] = "DuplicateFeatureName";SemanticErrorKind[SemanticErrorKind.DuplicateParameterName = 1] = "DuplicateParameterName";SemanticErrorKind[SemanticErrorKind.DuplicateClassName = 2] = "DuplicateClassName";SemanticErrorKind[SemanticErrorKind.UnknownClass = 3] = "UnknownClass";SemanticErrorKind[SemanticErrorKind.InheritanceCycle = 4] = "InheritanceCycle";SemanticErrorKind[SemanticErrorKind.DuplicateGenericParameter = 5] = "DuplicateGenericParameter";SemanticErrorKind[SemanticErrorKind.NoConformingParents = 6] = "NoConformingParents";SemanticErrorKind[SemanticErrorKind.CannotExtendFrozenClass = 7] = "CannotExtendFrozenClass";SemanticErrorKind[SemanticErrorKind.TwoAncestorsWithDifferentGenericDerivations = 8] = "TwoAncestorsWithDifferentGenericDerivations";SemanticErrorKind[SemanticErrorKind.DuplicateAdaption = 9] = "DuplicateAdaption";SemanticErrorKind[SemanticErrorKind.UnknownSourceFeatureInRename = 10] = "UnknownSourceFeatureInRename";SemanticErrorKind[SemanticErrorKind.AlreadyRenamedFeature = 11] = "AlreadyRenamedFeature";})(semantics.SemanticErrorKind || (semantics.SemanticErrorKind = {}));var SemanticErrorKind=semantics.SemanticErrorKind;var FeatureDiscovery=(function(_super){__extends(FeatureDiscovery, _super);function FeatureDiscovery(analysisContext, classSymbol){_super.call(this, analysisContext);this.classSymbol = classSymbol;}FeatureDiscovery.prototype.vAttr = function(attr, _){attr.frozenNamesAndAliases.forEach(function(fna, i){var attrClone=attr.deepClone();fna = attrClone.frozenNamesAndAliases[i];var name=fna.name.name;var lcName=name.toLowerCase();this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);var alias=null;if(fna.alias != null){alias = fna.alias.name.value;}var attributeSymbol=new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen === undefined, attrClone, this.classSymbol);attrClone.sym = attributeSymbol;this.classSymbol.declaredFeatures.set(lcName, attributeSymbol);this.classSymbol.declaredAttributes.set(lcName, attributeSymbol);}, this);};FeatureDiscovery.prototype.vFunction = function(func, _){func.frozenNamesAndAliases.forEach(function(fna, i){var funcClone=func.deepClone();fna = funcClone.frozenNamesAndAliases[i];var functionName=fna.name.name;var lcFunctionName=functionName.toLowerCase();this.errorOnDuplicateFeature(this.classSymbol, lcFunctionName, fna.name);var alias=null;if(fna.alias != null){alias = fna.alias.name.value;}var sym=new eiffel.symbols.FunctionSymbol(lcFunctionName, alias, fna.frozen === undefined, funcClone, this.classSymbol);funcClone.sym = sym;this.classSymbol.declaredFeatures.set(lcFunctionName, sym);this.classSymbol.declaredFunctions.set(lcFunctionName, sym);this.classSymbol.declaredRoutines.set(lcFunctionName, sym);this.analysisContext.allFunctions.push(sym);this.analysisContext.allRoutines.push(sym);}, this);};FeatureDiscovery.prototype.errorOnDuplicateFeature = function(classSymbol, featureName, identifier){if(classSymbol.hasSymbol(featureName)){this.analysisContext.errors.duplicateFeature(identifier);}};FeatureDiscovery.prototype.vProcedure = function(procedure, _){procedure.frozenNamesAndAliases.forEach(function(fna, i){var procClone=procedure.deepClone();fna = procClone.frozenNamesAndAliases[i];var procedureName=fna.name.name;var lcProcedureName=procedureName.toLowerCase();this.errorOnDuplicateFeature(this.classSymbol, lcProcedureName, fna.name);var alias=null;if(fna.alias != null){alias = fna.alias.name.value;}var sym=new eiffel.symbols.ProcedureSymbol(procedureName, alias, fna.frozen === undefined, procClone, this.classSymbol);procClone.sym = sym;this.classSymbol.declaredFeatures.set(lcProcedureName, sym);this.classSymbol.declaredProcedures.set(lcProcedureName, sym);this.classSymbol.declaredRoutines.set(lcProcedureName, sym);this.analysisContext.allProcedures.push(sym);this.analysisContext.allRoutines.push(sym);}, this);};FeatureDiscovery.prototype.vConstantAttribute = function(constantAttribute, _){constantAttribute.frozenNamesAndAliases.forEach(function(fna, i){var attrClone=constantAttribute.deepClone();fna = attrClone.frozenNamesAndAliases[i];var name=fna.name.name;var lcName=name.toLowerCase();this.errorOnDuplicateFeature(this.classSymbol, lcName, fna.name);var alias=null;if(fna.alias != null){alias = fna.alias.name.value;}var attributeSymbol=new eiffel.symbols.AttributeSymbol(name, alias, fna.frozen === undefined, attrClone, this.classSymbol);attrClone.sym = attributeSymbol;this.classSymbol.declaredFeatures.set(lcName, attributeSymbol);this.classSymbol.declaredAttributes.set(lcName, attributeSymbol);}, this);};return FeatureDiscovery;})(SemanticVisitor);var AstToDictionaryByPrototype=(function(_super){__extends(AstToDictionaryByPrototype, _super);function AstToDictionaryByPrototype(){_super.apply(this, arguments);}AstToDictionaryByPrototype.prototype.vDefault = function(ast, arg){var constructor=Object.getPrototypeOf(ast).constructor;if(arg.has(constructor)){arg.get(constructor).push(ast);}else {arg.set(constructor, [ast]);}return _super.prototype.vDefault.call(this, ast, arg);};return AstToDictionaryByPrototype;})(SemanticVisitor);var FeatureTypeConnector=(function(_super){__extends(FeatureTypeConnector, _super);function FeatureTypeConnector(){_super.apply(this, arguments);}return FeatureTypeConnector;})(SemanticVisitor);function start(p, done, error){started = true;var nextAst=0;var parsed=[];var total=__eiffel_builtin.length;function parseOne(){try{var source=__eiffel_builtin[nextAst];var percentage=Math.round(nextAst / total * 100);if(p){p(percentage);}else {console.log("Parsing ", source.filename);console.log("Done: " + percentage + "%");}parsed.push({filename:source.filename, asts:parse(source)});nextAst++;parseNext();}catch(e) {error && error(e);parseError(source, e);}}function parseNext(){if(nextAst < __eiffel_builtin.length){setTimeout(parseOne, 50);}else {try{semantics.builtinContext = analyze(parsed).context;if(done){done(semantics.builtinContext);}}catch(e) {console.error("Analysis error: ", e);error && error(e);}}}parseNext();}semantics.start = start;})(semantics = eiffel.semantics || (eiffel.semantics = {}));})(eiffel || (eiffel = {}));var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var steps;(function(steps){var sym=eiffel.symbols;var ExecutionGraph=eiffel.util.ExecutionGraph;var StepData=(function(){function StepData(summary){this.summary = summary;}return StepData;})();steps.StepData = StepData;var Steps=(function(_super){__extends(Steps, _super);function Steps(){_super.apply(this, arguments);}Steps.prototype.vClass = function(_class, arg){return undefined;};Steps.prototype.vFeatureList = function(featureList, arg){return undefined;};Steps.prototype.vFeature = function(feature, arg){return _super.prototype.vFeature.call(this, feature, arg);};Steps.prototype.vAttr = function(attr, arg){return [];};Steps.prototype.vRoutine = function(feature, arg){return _super.prototype.vRoutine.call(this, feature, arg);};Steps.prototype.vFunction = function(func, arg){return _super.prototype.vFunction.call(this, func, arg);};Steps.prototype.vProcedure = function(procedure, arg){return _super.prototype.vProcedure.call(this, procedure, arg);};Steps.prototype.vChildren = function(ast, arg){return _super.prototype.vChildren.call(this, ast, arg);};Steps.prototype.vIdentifier = function(identifier, arg){return undefined;};Steps.prototype.vType = function(type, arg){return undefined;};Steps.prototype.vParent = function(parent, arg){return undefined;};Steps.prototype.vInstruction = function(instruction, arg){return _super.prototype.vInstruction.call(this, instruction, arg);};Steps.prototype.vDefault = function(ast, arg){return undefined;};Steps.prototype.vCreateInstruction = function(createInstruction, arg){return ["create object", "initialize object"];};Steps.prototype.vSetterAssignment = function(assignment, arg){return ["compute left hand side", "compute right hand side"];};Steps.prototype.vExportChangeset = function(exportChangeset, arg){return _super.prototype.vExportChangeset.call(this, exportChangeset, arg);};Steps.prototype.vPrecondition = function(precondition, arg){return _super.prototype.vPrecondition.call(this, precondition, arg);};Steps.prototype.vPostcondition = function(postcondition, arg){return _super.prototype.vPostcondition.call(this, postcondition, arg);};Steps.prototype.vInvariantcondition = function(invariantcondition, arg){return _super.prototype.vInvariantcondition.call(this, invariantcondition, arg);};Steps.prototype.vCondition = function(condition, arg){return _super.prototype.vCondition.call(this, condition, arg);};Steps.prototype.vUnaryOp = function(unaryOp, arg){return _super.prototype.vUnaryOp.call(this, unaryOp, arg);};Steps.prototype.vBinaryOp = function(binaryOp, arg){return _super.prototype.vBinaryOp.call(this, binaryOp, arg);};Steps.prototype.vExpression = function(expression, arg){return _super.prototype.vExpression.call(this, expression, arg);};Steps.prototype.vCurrentExpr = function(currentExpression, arg){return _super.prototype.vCurrentExpr.call(this, currentExpression, arg);};Steps.prototype.vCreateExpression = function(createExpression, arg){return _super.prototype.vCreateExpression.call(this, createExpression, arg);};Steps.prototype.vIntLiteral = function(intLiteral, arg){return _super.prototype.vIntLiteral.call(this, intLiteral, arg);};Steps.prototype.vRealLiteral = function(realLiteral, arg){return _super.prototype.vRealLiteral.call(this, realLiteral, arg);};Steps.prototype.vStringLiteral = function(stringLiteral, arg){return _super.prototype.vStringLiteral.call(this, stringLiteral, arg);};Steps.prototype.vLiteral = function(literal, arg){return _super.prototype.vLiteral.call(this, literal, arg);};Steps.prototype.vConstantAttribute = function(constantAttribute, arg){return _super.prototype.vConstantAttribute.call(this, constantAttribute, arg);};Steps.prototype.vVarOrConstAttribute = function(varOrConstAttribute, arg){return _super.prototype.vVarOrConstAttribute.call(this, varOrConstAttribute, arg);};Steps.prototype.vAlias = function(alias, arg){return _super.prototype.vAlias.call(this, alias, arg);};Steps.prototype.vCharLiteral = function(charLiteral, arg){return _super.prototype.vCharLiteral.call(this, charLiteral, arg);};Steps.prototype.vBooleanLiteral = function(booleanLiteral, arg){return _super.prototype.vBooleanLiteral.call(this, booleanLiteral, arg);};Steps.prototype.vVoidLiteral = function(voidLiteral, arg){return _super.prototype.vVoidLiteral.call(this, voidLiteral, arg);};Steps.prototype.vCallExpression = function(callExpression, arg){return _super.prototype.vCallExpression.call(this, callExpression, arg);};Steps.prototype.vIndexExpression = function(indexExpression, arg){return _super.prototype.vIndexExpression.call(this, indexExpression, arg);};Steps.prototype.vVarDeclList = function(varDeclList, arg){return _super.prototype.vVarDeclList.call(this, varDeclList, arg);};Steps.prototype.vVarDeclEntry = function(varDeclEntry, arg){return _super.prototype.vVarDeclEntry.call(this, varDeclEntry, arg);};Steps.prototype.vFromLoop = function(fromLoop, arg){return _super.prototype.vFromLoop.call(this, fromLoop, arg);};Steps.prototype.vIfElse = function(ifElse, arg){return _super.prototype.vIfElse.call(this, ifElse, arg);};Steps.prototype.vElseIf = function(elseIf, arg){return _super.prototype.vElseIf.call(this, elseIf, arg);};Steps.prototype.vCheckInstruction = function(checkInstruction, arg){return _super.prototype.vCheckInstruction.call(this, checkInstruction, arg);};Steps.prototype.vExternalBlock = function(externalBlock, arg){return _super.prototype.vExternalBlock.call(this, externalBlock, arg);};Steps.prototype.vResultExpression = function(resultExpression, arg){return _super.prototype.vResultExpression.call(this, resultExpression, arg);};Steps.prototype.vAnchoredType = function(anchoredType, arg){return _super.prototype.vAnchoredType.call(this, anchoredType, arg);};Steps.prototype.vIdentifierAccess = function(identifierAccess, arg){return _super.prototype.vIdentifierAccess.call(this, identifierAccess, arg);};Steps.prototype.vObsoleteBlock = function(obsoleteBlock, arg){return _super.prototype.vObsoleteBlock.call(this, obsoleteBlock, arg);};Steps.prototype.vAttachedExpression = function(attachedExpression, arg){return _super.prototype.vAttachedExpression.call(this, attachedExpression, arg);};Steps.prototype.vTypeExpression = function(typeExpression, arg){return _super.prototype.vTypeExpression.call(this, typeExpression, arg);};Steps.prototype.vParentGroup = function(parentGroup, arg){return _super.prototype.vParentGroup.call(this, parentGroup, arg);};Steps.prototype.vRoutineInstructions = function(routineInstructions, arg){return _super.prototype.vRoutineInstructions.call(this, routineInstructions, arg);};Steps.prototype.vOnceBlock = function(onceBlock, arg){return _super.prototype.vOnceBlock.call(this, onceBlock, arg);};Steps.prototype.vDoBlock = function(doBlock, arg){return _super.prototype.vDoBlock.call(this, doBlock, arg);};Steps.prototype.vDeferredBlock = function(deferredBlock, arg){return _super.prototype.vDeferredBlock.call(this, deferredBlock, arg);};Steps.prototype.vPreconditionBlock = function(preconditionBlock, arg){return _super.prototype.vPreconditionBlock.call(this, preconditionBlock, arg);};Steps.prototype.vConditionBlock = function(conditionBlock, arg){return _super.prototype.vConditionBlock.call(this, conditionBlock, arg);};Steps.prototype.vPostconditionBlock = function(postconditionBlock, arg){return _super.prototype.vPostconditionBlock.call(this, postconditionBlock, arg);};Steps.prototype.vUnqualifiedCallExpression = function(unqualifiedCallExpression, arg){return _super.prototype.vUnqualifiedCallExpression.call(this, unqualifiedCallExpression, arg);};Steps.prototype.vLocalsBlock = function(localsBlock, arg){return _super.prototype.vLocalsBlock.call(this, localsBlock, arg);};Steps.prototype.vTypeConstraint = function(typeConstraint, arg){return _super.prototype.vTypeConstraint.call(this, typeConstraint, arg);};Steps.prototype.vRename = function(rename, arg){return _super.prototype.vRename.call(this, rename, arg);};Steps.prototype.vToken = function(token, arg){return _super.prototype.vToken.call(this, token, arg);};Steps.prototype.vRedefines = function(redefines, arg){return _super.prototype.vRedefines.call(this, redefines, arg);};Steps.prototype.vUndefines = function(undefines, arg){return _super.prototype.vUndefines.call(this, undefines, arg);};Steps.prototype.vRenames = function(renames, arg){return _super.prototype.vRenames.call(this, renames, arg);};Steps.prototype.vSelects = function(selects, arg){return _super.prototype.vSelects.call(this, selects, arg);};Steps.prototype.vNewExports = function(newExports, arg){return _super.prototype.vNewExports.call(this, newExports, arg);};Steps.prototype.vTupleExpression = function(tupleExpression, arg){return _super.prototype.vTupleExpression.call(this, tupleExpression, arg);};Steps.prototype.vAll = function(all, arg){return _super.prototype.vAll.call(this, all, arg);};Steps.prototype.vFormalGenericParameter = function(formalGenericParameter, arg){return _super.prototype.vFormalGenericParameter.call(this, formalGenericParameter, arg);};Steps.prototype.vExtendedFeatureName = function(extendedFeatureName, arg){return _super.prototype.vExtendedFeatureName.call(this, extendedFeatureName, arg);};Steps.prototype.vFrozenNameAlias = function(frozenNameAlias, arg){return _super.prototype.vFrozenNameAlias.call(this, frozenNameAlias, arg);};Steps.prototype.vPrecursorCall = function(precursorCall, arg){return _super.prototype.vPrecursorCall.call(this, precursorCall, arg);};Steps.prototype.vTypeLikeFeature = function(typeLikeFeature, arg){return _super.prototype.vTypeLikeFeature.call(this, typeLikeFeature, arg);};Steps.prototype.vTypeLikeCurrent = function(typeLikeCurrent, arg){return _super.prototype.vTypeLikeCurrent.call(this, typeLikeCurrent, arg);};Steps.prototype.vAliasBlock = function(aliasBlock, arg){return _super.prototype.vAliasBlock.call(this, aliasBlock, arg);};Steps.prototype.vAddress = function(address, arg){return _super.prototype.vAddress.call(this, address, arg);};Steps.prototype.vInspectInstruction = function(inspectInstruction, arg){return _super.prototype.vInspectInstruction.call(this, inspectInstruction, arg);};Steps.prototype.vWhenPart = function(whenPart, arg){return _super.prototype.vWhenPart.call(this, whenPart, arg);};Steps.prototype.vLoopElement = function(loopElement, arg){return _super.prototype.vLoopElement.call(this, loopElement, arg);};Steps.prototype.vAcrossAs = function(acrossAs, arg){return _super.prototype.vAcrossAs.call(this, acrossAs, arg);};Steps.prototype.vAcrossSomeOrAll = function(acrossSomeOrAll, arg){return _super.prototype.vAcrossSomeOrAll.call(this, acrossSomeOrAll, arg);};Steps.prototype.vAcrossSome = function(acrossSome, arg){return _super.prototype.vAcrossSome.call(this, acrossSome, arg);};Steps.prototype.vAcrossAll = function(acrossAll, arg){return _super.prototype.vAcrossAll.call(this, acrossAll, arg);};Steps.prototype.vLoopBody = function(loopInstructions, arg){return _super.prototype.vLoopBody.call(this, loopInstructions, arg);};Steps.prototype.vLoopFrom = function(loopFrom, arg){return _super.prototype.vLoopFrom.call(this, loopFrom, arg);};Steps.prototype.vLoop = function(loop, arg){return _super.prototype.vLoop.call(this, loop, arg);};Steps.prototype.vLoopUntil = function(loopUntil, arg){return _super.prototype.vLoopUntil.call(this, loopUntil, arg);};Steps.prototype.vLoopVariant = function(loopVariant, arg){return _super.prototype.vLoopVariant.call(this, loopVariant, arg);};Steps.prototype.vLoopInvariant = function(loopInvariant, arg){return _super.prototype.vLoopInvariant.call(this, loopInvariant, arg);};Steps.prototype.vDebugBlock = function(debugBlock, arg){return _super.prototype.vDebugBlock.call(this, debugBlock, arg);};Steps.prototype.vManifestConstant = function(manifestConstant, arg){return _super.prototype.vManifestConstant.call(this, manifestConstant, arg);};Steps.prototype.vNonObjectCall = function(nonObjectCall, arg){return _super.prototype.vNonObjectCall.call(this, nonObjectCall, arg);};Steps.prototype.vNoOp = function(noOp, arg){return _super.prototype.vNoOp.call(this, noOp, arg);};Steps.prototype.vCreationClause = function(creationClause, arg){return _super.prototype.vCreationClause.call(this, creationClause, arg);};Steps.prototype.vAgentCall = function(agentCall, arg){return _super.prototype.vAgentCall.call(this, agentCall, arg);};return Steps;})(eiffel.ast.Visitor);steps.Steps = Steps;var ContextExplainer=(function(_super){__extends(ContextExplainer, _super);function ContextExplainer(){_super.apply(this, arguments);}ContextExplainer.prototype.vClass = function(_class, arg){return _super.prototype.vClass.call(this, _class, arg);};ContextExplainer.prototype.vFeatureList = function(featureList, arg){return _super.prototype.vFeatureList.call(this, featureList, arg);};ContextExplainer.prototype.vFeature = function(feature, arg){return _super.prototype.vFeature.call(this, feature, arg);};ContextExplainer.prototype.vAttr = function(attr, arg){return _super.prototype.vAttr.call(this, attr, arg);};ContextExplainer.prototype.vRoutine = function(feature, arg){return _super.prototype.vRoutine.call(this, feature, arg);};ContextExplainer.prototype.vFunction = function(func, arg){var graph=new ExecutionGraph();return _super.prototype.vFunction.call(this, func, arg);};ContextExplainer.prototype.vProcedure = function(procedure, arg){return _super.prototype.vProcedure.call(this, procedure, arg);};ContextExplainer.prototype.vChildren = function(ast, arg){return _super.prototype.vChildren.call(this, ast, arg);};ContextExplainer.prototype.vIdentifier = function(identifier, arg){return _super.prototype.vIdentifier.call(this, identifier, arg);};ContextExplainer.prototype.vType = function(type, arg){return _super.prototype.vType.call(this, type, arg);};ContextExplainer.prototype.vParent = function(parent, arg){return _super.prototype.vParent.call(this, parent, arg);};ContextExplainer.prototype.vInstruction = function(instruction, arg){return _super.prototype.vInstruction.call(this, instruction, arg);};ContextExplainer.prototype.vDefault = function(ast, arg){};ContextExplainer.prototype.vCreateInstruction = function(createInstruction, arg){return _super.prototype.vCreateInstruction.call(this, createInstruction, arg);};ContextExplainer.prototype.vSetterAssignment = function(assignment, arg){return _super.prototype.vSetterAssignment.call(this, assignment, arg);};ContextExplainer.prototype.vExportChangeset = function(exportChangeset, arg){return _super.prototype.vExportChangeset.call(this, exportChangeset, arg);};ContextExplainer.prototype.vPrecondition = function(precondition, arg){return _super.prototype.vPrecondition.call(this, precondition, arg);};ContextExplainer.prototype.vPostcondition = function(postcondition, arg){return _super.prototype.vPostcondition.call(this, postcondition, arg);};ContextExplainer.prototype.vInvariantcondition = function(invariantcondition, arg){return _super.prototype.vInvariantcondition.call(this, invariantcondition, arg);};ContextExplainer.prototype.vCondition = function(condition, arg){return _super.prototype.vCondition.call(this, condition, arg);};ContextExplainer.prototype.vUnaryOp = function(unaryOp, arg){return _super.prototype.vUnaryOp.call(this, unaryOp, arg);};ContextExplainer.prototype.vBinaryOp = function(binaryOp, arg){return _super.prototype.vBinaryOp.call(this, binaryOp, arg);};ContextExplainer.prototype.vExpression = function(expression, arg){return _super.prototype.vExpression.call(this, expression, arg);};ContextExplainer.prototype.vCurrentExpr = function(currentExpression, arg){return _super.prototype.vCurrentExpr.call(this, currentExpression, arg);};ContextExplainer.prototype.vCreateExpression = function(createExpression, arg){return _super.prototype.vCreateExpression.call(this, createExpression, arg);};ContextExplainer.prototype.vIntLiteral = function(intLiteral, arg){return _super.prototype.vIntLiteral.call(this, intLiteral, arg);};ContextExplainer.prototype.vRealLiteral = function(realLiteral, arg){return _super.prototype.vRealLiteral.call(this, realLiteral, arg);};ContextExplainer.prototype.vStringLiteral = function(stringLiteral, arg){return _super.prototype.vStringLiteral.call(this, stringLiteral, arg);};ContextExplainer.prototype.vLiteral = function(literal, arg){return _super.prototype.vLiteral.call(this, literal, arg);};ContextExplainer.prototype.vConstantAttribute = function(constantAttribute, arg){return _super.prototype.vConstantAttribute.call(this, constantAttribute, arg);};ContextExplainer.prototype.vVarOrConstAttribute = function(varOrConstAttribute, arg){return _super.prototype.vVarOrConstAttribute.call(this, varOrConstAttribute, arg);};ContextExplainer.prototype.vAlias = function(alias, arg){return _super.prototype.vAlias.call(this, alias, arg);};ContextExplainer.prototype.vCharLiteral = function(charLiteral, arg){return _super.prototype.vCharLiteral.call(this, charLiteral, arg);};ContextExplainer.prototype.vBooleanLiteral = function(booleanLiteral, arg){return _super.prototype.vBooleanLiteral.call(this, booleanLiteral, arg);};ContextExplainer.prototype.vVoidLiteral = function(voidLiteral, arg){return _super.prototype.vVoidLiteral.call(this, voidLiteral, arg);};ContextExplainer.prototype.vCallExpression = function(callExpression, arg){return _super.prototype.vCallExpression.call(this, callExpression, arg);};ContextExplainer.prototype.vIndexExpression = function(indexExpression, arg){return _super.prototype.vIndexExpression.call(this, indexExpression, arg);};ContextExplainer.prototype.vVarDeclList = function(varDeclList, arg){return _super.prototype.vVarDeclList.call(this, varDeclList, arg);};ContextExplainer.prototype.vVarDeclEntry = function(varDeclEntry, arg){return _super.prototype.vVarDeclEntry.call(this, varDeclEntry, arg);};ContextExplainer.prototype.vFromLoop = function(fromLoop, arg){return _super.prototype.vFromLoop.call(this, fromLoop, arg);};ContextExplainer.prototype.vIfElse = function(ifElse, arg){return _super.prototype.vIfElse.call(this, ifElse, arg);};ContextExplainer.prototype.vElseIf = function(elseIf, arg){return _super.prototype.vElseIf.call(this, elseIf, arg);};ContextExplainer.prototype.vCheckInstruction = function(checkInstruction, arg){return _super.prototype.vCheckInstruction.call(this, checkInstruction, arg);};ContextExplainer.prototype.vExternalBlock = function(externalBlock, arg){return _super.prototype.vExternalBlock.call(this, externalBlock, arg);};ContextExplainer.prototype.vResultExpression = function(resultExpression, arg){return _super.prototype.vResultExpression.call(this, resultExpression, arg);};ContextExplainer.prototype.vAnchoredType = function(anchoredType, arg){return _super.prototype.vAnchoredType.call(this, anchoredType, arg);};ContextExplainer.prototype.vIdentifierAccess = function(identifierAccess, arg){return _super.prototype.vIdentifierAccess.call(this, identifierAccess, arg);};ContextExplainer.prototype.vObsoleteBlock = function(obsoleteBlock, arg){return _super.prototype.vObsoleteBlock.call(this, obsoleteBlock, arg);};ContextExplainer.prototype.vAttachedExpression = function(attachedExpression, arg){return _super.prototype.vAttachedExpression.call(this, attachedExpression, arg);};ContextExplainer.prototype.vTypeExpression = function(typeExpression, arg){return _super.prototype.vTypeExpression.call(this, typeExpression, arg);};ContextExplainer.prototype.vParentGroup = function(parentGroup, arg){return _super.prototype.vParentGroup.call(this, parentGroup, arg);};ContextExplainer.prototype.vRoutineInstructions = function(routineInstructions, arg){return _super.prototype.vRoutineInstructions.call(this, routineInstructions, arg);};ContextExplainer.prototype.vOnceBlock = function(onceBlock, arg){return _super.prototype.vOnceBlock.call(this, onceBlock, arg);};ContextExplainer.prototype.vDoBlock = function(doBlock, arg){return _super.prototype.vDoBlock.call(this, doBlock, arg);};ContextExplainer.prototype.vDeferredBlock = function(deferredBlock, arg){return _super.prototype.vDeferredBlock.call(this, deferredBlock, arg);};ContextExplainer.prototype.vPreconditionBlock = function(preconditionBlock, arg){return _super.prototype.vPreconditionBlock.call(this, preconditionBlock, arg);};ContextExplainer.prototype.vConditionBlock = function(conditionBlock, arg){return _super.prototype.vConditionBlock.call(this, conditionBlock, arg);};ContextExplainer.prototype.vPostconditionBlock = function(postconditionBlock, arg){return _super.prototype.vPostconditionBlock.call(this, postconditionBlock, arg);};ContextExplainer.prototype.vUnqualifiedCallExpression = function(unqualifiedCallExpression, arg){return _super.prototype.vUnqualifiedCallExpression.call(this, unqualifiedCallExpression, arg);};ContextExplainer.prototype.vLocalsBlock = function(localsBlock, arg){return _super.prototype.vLocalsBlock.call(this, localsBlock, arg);};ContextExplainer.prototype.vTypeConstraint = function(typeConstraint, arg){return _super.prototype.vTypeConstraint.call(this, typeConstraint, arg);};ContextExplainer.prototype.vRename = function(rename, arg){return _super.prototype.vRename.call(this, rename, arg);};ContextExplainer.prototype.vToken = function(token, arg){return _super.prototype.vToken.call(this, token, arg);};ContextExplainer.prototype.vRedefines = function(redefines, arg){return _super.prototype.vRedefines.call(this, redefines, arg);};ContextExplainer.prototype.vUndefines = function(undefines, arg){return _super.prototype.vUndefines.call(this, undefines, arg);};ContextExplainer.prototype.vRenames = function(renames, arg){return _super.prototype.vRenames.call(this, renames, arg);};ContextExplainer.prototype.vSelects = function(selects, arg){return _super.prototype.vSelects.call(this, selects, arg);};ContextExplainer.prototype.vNewExports = function(newExports, arg){return _super.prototype.vNewExports.call(this, newExports, arg);};ContextExplainer.prototype.vTupleExpression = function(tupleExpression, arg){return _super.prototype.vTupleExpression.call(this, tupleExpression, arg);};ContextExplainer.prototype.vAll = function(all, arg){return _super.prototype.vAll.call(this, all, arg);};ContextExplainer.prototype.vFormalGenericParameter = function(formalGenericParameter, arg){return _super.prototype.vFormalGenericParameter.call(this, formalGenericParameter, arg);};ContextExplainer.prototype.vExtendedFeatureName = function(extendedFeatureName, arg){return _super.prototype.vExtendedFeatureName.call(this, extendedFeatureName, arg);};ContextExplainer.prototype.vFrozenNameAlias = function(frozenNameAlias, arg){return _super.prototype.vFrozenNameAlias.call(this, frozenNameAlias, arg);};ContextExplainer.prototype.vPrecursorCall = function(precursorCall, arg){return _super.prototype.vPrecursorCall.call(this, precursorCall, arg);};ContextExplainer.prototype.vTypeLikeFeature = function(typeLikeFeature, arg){return _super.prototype.vTypeLikeFeature.call(this, typeLikeFeature, arg);};ContextExplainer.prototype.vTypeLikeCurrent = function(typeLikeCurrent, arg){return _super.prototype.vTypeLikeCurrent.call(this, typeLikeCurrent, arg);};ContextExplainer.prototype.vAliasBlock = function(aliasBlock, arg){return _super.prototype.vAliasBlock.call(this, aliasBlock, arg);};ContextExplainer.prototype.vAddress = function(address, arg){return _super.prototype.vAddress.call(this, address, arg);};ContextExplainer.prototype.vInspectInstruction = function(inspectInstruction, arg){return _super.prototype.vInspectInstruction.call(this, inspectInstruction, arg);};ContextExplainer.prototype.vWhenPart = function(whenPart, arg){return _super.prototype.vWhenPart.call(this, whenPart, arg);};ContextExplainer.prototype.vLoopElement = function(loopElement, arg){return _super.prototype.vLoopElement.call(this, loopElement, arg);};ContextExplainer.prototype.vAcrossAs = function(acrossAs, arg){return _super.prototype.vAcrossAs.call(this, acrossAs, arg);};ContextExplainer.prototype.vAcrossSomeOrAll = function(acrossSomeOrAll, arg){return _super.prototype.vAcrossSomeOrAll.call(this, acrossSomeOrAll, arg);};ContextExplainer.prototype.vAcrossSome = function(acrossSome, arg){return _super.prototype.vAcrossSome.call(this, acrossSome, arg);};ContextExplainer.prototype.vAcrossAll = function(acrossAll, arg){return _super.prototype.vAcrossAll.call(this, acrossAll, arg);};ContextExplainer.prototype.vLoopBody = function(loopInstructions, arg){return _super.prototype.vLoopBody.call(this, loopInstructions, arg);};ContextExplainer.prototype.vLoopFrom = function(loopFrom, arg){return _super.prototype.vLoopFrom.call(this, loopFrom, arg);};ContextExplainer.prototype.vLoop = function(loop, arg){return _super.prototype.vLoop.call(this, loop, arg);};ContextExplainer.prototype.vLoopUntil = function(loopUntil, arg){return _super.prototype.vLoopUntil.call(this, loopUntil, arg);};ContextExplainer.prototype.vLoopVariant = function(loopVariant, arg){return _super.prototype.vLoopVariant.call(this, loopVariant, arg);};ContextExplainer.prototype.vLoopInvariant = function(loopInvariant, arg){return _super.prototype.vLoopInvariant.call(this, loopInvariant, arg);};ContextExplainer.prototype.vDebugBlock = function(debugBlock, arg){return _super.prototype.vDebugBlock.call(this, debugBlock, arg);};ContextExplainer.prototype.vManifestConstant = function(manifestConstant, arg){return _super.prototype.vManifestConstant.call(this, manifestConstant, arg);};ContextExplainer.prototype.vNonObjectCall = function(nonObjectCall, arg){return _super.prototype.vNonObjectCall.call(this, nonObjectCall, arg);};ContextExplainer.prototype.vNoOp = function(noOp, arg){return _super.prototype.vNoOp.call(this, noOp, arg);};ContextExplainer.prototype.vCreationClause = function(creationClause, arg){return _super.prototype.vCreationClause.call(this, creationClause, arg);};ContextExplainer.prototype.vAgentCall = function(agentCall, arg){return _super.prototype.vAgentCall.call(this, agentCall, arg);};return ContextExplainer;})(eiffel.ast.Visitor);steps.ContextExplainer = ContextExplainer;})(steps = eiffel.steps || (eiffel.steps = {}));})(eiffel || (eiffel = {}));var __extends=this.__extends || function(d, b){for(var p in b) if(b.hasOwnProperty(p))d[p] = b[p];function __(){this.constructor = d;}__.prototype = b.prototype;d.prototype = new __();};var eiffel;(function(eiffel){var symbols;(function(symbols){function duplicate(arg){if(arg != null){return arg.duplicate();}else {return arg;}}var EiffelSymbol=(function(){function EiffelSymbol(name, fullyQualifiedName){this.name = name;this.fullyQualifiedName = fullyQualifiedName;this.lowerCaseName = name.toLowerCase();}EiffelSymbol.prototype.setName = function(name){this.name = name;this.lowerCaseName = name.toLowerCase();};EiffelSymbol.prototype.toString = function(){return this.constructor.name + ": " + this.name;};return EiffelSymbol;})();symbols.EiffelSymbol = EiffelSymbol;var FeatureSymbol=(function(_super){__extends(FeatureSymbol, _super);function FeatureSymbol(name, alias, isFrozen, ast, declaredIn){_super.call(this, name, name);this.routineId = null;this.routineIds = new Set();this.seeds = new Set();this.precursors = new Set();this.parameters = [];this.parametersByName = new Map();this.locals = [];this.localsByName = new Map();this.localsAndParamsByName = new Map();this.alias = alias;this.isFrozen = isFrozen;this.isDeferred = false;this.ast = ast;this.isCommand = this.ast.rawType === null;this.isAttribute = this instanceof AttributeSymbol;this.substitutions = new Substitution();this.declaredIn = declaredIn;}FeatureSymbol.prototype.duplicate = function(){console.error("Called duplicate on", this);if(true){debugger;throw new Error("Duplicate has not been implemented");}return this;};FeatureSymbol.prototype.hasSameSignature = function(other){};return FeatureSymbol;})(EiffelSymbol);symbols.FeatureSymbol = FeatureSymbol;var RoutineId=(function(){function RoutineId(introducedBy, originalFeature){this.introducedBy = introducedBy;this.originalFeature = originalFeature;this.version = new Map();this.version.set(introducedBy, originalFeature);}return RoutineId;})();symbols.RoutineId = RoutineId;var RoutineSymbol=(function(_super){__extends(RoutineSymbol, _super);function RoutineSymbol(name, alias, frozen, ast, declaredIn){_super.call(this, name, alias, frozen, ast, declaredIn);}return RoutineSymbol;})(FeatureSymbol);symbols.RoutineSymbol = RoutineSymbol;var FunctionSymbol=(function(_super){__extends(FunctionSymbol, _super);function FunctionSymbol(name, alias, frozen, ast, declaredIn){_super.call(this, name, alias, frozen, ast, declaredIn);}FunctionSymbol.prototype.duplicate = function(){var sym=new FunctionSymbol(this.name, this.alias, this.isFrozen, this.ast, this.declaredIn);sym.isDeferred = this.isDeferred;sym.typeInstance = this.typeInstance;sym.routineId = this.routineId;sym.routineIds = this.routineIds;sym.seeds = this.seeds;sym.precursors = this.precursors;sym.signature = duplicate(this.signature);return sym;};return FunctionSymbol;})(RoutineSymbol);symbols.FunctionSymbol = FunctionSymbol;var ProcedureSymbol=(function(_super){__extends(ProcedureSymbol, _super);function ProcedureSymbol(name, alias, frozen, ast, declaredIn){_super.call(this, name, alias, frozen, ast, declaredIn);}ProcedureSymbol.prototype.duplicate = function(){var sym=new ProcedureSymbol(this.name, this.alias, this.isFrozen, this.ast, this.declaredIn);sym.isDeferred = this.isDeferred;sym.typeInstance = this.typeInstance;sym.routineId = this.routineId;sym.routineIds = this.routineIds;sym.seeds = this.seeds;sym.precursors = this.precursors;sym.signature = duplicate(this.signature);return sym;};ProcedureSymbol.prototype.hasSameSignature = function(other){if(this.constructor !== other.constructor){return null;}var otherProc=other;};return ProcedureSymbol;})(RoutineSymbol);symbols.ProcedureSymbol = ProcedureSymbol;var AttributeSymbol=(function(_super){__extends(AttributeSymbol, _super);function AttributeSymbol(name, alias, frozen, attr, declaredIn){_super.call(this, name, alias, frozen, attr, declaredIn);}AttributeSymbol.prototype.duplicate = function(){var sym=new AttributeSymbol(this.name, this.alias, this.isFrozen, this.ast, this.declaredIn);sym.typeInstance = this.typeInstance;sym.routineId = this.routineId;sym.routineIds = this.routineIds;sym.seeds = this.seeds;sym.precursors = this.precursors;return sym;};return AttributeSymbol;})(FeatureSymbol);symbols.AttributeSymbol = AttributeSymbol;var VariableSymbol=(function(_super){__extends(VariableSymbol, _super);function VariableSymbol(name, ast, rawType){_super.call(this, name, name);this.ast = ast;this.type = undefined;this.rawType = rawType;}return VariableSymbol;})(EiffelSymbol);symbols.VariableSymbol = VariableSymbol;var FinalFeature=(function(){function FinalFeature(){}return FinalFeature;})();symbols.FinalFeature = FinalFeature;var PretenderSource=(function(){function PretenderSource(){}return PretenderSource;})();symbols.PretenderSource = PretenderSource;var FeaturePretenders=(function(){function FeaturePretenders(){this.effective = [];this.deferred = [];this.redefined = [];this.selected = [];}FeaturePretenders.prototype.all = function(){return this.effective.concat(this.deferred).concat(this.redefined);};return FeaturePretenders;})();symbols.FeaturePretenders = FeaturePretenders;var InheritedFeature=(function(){function InheritedFeature(){}return InheritedFeature;})();symbols.InheritedFeature = InheritedFeature;var FeatureCombination=(function(){function FeatureCombination(){}return FeatureCombination;})();symbols.FeatureCombination = FeatureCombination;var ParentSymbol=(function(){function ParentSymbol(ast, groupAst, parentType, owningClass){this.renames = [];this.undefines = [];this.redefines = [];this.selects = [];this.ast = ast;this.groupAst = groupAst;this.parentType = parentType;this.isNonConforming = groupAst.conforming != null;this.owningClass = owningClass;}ParentSymbol.prototype.toString = function(){return "Parent: " + this.ast.rawType;};ParentSymbol.prototype.inheritFeatures = function(){var _this=this;var result=new Map();var finalFeatures=this.parentType.baseType.finalFeatures;finalFeatures.forEach(function(featureSymbol, name){var duplicate=featureSymbol.duplicate();duplicate.substitutions = _this.parentType.substitutions;result.set(name.toLowerCase(), duplicate);});return result;};return ParentSymbol;})();symbols.ParentSymbol = ParentSymbol;var ClassSymbol=(function(_super){__extends(ClassSymbol, _super);function ClassSymbol(name, fullyQualifiedName, ast){_super.call(this, name, fullyQualifiedName);this.declaredFeatures = new Map();this.declaredFunctions = new Map();this.declaredProcedures = new Map();this.declaredRoutines = new Map();this.declaredAttributes = new Map();this.creationProcedures = new Map();this.finalFeatures = new Map();this.inheritedFeatures = new Map();this.routineIds = new Map();this.ancestorTypes = [];this.ancestorTypesByBaseType = new Map();this.parentSymbols = [];this.hasCyclicInheritance = false;this.inheritsFromCyclicInheritance = false;this.genericParametersInOrder = [];this.genericParametersByName = new Map();this.ast = ast;}ClassSymbol.prototype.genericParameterWithName = function(name){var lcName=name.toLowerCase();if(this.hasGenericParameterWithName(name)){return this.genericParametersByName.get(lcName);}else {throw new Error("No Generic Parameter by name " + name + " in class " + this.name);}};ClassSymbol.prototype.hasGenericParameterWithName = function(name){return this.genericParametersByName.has(name.toLowerCase());};ClassSymbol.prototype.hasSymbol = function(name){var lcName=name.toLowerCase();if(this.declaredRoutines.has(lcName)){return true;}if(this.declaredAttributes.has(lcName)){return true;}return false;};ClassSymbol.prototype.resolveSymbol = function(name){var lcName=name.toLowerCase();if(this.declaredRoutines.has(lcName)){return this.declaredRoutines.get(lcName);}if(this.declaredAttributes.has(lcName)){return this.declaredAttributes.get(lcName);}throw new Error("Symbol " + name + " does not exist in class " + this.name + ".");};ClassSymbol.prototype.toString = function(){var repr=this.name;if(this.genericParametersInOrder.length !== 0){repr += "[";repr += this.genericParametersInOrder.map(function(x){return x.name;}).join(", ");repr += "]";}return repr;};return ClassSymbol;})(EiffelSymbol);symbols.ClassSymbol = ClassSymbol;var Signature=(function(){function Signature(arguments, returnType){this.arguments = arguments;this.returnType = returnType;var sigString=this.arguments.map(function(x){return x.toString();}).join(", ");if(returnType !== null){sigString += ": " + returnType.toString();}console.log(sigString);this.identity = Symbol["for"](sigString);}Signature.prototype.equals = function(other){var thisHasReturnType=this.returnType !== null;var otherHasReturnType=other.returnType !== null;if(thisHasReturnType !== otherHasReturnType){return false;}if(thisHasReturnType && otherHasReturnType && !this.returnType.equals(other.returnType)){return false;}if(this.arguments.length !== other.arguments.length){return false;}var zipped=eiffel.util.zip(this.arguments, other.arguments);return eiffel.util.all(zipped, function(x_y){return x_y[0].equals(x_y[0]);});};Signature.prototype.conformsTo = function(other){if(this.arguments.length != other.arguments.length){return false;}var zipped=eiffel.util.zip(this.arguments, other.arguments);var point_2=true;zipped.forEach(function(t1__t2){var bi=t1__t2[0];var ai=t1__t2[1];if(!bi.conformsTo(ai)){point_2 = false;}});};Signature.prototype.substitute = function(subst){var substParamTypes=this.arguments.map(function(x){return x.substitute(subst);});return new Signature(substParamTypes, subst.substitute(this.returnType));};Signature.prototype.duplicate = function(){var newRetType=duplicate(this.returnType);return new Signature(this.arguments.map(function(x){return x.duplicate();}), newRetType);};return Signature;})();symbols.Signature = Signature;var GenericParameterSymbol=(function(_super){__extends(GenericParameterSymbol, _super);function GenericParameterSymbol(name, fullyQualifiedName, definingClass){_super.call(this, name, fullyQualifiedName);this.definingClass = definingClass;}GenericParameterSymbol.prototype.substitute = function(substitution){return substitution.substituteTypeParam(this);};GenericParameterSymbol.prototype.hasFeatureWithName = function(name){return undefined;};GenericParameterSymbol.prototype.featureWithName = function(name){return undefined;};GenericParameterSymbol.prototype.canCallFeatureWith = function(name, argType){};GenericParameterSymbol.prototype.callFeatureWith = function(name, argType){return undefined;};GenericParameterSymbol.prototype.duplicate = function(){return this;};GenericParameterSymbol.prototype.equals = function(other){return this === other;};GenericParameterSymbol.prototype.toString = function(){return this.fullyQualifiedName;};GenericParameterSymbol.prototype.conformsTo = function(other){return this === other;};GenericParameterSymbol.prototype.typeForCall = function(name){console.error("Unsupported typeForCall on generic param: " + this.fullyQualifiedName + "." + name);debugger;return null;};return GenericParameterSymbol;})(EiffelSymbol);symbols.GenericParameterSymbol = GenericParameterSymbol;var Substitution=(function(){function Substitution(){this.substitutions = new Map();}Substitution.prototype.newSubstituitionWith = function(modifications){var newSubs=new Map();this.substitutions.forEach(function(v, k){if(v instanceof GenericParameterSymbol){var genParamSym=v;if(modifications.substitutions.has(genParamSym)){newSubs.set(k, modifications.substitutions.get(genParamSym));}else {newSubs.set(k, genParamSym);}}else {}});return new Substitution();};Substitution.prototype.substituteTypeParam = function(type){if(this.substitutions.has(type)){return this.substitutions.get(type);}else {return type;}};Substitution.prototype.addSubstitution = function(genericParam, type){this.substitutions.set(genericParam, type);};Substitution.prototype.hasSubstitutionFor = function(genericParam){return;};Substitution.prototype.duplicate = function(){var result=new Substitution();this.substitutions.forEach(function(v, k){result.addSubstitution(k, v);});return result;};Substitution.prototype.substitute = function(arg){if(arg != null){return arg.substitute(this);}else {return null;}};return Substitution;})();symbols.Substitution = Substitution;var TypeInstance=(function(){function TypeInstance(baseType, typeParameters, sourceClass, substitution){this.baseType = baseType;this.typeParameters = typeParameters;this.typeParameters.forEach(function(typeParam){if(typeParam === undefined){debugger;}});if(this.baseType instanceof TypeInstance){debugger;}this.sourceClass = sourceClass;this.substitutions = substitution;this.repr = this.baseType.fullyQualifiedName;if(this.typeParameters.length >= 1){this.repr += "[" + this.typeParameters.map(function(x){return x.toString();}).join(", ") + "]";}}TypeInstance.prototype.toString = function(){return this.repr;};TypeInstance.prototype.substitute = function(substitution){var substTypeParams=this.typeParameters.map(function(x){return x.substitute(substitution);});return new TypeInstance(this.baseType, substTypeParams, this.sourceClass, this.substitutions.newSubstituitionWith(substitution));};TypeInstance.prototype.featureWithName = function(name, client){if(this.hasFeatureWithName(name, client)){}};TypeInstance.prototype.hasFeatureWithName = function(name, client){if(client === null){return this.baseType.finalFeatures.has(name);}else {console.error("Client based feature availability not implemented");debugger;}};TypeInstance.prototype.canCallFeatureWith = function(name, paramTypes, client){if(!this.hasFeatureWithName(name, client)){console.error("Feature " + name + " does not exist on " + this.baseType.fullyQualifiedName + " for client: " + client, client, "this", this);debugger;return false;}else {}};TypeInstance.prototype.callFeatureWith = function(name, argType){return undefined;};TypeInstance.prototype.typeForCall = function(name){return this.baseType.finalFeatures.get(name.toLowerCase()).typeInstance.substitute(this.substitutions);};TypeInstance.prototype.compatibleWith = function(other, currentClass){return this.conformsTo(other, currentClass) || this.convertsTo(other, currentClass);};TypeInstance.prototype.conformsTo = function(other, currentClass){return false;};TypeInstance.prototype.convertsTo = function(other, currentClass){return false;};TypeInstance.prototype.equals = function(other){if(other == null){return false;}if(this.baseType != other.baseType){return false;}else {if(this.typeParameters.length != other.typeParameters.length){throw new Error("Invalid State: both should have same amount of type parameters");}var isEqual=true;this.typeParameters.forEach(function(typeParam, i){if(!typeParam.equals(other.typeParameters[i])){isEqual = false;}});return isEqual;}};TypeInstance.prototype.differentGenericDerivationThan = function(other){if(this.baseType != other.baseType){return false;}else {if(this.typeParameters.length != other.typeParameters.length){throw new Error("Invalid State: both should have same amount of type parameters");}var isDifferent=false;this.typeParameters.forEach(function(typeParam, i){if(!typeParam.equals(other.typeParameters[i])){isDifferent = true;}});return isDifferent;}};TypeInstance.prototype.duplicate = function(){return new TypeInstance(this.baseType, this.typeParameters.map(function(x){return x.duplicate();}), this.sourceClass, this.substitutions.duplicate());};return TypeInstance;})();symbols.TypeInstance = TypeInstance;})(symbols = eiffel.symbols || (eiffel.symbols = {}));})(eiffel || (eiffel = {}));
//# sourceMappingURL=data:application/json;base64,