/// <reference path="ast.ts" />
var eiffel;
(function (eiffel) {
    var ast;
    (function (_ast) {
        var Visitor = (function () {
            function Visitor() {}
            Visitor.prototype.vClass = function (_class, arg) {
                return this.vDefault(_class, arg);
            };
            Visitor.prototype.vFeatureList = function (featureList, arg) {
                return this.vDefault(featureList, arg);
            };
            Visitor.prototype.vFeature = function (feature, arg) {
                return this.vDefault(feature, arg);
            };
            Visitor.prototype.vAttr = function (attr, arg) {
                return this.vVarOrConstAttribute(attr, arg);
            };
            Visitor.prototype.vRoutine = function (feature, arg) {
                return this.vFeature(feature, arg);
            };
            Visitor.prototype.vFunction = function (func, arg) {
                return this.vRoutine(func, arg);
            };
            Visitor.prototype.vProcedure = function (procedure, arg) {
                return this.vRoutine(procedure, arg);
            };
            Visitor.prototype.vChildren = function (ast, arg) {
                var result = null;
                ast.children.forEach(function (t) {
                    if (t != null) {
                        result = t._acceptor.accept(this, arg);
                    }
                }, this);
                return result;
            };
            Visitor.prototype.vIdentifier = function (identifier, arg) {
                return this.vDefault(identifier, arg);
            };
            Visitor.prototype.vType = function (type, arg) {
                return this.vDefault(type, arg);
            };
            Visitor.prototype.vParent = function (parent, arg) {
                return this.vDefault(parent, arg);
            };
            Visitor.prototype.vInstruction = function (instruction, arg) {
                return this.vDefault(instruction, arg);
            };
            Visitor.prototype.vDefault = function (ast, arg) {
                return this.vChildren(ast, arg);
            };
            Visitor.prototype.vCreateInstruction = function (createInstruction, arg) {
                return this.vInstruction(createInstruction, arg);
            };
            Visitor.prototype.vAssignment = function (assignment, arg) {
                return this.vInstruction(assignment, arg);
            };
            Visitor.prototype.vExportChangeSet = function (exportChangeSet, arg) {
                return this.vDefault(exportChangeSet, arg);
            };
            Visitor.prototype.vPrecondition = function (precondition, arg) {
                return this.vCondition(precondition, arg);
            };
            Visitor.prototype.vPostcondition = function (postcondition, arg) {
                return this.vCondition(postcondition, arg);
            };
            Visitor.prototype.vInvariantcondition = function (invariantcondition, arg) {
                return this.vCondition(invariantcondition, arg);
            };
            Visitor.prototype.vCondition = function (condition, arg) {
                return this.vDefault(condition, arg);
            };
            Visitor.prototype.vUnaryOp = function (unaryOp, arg) {
                return this.vExpression(unaryOp, arg);
            };
            Visitor.prototype.vBinaryOp = function (binaryOp, arg) {
                return this.vExpression(binaryOp, arg);
            };
            Visitor.prototype.vExpression = function (expression, arg) {
                return this.vDefault(expression, arg);
            };
            Visitor.prototype.vCurrentExpr = function (currentExpression, arg) {
                return this.vDefault(currentExpression, arg);
            };
            Visitor.prototype.vIntLiteral = function (intLiteral, arg) {
                return this.vLiteral(intLiteral, arg);
            };
            Visitor.prototype.vStringLiteral = function (stringLiteral, arg) {
                return this.vLiteral(stringLiteral, arg);
            };
            Visitor.prototype.vLiteral = function (literal, arg) {
                return this.vDefault(literal, arg);
            };
            Visitor.prototype.vConstantAttribute = function (constantAttribute, arg) {
                return this.vVarOrConstAttribute(constantAttribute, arg);
            };
            Visitor.prototype.vVarOrConstAttribute = function (varOrConstAttribute, arg) {
                return this.vFeature(varOrConstAttribute, arg);
            };
            Visitor.prototype.vAlias = function (alias, arg) {
                return this.vDefault(alias, arg);
            };
            Visitor.prototype.vCharLiteral = function (charLiteral, arg) {
                return this.vLiteral(charLiteral, arg);
            };
            Visitor.prototype.vBooleanLiteral = function (booleanLiteral, arg) {
                return this.vLiteral(booleanLiteral, arg);
            };
            Visitor.prototype.vVoidLiteral = function (voidLiteral, arg) {
                return this.vLiteral(voidLiteral, arg);
            };
            Visitor.prototype.vCallExpression = function (callExpression, arg) {
                return this.vExpression(callExpression, arg);
            };
            Visitor.prototype.vIndexExpression = function (indexExpression, arg) {
                return this.vExpression(indexExpression, arg);
            };
            Visitor.prototype.vVarDeclList = function (varDeclList, arg) {
                return this.vDefault(varDeclList, arg);
            };
            Visitor.prototype.vVarDeclEntry = function (varDeclEntry, arg) {
                return this.vDefault(varDeclEntry, arg);
            };
            Visitor.prototype.vFromLoop = function (fromLoop, arg) {
                return this.vInstruction(fromLoop, arg);
            };
            Visitor.prototype.vIfElse = function (ifElse, arg) {
                return this.vInstruction(ifElse, arg);
            };
            Visitor.prototype.vElseIf = function (elseIf, arg) {
                return this.vInstruction(elseIf, arg);
            };
            Visitor.prototype.vExternal = function (external, arg) {
                return null;
            };
            Visitor.prototype.vResultExpression = function (resultExpression, arg) {
                return this.vDefault(resultExpression, arg);
            };
            Visitor.prototype.vAnchoredType = function (anchoredType, arg) {
                return this.vDefault(anchoredType, arg);
            };
            Visitor.prototype.vIdentifierAccess = function (identifierAccess, arg) {
                return this.vExpression(identifierAccess, arg);
            };
            Visitor.prototype.vObsolete = function (obsolete, arg) {
                return null;
            };
            Visitor.prototype.vAttachedExpression = function (attachedExpression, arg) {
                return this.vExpression(attachedExpression, arg);
            };
            return Visitor;
        })();
        _ast.Visitor = Visitor;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

/// <reference path="visitor.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var ast;
    (function (ast) {
        var AST = (function () {
            function AST(impl) {
                this._acceptor = impl;
                this.children = [];
            }
            return AST;
        })();
        ast.AST = AST;
        var Identifier = (function (_super) {
            __extends(Identifier, _super);
            function Identifier(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
            }
            Identifier.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifier(this, arg);
            };
            return Identifier;
        })(AST);
        ast.Identifier = Identifier;
        var Pos = (function () {
            function Pos(offset, line, column) {
                this.offset = offset;
                this.line = line;
                this.column = column;
            }
            return Pos;
        })();
        ast.Pos = Pos;
        var Class = (function (_super) {
            __extends(Class, _super);
            function Class(name, expanded, note, parents, creationClause, featureLists) {
                _super.call(this, this);
                this.name = name;
                this.expanded = expanded;
                this.children.push(name);
                this.parents = parents;
                Array.prototype.push.apply(this.children, parents);
                this.creationClause = creationClause;
                Array.prototype.push.apply(this.children, creationClause);
                this.featureLists = featureLists;
                Array.prototype.push.apply(this.children, featureLists);
            }
            Class.prototype.accept = function (visitor, arg) {
                return visitor.vClass(this, arg);
            };
            return Class;
        })(AST);
        ast.Class = Class;
        var FeatureList = (function (_super) {
            __extends(FeatureList, _super);
            function FeatureList(exports, features) {
                _super.call(this, this);
                this.exports = exports;
                Array.prototype.push.apply(this.children, exports);
                this.features = features;
                Array.prototype.push.apply(this.children, features);
            }
            FeatureList.prototype.accept = function (visitor, arg) {
                return visitor.vFeatureList(this, arg);
            };
            return FeatureList;
        })(AST);
        ast.FeatureList = FeatureList;
        var IdentifierAccess = (function (_super) {
            __extends(IdentifierAccess, _super);
            function IdentifierAccess(identifier) {
                _super.call(this, this);
                this.identifier = identifier;
                this.start = identifier.start;
                this.end = identifier.end;
            }
            IdentifierAccess.prototype.accept = function (visitor, arg) {
                return visitor.vIdentifierAccess(this, arg);
            };
            return IdentifierAccess;
        })(AST);
        ast.IdentifierAccess = IdentifierAccess;
        var Routine = (function (_super) {
            __extends(Routine, _super);
            function Routine(name, parameters, alias, rt, preconditions, locals, instructionKind, instructions, postconditions, frozen, external, obsolete) {
                _super.call(this, this);
                this.name = name;
                this.parameters = parameters;
                this.alias = alias;
                this.preconditions = preconditions;
                this.locals = locals;
                this.instructionKind = instructionKind;
                this.instructions = instructions;
                this.postconditions = postconditions;
                this.frozen = frozen;
                this.external = external;
                this.obsolete = obsolete;
                this.children.push(name);
                Array.prototype.push.apply(this.children, parameters);
                this.children.push(alias);
                Array.prototype.push.apply(this.children, preconditions);
                Array.prototype.push.apply(this.children, locals);
                Array.prototype.push.apply(this.children, instructions);
                Array.prototype.push.apply(this.children, postconditions);
                this.children.push(external);
                this.children.push(obsolete);
            }
            Routine.prototype.accept = function (visitor, arg) {
                return visitor.vRoutine(this, arg);
            };
            return Routine;
        })(AST);
        ast.Routine = Routine;
        var External = (function (_super) {
            __extends(External, _super);
            function External(expression, start, end) {
                _super.call(this, this);
                this.expression = expression;
            }
            External.prototype.accept = function (visitor, arg) {
                return visitor.vExternal(this, arg);
            };
            return External;
        })(AST);
        ast.External = External;
        var Obsolete = (function (_super) {
            __extends(Obsolete, _super);
            function Obsolete(expression, start, end) {
                _super.call(this, this);
                this.expression = expression;
            }
            Obsolete.prototype.accept = function (visitor, arg) {
                return visitor.vObsolete(this, arg);
            };
            return Obsolete;
        })(AST);
        ast.Obsolete = Obsolete;
        var VarDeclList = (function (_super) {
            __extends(VarDeclList, _super);
            function VarDeclList(varDecls, rawType) {
                _super.call(this, this);
                this.varDecls = varDecls;
                this.rawType = rawType;
                varDecls.forEach(function (varDecl) {
                    varDecl.varDeclList = this;
                });
                Array.prototype.push.apply(this.children, varDecls);
                this.children.push(rawType);
            }
            VarDeclList.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclList(this, arg);
            };
            return VarDeclList;
        })(AST);
        ast.VarDeclList = VarDeclList;
        var VarDeclEntry = (function (_super) {
            __extends(VarDeclEntry, _super);
            function VarDeclEntry(name) {
                _super.call(this, this);
                this.name = name;
                this.children.push(name);
            }
            VarDeclEntry.prototype.accept = function (visitor, arg) {
                return visitor.vVarDeclEntry(this, arg);
            };
            return VarDeclEntry;
        })(AST);
        ast.VarDeclEntry = VarDeclEntry;
        var Type = (function (_super) {
            __extends(Type, _super);
            function Type(name, parameters, detachable, start, end) {
                _super.call(this, this);
                this.name = name;
                this.parameters = parameters;
                this.detachable = detachable;
                this.start = start;
                this.end = end;
                this.children.push(name);
                Array.prototype.push.apply(this.children, parameters);
            }
            Type.prototype.accept = function (visitor, arg) {
                return visitor.vType(this, arg);
            };
            return Type;
        })(AST);
        ast.Type = Type;
        var Function = (function (_super) {
            __extends(Function, _super);
            function Function() {
                _super.apply(this, arguments);
            }
            Function.prototype.accept = function (visitor, arg) {
                return visitor.vFunction(this, arg);
            };
            return Function;
        })(Routine);
        ast.Function = Function;
        var Procedure = (function (_super) {
            __extends(Procedure, _super);
            function Procedure() {
                _super.apply(this, arguments);
            }
            Procedure.prototype.accept = function (visitor, arg) {
                return visitor.vProcedure(this, arg);
            };
            return Procedure;
        })(Routine);
        ast.Procedure = Procedure;
        var Alias = (function (_super) {
            __extends(Alias, _super);
            function Alias(name, start, end) {
                _super.call(this, this);
                this.name = name;
                this.start = start;
                this.end = end;
                this.children.push(name);
            }
            Alias.prototype.accept = function (visitor, arg) {
                return visitor.vAlias(this, arg);
            };
            return Alias;
        })(AST);
        ast.Alias = Alias;
        var CurrentExpression = (function (_super) {
            __extends(CurrentExpression, _super);
            function CurrentExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            CurrentExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCurrentExpr(this, arg);
            };
            return CurrentExpression;
        })(AST);
        ast.CurrentExpression = CurrentExpression;
        var ResultExpression = (function (_super) {
            __extends(ResultExpression, _super);
            function ResultExpression(pos, end) {
                _super.call(this, this);
                this.start = pos;
                this.end = end;
            }
            ResultExpression.prototype.accept = function (visitor, arg) {
                return visitor.vResultExpression(this, arg);
            };
            return ResultExpression;
        })(AST);
        ast.ResultExpression = ResultExpression;
        var AnchoredType = (function (_super) {
            __extends(AnchoredType, _super);
            function AnchoredType(expression) {
                _super.call(this, this);
                this.expression = expression;
            }
            AnchoredType.prototype.accept = function (visitor, arg) {
                return visitor.vAnchoredType(this, arg);
            };
            return AnchoredType;
        })(AST);
        ast.AnchoredType = AnchoredType;
        var VarOrConstAttribute = (function (_super) {
            __extends(VarOrConstAttribute, _super);
            function VarOrConstAttribute(name, rawType) {
                _super.call(this, this);
                this.name = name;
                this.rawType = rawType;
                this.children.push(name, rawType);
            }
            VarOrConstAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vVarOrConstAttribute(this, arg);
            };
            return VarOrConstAttribute;
        })(AST);
        ast.VarOrConstAttribute = VarOrConstAttribute;
        var Attribute = (function (_super) {
            __extends(Attribute, _super);
            function Attribute() {
                _super.apply(this, arguments);
            }
            Attribute.prototype.accept = function (visitor, arg) {
                return visitor.vAttr(this, arg);
            };
            return Attribute;
        })(VarOrConstAttribute);
        ast.Attribute = Attribute;
        var ConstantAttribute = (function (_super) {
            __extends(ConstantAttribute, _super);
            function ConstantAttribute(name, rawType, value) {
                _super.call(this, name, rawType);
                this.value = value;
                this.children.push(value);
            }
            ConstantAttribute.prototype.accept = function (visitor, arg) {
                return visitor.vConstantAttribute(this, arg);
            };
            return ConstantAttribute;
        })(VarOrConstAttribute);
        ast.ConstantAttribute = ConstantAttribute;
        var Parent = (function (_super) {
            __extends(Parent, _super);
            function Parent() {
                _super.call(this, this);
            }
            Parent.prototype.accept = function (visitor, arg) {
                return visitor.vParent(this, arg);
            };
            return Parent;
        })(AST);
        ast.Parent = Parent;
        var Literal = (function (_super) {
            __extends(Literal, _super);
            function Literal() {
                _super.apply(this, arguments);
            }
            return Literal;
        })(AST);
        ast.Literal = Literal;
        var CharLiteral = (function (_super) {
            __extends(CharLiteral, _super);
            function CharLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            CharLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vCharLiteral(this, arg);
            };
            return CharLiteral;
        })(Literal);
        ast.CharLiteral = CharLiteral;
        var BooleanLiteral = (function (_super) {
            __extends(BooleanLiteral, _super);
            function BooleanLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            BooleanLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vBooleanLiteral(this, arg);
            };
            return BooleanLiteral;
        })(Literal);
        ast.BooleanLiteral = BooleanLiteral;
        var IntLiteral = (function (_super) {
            __extends(IntLiteral, _super);
            function IntLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            IntLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vIntLiteral(this, arg);
            };
            return IntLiteral;
        })(Literal);
        ast.IntLiteral = IntLiteral;
        var VoidLiteral = (function (_super) {
            __extends(VoidLiteral, _super);
            function VoidLiteral(start, end) {
                _super.call(this, this);
                this.value = null;
                this.start = start;
                this.end = end;
            }
            VoidLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vVoidLiteral(this, arg);
            };
            return VoidLiteral;
        })(Literal);
        ast.VoidLiteral = VoidLiteral;
        var StringLiteral = (function (_super) {
            __extends(StringLiteral, _super);
            function StringLiteral(value, start, end) {
                _super.call(this, this);
                this.value = value;
                this.start = start;
                this.end = end;
            }
            StringLiteral.prototype.accept = function (visitor, arg) {
                return visitor.vStringLiteral(this, arg);
            };
            return StringLiteral;
        })(Literal);
        ast.StringLiteral = StringLiteral;
        var All = (function () {
            function All() {}
            return All;
        })();
        ast.All = All;
        var ExportChangeSet = (function (_super) {
            __extends(ExportChangeSet, _super);
            function ExportChangeSet() {
                _super.call(this, this);
            }
            ExportChangeSet.prototype.accept = function (visitor, arg) {
                return visitor.vExportChangeSet(this, arg);
            };
            return ExportChangeSet;
        })(AST);
        ast.ExportChangeSet = ExportChangeSet;
        var TypeInstance = (function () {
            function TypeInstance() {}
            return TypeInstance;
        })();
        ast.TypeInstance = TypeInstance;
        var Condition = (function (_super) {
            __extends(Condition, _super);
            function Condition(label, condition) {
                _super.call(this, this);
                this.condition = condition;
                this.label = label;
                this.children.push(label, condition);
            }
            Condition.prototype.accept = function (visitor, arg) {
                throw new Error("This should not be called");
            };
            return Condition;
        })(AST);
        ast.Condition = Condition;
        var Precondition = (function (_super) {
            __extends(Precondition, _super);
            function Precondition() {
                _super.apply(this, arguments);
            }
            Precondition.prototype.accept = function (visitor, arg) {
                return visitor.vPrecondition(this, arg);
            };
            return Precondition;
        })(Condition);
        ast.Precondition = Precondition;
        var Postcondition = (function (_super) {
            __extends(Postcondition, _super);
            function Postcondition() {
                _super.apply(this, arguments);
            }
            Postcondition.prototype.accept = function (visitor, arg) {
                return visitor.vPostcondition(this, arg);
            };
            return Postcondition;
        })(Condition);
        ast.Postcondition = Postcondition;
        var Invariantcondition = (function (_super) {
            __extends(Invariantcondition, _super);
            function Invariantcondition() {
                _super.apply(this, arguments);
            }
            Invariantcondition.prototype.accept = function (visitor, arg) {
                return visitor.vInvariantcondition(this, arg);
            };
            return Invariantcondition;
        })(Condition);
        ast.Invariantcondition = Invariantcondition;
        var Assignment = (function (_super) {
            __extends(Assignment, _super);
            function Assignment(left, right) {
                _super.call(this, this);
                this.left = left;
                this.right = right;
                this.children.push(left, right);
            }
            Assignment.prototype.accept = function (visitor, arg) {
                return visitor.vAssignment(this, arg);
            };
            return Assignment;
        })(AST);
        ast.Assignment = Assignment;
        var CreateInstruction = (function (_super) {
            __extends(CreateInstruction, _super);
            function CreateInstruction(target, method, arguments) {
                _super.call(this, this);
                this.target = target;
                this.method = method;
                this.arguments = arguments;
                this.children.push(target, method);
                Array.prototype.push.apply(this.children, arguments);
            }
            CreateInstruction.prototype.accept = function (visitor, arg) {
                return visitor.vCreateInstruction(this, arg);
            };
            return CreateInstruction;
        })(AST);
        ast.CreateInstruction = CreateInstruction;
        var UnaryOp = (function (_super) {
            __extends(UnaryOp, _super);
            function UnaryOp(operator, operand, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.operand = operand;
                this.start = start;
                this.end = end;
                this.children.push(operand);
            }
            UnaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vUnaryOp(this, arg);
            };
            return UnaryOp;
        })(AST);
        ast.UnaryOp = UnaryOp;
        var BinaryOp = (function (_super) {
            __extends(BinaryOp, _super);
            function BinaryOp(operator, left, right, start, end) {
                _super.call(this, this);
                this.operator = operator;
                this.left = left;
                this.right = right;
                this.start = start;
                this.end = end;
                this.children.push(left, right);
            }
            BinaryOp.prototype.accept = function (visitor, arg) {
                return visitor.vBinaryOp(this, arg);
            };
            return BinaryOp;
        })(AST);
        ast.BinaryOp = BinaryOp;
        var stringToUnaryOp = {
            "-": 0 /* Minus */,
            "+": 1 /* Plus */,
            not: 2 /* Not */,
            old: 3 /* Old */ };
        var stringToBinaryOp = {
            "-": 0 /* Minus */,
            "+": 1 /* Plus */,
            "*": 2 /* Multiplication */,
            "/": 3 /* Division */,
            "//": 4 /* IntegerDivision */,
            "\\\\": 5 /* Modulo */,
            "^": 6 /* Exponential */,
            "..": 7 /* DotDot */,
            "=": 8 /* Identical */,
            "/=": 9 /* NotIdentical */,
            "~": 10 /* IsEqual */,
            "/~": 11 /* NotIsEqual */,
            "<": 12 /* LessThan */,
            ">": 13 /* GreaterThan */,
            "<=": 14 /* LessOrEqual */,
            ">=": 15 /* GreaterOrEqual */,
            and: 16 /* And */,
            "and then": 17 /* AndThen */,
            or: 18 /* Or */,
            "or else": 19 /* OrElse */,
            xor: 20 /* Xor */,
            implies: 21 /* Implies */ };
        var CallExpression = (function (_super) {
            __extends(CallExpression, _super);
            function CallExpression(operand, name, parameters) {
                _super.call(this, this);
                this.operand = operand;
                this.name = name;
                this.parameters = parameters;
                this.children.push(operand, name);
                Array.prototype.push.apply(this.children, parameters);
            }
            CallExpression.prototype.accept = function (visitor, arg) {
                return visitor.vCallExpression(this, arg);
            };
            return CallExpression;
        })(AST);
        ast.CallExpression = CallExpression;
        var IndexExpression = (function (_super) {
            __extends(IndexExpression, _super);
            function IndexExpression(operand, argument) {
                _super.call(this, this);
                this.operand = operand;
                this.argument = argument;
                this.children.push(operand, argument);
            }
            IndexExpression.prototype.accept = function (visitor, arg) {
                return visitor.vIndexExpression(this, arg);
            };
            return IndexExpression;
        })(AST);
        ast.IndexExpression = IndexExpression;
        var AttachedExpression = (function (_super) {
            __extends(AttachedExpression, _super);
            function AttachedExpression(ofType, outerVar, newVar, start, end) {
                _super.call(this, this);
                this.ofType = ofType;
                this.outerVar = outerVar;
                this.newVar = newVar;
                this.children.push(ofType, outerVar, newVar);
                this.start = start;
                this.end = end;
            }
            AttachedExpression.prototype.accept = function (visitor, arg) {
                return visitor.vAttachedExpression(this, arg);
            };
            return AttachedExpression;
        })(AST);
        ast.AttachedExpression = AttachedExpression;
        var FromLoop = (function (_super) {
            __extends(FromLoop, _super);
            function FromLoop(initializerBlock, until, loopBlock) {
                _super.call(this, this);
                this.initializerBlock = initializerBlock;
                this.until = until;
                this.loopBlock = loopBlock;
                Array.prototype.push.apply(this.children, initializerBlock);
                this.children.push(until);
                Array.prototype.push.apply(this.children, loopBlock);
            }
            FromLoop.prototype.accept = function (visitor, arg) {
                return visitor.vFromLoop(this, arg);
            };
            return FromLoop;
        })(AST);
        ast.FromLoop = FromLoop;
        var IfElse = (function (_super) {
            __extends(IfElse, _super);
            function IfElse(condition, thenBlock, elseIfs, elseBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.elseIfs = elseIfs;
                this.elseBlock = elseBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
                Array.prototype.push.apply(this.children, elseIfs);
                Array.prototype.push.apply(this.children, elseBlock);
            }
            IfElse.prototype.accept = function (visitor, arg) {
                return visitor.vIfElse(this, arg);
            };
            return IfElse;
        })(AST);
        ast.IfElse = IfElse;
        var ElseIf = (function (_super) {
            __extends(ElseIf, _super);
            function ElseIf(condition, thenBlock) {
                _super.call(this, this);
                this.condition = condition;
                this.thenBlock = thenBlock;
                this.children.push(condition);
                Array.prototype.push.apply(this.children, thenBlock);
            }
            ElseIf.prototype.accept = function (visitor, arg) {
                return visitor.vElseIf(this, arg);
            };
            return ElseIf;
        })(AST);
        ast.ElseIf = ElseIf;
    })(ast = eiffel.ast || (eiffel.ast = {}));
})(eiffel || (eiffel = {}));

var eiffel;
(function (eiffel) {
    var builtin;
    (function (builtin) {
        builtin.STD_FILE = {
            put_string: [function (ctx) {}]
        };
    })(builtin = eiffel.builtin || (eiffel.builtin = {}));
})(eiffel || (eiffel = {}));

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="visitor.ts" />
var eiffel;
(function (eiffel) {
    var semantics;
    (function (semantics) {
        var createClassSymbols = function createClassSymbols(asts, analysisContext) {
            asts.forEach(function (ast) {
                if (!(ast instanceof eiffel.ast.Class)) {
                    console.error("Root AST node is not instance of Class", ast);
                    throw new Error("Root AST node is not instance of Class");
                }
                var name = ast.name.name;
                var classSymbol = new eiffel.symbols.ClassSymbol(name, ast);
                analysisContext.classSymbols[name] = classSymbol;
                analysisContext.allClasses.push(classSymbol);
            });
        };
        var createFeatureSymbols = function createFeatureSymbols(analysisContext) {
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.accept(new FeatureDiscovery(analysisContext, classSymbol), null);
            });
        };
        var createRoutineParamSymbols = function createRoutineParamSymbols(allRoutines) {
            allRoutines.forEach(function (routine) {
                routine.ast.parameters.forEach(function (parameterList) {
                    parameterList.varDecls.forEach(function (varDecl) {
                        var varName = varDecl.name.name;
                        var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                        routine.paramsInOrder.push(variableSymbol);
                        routine.localsAndParamsByName[varName] = variableSymbol;
                    });
                });
            });
        };
        var createRoutineLocalSymbols = function createRoutineLocalSymbols(analysisContext) {
            analysisContext.allRoutines.forEach(function (routine) {
                routine.ast.locals.forEach(function (varDeclLists) {
                    varDeclLists.forEach(function (parameterList) {
                        parameterList.varDecls.forEach(function (varDecl) {
                            var varName = varDecl.name.name;
                            var variableSymbol = new eiffel.symbols.VariableSymbol(varName, varDecl);
                            routine.locals.push(variableSymbol);
                            routine.localsAndParamsByName[varName] = variableSymbol;
                        });
                    });
                });
            });
        };
        function analyze() {
            var manyAsts = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                manyAsts[_i - 0] = arguments[_i];
            }
            var builtinSources = __eiffel_builtin.map(function (x) {
                return x.content;
            });
            Array.prototype.push.apply(manyAsts, builtinSources.map(function (source) {
                return eiffel.parser.parse(source);
            }));
            var asts = Array.prototype.concat.apply([], manyAsts);
            var analysisContext = new AnalysisContext();
            createClassSymbols(asts, analysisContext);
            createFeatureSymbols(analysisContext);
            createRoutineParamSymbols(analysisContext.allRoutines);
            createRoutineLocalSymbols(analysisContext);
            analysisContext.allClasses.forEach(function (classSymbol) {
                classSymbol.ast.creationClause.forEach(function (identifier) {
                    var name = identifier.name;
                    if (classSymbol.procedures.hasOwnProperty(name)) {
                        classSymbol.creationProcedures[name] = classSymbol.procedures[name];
                    } else if (classSymbol.functions.hasOwnProperty(name)) {
                        analysisContext.errors.push("Functions cannot be used as creation procedures " + name);
                    } else {
                        analysisContext.errors.push("There is not procedure with name " + name);
                    }
                });
            });
            var newVar = {
                asts: asts,
                errors: analysisContext.errors,
                context: analysisContext };
            return newVar;
        }
        semantics.analyze = analyze;
        var AnalysisContext = (function () {
            function AnalysisContext() {
                this.classSymbols = {};
                this.allFunctions = [];
                this.allProcedures = [];
                this.allRoutines = [];
                this.allClasses = [];
                this.errors = [];
            }
            return AnalysisContext;
        })();
        var SemanticVisitor = (function (_super) {
            __extends(SemanticVisitor, _super);
            function SemanticVisitor(analysisContext) {
                _super.call(this);
                this.analysisContext = analysisContext;
                this.classSymbols = analysisContext.classSymbols;
            }
            SemanticVisitor.prototype.error = function (message, kind) {
                this.analysisContext.errors.push(SemanticErrorKind[kind] + message);
            };
            return SemanticVisitor;
        })(eiffel.ast.Visitor);
        var SemanticErrorKind;
        (function (SemanticErrorKind) {
            SemanticErrorKind[SemanticErrorKind.DuplicateFeatureName = 0] = "DuplicateFeatureName";
            SemanticErrorKind[SemanticErrorKind.DuplicateParameterName = 1] = "DuplicateParameterName";
            SemanticErrorKind[SemanticErrorKind.DuplicateClassName = 2] = "DuplicateClassName";
        })(SemanticErrorKind || (SemanticErrorKind = {}));
        var FeatureDiscovery = (function (_super) {
            __extends(FeatureDiscovery, _super);
            function FeatureDiscovery(analysisContext, classSymbol) {
                _super.call(this, analysisContext);
                this.classSymbol = classSymbol;
            }
            FeatureDiscovery.prototype.vAttr = function (attr, _) {
                var name = attr.name.name;
                this.errorOnDuplicateFeature(this.classSymbol, name);
                var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, attr);
                attr.sym = attributeSymbol;
                this.classSymbol.attributes[name] = attributeSymbol;
                //return super.vAttr(attr, this.classSymbol);
            };
            FeatureDiscovery.prototype.vFunction = function (func, _) {
                var functionName = func.name.name;
                this.errorOnDuplicateFeature(this.classSymbol, functionName);
                var sym = new eiffel.symbols.FunctionSymbol(functionName, func);
                func.sym = sym;
                this.classSymbol.functions[functionName] = sym;
                this.classSymbol.routines[functionName] = sym;
                this.analysisContext.allFunctions.push(sym);
                this.analysisContext.allRoutines.push(sym);
                //return super.vFunction(func, this.classSymbol);
            };
            FeatureDiscovery.prototype.errorOnDuplicateFeature = function (classSymbol, featureName) {
                if (classSymbol.hasSymbol(featureName)) {
                    this.error("Feature with name " + featureName + " already exists", 0 /* DuplicateFeatureName */);
                }
            };
            FeatureDiscovery.prototype.vProcedure = function (procedure, _) {
                var procedureName = procedure.name.name;
                this.errorOnDuplicateFeature(this.classSymbol, procedureName);
                var sym = new eiffel.symbols.ProcedureSymbol(procedureName, procedure);
                procedure.sym = sym;
                this.classSymbol.procedures[procedureName] = sym;
                this.classSymbol.routines[procedureName] = sym;
                this.analysisContext.allProcedures.push(sym);
                this.analysisContext.allRoutines.push(sym);
                //return super.vProcedure(procedure, this.classSymbol);
            };
            FeatureDiscovery.prototype.vConstantAttribute = function (constantAttribute, _) {
                var name = constantAttribute.name.name;
                this.errorOnDuplicateFeature(this.classSymbol, name);
                var attributeSymbol = new eiffel.symbols.AttributeSymbol(name, constantAttribute);
                constantAttribute.sym = attributeSymbol;
                this.classSymbol.attributes[name] = attributeSymbol;
                //return super.vConstantAttribute(constantAttribute, this.classSymbol);
            };
            return FeatureDiscovery;
        })(SemanticVisitor);
        var TypeConnector = (function (_super) {
            __extends(TypeConnector, _super);
            function TypeConnector() {
                _super.apply(this, arguments);
            }
            return TypeConnector;
        })(SemanticVisitor);
    })(semantics = eiffel.semantics || (eiffel.semantics = {}));
})(eiffel || (eiffel = {}));

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() {
        this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var eiffel;
(function (eiffel) {
    var symbols;
    (function (symbols) {
        var Symbol = (function () {
            function Symbol(name) {
                this.name = name;
            }
            return Symbol;
        })();
        symbols.Symbol = Symbol;
        var RoutineSymbol = (function (_super) {
            __extends(RoutineSymbol, _super);
            function RoutineSymbol(name, ast) {
                _super.call(this, name);
                this.locals = [];
                this.localsAndParamsByName = {};
                this.paramsInOrder = [];
                this.ast = ast;
            }
            return RoutineSymbol;
        })(Symbol);
        symbols.RoutineSymbol = RoutineSymbol;
        var FunctionSymbol = (function (_super) {
            __extends(FunctionSymbol, _super);
            function FunctionSymbol(name, ast) {
                _super.call(this, name, ast);
                this.ast = ast;
            }
            return FunctionSymbol;
        })(RoutineSymbol);
        symbols.FunctionSymbol = FunctionSymbol;
        var ProcedureSymbol = (function (_super) {
            __extends(ProcedureSymbol, _super);
            function ProcedureSymbol(name, ast) {
                _super.call(this, name, ast);
                this.ast = ast;
            }
            return ProcedureSymbol;
        })(RoutineSymbol);
        symbols.ProcedureSymbol = ProcedureSymbol;
        var AttributeSymbol = (function (_super) {
            __extends(AttributeSymbol, _super);
            function AttributeSymbol(name, attr) {
                _super.call(this, name);
                this.ast = attr;
            }
            return AttributeSymbol;
        })(Symbol);
        symbols.AttributeSymbol = AttributeSymbol;
        var VariableSymbol = (function (_super) {
            __extends(VariableSymbol, _super);
            function VariableSymbol(name, ast) {
                _super.call(this, name);
                this.ast = ast;
            }
            return VariableSymbol;
        })(Symbol);
        symbols.VariableSymbol = VariableSymbol;
        var ClassSymbol = (function (_super) {
            __extends(ClassSymbol, _super);
            function ClassSymbol(name, ast) {
                _super.call(this, name);
                this.functions = {};
                this.procedures = {};
                this.routines = {};
                this.attributes = {};
                this.creationProcedures = {};
                this.ast = ast;
            }
            ClassSymbol.prototype.hasSymbol = function (name) {
                if (this.routines.hasOwnProperty(name)) {
                    return true;
                }
                if (this.attributes.hasOwnProperty(name)) {
                    return true;
                }
                return false;
            };
            ClassSymbol.prototype.resolveSymbol = function (name) {
                if (this.routines.hasOwnProperty(name)) {
                    return this.routines[name];
                }
                if (this.attributes.hasOwnProperty(name)) {
                    return this.attributes[name];
                }
                throw new Error("Symbol " + name + " does not exist in class " + this.name + ".");
            };
            return ClassSymbol;
        })(Symbol);
        symbols.ClassSymbol = ClassSymbol;
    })(symbols = eiffel.symbols || (eiffel.symbols = {}));
})(eiffel || (eiffel = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvdmlzaXRvci50cyIsInR5cGVzY3JpcHQuanMiLCJDOi9Vc2Vycy9DaHJpc3RpYW4vRG9jdW1lbnRzL0VUSC9laWZmZWwtcGFyc2VyL2FzdC50cyIsIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvYnVpbHRpbi50cyIsIkM6L1VzZXJzL0NocmlzdGlhbi9Eb2N1bWVudHMvRVRIL2VpZmZlbC1wYXJzZXIvc2VtYW50aWNzLnRzIiwiQzovVXNlcnMvQ2hyaXN0aWFuL0RvY3VtZW50cy9FVEgvZWlmZmVsLXBhcnNlci9zeW1ib2xzLnRzIl0sIm5hbWVzIjpbImVpZmZlbCIsImVpZmZlbC5hc3QiLCJlaWZmZWwuYXN0LlZpc2l0b3IiLCJlaWZmZWwuYXN0LlZpc2l0b3IuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkNsYXNzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZGZWF0dXJlTGlzdCIsImVpZmZlbC5hc3QuVmlzaXRvci52RmVhdHVyZSIsImVpZmZlbC5hc3QuVmlzaXRvci52QXR0ciIsImVpZmZlbC5hc3QuVmlzaXRvci52Um91dGluZSIsImVpZmZlbC5hc3QuVmlzaXRvci52RnVuY3Rpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlByb2NlZHVyZSIsImVpZmZlbC5hc3QuVmlzaXRvci52Q2hpbGRyZW4iLCJlaWZmZWwuYXN0LlZpc2l0b3IudklkZW50aWZpZXIiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlR5cGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlBhcmVudCIsImVpZmZlbC5hc3QuVmlzaXRvci52SW5zdHJ1Y3Rpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudkRlZmF1bHQiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkNyZWF0ZUluc3RydWN0aW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBc3NpZ25tZW50IiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFeHBvcnRDaGFuZ2VTZXQiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlByZWNvbmRpdGlvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52UG9zdGNvbmRpdGlvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52SW52YXJpYW50Y29uZGl0aW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDb25kaXRpb24iLCJlaWZmZWwuYXN0LlZpc2l0b3IudlVuYXJ5T3AiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkJpbmFyeU9wIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDdXJyZW50RXhwciIsImVpZmZlbC5hc3QuVmlzaXRvci52SW50TGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52U3RyaW5nTGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52TGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52Q29uc3RhbnRBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlZhck9yQ29uc3RBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkFsaWFzIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDaGFyTGl0ZXJhbCIsImVpZmZlbC5hc3QuVmlzaXRvci52Qm9vbGVhbkxpdGVyYWwiLCJlaWZmZWwuYXN0LlZpc2l0b3IudlZvaWRMaXRlcmFsIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZDYWxsRXhwcmVzc2lvbiIsImVpZmZlbC5hc3QuVmlzaXRvci52SW5kZXhFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZWYXJEZWNsTGlzdCIsImVpZmZlbC5hc3QuVmlzaXRvci52VmFyRGVjbEVudHJ5IiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZGcm9tTG9vcCIsImVpZmZlbC5hc3QuVmlzaXRvci52SWZFbHNlIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZFbHNlSWYiLCJlaWZmZWwuYXN0LlZpc2l0b3IudkV4dGVybmFsIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZSZXN1bHRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBbmNob3JlZFR5cGUiLCJlaWZmZWwuYXN0LlZpc2l0b3IudklkZW50aWZpZXJBY2Nlc3MiLCJlaWZmZWwuYXN0LlZpc2l0b3Iudk9ic29sZXRlIiwiZWlmZmVsLmFzdC5WaXNpdG9yLnZBdHRhY2hlZEV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LkFTVCIsImVpZmZlbC5hc3QuQVNULmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5JZGVudGlmaWVyIiwiZWlmZmVsLmFzdC5JZGVudGlmaWVyLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5JZGVudGlmaWVyLmFjY2VwdCIsImVpZmZlbC5hc3QuUG9zIiwiZWlmZmVsLmFzdC5Qb3MuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkNsYXNzIiwiZWlmZmVsLmFzdC5DbGFzcy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ2xhc3MuYWNjZXB0IiwiZWlmZmVsLmFzdC5GZWF0dXJlTGlzdCIsImVpZmZlbC5hc3QuRmVhdHVyZUxpc3QuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkZlYXR1cmVMaXN0LmFjY2VwdCIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2VzcyIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2Vzcy5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuSWRlbnRpZmllckFjY2Vzcy5hY2NlcHQiLCJlaWZmZWwuYXN0LlJvdXRpbmUiLCJlaWZmZWwuYXN0LlJvdXRpbmUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlJvdXRpbmUuYWNjZXB0IiwiZWlmZmVsLmFzdC5FeHRlcm5hbCIsImVpZmZlbC5hc3QuRXh0ZXJuYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkV4dGVybmFsLmFjY2VwdCIsImVpZmZlbC5hc3QuT2Jzb2xldGUiLCJlaWZmZWwuYXN0Lk9ic29sZXRlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5PYnNvbGV0ZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlZhckRlY2xMaXN0IiwiZWlmZmVsLmFzdC5WYXJEZWNsTGlzdC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVmFyRGVjbExpc3QuYWNjZXB0IiwiZWlmZmVsLmFzdC5WYXJEZWNsRW50cnkiLCJlaWZmZWwuYXN0LlZhckRlY2xFbnRyeS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVmFyRGVjbEVudHJ5LmFjY2VwdCIsImVpZmZlbC5hc3QuVHlwZSIsImVpZmZlbC5hc3QuVHlwZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuVHlwZS5hY2NlcHQiLCJlaWZmZWwuYXN0LkZ1bmN0aW9uIiwiZWlmZmVsLmFzdC5GdW5jdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuRnVuY3Rpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5Qcm9jZWR1cmUiLCJlaWZmZWwuYXN0LlByb2NlZHVyZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUHJvY2VkdXJlLmFjY2VwdCIsImVpZmZlbC5hc3QuQWxpYXMiLCJlaWZmZWwuYXN0LkFsaWFzLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5BbGlhcy5hY2NlcHQiLCJlaWZmZWwuYXN0LkN1cnJlbnRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5DdXJyZW50RXhwcmVzc2lvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQ3VycmVudEV4cHJlc3Npb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uIiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5SZXN1bHRFeHByZXNzaW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuQW5jaG9yZWRUeXBlIiwiZWlmZmVsLmFzdC5BbmNob3JlZFR5cGUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkFuY2hvcmVkVHlwZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUuYWNjZXB0IiwiZWlmZmVsLmFzdC5BdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LkF0dHJpYnV0ZS5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQXR0cmlidXRlLmFjY2VwdCIsImVpZmZlbC5hc3QuQ29uc3RhbnRBdHRyaWJ1dGUiLCJlaWZmZWwuYXN0LkNvbnN0YW50QXR0cmlidXRlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Db25zdGFudEF0dHJpYnV0ZS5hY2NlcHQiLCJlaWZmZWwuYXN0LlBhcmVudCIsImVpZmZlbC5hc3QuUGFyZW50LmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5QYXJlbnQuYWNjZXB0IiwiZWlmZmVsLmFzdC5MaXRlcmFsIiwiZWlmZmVsLmFzdC5MaXRlcmFsLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5DaGFyTGl0ZXJhbCIsImVpZmZlbC5hc3QuQ2hhckxpdGVyYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkNoYXJMaXRlcmFsLmFjY2VwdCIsImVpZmZlbC5hc3QuQm9vbGVhbkxpdGVyYWwiLCJlaWZmZWwuYXN0LkJvb2xlYW5MaXRlcmFsLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Cb29sZWFuTGl0ZXJhbC5hY2NlcHQiLCJlaWZmZWwuYXN0LkludExpdGVyYWwiLCJlaWZmZWwuYXN0LkludExpdGVyYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkludExpdGVyYWwuYWNjZXB0IiwiZWlmZmVsLmFzdC5Wb2lkTGl0ZXJhbCIsImVpZmZlbC5hc3QuVm9pZExpdGVyYWwuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlZvaWRMaXRlcmFsLmFjY2VwdCIsImVpZmZlbC5hc3QuU3RyaW5nTGl0ZXJhbCIsImVpZmZlbC5hc3QuU3RyaW5nTGl0ZXJhbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuU3RyaW5nTGl0ZXJhbC5hY2NlcHQiLCJlaWZmZWwuYXN0LkFsbCIsImVpZmZlbC5hc3QuQWxsLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5FeHBvcnRDaGFuZ2VTZXQiLCJlaWZmZWwuYXN0LkV4cG9ydENoYW5nZVNldC5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuRXhwb3J0Q2hhbmdlU2V0LmFjY2VwdCIsImVpZmZlbC5hc3QuVHlwZUluc3RhbmNlIiwiZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2UuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkNvbmRpdGlvbiIsImVpZmZlbC5hc3QuQ29uZGl0aW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Db25kaXRpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5QcmVjb25kaXRpb24iLCJlaWZmZWwuYXN0LlByZWNvbmRpdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUHJlY29uZGl0aW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuUG9zdGNvbmRpdGlvbiIsImVpZmZlbC5hc3QuUG9zdGNvbmRpdGlvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuUG9zdGNvbmRpdGlvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LkludmFyaWFudGNvbmRpdGlvbiIsImVpZmZlbC5hc3QuSW52YXJpYW50Y29uZGl0aW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5JbnZhcmlhbnRjb25kaXRpb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5Bc3NpZ25tZW50IiwiZWlmZmVsLmFzdC5Bc3NpZ25tZW50LmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Bc3NpZ25tZW50LmFjY2VwdCIsImVpZmZlbC5hc3QuQ3JlYXRlSW5zdHJ1Y3Rpb24iLCJlaWZmZWwuYXN0LkNyZWF0ZUluc3RydWN0aW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5DcmVhdGVJbnN0cnVjdGlvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LlVuYXJ5T3AiLCJlaWZmZWwuYXN0LlVuYXJ5T3AuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LlVuYXJ5T3AuYWNjZXB0IiwiZWlmZmVsLmFzdC5CaW5hcnlPcCIsImVpZmZlbC5hc3QuQmluYXJ5T3AuY29uc3RydWN0b3IiLCJlaWZmZWwuYXN0LkJpbmFyeU9wLmFjY2VwdCIsImVpZmZlbC5hc3QuQ2FsbEV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LkNhbGxFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5DYWxsRXhwcmVzc2lvbi5hY2NlcHQiLCJlaWZmZWwuYXN0LkluZGV4RXhwcmVzc2lvbiIsImVpZmZlbC5hc3QuSW5kZXhFeHByZXNzaW9uLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5JbmRleEV4cHJlc3Npb24uYWNjZXB0IiwiZWlmZmVsLmFzdC5BdHRhY2hlZEV4cHJlc3Npb24iLCJlaWZmZWwuYXN0LkF0dGFjaGVkRXhwcmVzc2lvbi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuQXR0YWNoZWRFeHByZXNzaW9uLmFjY2VwdCIsImVpZmZlbC5hc3QuRnJvbUxvb3AiLCJlaWZmZWwuYXN0LkZyb21Mb29wLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5Gcm9tTG9vcC5hY2NlcHQiLCJlaWZmZWwuYXN0LklmRWxzZSIsImVpZmZlbC5hc3QuSWZFbHNlLmNvbnN0cnVjdG9yIiwiZWlmZmVsLmFzdC5JZkVsc2UuYWNjZXB0IiwiZWlmZmVsLmFzdC5FbHNlSWYiLCJlaWZmZWwuYXN0LkVsc2VJZi5jb25zdHJ1Y3RvciIsImVpZmZlbC5hc3QuRWxzZUlmLmFjY2VwdCIsImVpZmZlbC5idWlsdGluIiwiZWlmZmVsLnNlbWFudGljcyIsImVpZmZlbC5zZW1hbnRpY3MuYW5hbHl6ZSIsImVpZmZlbC5zZW1hbnRpY3MuQW5hbHlzaXNDb250ZXh0IiwiZWlmZmVsLnNlbWFudGljcy5BbmFseXNpc0NvbnRleHQuY29uc3RydWN0b3IiLCJlaWZmZWwuc2VtYW50aWNzLlNlbWFudGljVmlzaXRvciIsImVpZmZlbC5zZW1hbnRpY3MuU2VtYW50aWNWaXNpdG9yLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnNlbWFudGljcy5TZW1hbnRpY1Zpc2l0b3IuZXJyb3IiLCJlaWZmZWwuc2VtYW50aWNzLlNlbWFudGljRXJyb3JLaW5kIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5IiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LmNvbnN0cnVjdG9yIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZBdHRyIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZGdW5jdGlvbiIsImVpZmZlbC5zZW1hbnRpY3MuRmVhdHVyZURpc2NvdmVyeS5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSIsImVpZmZlbC5zZW1hbnRpY3MuRmVhdHVyZURpc2NvdmVyeS52UHJvY2VkdXJlIiwiZWlmZmVsLnNlbWFudGljcy5GZWF0dXJlRGlzY292ZXJ5LnZDb25zdGFudEF0dHJpYnV0ZSIsImVpZmZlbC5zZW1hbnRpY3MuVHlwZUNvbm5lY3RvciIsImVpZmZlbC5zZW1hbnRpY3MuVHlwZUNvbm5lY3Rvci5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzIiwiZWlmZmVsLnN5bWJvbHMuU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuUm91dGluZVN5bWJvbCIsImVpZmZlbC5zeW1ib2xzLlJvdXRpbmVTeW1ib2wuY29uc3RydWN0b3IiLCJlaWZmZWwuc3ltYm9scy5GdW5jdGlvblN5bWJvbCIsImVpZmZlbC5zeW1ib2xzLkZ1bmN0aW9uU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuQXR0cmlidXRlU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuQXR0cmlidXRlU3ltYm9sLmNvbnN0cnVjdG9yIiwiZWlmZmVsLnN5bWJvbHMuVmFyaWFibGVTeW1ib2wiLCJlaWZmZWwuc3ltYm9scy5WYXJpYWJsZVN5bWJvbC5jb25zdHJ1Y3RvciIsImVpZmZlbC5zeW1ib2xzLkNsYXNzU3ltYm9sIiwiZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wuY29uc3RydWN0b3IiLCJlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbC5oYXNTeW1ib2wiLCJlaWZmZWwuc3ltYm9scy5DbGFzc1N5bWJvbC5yZXNvbHZlU3ltYm9sIl0sIm1hcHBpbmdzIjoiO0FBRUEsSUFBTyxNQUFNLENBaU1aO0FBak1ELENBQUEsVUFBTyxNQUFNLEVBQUE7QUFBQ0EsUUFBQUEsR0FBR0EsQ0FpTWhCQTtBQWpNYUEsS0FBQUEsVUFBQUEsSUFBR0EsRUFBQ0E7QUFHaEJDLFlBQWFBLE9BQU9BLEdBQUFBLENBQUFBLFlBQUFBO0FBQXBCQyxxQkFBYUEsT0FBT0EsR0FBQUEsRUE2TG5CQztBQTVMQ0QsbUJBQUFBLENBQUFBLFNBQUFBLENBQUFBLE1BQU1BLEdBQU5BLFVBQU9BLE1BQVlBLEVBQUVBLEdBQUtBLEVBQUFBO0FBQ3hCRSx1QkFBT0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7YUFDbkNBLENBQUFBO0FBRURGLG1CQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxZQUFZQSxHQUFaQSxVQUFhQSxXQUF1QkEsRUFBRUEsR0FBS0EsRUFBQUE7QUFDekNHLHVCQUFPQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxXQUFXQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTthQUN4Q0EsQ0FBQUE7QUFFREgsbUJBQUFBLENBQUFBLFNBQUFBLENBQUFBLFFBQVFBLEdBQVJBLFVBQVNBLE9BQWVBLEVBQUVBLEdBQUtBLEVBQUFBO0FBQzdCSSx1QkFBT0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7YUFDcENBLENBQUFBO0FBRURKLG1CQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxLQUFLQSxHQUFMQSxVQUFNQSxJQUFjQSxFQUFFQSxHQUFLQSxFQUFBQTtBQUN6QkssdUJBQU9BLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsRUFB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QUFDQSxFQUFFQTtBQUN0Q0EsMkJBQU9BLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO2lCQUM1QkE7QUFDREEsb0JBQUlBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBO0FBQ3hDQSwyQkFBT0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7aUJBQzlCQTtBQUNEQSxzQkFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsR0FBR0EsMkJBQTJCQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTthQUNuRkEsQ0FBQUE7QUFDSEgsbUJBQUFBLFdBQUNBLENBQUFBO1NBQUFBLENBQUFBLENBakNnQ2IsTUFBTUEsQ0FBQUEsQ0FpQ3RDQTtBQWpDWUEsZUFBQUEsQ0FBQUEsV0FBV0EsR0FBWEEsV0FpQ1pBLENBQUFBO0tBQ0ZBLENBQUFBLENBaEdhdE0sT0FBT0EsR0FBUEEsTUFBQUEsQ0FBQUEsT0FBT0EsS0FBUEEsTUFBQUEsQ0FBQUEsT0FBT0EsR0FBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsQ0FnR3BCQTtDQUFBQSxDQUFBQSxDQWhHTSxNQUFNLEtBQU4sTUFBTSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBZ0daIiwiZmlsZSI6InR5cGVzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiYXN0LnRzXCIgLz5cblxubW9kdWxlIGVpZmZlbC5hc3Qge1xuXG5cbiAgZXhwb3J0IGNsYXNzIFZpc2l0b3I8QSwgUj4ge1xuICAgIHZDbGFzcyhfY2xhc3M6Q2xhc3MsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KF9jbGFzcywgYXJnKTtcbiAgICB9XG5cbiAgICB2RmVhdHVyZUxpc3QoZmVhdHVyZUxpc3Q6RmVhdHVyZUxpc3QsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGZlYXR1cmVMaXN0LCBhcmcpO1xuICAgIH1cblxuICAgIHZGZWF0dXJlKGZlYXR1cmU6RmVhdHVyZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZmVhdHVyZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2QXR0cihhdHRyOkF0dHJpYnV0ZSwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudlZhck9yQ29uc3RBdHRyaWJ1dGUoYXR0ciwgYXJnKTtcbiAgICB9XG5cbiAgICB2Um91dGluZShmZWF0dXJlOlJvdXRpbmUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZGZWF0dXJlKGZlYXR1cmUsIGFyZyk7XG4gICAgfVxuXG4gICAgdkZ1bmN0aW9uKGZ1bmM6IGVpZmZlbC5hc3QuRnVuY3Rpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZSb3V0aW5lKGZ1bmMsIGFyZyk7XG4gICAgfVxuXG4gICAgdlByb2NlZHVyZShwcm9jZWR1cmU6UHJvY2VkdXJlLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52Um91dGluZShwcm9jZWR1cmUsIGFyZyk7XG4gICAgfVxuXG4gICAgdkNoaWxkcmVuKGFzdDpBU1QsIGFyZzpBKTpSIHtcbiAgICAgIGxldCByZXN1bHQgPSBudWxsO1xuICAgICAgYXN0LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHQ6QVNUKSB7XG4gICAgICAgIGlmICh0ICE9IG51bGwpIHtcbiAgICAgICAgICByZXN1bHQgPSB0Ll9hY2NlcHRvci5hY2NlcHQodGhpcywgYXJnKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZJZGVudGlmaWVyKGlkZW50aWZpZXI6SWRlbnRpZmllciwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoaWRlbnRpZmllciwgYXJnKTtcbiAgICB9XG5cbiAgICB2VHlwZSh0eXBlOlR5cGUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHR5cGUsIGFyZyk7XG4gICAgfVxuXG4gICAgdlBhcmVudChwYXJlbnQ6UGFyZW50LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChwYXJlbnQsIGFyZyk7XG4gICAgfVxuXG4gICAgdkluc3RydWN0aW9uKGluc3RydWN0aW9uOkluc3RydWN0aW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChpbnN0cnVjdGlvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2RGVmYXVsdChhc3Q6QVNULCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52Q2hpbGRyZW4oYXN0LCBhcmcpO1xuICAgIH1cblxuICAgIHZDcmVhdGVJbnN0cnVjdGlvbihjcmVhdGVJbnN0cnVjdGlvbjpDcmVhdGVJbnN0cnVjdGlvbiwgYXJnOkEpIHtcbiAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihjcmVhdGVJbnN0cnVjdGlvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2QXNzaWdubWVudChhc3NpZ25tZW50OkFzc2lnbm1lbnQsIGFyZzpBKSB7XG4gICAgICByZXR1cm4gdGhpcy52SW5zdHJ1Y3Rpb24oYXNzaWdubWVudCwgYXJnKTtcbiAgICB9XG5cbiAgICB2RXhwb3J0Q2hhbmdlU2V0KGV4cG9ydENoYW5nZVNldDpFeHBvcnRDaGFuZ2VTZXQsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGV4cG9ydENoYW5nZVNldCwgYXJnKTtcbiAgICB9XG5cbiAgICB2UHJlY29uZGl0aW9uKHByZWNvbmRpdGlvbjpQcmVjb25kaXRpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZDb25kaXRpb24ocHJlY29uZGl0aW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZQb3N0Y29uZGl0aW9uKHBvc3Rjb25kaXRpb246IFBvc3Rjb25kaXRpb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZDb25kaXRpb24ocG9zdGNvbmRpdGlvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2SW52YXJpYW50Y29uZGl0aW9uKGludmFyaWFudGNvbmRpdGlvbjogSW52YXJpYW50Y29uZGl0aW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52Q29uZGl0aW9uKGludmFyaWFudGNvbmRpdGlvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2Q29uZGl0aW9uKGNvbmRpdGlvbjogQ29uZGl0aW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChjb25kaXRpb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdlVuYXJ5T3AodW5hcnlPcDogVW5hcnlPcCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24odW5hcnlPcCwgYXJnKTtcbiAgICB9XG5cbiAgICB2QmluYXJ5T3AoYmluYXJ5T3A6IEJpbmFyeU9wLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihiaW5hcnlPcCwgYXJnKTtcbiAgICB9XG5cbiAgICB2RXhwcmVzc2lvbihleHByZXNzaW9uOkV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGV4cHJlc3Npb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdkN1cnJlbnRFeHByKGN1cnJlbnRFeHByZXNzaW9uOiBDdXJyZW50RXhwcmVzc2lvbiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoY3VycmVudEV4cHJlc3Npb24sIGFyZyk7XG4gICAgfVxuXG4gICAgdkludExpdGVyYWwoaW50TGl0ZXJhbDogSW50TGl0ZXJhbCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoaW50TGl0ZXJhbCwgYXJnKTtcbiAgICB9XG5cbiAgICB2U3RyaW5nTGl0ZXJhbChzdHJpbmdMaXRlcmFsOiBTdHJpbmdMaXRlcmFsLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52TGl0ZXJhbChzdHJpbmdMaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZMaXRlcmFsKGxpdGVyYWw6IExpdGVyYWw8YW55PiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQobGl0ZXJhbCwgYXJnKTtcbiAgICB9XG5cbiAgICB2Q29uc3RhbnRBdHRyaWJ1dGUoY29uc3RhbnRBdHRyaWJ1dGU6IENvbnN0YW50QXR0cmlidXRlLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52VmFyT3JDb25zdEF0dHJpYnV0ZShjb25zdGFudEF0dHJpYnV0ZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2VmFyT3JDb25zdEF0dHJpYnV0ZSh2YXJPckNvbnN0QXR0cmlidXRlOlZhck9yQ29uc3RBdHRyaWJ1dGUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZGZWF0dXJlKHZhck9yQ29uc3RBdHRyaWJ1dGUsIGFyZyk7XG4gICAgfVxuICAgIHZBbGlhcyhhbGlhczogQWxpYXMsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGFsaWFzLCBhcmcpO1xuICAgIH1cblxuICAgIHZDaGFyTGl0ZXJhbChjaGFyTGl0ZXJhbDogQ2hhckxpdGVyYWwsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKGNoYXJMaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZCb29sZWFuTGl0ZXJhbChib29sZWFuTGl0ZXJhbDogQm9vbGVhbkxpdGVyYWwsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKGJvb2xlYW5MaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZWb2lkTGl0ZXJhbCh2b2lkTGl0ZXJhbDogVm9pZExpdGVyYWwsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKHZvaWRMaXRlcmFsLCBhcmcpO1xuICAgIH1cblxuICAgIHZDYWxsRXhwcmVzc2lvbihjYWxsRXhwcmVzc2lvbjogQ2FsbEV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGNhbGxFeHByZXNzaW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZJbmRleEV4cHJlc3Npb24oaW5kZXhFeHByZXNzaW9uOiBJbmRleEV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGluZGV4RXhwcmVzc2lvbiwgYXJnKTtcbiAgICB9XG5cbiAgICB2VmFyRGVjbExpc3QodmFyRGVjbExpc3Q6IFZhckRlY2xMaXN0LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdCh2YXJEZWNsTGlzdCwgYXJnKTtcbiAgICB9XG5cbiAgICB2VmFyRGVjbEVudHJ5KHZhckRlY2xFbnRyeTogVmFyRGVjbEVudHJ5LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdCh2YXJEZWNsRW50cnksIGFyZyk7XG4gICAgfVxuXG4gICAgdkZyb21Mb29wKGZyb21Mb29wOiBGcm9tTG9vcCwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGZyb21Mb29wLCBhcmcpO1xuICAgIH1cblxuICAgIHZJZkVsc2UoaWZFbHNlOiBJZkVsc2UsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihpZkVsc2UsIGFyZyk7XG4gICAgfVxuXG4gICAgdkVsc2VJZihlbHNlSWY6IEVsc2VJZiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGVsc2VJZiwgYXJnKTtcbiAgICB9XG5cbiAgICB2RXh0ZXJuYWwoZXh0ZXJuYWw6IEV4dGVybmFsLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2UmVzdWx0RXhwcmVzc2lvbihyZXN1bHRFeHByZXNzaW9uOiBSZXN1bHRFeHByZXNzaW9uLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZXN1bHRFeHByZXNzaW9uLCBhcmcpO1xuICAgIH1cblxuICAgIHZBbmNob3JlZFR5cGUoYW5jaG9yZWRUeXBlOiBBbmNob3JlZFR5cGUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGFuY2hvcmVkVHlwZSwgYXJnKTtcbiAgICB9XG5cbiAgICB2SWRlbnRpZmllckFjY2VzcyhpZGVudGlmaWVyQWNjZXNzOiBJZGVudGlmaWVyQWNjZXNzLCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihpZGVudGlmaWVyQWNjZXNzLCBhcmcpO1xuICAgIH1cblxuICAgIHZPYnNvbGV0ZShvYnNvbGV0ZTogT2Jzb2xldGUsIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZBdHRhY2hlZEV4cHJlc3Npb24oYXR0YWNoZWRFeHByZXNzaW9uOiBBdHRhY2hlZEV4cHJlc3Npb24sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGF0dGFjaGVkRXhwcmVzc2lvbiwgYXJnKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJhc3QudHNcIiAvPlxudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIGFzdDtcbiAgICAoZnVuY3Rpb24gKF9hc3QpIHtcbiAgICAgICAgdmFyIFZpc2l0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gVmlzaXRvcigpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDbGFzcyA9IGZ1bmN0aW9uIChfY2xhc3MsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KF9jbGFzcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52RmVhdHVyZUxpc3QgPSBmdW5jdGlvbiAoZmVhdHVyZUxpc3QsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGZlYXR1cmVMaXN0LCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGZlYXR1cmUsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkF0dHIgPSBmdW5jdGlvbiAoYXR0ciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudlZhck9yQ29uc3RBdHRyaWJ1dGUoYXR0ciwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Um91dGluZSA9IGZ1bmN0aW9uIChmZWF0dXJlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RmVhdHVyZShmZWF0dXJlLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52Um91dGluZShmdW5jLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZQcm9jZWR1cmUgPSBmdW5jdGlvbiAocHJvY2VkdXJlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52Um91dGluZShwcm9jZWR1cmUsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNoaWxkcmVuID0gZnVuY3Rpb24gKGFzdCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYXN0LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdC5fYWNjZXB0b3IuYWNjZXB0KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZJZGVudGlmaWVyID0gZnVuY3Rpb24gKGlkZW50aWZpZXIsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGlkZW50aWZpZXIsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlR5cGUgPSBmdW5jdGlvbiAodHlwZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQodHlwZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52UGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQocGFyZW50LCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0cnVjdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoaW5zdHJ1Y3Rpb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkRlZmF1bHQgPSBmdW5jdGlvbiAoYXN0LCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52Q2hpbGRyZW4oYXN0LCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDcmVhdGVJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChjcmVhdGVJbnN0cnVjdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkluc3RydWN0aW9uKGNyZWF0ZUluc3RydWN0aW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZBc3NpZ25tZW50ID0gZnVuY3Rpb24gKGFzc2lnbm1lbnQsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihhc3NpZ25tZW50LCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZFeHBvcnRDaGFuZ2VTZXQgPSBmdW5jdGlvbiAoZXhwb3J0Q2hhbmdlU2V0LCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChleHBvcnRDaGFuZ2VTZXQsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlByZWNvbmRpdGlvbiA9IGZ1bmN0aW9uIChwcmVjb25kaXRpb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZDb25kaXRpb24ocHJlY29uZGl0aW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZQb3N0Y29uZGl0aW9uID0gZnVuY3Rpb24gKHBvc3Rjb25kaXRpb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZDb25kaXRpb24ocG9zdGNvbmRpdGlvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52SW52YXJpYW50Y29uZGl0aW9uID0gZnVuY3Rpb24gKGludmFyaWFudGNvbmRpdGlvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkNvbmRpdGlvbihpbnZhcmlhbnRjb25kaXRpb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkNvbmRpdGlvbiA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGNvbmRpdGlvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VW5hcnlPcCA9IGZ1bmN0aW9uICh1bmFyeU9wLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbih1bmFyeU9wLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZCaW5hcnlPcCA9IGZ1bmN0aW9uIChiaW5hcnlPcCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oYmluYXJ5T3AsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoZXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkRlZmF1bHQoZXhwcmVzc2lvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Q3VycmVudEV4cHIgPSBmdW5jdGlvbiAoY3VycmVudEV4cHJlc3Npb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGN1cnJlbnRFeHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZJbnRMaXRlcmFsID0gZnVuY3Rpb24gKGludExpdGVyYWwsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKGludExpdGVyYWwsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlN0cmluZ0xpdGVyYWwgPSBmdW5jdGlvbiAoc3RyaW5nTGl0ZXJhbCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoc3RyaW5nTGl0ZXJhbCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52TGl0ZXJhbCA9IGZ1bmN0aW9uIChsaXRlcmFsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChsaXRlcmFsLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDb25zdGFudEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChjb25zdGFudEF0dHJpYnV0ZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudlZhck9yQ29uc3RBdHRyaWJ1dGUoY29uc3RhbnRBdHRyaWJ1dGUsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudlZhck9yQ29uc3RBdHRyaWJ1dGUgPSBmdW5jdGlvbiAodmFyT3JDb25zdEF0dHJpYnV0ZSwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkZlYXR1cmUodmFyT3JDb25zdEF0dHJpYnV0ZSwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52QWxpYXMgPSBmdW5jdGlvbiAoYWxpYXMsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KGFsaWFzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDaGFyTGl0ZXJhbCA9IGZ1bmN0aW9uIChjaGFyTGl0ZXJhbCwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkxpdGVyYWwoY2hhckxpdGVyYWwsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkJvb2xlYW5MaXRlcmFsID0gZnVuY3Rpb24gKGJvb2xlYW5MaXRlcmFsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52TGl0ZXJhbChib29sZWFuTGl0ZXJhbCwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52Vm9pZExpdGVyYWwgPSBmdW5jdGlvbiAodm9pZExpdGVyYWwsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZMaXRlcmFsKHZvaWRMaXRlcmFsLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZDYWxsRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChjYWxsRXhwcmVzc2lvbiwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oY2FsbEV4cHJlc3Npb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkluZGV4RXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChpbmRleEV4cHJlc3Npb24sIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZFeHByZXNzaW9uKGluZGV4RXhwcmVzc2lvbiwgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52VmFyRGVjbExpc3QgPSBmdW5jdGlvbiAodmFyRGVjbExpc3QsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZEZWZhdWx0KHZhckRlY2xMaXN0LCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZWYXJEZWNsRW50cnkgPSBmdW5jdGlvbiAodmFyRGVjbEVudHJ5LCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdCh2YXJEZWNsRW50cnksIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkZyb21Mb29wID0gZnVuY3Rpb24gKGZyb21Mb29wLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52SW5zdHJ1Y3Rpb24oZnJvbUxvb3AsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudklmRWxzZSA9IGZ1bmN0aW9uIChpZkVsc2UsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihpZkVsc2UsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkVsc2VJZiA9IGZ1bmN0aW9uIChlbHNlSWYsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZJbnN0cnVjdGlvbihlbHNlSWYsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudkV4dGVybmFsID0gZnVuY3Rpb24gKGV4dGVybmFsLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52UmVzdWx0RXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChyZXN1bHRFeHByZXNzaW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChyZXN1bHRFeHByZXNzaW9uLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZBbmNob3JlZFR5cGUgPSBmdW5jdGlvbiAoYW5jaG9yZWRUeXBlLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RGVmYXVsdChhbmNob3JlZFR5cGUsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgVmlzaXRvci5wcm90b3R5cGUudklkZW50aWZpZXJBY2Nlc3MgPSBmdW5jdGlvbiAoaWRlbnRpZmllckFjY2VzcywgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudkV4cHJlc3Npb24oaWRlbnRpZmllckFjY2VzcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBWaXNpdG9yLnByb3RvdHlwZS52T2Jzb2xldGUgPSBmdW5jdGlvbiAob2Jzb2xldGUsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFZpc2l0b3IucHJvdG90eXBlLnZBdHRhY2hlZEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoYXR0YWNoZWRFeHByZXNzaW9uLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52RXhwcmVzc2lvbihhdHRhY2hlZEV4cHJlc3Npb24sIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3I7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIF9hc3QuVmlzaXRvciA9IFZpc2l0b3I7XG4gICAgfSkoYXN0ID0gZWlmZmVsLmFzdCB8fCAoZWlmZmVsLmFzdCA9IHt9KSk7XG59KShlaWZmZWwgfHwgKGVpZmZlbCA9IHt9KSk7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ2aXNpdG9yLnRzXCIgLz5cbnZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIGFzdDtcbiAgICAoZnVuY3Rpb24gKGFzdCkge1xuICAgICAgICB2YXIgQVNUID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFTVChpbXBsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXB0b3IgPSBpbXBsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBU1Q7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5BU1QgPSBBU1Q7XG4gICAgICAgIHZhciBJZGVudGlmaWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJZGVudGlmaWVyLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gSWRlbnRpZmllcihuYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJZGVudGlmaWVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXIodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSWRlbnRpZmllcjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LklkZW50aWZpZXIgPSBJZGVudGlmaWVyO1xuICAgICAgICB2YXIgUG9zID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFBvcyhvZmZzZXQsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUG9zO1xuICAgICAgICB9KSgpO1xuICAgICAgICBhc3QuUG9zID0gUG9zO1xuICAgICAgICB2YXIgQ2xhc3MgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKENsYXNzLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2xhc3MobmFtZSwgZXhwYW5kZWQsIG5vdGUsIHBhcmVudHMsIGNyZWF0aW9uQ2xhdXNlLCBmZWF0dXJlTGlzdHMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRzID0gcGFyZW50cztcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJlbnRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0aW9uQ2xhdXNlID0gY3JlYXRpb25DbGF1c2U7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgY3JlYXRpb25DbGF1c2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmVhdHVyZUxpc3RzID0gZmVhdHVyZUxpc3RzO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGZlYXR1cmVMaXN0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbGFzcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDbGFzcyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDbGFzcztcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkNsYXNzID0gQ2xhc3M7XG4gICAgICAgIHZhciBGZWF0dXJlTGlzdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRmVhdHVyZUxpc3QsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBGZWF0dXJlTGlzdChleHBvcnRzLCBmZWF0dXJlcykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwb3J0cyA9IGV4cG9ydHM7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgZXhwb3J0cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGZlYXR1cmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEZlYXR1cmVMaXN0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkZlYXR1cmVMaXN0KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEZlYXR1cmVMaXN0O1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuRmVhdHVyZUxpc3QgPSBGZWF0dXJlTGlzdDtcbiAgICAgICAgdmFyIElkZW50aWZpZXJBY2Nlc3MgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKElkZW50aWZpZXJBY2Nlc3MsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBJZGVudGlmaWVyQWNjZXNzKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBpZGVudGlmaWVyLnN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gaWRlbnRpZmllci5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJZGVudGlmaWVyQWNjZXNzLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXJBY2Nlc3ModGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSWRlbnRpZmllckFjY2VzcztcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LklkZW50aWZpZXJBY2Nlc3MgPSBJZGVudGlmaWVyQWNjZXNzO1xuICAgICAgICB2YXIgUm91dGluZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUm91dGluZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFJvdXRpbmUobmFtZSwgcGFyYW1ldGVycywgYWxpYXMsIHJ0LCBwcmVjb25kaXRpb25zLCBsb2NhbHMsIGluc3RydWN0aW9uS2luZCwgaW5zdHJ1Y3Rpb25zLCBwb3N0Y29uZGl0aW9ucywgZnJvemVuLCBleHRlcm5hbCwgb2Jzb2xldGUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGlhcyA9IGFsaWFzO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlY29uZGl0aW9ucyA9IHByZWNvbmRpdGlvbnM7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbHMgPSBsb2NhbHM7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbktpbmQgPSBpbnN0cnVjdGlvbktpbmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3N0Y29uZGl0aW9ucyA9IHBvc3Rjb25kaXRpb25zO1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvemVuID0gZnJvemVuO1xuICAgICAgICAgICAgICAgIHRoaXMuZXh0ZXJuYWwgPSBleHRlcm5hbDtcbiAgICAgICAgICAgICAgICB0aGlzLm9ic29sZXRlID0gb2Jzb2xldGU7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhbGlhcyk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcHJlY29uZGl0aW9ucyk7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBpbnN0cnVjdGlvbnMpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHBvc3Rjb25kaXRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goZXh0ZXJuYWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChvYnNvbGV0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSb3V0aW5lLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlJvdXRpbmUodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUm91dGluZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlJvdXRpbmUgPSBSb3V0aW5lO1xuICAgICAgICB2YXIgRXh0ZXJuYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEV4dGVybmFsLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRXh0ZXJuYWwoZXhwcmVzc2lvbiwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFeHRlcm5hbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZFeHRlcm5hbCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBFeHRlcm5hbDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkV4dGVybmFsID0gRXh0ZXJuYWw7XG4gICAgICAgIHZhciBPYnNvbGV0ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoT2Jzb2xldGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBPYnNvbGV0ZShleHByZXNzaW9uLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9ic29sZXRlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3Iudk9ic29sZXRlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIE9ic29sZXRlO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuT2Jzb2xldGUgPSBPYnNvbGV0ZTtcbiAgICAgICAgdmFyIFZhckRlY2xMaXN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhWYXJEZWNsTGlzdCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFZhckRlY2xMaXN0KHZhckRlY2xzLCByYXdUeXBlKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52YXJEZWNscyA9IHZhckRlY2xzO1xuICAgICAgICAgICAgICAgIHRoaXMucmF3VHlwZSA9IHJhd1R5cGU7XG4gICAgICAgICAgICAgICAgdmFyRGVjbHMuZm9yRWFjaChmdW5jdGlvbiAodmFyRGVjbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXJEZWNsLnZhckRlY2xMaXN0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCB2YXJEZWNscyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHJhd1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmFyRGVjbExpc3QucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52VmFyRGVjbExpc3QodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVmFyRGVjbExpc3Q7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5WYXJEZWNsTGlzdCA9IFZhckRlY2xMaXN0O1xuICAgICAgICB2YXIgVmFyRGVjbEVudHJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhWYXJEZWNsRW50cnksIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBWYXJEZWNsRW50cnkobmFtZSkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmFyRGVjbEVudHJ5LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlZhckRlY2xFbnRyeSh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBWYXJEZWNsRW50cnk7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5WYXJEZWNsRW50cnkgPSBWYXJEZWNsRW50cnk7XG4gICAgICAgIHZhciBUeXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhUeXBlLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVHlwZShuYW1lLCBwYXJhbWV0ZXJzLCBkZXRhY2hhYmxlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWNoYWJsZSA9IGRldGFjaGFibGU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFR5cGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52VHlwZSh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBUeXBlO1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuVHlwZSA9IFR5cGU7XG4gICAgICAgIHZhciBGdW5jdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRnVuY3Rpb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBGdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkZ1bmN0aW9uKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uO1xuICAgICAgICB9KShSb3V0aW5lKTtcbiAgICAgICAgYXN0LkZ1bmN0aW9uID0gRnVuY3Rpb247XG4gICAgICAgIHZhciBQcm9jZWR1cmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFByb2NlZHVyZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb2NlZHVyZSgpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb2NlZHVyZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZQcm9jZWR1cmUodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUHJvY2VkdXJlO1xuICAgICAgICB9KShSb3V0aW5lKTtcbiAgICAgICAgYXN0LlByb2NlZHVyZSA9IFByb2NlZHVyZTtcbiAgICAgICAgdmFyIEFsaWFzID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhBbGlhcywgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFsaWFzKG5hbWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBbGlhcy5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZBbGlhcyh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBBbGlhcztcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkFsaWFzID0gQWxpYXM7XG4gICAgICAgIHZhciBDdXJyZW50RXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQ3VycmVudEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBDdXJyZW50RXhwcmVzc2lvbihwb3MsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDdXJyZW50RXhwcmVzc2lvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDdXJyZW50RXhwcih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDdXJyZW50RXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkN1cnJlbnRFeHByZXNzaW9uID0gQ3VycmVudEV4cHJlc3Npb247XG4gICAgICAgIHZhciBSZXN1bHRFeHByZXNzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhSZXN1bHRFeHByZXNzaW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVzdWx0RXhwcmVzc2lvbihwb3MsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZXN1bHRFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlJlc3VsdEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0RXhwcmVzc2lvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlJlc3VsdEV4cHJlc3Npb24gPSBSZXN1bHRFeHByZXNzaW9uO1xuICAgICAgICB2YXIgQW5jaG9yZWRUeXBlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhBbmNob3JlZFR5cGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBBbmNob3JlZFR5cGUoZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBBbmNob3JlZFR5cGUucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52QW5jaG9yZWRUeXBlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEFuY2hvcmVkVHlwZTtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkFuY2hvcmVkVHlwZSA9IEFuY2hvcmVkVHlwZTtcbiAgICAgICAgdmFyIFZhck9yQ29uc3RBdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFZhck9yQ29uc3RBdHRyaWJ1dGUsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBWYXJPckNvbnN0QXR0cmlidXRlKG5hbWUsIHJhd1R5cGUpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMucmF3VHlwZSA9IHJhd1R5cGU7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUsIHJhd1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmFyT3JDb25zdEF0dHJpYnV0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJPckNvbnN0QXR0cmlidXRlKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFZhck9yQ29uc3RBdHRyaWJ1dGU7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5WYXJPckNvbnN0QXR0cmlidXRlID0gVmFyT3JDb25zdEF0dHJpYnV0ZTtcbiAgICAgICAgdmFyIEF0dHJpYnV0ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQXR0cmlidXRlLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQXR0cmlidXRlKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXR0cmlidXRlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkF0dHIodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQXR0cmlidXRlO1xuICAgICAgICB9KShWYXJPckNvbnN0QXR0cmlidXRlKTtcbiAgICAgICAgYXN0LkF0dHJpYnV0ZSA9IEF0dHJpYnV0ZTtcbiAgICAgICAgdmFyIENvbnN0YW50QXR0cmlidXRlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDb25zdGFudEF0dHJpYnV0ZSwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENvbnN0YW50QXR0cmlidXRlKG5hbWUsIHJhd1R5cGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSwgcmF3VHlwZSk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDb25zdGFudEF0dHJpYnV0ZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDb25zdGFudEF0dHJpYnV0ZSh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDb25zdGFudEF0dHJpYnV0ZTtcbiAgICAgICAgfSkoVmFyT3JDb25zdEF0dHJpYnV0ZSk7XG4gICAgICAgIGFzdC5Db25zdGFudEF0dHJpYnV0ZSA9IENvbnN0YW50QXR0cmlidXRlO1xuICAgICAgICB2YXIgUGFyZW50ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhQYXJlbnQsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBQYXJlbnQoKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQYXJlbnQucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52UGFyZW50KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFBhcmVudDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlBhcmVudCA9IFBhcmVudDtcbiAgICAgICAgdmFyIExpdGVyYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKExpdGVyYWwsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBMaXRlcmFsKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIExpdGVyYWw7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5MaXRlcmFsID0gTGl0ZXJhbDtcbiAgICAgICAgdmFyIENoYXJMaXRlcmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDaGFyTGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENoYXJMaXRlcmFsKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENoYXJMaXRlcmFsLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkNoYXJMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENoYXJMaXRlcmFsO1xuICAgICAgICB9KShMaXRlcmFsKTtcbiAgICAgICAgYXN0LkNoYXJMaXRlcmFsID0gQ2hhckxpdGVyYWw7XG4gICAgICAgIHZhciBCb29sZWFuTGl0ZXJhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQm9vbGVhbkxpdGVyYWwsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBCb29sZWFuTGl0ZXJhbCh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBCb29sZWFuTGl0ZXJhbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZCb29sZWFuTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuTGl0ZXJhbDtcbiAgICAgICAgfSkoTGl0ZXJhbCk7XG4gICAgICAgIGFzdC5Cb29sZWFuTGl0ZXJhbCA9IEJvb2xlYW5MaXRlcmFsO1xuICAgICAgICB2YXIgSW50TGl0ZXJhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoSW50TGl0ZXJhbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEludExpdGVyYWwodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSW50TGl0ZXJhbC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZJbnRMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEludExpdGVyYWw7XG4gICAgICAgIH0pKExpdGVyYWwpO1xuICAgICAgICBhc3QuSW50TGl0ZXJhbCA9IEludExpdGVyYWw7XG4gICAgICAgIHZhciBWb2lkTGl0ZXJhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoVm9pZExpdGVyYWwsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBWb2lkTGl0ZXJhbChzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVm9pZExpdGVyYWwucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52Vm9pZExpdGVyYWwodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVm9pZExpdGVyYWw7XG4gICAgICAgIH0pKExpdGVyYWwpO1xuICAgICAgICBhc3QuVm9pZExpdGVyYWwgPSBWb2lkTGl0ZXJhbDtcbiAgICAgICAgdmFyIFN0cmluZ0xpdGVyYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFN0cmluZ0xpdGVyYWwsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBTdHJpbmdMaXRlcmFsKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFN0cmluZ0xpdGVyYWwucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52U3RyaW5nTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmdMaXRlcmFsO1xuICAgICAgICB9KShMaXRlcmFsKTtcbiAgICAgICAgYXN0LlN0cmluZ0xpdGVyYWwgPSBTdHJpbmdMaXRlcmFsO1xuICAgICAgICB2YXIgQWxsID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFsbCgpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBbGw7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5BbGwgPSBBbGw7XG4gICAgICAgIHZhciBFeHBvcnRDaGFuZ2VTZXQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEV4cG9ydENoYW5nZVNldCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEV4cG9ydENoYW5nZVNldCgpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEV4cG9ydENoYW5nZVNldC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZFeHBvcnRDaGFuZ2VTZXQodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gRXhwb3J0Q2hhbmdlU2V0O1xuICAgICAgICB9KShBU1QpO1xuICAgICAgICBhc3QuRXhwb3J0Q2hhbmdlU2V0ID0gRXhwb3J0Q2hhbmdlU2V0O1xuICAgICAgICB2YXIgVHlwZUluc3RhbmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFR5cGVJbnN0YW5jZSgpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBUeXBlSW5zdGFuY2U7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGFzdC5UeXBlSW5zdGFuY2UgPSBUeXBlSW5zdGFuY2U7XG4gICAgICAgIHZhciBDb25kaXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKENvbmRpdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENvbmRpdGlvbihsYWJlbCwgY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsYWJlbCwgY29uZGl0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENvbmRpdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2hvdWxkIG5vdCBiZSBjYWxsZWRcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENvbmRpdGlvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkNvbmRpdGlvbiA9IENvbmRpdGlvbjtcbiAgICAgICAgdmFyIFByZWNvbmRpdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoUHJlY29uZGl0aW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUHJlY29uZGl0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUHJlY29uZGl0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlByZWNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQcmVjb25kaXRpb247XG4gICAgICAgIH0pKENvbmRpdGlvbik7XG4gICAgICAgIGFzdC5QcmVjb25kaXRpb24gPSBQcmVjb25kaXRpb247XG4gICAgICAgIHZhciBQb3N0Y29uZGl0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhQb3N0Y29uZGl0aW9uLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUG9zdGNvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFBvc3Rjb25kaXRpb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52UG9zdGNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBQb3N0Y29uZGl0aW9uO1xuICAgICAgICB9KShDb25kaXRpb24pO1xuICAgICAgICBhc3QuUG9zdGNvbmRpdGlvbiA9IFBvc3Rjb25kaXRpb247XG4gICAgICAgIHZhciBJbnZhcmlhbnRjb25kaXRpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEludmFyaWFudGNvbmRpdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEludmFyaWFudGNvbmRpdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEludmFyaWFudGNvbmRpdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZJbnZhcmlhbnRjb25kaXRpb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gSW52YXJpYW50Y29uZGl0aW9uO1xuICAgICAgICB9KShDb25kaXRpb24pO1xuICAgICAgICBhc3QuSW52YXJpYW50Y29uZGl0aW9uID0gSW52YXJpYW50Y29uZGl0aW9uO1xuICAgICAgICB2YXIgQXNzaWdubWVudCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQXNzaWdubWVudCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEFzc2lnbm1lbnQobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgICAgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXNzaWdubWVudC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZBc3NpZ25tZW50KHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEFzc2lnbm1lbnQ7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Bc3NpZ25tZW50ID0gQXNzaWdubWVudDtcbiAgICAgICAgdmFyIENyZWF0ZUluc3RydWN0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDcmVhdGVJbnN0cnVjdGlvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZUluc3RydWN0aW9uKHRhcmdldCwgbWV0aG9kLCBhcmd1bWVudHMpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgICAgICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGFyZ2V0LCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDcmVhdGVJbnN0cnVjdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKHZpc2l0b3IsIGFyZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnZDcmVhdGVJbnN0cnVjdGlvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBDcmVhdGVJbnN0cnVjdGlvbjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkNyZWF0ZUluc3RydWN0aW9uID0gQ3JlYXRlSW5zdHJ1Y3Rpb247XG4gICAgICAgIHZhciBVbmFyeU9wID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhVbmFyeU9wLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVW5hcnlPcChvcGVyYXRvciwgb3BlcmFuZCwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBVbmFyeU9wLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudlVuYXJ5T3AodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gVW5hcnlPcDtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LlVuYXJ5T3AgPSBVbmFyeU9wO1xuICAgICAgICB2YXIgQmluYXJ5T3AgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEJpbmFyeU9wLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gQmluYXJ5T3Aob3BlcmF0b3IsIGxlZnQsIHJpZ2h0LCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQmluYXJ5T3AucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52QmluYXJ5T3AodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQmluYXJ5T3A7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5CaW5hcnlPcCA9IEJpbmFyeU9wO1xuICAgICAgICB2YXIgc3RyaW5nVG9VbmFyeU9wID0ge1xuICAgICAgICAgICAgXCItXCI6IDAgLyogTWludXMgKi8sXG4gICAgICAgICAgICBcIitcIjogMSAvKiBQbHVzICovLFxuICAgICAgICAgICAgXCJub3RcIjogMiAvKiBOb3QgKi8sXG4gICAgICAgICAgICBcIm9sZFwiOiAzIC8qIE9sZCAqLyxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0cmluZ1RvQmluYXJ5T3AgPSB7XG4gICAgICAgICAgICBcIi1cIjogMCAvKiBNaW51cyAqLyxcbiAgICAgICAgICAgIFwiK1wiOiAxIC8qIFBsdXMgKi8sXG4gICAgICAgICAgICBcIipcIjogMiAvKiBNdWx0aXBsaWNhdGlvbiAqLyxcbiAgICAgICAgICAgIFwiL1wiOiAzIC8qIERpdmlzaW9uICovLFxuICAgICAgICAgICAgXCIvL1wiOiA0IC8qIEludGVnZXJEaXZpc2lvbiAqLyxcbiAgICAgICAgICAgIFwiXFxcXFxcXFxcIjogNSAvKiBNb2R1bG8gKi8sXG4gICAgICAgICAgICBcIl5cIjogNiAvKiBFeHBvbmVudGlhbCAqLyxcbiAgICAgICAgICAgIFwiLi5cIjogNyAvKiBEb3REb3QgKi8sXG4gICAgICAgICAgICBcIj1cIjogOCAvKiBJZGVudGljYWwgKi8sXG4gICAgICAgICAgICBcIi89XCI6IDkgLyogTm90SWRlbnRpY2FsICovLFxuICAgICAgICAgICAgXCJ+XCI6IDEwIC8qIElzRXF1YWwgKi8sXG4gICAgICAgICAgICBcIi9+XCI6IDExIC8qIE5vdElzRXF1YWwgKi8sXG4gICAgICAgICAgICBcIjxcIjogMTIgLyogTGVzc1RoYW4gKi8sXG4gICAgICAgICAgICBcIj5cIjogMTMgLyogR3JlYXRlclRoYW4gKi8sXG4gICAgICAgICAgICBcIjw9XCI6IDE0IC8qIExlc3NPckVxdWFsICovLFxuICAgICAgICAgICAgXCI+PVwiOiAxNSAvKiBHcmVhdGVyT3JFcXVhbCAqLyxcbiAgICAgICAgICAgIFwiYW5kXCI6IDE2IC8qIEFuZCAqLyxcbiAgICAgICAgICAgIFwiYW5kIHRoZW5cIjogMTcgLyogQW5kVGhlbiAqLyxcbiAgICAgICAgICAgIFwib3JcIjogMTggLyogT3IgKi8sXG4gICAgICAgICAgICBcIm9yIGVsc2VcIjogMTkgLyogT3JFbHNlICovLFxuICAgICAgICAgICAgXCJ4b3JcIjogMjAgLyogWG9yICovLFxuICAgICAgICAgICAgXCJpbXBsaWVzXCI6IDIxIC8qIEltcGxpZXMgKi8sXG4gICAgICAgIH07XG4gICAgICAgIHZhciBDYWxsRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoQ2FsbEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBDYWxsRXhwcmVzc2lvbihvcGVyYW5kLCBuYW1lLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVyYW5kID0gb3BlcmFuZDtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG9wZXJhbmQsIG5hbWUpO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2FsbEV4cHJlc3Npb24ucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52Q2FsbEV4cHJlc3Npb24odGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gQ2FsbEV4cHJlc3Npb247XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5DYWxsRXhwcmVzc2lvbiA9IENhbGxFeHByZXNzaW9uO1xuICAgICAgICB2YXIgSW5kZXhFeHByZXNzaW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJbmRleEV4cHJlc3Npb24sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBJbmRleEV4cHJlc3Npb24ob3BlcmFuZCwgYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgICAgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCwgYXJndW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSW5kZXhFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkluZGV4RXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBJbmRleEV4cHJlc3Npb247XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5JbmRleEV4cHJlc3Npb24gPSBJbmRleEV4cHJlc3Npb247XG4gICAgICAgIHZhciBBdHRhY2hlZEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEF0dGFjaGVkRXhwcmVzc2lvbiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEF0dGFjaGVkRXhwcmVzc2lvbihvZlR5cGUsIG91dGVyVmFyLCBuZXdWYXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mVHlwZSA9IG9mVHlwZTtcbiAgICAgICAgICAgICAgICB0aGlzLm91dGVyVmFyID0gb3V0ZXJWYXI7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXdWYXIgPSBuZXdWYXI7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG9mVHlwZSwgb3V0ZXJWYXIsIG5ld1Zhcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQXR0YWNoZWRFeHByZXNzaW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudkF0dGFjaGVkRXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBBdHRhY2hlZEV4cHJlc3Npb247XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5BdHRhY2hlZEV4cHJlc3Npb24gPSBBdHRhY2hlZEV4cHJlc3Npb247XG4gICAgICAgIHZhciBGcm9tTG9vcCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoRnJvbUxvb3AsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBGcm9tTG9vcChpbml0aWFsaXplckJsb2NrLCB1bnRpbCwgbG9vcEJsb2NrKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplckJsb2NrID0gaW5pdGlhbGl6ZXJCbG9jaztcbiAgICAgICAgICAgICAgICB0aGlzLnVudGlsID0gdW50aWw7XG4gICAgICAgICAgICAgICAgdGhpcy5sb29wQmxvY2sgPSBsb29wQmxvY2s7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgaW5pdGlhbGl6ZXJCbG9jayk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHVudGlsKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBsb29wQmxvY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRnJvbUxvb3AucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52RnJvbUxvb3AodGhpcywgYXJnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gRnJvbUxvb3A7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5Gcm9tTG9vcCA9IEZyb21Mb29wO1xuICAgICAgICB2YXIgSWZFbHNlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhJZkVsc2UsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBJZkVsc2UoY29uZGl0aW9uLCB0aGVuQmxvY2ssIGVsc2VJZnMsIGVsc2VCbG9jaykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICAgICAgICAgIHRoaXMudGhlbkJsb2NrID0gdGhlbkJsb2NrO1xuICAgICAgICAgICAgICAgIHRoaXMuZWxzZUlmcyA9IGVsc2VJZnM7XG4gICAgICAgICAgICAgICAgdGhpcy5lbHNlQmxvY2sgPSBlbHNlQmxvY2s7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhlbkJsb2NrKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBlbHNlSWZzKTtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBlbHNlQmxvY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSWZFbHNlLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAodmlzaXRvciwgYXJnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IudklmRWxzZSh0aGlzLCBhcmcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBJZkVsc2U7XG4gICAgICAgIH0pKEFTVCk7XG4gICAgICAgIGFzdC5JZkVsc2UgPSBJZkVsc2U7XG4gICAgICAgIHZhciBFbHNlSWYgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKEVsc2VJZiwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEVsc2VJZihjb25kaXRpb24sIHRoZW5CbG9jaykge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICAgICAgICAgIHRoaXMudGhlbkJsb2NrID0gdGhlbkJsb2NrO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjb25kaXRpb24pO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHRoZW5CbG9jayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFbHNlSWYucHJvdG90eXBlLmFjY2VwdCA9IGZ1bmN0aW9uICh2aXNpdG9yLCBhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaXRvci52RWxzZUlmKHRoaXMsIGFyZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIEVsc2VJZjtcbiAgICAgICAgfSkoQVNUKTtcbiAgICAgICAgYXN0LkVsc2VJZiA9IEVsc2VJZjtcbiAgICB9KShhc3QgPSBlaWZmZWwuYXN0IHx8IChlaWZmZWwuYXN0ID0ge30pKTtcbn0pKGVpZmZlbCB8fCAoZWlmZmVsID0ge30pKTtcblxudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIGJ1aWx0aW47XG4gICAgKGZ1bmN0aW9uIChidWlsdGluKSB7XG4gICAgICAgIGJ1aWx0aW4uU1REX0ZJTEUgPSB7XG4gICAgICAgICAgICBcInB1dF9zdHJpbmdcIjogW1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfSkoYnVpbHRpbiA9IGVpZmZlbC5idWlsdGluIHx8IChlaWZmZWwuYnVpbHRpbiA9IHt9KSk7XG59KShlaWZmZWwgfHwgKGVpZmZlbCA9IHt9KSk7XG5cbnZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpc2l0b3IudHNcIiAvPlxudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIHNlbWFudGljcztcbiAgICAoZnVuY3Rpb24gKHNlbWFudGljcykge1xuICAgICAgICB2YXIgY3JlYXRlQ2xhc3NTeW1ib2xzID0gZnVuY3Rpb24gKGFzdHMsIGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgYXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChhc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShhc3QgaW5zdGFuY2VvZiBlaWZmZWwuYXN0LkNsYXNzKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIiwgYXN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYXN0Lm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuQ2xhc3NTeW1ib2wobmFtZSwgYXN0KTtcbiAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuY2xhc3NTeW1ib2xzW25hbWVdID0gY2xhc3NTeW1ib2w7XG4gICAgICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMucHVzaChjbGFzc1N5bWJvbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZUZlYXR1cmVTeW1ib2xzID0gZnVuY3Rpb24gKGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICBjbGFzc1N5bWJvbC5hc3QuYWNjZXB0KG5ldyBGZWF0dXJlRGlzY292ZXJ5KGFuYWx5c2lzQ29udGV4dCwgY2xhc3NTeW1ib2wpLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyA9IGZ1bmN0aW9uIChhbGxSb3V0aW5lcykge1xuICAgICAgICAgICAgYWxsUm91dGluZXMuZm9yRWFjaChmdW5jdGlvbiAocm91dGluZSkge1xuICAgICAgICAgICAgICAgIHJvdXRpbmUuYXN0LnBhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1ldGVyTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJMaXN0LnZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YXJOYW1lID0gdmFyRGVjbC5uYW1lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuVmFyaWFibGVTeW1ib2wodmFyTmFtZSwgdmFyRGVjbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lLnBhcmFtc0luT3JkZXIucHVzaCh2YXJpYWJsZVN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0aW5lLmxvY2Fsc0FuZFBhcmFtc0J5TmFtZVt2YXJOYW1lXSA9IHZhcmlhYmxlU3ltYm9sO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY3JlYXRlUm91dGluZUxvY2FsU3ltYm9scyA9IGZ1bmN0aW9uIChhbmFseXNpc0NvbnRleHQpIHtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0aW5lKSB7XG4gICAgICAgICAgICAgICAgcm91dGluZS5hc3QubG9jYWxzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2xMaXN0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXJEZWNsTGlzdHMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1ldGVyTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTGlzdC52YXJEZWNscy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJEZWNsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhck5hbWUgPSB2YXJEZWNsLm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFyaWFibGVTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuVmFyaWFibGVTeW1ib2wodmFyTmFtZSwgdmFyRGVjbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGluZS5sb2NhbHMucHVzaCh2YXJpYWJsZVN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGluZS5sb2NhbHNBbmRQYXJhbXNCeU5hbWVbdmFyTmFtZV0gPSB2YXJpYWJsZVN5bWJvbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmdW5jdGlvbiBhbmFseXplKCkge1xuICAgICAgICAgICAgdmFyIG1hbnlBc3RzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIG1hbnlBc3RzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJ1aWx0aW5Tb3VyY2VzID0gX19laWZmZWxfYnVpbHRpbi5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC5jb250ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtYW55QXN0cywgYnVpbHRpblNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWlmZmVsLnBhcnNlci5wYXJzZShzb3VyY2UpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFyIGFzdHMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBtYW55QXN0cyk7XG4gICAgICAgICAgICB2YXIgYW5hbHlzaXNDb250ZXh0ID0gbmV3IEFuYWx5c2lzQ29udGV4dCgpO1xuICAgICAgICAgICAgY3JlYXRlQ2xhc3NTeW1ib2xzKGFzdHMsIGFuYWx5c2lzQ29udGV4dCk7XG4gICAgICAgICAgICBjcmVhdGVGZWF0dXJlU3ltYm9scyhhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyhhbmFseXNpc0NvbnRleHQuYWxsUm91dGluZXMpO1xuICAgICAgICAgICAgY3JlYXRlUm91dGluZUxvY2FsU3ltYm9scyhhbmFseXNpc0NvbnRleHQpO1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NTeW1ib2wpIHtcbiAgICAgICAgICAgICAgICBjbGFzc1N5bWJvbC5hc3QuY3JlYXRpb25DbGF1c2UuZm9yRWFjaChmdW5jdGlvbiAoaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGlkZW50aWZpZXIubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzU3ltYm9sLnByb2NlZHVyZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzU3ltYm9sLmNyZWF0aW9uUHJvY2VkdXJlc1tuYW1lXSA9IGNsYXNzU3ltYm9sLnByb2NlZHVyZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xhc3NTeW1ib2wuZnVuY3Rpb25zLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnB1c2goXCJGdW5jdGlvbnMgY2Fubm90IGJlIHVzZWQgYXMgY3JlYXRpb24gcHJvY2VkdXJlcyBcIiArIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmVycm9ycy5wdXNoKFwiVGhlcmUgaXMgbm90IHByb2NlZHVyZSB3aXRoIG5hbWUgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmV3VmFyID0ge1xuICAgICAgICAgICAgICAgIGFzdHM6IGFzdHMsXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBhbmFseXNpc0NvbnRleHQuZXJyb3JzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGFuYWx5c2lzQ29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gbmV3VmFyO1xuICAgICAgICB9XG4gICAgICAgIHNlbWFudGljcy5hbmFseXplID0gYW5hbHl6ZTtcbiAgICAgICAgdmFyIEFuYWx5c2lzQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBBbmFseXNpc0NvbnRleHQoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1N5bWJvbHMgPSB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbEZ1bmN0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsUHJvY2VkdXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsUm91dGluZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbENsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEFuYWx5c2lzQ29udGV4dDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgdmFyIFNlbWFudGljVmlzaXRvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICBfX2V4dGVuZHMoU2VtYW50aWNWaXNpdG9yLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gU2VtYW50aWNWaXNpdG9yKGFuYWx5c2lzQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0ID0gYW5hbHlzaXNDb250ZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2xzID0gYW5hbHlzaXNDb250ZXh0LmNsYXNzU3ltYm9scztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNlbWFudGljVmlzaXRvci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSwga2luZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmVycm9ycy5wdXNoKFNlbWFudGljRXJyb3JLaW5kW2tpbmRdICsgbWVzc2FnZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIFNlbWFudGljVmlzaXRvcjtcbiAgICAgICAgfSkoZWlmZmVsLmFzdC5WaXNpdG9yKTtcbiAgICAgICAgdmFyIFNlbWFudGljRXJyb3JLaW5kO1xuICAgICAgICAoZnVuY3Rpb24gKFNlbWFudGljRXJyb3JLaW5kKSB7XG4gICAgICAgICAgICBTZW1hbnRpY0Vycm9yS2luZFtTZW1hbnRpY0Vycm9yS2luZFtcIkR1cGxpY2F0ZUZlYXR1cmVOYW1lXCJdID0gMF0gPSBcIkR1cGxpY2F0ZUZlYXR1cmVOYW1lXCI7XG4gICAgICAgICAgICBTZW1hbnRpY0Vycm9yS2luZFtTZW1hbnRpY0Vycm9yS2luZFtcIkR1cGxpY2F0ZVBhcmFtZXRlck5hbWVcIl0gPSAxXSA9IFwiRHVwbGljYXRlUGFyYW1ldGVyTmFtZVwiO1xuICAgICAgICAgICAgU2VtYW50aWNFcnJvcktpbmRbU2VtYW50aWNFcnJvcktpbmRbXCJEdXBsaWNhdGVDbGFzc05hbWVcIl0gPSAyXSA9IFwiRHVwbGljYXRlQ2xhc3NOYW1lXCI7XG4gICAgICAgIH0pKFNlbWFudGljRXJyb3JLaW5kIHx8IChTZW1hbnRpY0Vycm9yS2luZCA9IHt9KSk7XG4gICAgICAgIHZhciBGZWF0dXJlRGlzY292ZXJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhGZWF0dXJlRGlzY292ZXJ5LCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gRmVhdHVyZURpc2NvdmVyeShhbmFseXNpc0NvbnRleHQsIGNsYXNzU3ltYm9sKSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgYW5hbHlzaXNDb250ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9sID0gY2xhc3NTeW1ib2w7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBGZWF0dXJlRGlzY292ZXJ5LnByb3RvdHlwZS52QXR0ciA9IGZ1bmN0aW9uIChhdHRyLCBfKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBhdHRyLm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIG5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVTeW1ib2wgPSBuZXcgZWlmZmVsLnN5bWJvbHMuQXR0cmlidXRlU3ltYm9sKG5hbWUsIGF0dHIpO1xuICAgICAgICAgICAgICAgIGF0dHIuc3ltID0gYXR0cmlidXRlU3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlc1tuYW1lXSA9IGF0dHJpYnV0ZVN5bWJvbDtcbiAgICAgICAgICAgICAgICAvL3JldHVybiBzdXBlci52QXR0cihhdHRyLCB0aGlzLmNsYXNzU3ltYm9sKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGZWF0dXJlRGlzY292ZXJ5LnByb3RvdHlwZS52RnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYywgXykge1xuICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBmdW5jLm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGZ1bmN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIHN5bSA9IG5ldyBlaWZmZWwuc3ltYm9scy5GdW5jdGlvblN5bWJvbChmdW5jdGlvbk5hbWUsIGZ1bmMpO1xuICAgICAgICAgICAgICAgIGZ1bmMuc3ltID0gc3ltO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NTeW1ib2wuZnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0gPSBzeW07XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1N5bWJvbC5yb3V0aW5lc1tmdW5jdGlvbk5hbWVdID0gc3ltO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmFsbEZ1bmN0aW9ucy5wdXNoKHN5bSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmFseXNpc0NvbnRleHQuYWxsUm91dGluZXMucHVzaChzeW0pO1xuICAgICAgICAgICAgICAgIC8vcmV0dXJuIHN1cGVyLnZGdW5jdGlvbihmdW5jLCB0aGlzLmNsYXNzU3ltYm9sKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGZWF0dXJlRGlzY292ZXJ5LnByb3RvdHlwZS5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSA9IGZ1bmN0aW9uIChjbGFzc1N5bWJvbCwgZmVhdHVyZU5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NTeW1ib2wuaGFzU3ltYm9sKGZlYXR1cmVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKFwiRmVhdHVyZSB3aXRoIG5hbWUgXCIgKyBmZWF0dXJlTmFtZSArIFwiIGFscmVhZHkgZXhpc3RzXCIsIDAgLyogRHVwbGljYXRlRmVhdHVyZU5hbWUgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBGZWF0dXJlRGlzY292ZXJ5LnByb3RvdHlwZS52UHJvY2VkdXJlID0gZnVuY3Rpb24gKHByb2NlZHVyZSwgXykge1xuICAgICAgICAgICAgICAgIHZhciBwcm9jZWR1cmVOYW1lID0gcHJvY2VkdXJlLm5hbWUubmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIHByb2NlZHVyZU5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciBzeW0gPSBuZXcgZWlmZmVsLnN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sKHByb2NlZHVyZU5hbWUsIHByb2NlZHVyZSk7XG4gICAgICAgICAgICAgICAgcHJvY2VkdXJlLnN5bSA9IHN5bTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLnByb2NlZHVyZXNbcHJvY2VkdXJlTmFtZV0gPSBzeW07XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc1N5bWJvbC5yb3V0aW5lc1twcm9jZWR1cmVOYW1lXSA9IHN5bTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxQcm9jZWR1cmVzLnB1c2goc3ltKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5wdXNoKHN5bSk7XG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gc3VwZXIudlByb2NlZHVyZShwcm9jZWR1cmUsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEZlYXR1cmVEaXNjb3ZlcnkucHJvdG90eXBlLnZDb25zdGFudEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChjb25zdGFudEF0dHJpYnV0ZSwgXykge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gY29uc3RhbnRBdHRyaWJ1dGUubmFtZS5uYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JPbkR1cGxpY2F0ZUZlYXR1cmUodGhpcy5jbGFzc1N5bWJvbCwgbmFtZSk7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZVN5bWJvbCA9IG5ldyBlaWZmZWwuc3ltYm9scy5BdHRyaWJ1dGVTeW1ib2wobmFtZSwgY29uc3RhbnRBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0YW50QXR0cmlidXRlLnN5bSA9IGF0dHJpYnV0ZVN5bWJvbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzU3ltYm9sLmF0dHJpYnV0ZXNbbmFtZV0gPSBhdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gc3VwZXIudkNvbnN0YW50QXR0cmlidXRlKGNvbnN0YW50QXR0cmlidXRlLCB0aGlzLmNsYXNzU3ltYm9sKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gRmVhdHVyZURpc2NvdmVyeTtcbiAgICAgICAgfSkoU2VtYW50aWNWaXNpdG9yKTtcbiAgICAgICAgdmFyIFR5cGVDb25uZWN0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFR5cGVDb25uZWN0b3IsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBUeXBlQ29ubmVjdG9yKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFR5cGVDb25uZWN0b3I7XG4gICAgICAgIH0pKFNlbWFudGljVmlzaXRvcik7XG4gICAgfSkoc2VtYW50aWNzID0gZWlmZmVsLnNlbWFudGljcyB8fCAoZWlmZmVsLnNlbWFudGljcyA9IHt9KSk7XG59KShlaWZmZWwgfHwgKGVpZmZlbCA9IHt9KSk7XG5cbnZhciBfX2V4dGVuZHMgPSB0aGlzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IF9fKCk7XG59O1xudmFyIGVpZmZlbDtcbihmdW5jdGlvbiAoZWlmZmVsKSB7XG4gICAgdmFyIHN5bWJvbHM7XG4gICAgKGZ1bmN0aW9uIChzeW1ib2xzKSB7XG4gICAgICAgIHZhciBTeW1ib2wgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gU3ltYm9sKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN5bWJvbDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgc3ltYm9scy5TeW1ib2wgPSBTeW1ib2w7XG4gICAgICAgIHZhciBSb3V0aW5lU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhSb3V0aW5lU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gUm91dGluZVN5bWJvbChuYW1lLCBhc3QpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FscyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxzQW5kUGFyYW1zQnlOYW1lID0ge307XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXNJbk9yZGVyID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUm91dGluZVN5bWJvbDtcbiAgICAgICAgfSkoU3ltYm9sKTtcbiAgICAgICAgc3ltYm9scy5Sb3V0aW5lU3ltYm9sID0gUm91dGluZVN5bWJvbDtcbiAgICAgICAgdmFyIEZ1bmN0aW9uU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhGdW5jdGlvblN5bWJvbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIEZ1bmN0aW9uU3ltYm9sKG5hbWUsIGFzdCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUsIGFzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25TeW1ib2w7XG4gICAgICAgIH0pKFJvdXRpbmVTeW1ib2wpO1xuICAgICAgICBzeW1ib2xzLkZ1bmN0aW9uU3ltYm9sID0gRnVuY3Rpb25TeW1ib2w7XG4gICAgICAgIHZhciBQcm9jZWR1cmVTeW1ib2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFByb2NlZHVyZVN5bWJvbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIFByb2NlZHVyZVN5bWJvbChuYW1lLCBhc3QpIHtcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lLCBhc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb2NlZHVyZVN5bWJvbDtcbiAgICAgICAgfSkoUm91dGluZVN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sID0gUHJvY2VkdXJlU3ltYm9sO1xuICAgICAgICB2YXIgQXR0cmlidXRlU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhBdHRyaWJ1dGVTeW1ib2wsIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBBdHRyaWJ1dGVTeW1ib2wobmFtZSwgYXR0cikge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXN0ID0gYXR0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBdHRyaWJ1dGVTeW1ib2w7XG4gICAgICAgIH0pKFN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuQXR0cmlidXRlU3ltYm9sID0gQXR0cmlidXRlU3ltYm9sO1xuICAgICAgICB2YXIgVmFyaWFibGVTeW1ib2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKFZhcmlhYmxlU3ltYm9sLCBfc3VwZXIpO1xuICAgICAgICAgICAgZnVuY3Rpb24gVmFyaWFibGVTeW1ib2wobmFtZSwgYXN0KSB7XG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gVmFyaWFibGVTeW1ib2w7XG4gICAgICAgIH0pKFN5bWJvbCk7XG4gICAgICAgIHN5bWJvbHMuVmFyaWFibGVTeW1ib2wgPSBWYXJpYWJsZVN5bWJvbDtcbiAgICAgICAgdmFyIENsYXNzU3ltYm9sID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhDbGFzc1N5bWJvbCwgX3N1cGVyKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENsYXNzU3ltYm9sKG5hbWUsIGFzdCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnVuY3Rpb25zID0ge307XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZWR1cmVzID0ge307XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0aW5lcyA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRpb25Qcm9jZWR1cmVzID0ge307XG4gICAgICAgICAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbGFzc1N5bWJvbC5wcm90b3R5cGUuaGFzU3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3V0aW5lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIENsYXNzU3ltYm9sLnByb3RvdHlwZS5yZXNvbHZlU3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3V0aW5lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb3V0aW5lc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW1ib2wgXCIgKyBuYW1lICsgXCIgZG9lcyBub3QgZXhpc3QgaW4gY2xhc3MgXCIgKyB0aGlzLm5hbWUgKyBcIi5cIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIENsYXNzU3ltYm9sO1xuICAgICAgICB9KShTeW1ib2wpO1xuICAgICAgICBzeW1ib2xzLkNsYXNzU3ltYm9sID0gQ2xhc3NTeW1ib2w7XG4gICAgfSkoc3ltYm9scyA9IGVpZmZlbC5zeW1ib2xzIHx8IChlaWZmZWwuc3ltYm9scyA9IHt9KSk7XG59KShlaWZmZWwgfHwgKGVpZmZlbCA9IHt9KSk7XG5cblxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpc2l0b3IudHNcIiAvPlxuXG5tb2R1bGUgZWlmZmVsLmFzdCB7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBWaXNpdG9yQWNjZXB0b3IgZXh0ZW5kcyBBU1Qge1xuICAgIGNoaWxkcmVuOiBBU1RbXTtcbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6IFI7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQVNUIHtcbiAgICBjb25zdHJ1Y3RvcihpbXBsOlZpc2l0b3JBY2NlcHRvcikge1xuICAgICAgdGhpcy5fYWNjZXB0b3IgPSBpbXBsO1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIH1cblxuICAgIGNoaWxkcmVuOkFTVFtdO1xuICAgIF9hY2NlcHRvcjpWaXNpdG9yQWNjZXB0b3I7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgSWRlbnRpZmllciBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIHN0YXJ0OmVpZmZlbC5hc3QuUG9zLCBlbmQ6ZWlmZmVsLmFzdC5Qb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuXG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudklkZW50aWZpZXIodGhpcywgYXJnKTtcbiAgICB9XG5cbiAgICBuYW1lOnN0cmluZztcbiAgICBzdGFydDpQb3M7XG4gICAgZW5kOlBvcztcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBQb3Mge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCwgbGluZSwgY29sdW1uKSB7XG4gICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICB9XG5cbiAgICAvLyBaZXJvIGJhc2VkIGluZGV4IHJlc3BlY3RpdmUgdG8gc3RhcnQgb2YgaW5wdXRcbiAgICBvZmZzZXQ6bnVtYmVyO1xuICAgIC8vIDEgYmFzZWQgbGluZSBudW1iZXJcbiAgICBsaW5lOm51bWJlcjtcbiAgICAvLyAxIGJhc2VkIGNvbHVtbiBudW1iZXJcbiAgICBjb2x1bW46bnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENsYXNzIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIG5hbWU6IElkZW50aWZpZXIsXG4gICAgICBleHBhbmRlZDogYm9vbGVhbixcbiAgICAgIG5vdGU6IGFueSwgcGFyZW50czogUGFyZW50W10sXG4gICAgICBjcmVhdGlvbkNsYXVzZTogSWRlbnRpZmllcltdLFxuICAgICAgZmVhdHVyZUxpc3RzOiBGZWF0dXJlTGlzdFtdXG4gICAgKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG5cbiAgICAgIHRoaXMucGFyZW50cyA9IHBhcmVudHM7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJlbnRzKTtcblxuICAgICAgdGhpcy5jcmVhdGlvbkNsYXVzZSA9IGNyZWF0aW9uQ2xhdXNlO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgY3JlYXRpb25DbGF1c2UpO1xuXG4gICAgICB0aGlzLmZlYXR1cmVMaXN0cyA9IGZlYXR1cmVMaXN0cztcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGZlYXR1cmVMaXN0cyk7XG4gICAgfVxuXG4gICAgY2hpbGRyZW46QVNUW107XG5cbiAgICBuYW1lOklkZW50aWZpZXI7XG4gICAgZXhwYW5kZWQ6IGJvb2xlYW47XG4gICAgcGFyZW50czpQYXJlbnRbXTtcbiAgICBjcmVhdGlvbkNsYXVzZTpJZGVudGlmaWVyW107XG4gICAgZmVhdHVyZUxpc3RzOkZlYXR1cmVMaXN0W107XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q2xhc3ModGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRmVhdHVyZUxpc3QgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGV4cG9ydHM6IElkZW50aWZpZXJbXSwgZmVhdHVyZXM6IEZlYXR1cmVbXSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmV4cG9ydHMgPSBleHBvcnRzO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgZXhwb3J0cyk7XG4gICAgICB0aGlzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBmZWF0dXJlcyk7XG4gICAgfVxuXG4gICAgZXhwb3J0czpJZGVudGlmaWVyW107XG4gICAgZmVhdHVyZXM6RmVhdHVyZVtdO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkZlYXR1cmVMaXN0KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIElkZW50aWZpZXJBY2Nlc3MgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihpZGVudGlmaWVyOiBJZGVudGlmaWVyKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgICB0aGlzLnN0YXJ0ID0gaWRlbnRpZmllci5zdGFydDtcbiAgICAgIHRoaXMuZW5kID0gaWRlbnRpZmllci5lbmQ7XG4gICAgfVxuICAgIGlkZW50aWZpZXI6ZWlmZmVsLmFzdC5JZGVudGlmaWVyO1xuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52SWRlbnRpZmllckFjY2Vzcyh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZSBleHRlbmRzIEFTVCwgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBuYW1lOiBJZGVudGlmaWVyO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFJvdXRpbmUgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBJZGVudGlmaWVyLCBwYXJhbWV0ZXJzOiBWYXJEZWNsTGlzdFtdLCBhbGlhczogQWxpYXMsIHJ0OiBUeXBlLCBwcmVjb25kaXRpb25zOiBQcmVjb25kaXRpb25bXSwgbG9jYWxzOiBWYXJEZWNsTGlzdFtdW10sIGluc3RydWN0aW9uS2luZDogVG9rZW4sIGluc3RydWN0aW9uczogSW5zdHJ1Y3Rpb25bXSwgcG9zdGNvbmRpdGlvbnM6IFBvc3Rjb25kaXRpb25bXSwgZnJvemVuOiBib29sZWFuLCBleHRlcm5hbDogRXh0ZXJuYWwsIG9ic29sZXRlOiBPYnNvbGV0ZSkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICAgIHRoaXMuYWxpYXMgPSBhbGlhcztcbiAgICAgIHRoaXMucHJlY29uZGl0aW9ucyA9IHByZWNvbmRpdGlvbnM7XG4gICAgICB0aGlzLmxvY2FscyA9IGxvY2FscztcbiAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25LaW5kID0gaW5zdHJ1Y3Rpb25LaW5kO1xuICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnM7XG4gICAgICB0aGlzLnBvc3Rjb25kaXRpb25zID0gcG9zdGNvbmRpdGlvbnM7XG4gICAgICB0aGlzLmZyb3plbiA9IGZyb3plbjtcbiAgICAgIHRoaXMuZXh0ZXJuYWwgPSBleHRlcm5hbDtcbiAgICAgIHRoaXMub2Jzb2xldGUgPSBvYnNvbGV0ZTtcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYWxpYXMpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcHJlY29uZGl0aW9ucyk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBsb2NhbHMpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgaW5zdHJ1Y3Rpb25zKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHBvc3Rjb25kaXRpb25zKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChleHRlcm5hbCk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob2Jzb2xldGUpO1xuICAgIH1cblxuICAgIG5hbWU6SWRlbnRpZmllcjtcbiAgICBpbnN0cnVjdGlvbktpbmQ6IFRva2VuXG4gICAgaW5zdHJ1Y3Rpb25zOmVpZmZlbC5hc3QuSW5zdHJ1Y3Rpb25bXTtcbiAgICBwcmVjb25kaXRpb25zOlByZWNvbmRpdGlvbltdO1xuICAgIGxvY2FsczogVmFyRGVjbExpc3RbXVtdO1xuICAgIHBvc3Rjb25kaXRpb25zOlBvc3Rjb25kaXRpb25bXTtcbiAgICBwYXJhbWV0ZXJzOlZhckRlY2xMaXN0W107XG4gICAgc3ltOiBlaWZmZWwuc3ltYm9scy5Sb3V0aW5lU3ltYm9sO1xuICAgIGFsaWFzOiBBbGlhcztcbiAgICBmcm96ZW46IGJvb2xlYW47XG4gICAgZXh0ZXJuYWw6IEV4dGVybmFsO1xuICAgIG9ic29sZXRlOiBPYnNvbGV0ZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZSb3V0aW5lKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEV4dGVybmFsIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihleHByZXNzaW9uOiBFeHByZXNzaW9uLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIH1cblxuICAgIGV4cHJlc3Npb246IEV4cHJlc3Npb247XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52RXh0ZXJuYWwodGhpcywgYXJnKTtcbiAgICB9XG5cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBPYnNvbGV0ZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoZXhwcmVzc2lvbjogRXhwcmVzc2lvbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBleHByZXNzaW9uOiBFeHByZXNzaW9uO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3Iudk9ic29sZXRlKHRoaXMsIGFyZyk7XG4gICAgfVxuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgVmFyRGVjbExpc3QgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHZhckRlY2xzOiBWYXJEZWNsRW50cnlbXSwgcmF3VHlwZTogVHlwZSkgIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy52YXJEZWNscyA9IHZhckRlY2xzO1xuICAgICAgdGhpcy5yYXdUeXBlID0gcmF3VHlwZTtcbiAgICAgIHZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgdmFyRGVjbC52YXJEZWNsTGlzdCA9IHRoaXM7XG4gICAgICB9KTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIHZhckRlY2xzKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChyYXdUeXBlKTtcbiAgICB9XG5cbiAgICByYXdUeXBlOiBUeXBlO1xuICAgIHZhckRlY2xzOiBWYXJEZWNsRW50cnlbXTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJEZWNsTGlzdCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9rZW4ge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFZhckRlY2xFbnRyeSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOmVpZmZlbC5hc3QuSWRlbnRpZmllcikge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUpO1xuICAgIH1cblxuICAgIG5hbWU6IElkZW50aWZpZXI7XG4gICAgdmFyRGVjbExpc3Q6IFZhckRlY2xMaXN0O1xuICAgIHN5bTogc3ltYm9scy5WYXJpYWJsZVN5bWJvbDtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJEZWNsRW50cnkodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVHlwZSBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgZW5kOiBlaWZmZWwuYXN0LlBvcztcbiAgICBzdGFydCA6IGVpZmZlbC5hc3QuUG9zO1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IElkZW50aWZpZXIsIHBhcmFtZXRlcnM6IFR5cGVbXSwgZGV0YWNoYWJsZTogYm9vbGVhbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICB0aGlzLmRldGFjaGFibGUgPSBkZXRhY2hhYmxlO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmFtZSk7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmNoaWxkcmVuLCBwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICBuYW1lOklkZW50aWZpZXI7XG4gICAgcGFyYW1ldGVyczpUeXBlW107XG4gICAgZGV0YWNoYWJsZTogYm9vbGVhbjtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZUeXBlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEZ1bmN0aW9uIGV4dGVuZHMgUm91dGluZSB7XG4gICAgc3ltOiBzeW1ib2xzLkZ1bmN0aW9uU3ltYm9sO1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZGdW5jdGlvbih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBQcm9jZWR1cmUgZXh0ZW5kcyBSb3V0aW5lIHtcbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52UHJvY2VkdXJlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEFsaWFzIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBuYW1lOmVpZmZlbC5hc3QuU3RyaW5nTGl0ZXJhbDtcbiAgICBzdGFydDplaWZmZWwuYXN0LlBvcztcbiAgICBlbmQ6ZWlmZmVsLmFzdC5Qb3M7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBTdHJpbmdMaXRlcmFsLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuYW1lKTtcbiAgICB9XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52QWxpYXModGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQ3VycmVudEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3M6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5zdGFydCA9IHBvcztcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBzeW06IFR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZDdXJyZW50RXhwcih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBSZXN1bHRFeHByZXNzaW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgRXhwcmVzc2lvbiB7XG4gICAgY29uc3RydWN0b3IocG9zOiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuc3RhcnQgPSBwb3M7XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9XG5cbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuXG4gICAgc3ltOiBUeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52UmVzdWx0RXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBBbmNob3JlZFR5cGUgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGV4cHJlc3Npb246IEV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICBleHByZXNzaW9uOiBFeHByZXNzaW9uO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkFuY2hvcmVkVHlwZSh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG5cbiAgZXhwb3J0IGNsYXNzIFZhck9yQ29uc3RBdHRyaWJ1dGUgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBGZWF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBJZGVudGlmaWVyLCByYXdUeXBlOiBUeXBlKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB0aGlzLnJhd1R5cGUgPSByYXdUeXBlO1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5hbWUsIHJhd1R5cGUpO1xuICAgIH1cblxuICAgIG5hbWU6SWRlbnRpZmllcjtcbiAgICByYXdUeXBlOmVpZmZlbC5hc3QuVHlwZTtcbiAgICBzeW06IGVpZmZlbC5zeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbDtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZWYXJPckNvbnN0QXR0cmlidXRlKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZSBleHRlbmRzIFZhck9yQ29uc3RBdHRyaWJ1dGUge1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBdHRyKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENvbnN0YW50QXR0cmlidXRlIGV4dGVuZHMgVmFyT3JDb25zdEF0dHJpYnV0ZSB7XG4gICAgY29uc3RydWN0b3IobmFtZTogZWlmZmVsLmFzdC5JZGVudGlmaWVyLCByYXdUeXBlOiBlaWZmZWwuYXN0LlR5cGUsIHZhbHVlOiBlaWZmZWwuYXN0LkxpdGVyYWw8YW55Pikge1xuICAgICAgc3VwZXIobmFtZSwgcmF3VHlwZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godmFsdWUpO1xuICAgIH1cblxuICAgIHZhbHVlOiBMaXRlcmFsPGFueT5cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZDb25zdGFudEF0dHJpYnV0ZSh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBQYXJlbnQgZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgfVxuXG4gICAgbmFtZTpJZGVudGlmaWVyO1xuICAgIHVuZGVmaW5lOklkZW50aWZpZXJbXTtcbiAgICByZWRlZmVpbmU6SWRlbnRpZmllcltdO1xuICAgIHJlbmFtZTpJZGVudGlmaWVyW107XG4gICAgbmV3ZXhwb3J0OklkZW50aWZpZXJbXSB8IEFsbDtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZQYXJlbnQodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgTGl0ZXJhbDxUPiBleHRlbmRzIEFTVCB7XG4gICAgdmFsdWU6IFQ7XG4gICAgZW5kOiBlaWZmZWwuYXN0LlBvcztcbiAgICBzdGFydDogZWlmZmVsLmFzdC5Qb3M7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQ2hhckxpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsPHN0cmluZz4gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcsIHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZDaGFyTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBCb29sZWFuTGl0ZXJhbCBleHRlbmRzIExpdGVyYWw8Ym9vbGVhbj4gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBib29sZWFuLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9XG5cblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZCb29sZWFuTGl0ZXJhbCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBJbnRMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbDxudW1iZXI+IGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogbnVtYmVyLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICAgIHJldHVybiB2aXNpdG9yLnZJbnRMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVm9pZExpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsPGFueT4gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0OiBQb3MsIGVuZDogUG9zKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlZvaWRMaXRlcmFsKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFN0cmluZ0xpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsPHN0cmluZz4gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3J7XG4gICAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlN0cmluZ0xpdGVyYWwodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQWxsIHtcblxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEV4cG9ydENoYW5nZVNldCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICB9XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52RXhwb3J0Q2hhbmdlU2V0KHRoaXMsIGFyZyk7XG4gICAgfVxuXG4gICAgYWNjZXNzOklkZW50aWZpZXJbXTtcbiAgICBmZWF0dXJlczpJZGVudGlmaWVyW107XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVHlwZUluc3RhbmNlIHtcblxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJbnN0cnVjdGlvbiBleHRlbmRzIEV4cHJlc3Npb24sIFZpc2l0b3JBY2NlcHRvciB7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgQ29uZGl0aW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcblxuICAgIGNvbnN0cnVjdG9yKGxhYmVsOiBJZGVudGlmaWVyLCBjb25kaXRpb246IEV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGFiZWwsIGNvbmRpdGlvbik7XG4gICAgfVxuXG4gICAgY29uZGl0aW9uOkV4cHJlc3Npb247XG4gICAgbGFiZWw6SWRlbnRpZmllcjtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOiBWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBub3QgYmUgY2FsbGVkXCIpO1xuICAgIH1cblxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFByZWNvbmRpdGlvbiBleHRlbmRzIENvbmRpdGlvbiBpbXBsZW1lbnRzIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudlByZWNvbmRpdGlvbih0aGlzLCBhcmcpO1xuICAgIH1cblxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIFBvc3Rjb25kaXRpb24gZXh0ZW5kcyBDb25kaXRpb24gaW1wbGVtZW50cyBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZQb3N0Y29uZGl0aW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgSW52YXJpYW50Y29uZGl0aW9uIGV4dGVuZHMgQ29uZGl0aW9uIGltcGxlbWVudHMgVmlzaXRvckFjY2VwdG9yIHtcbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52SW52YXJpYW50Y29uZGl0aW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cblxuICBleHBvcnQgY2xhc3MgQXNzaWdubWVudCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEluc3RydWN0aW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKGxlZnQ6ZWlmZmVsLmFzdC5FeHByZXNzaW9uLCByaWdodDplaWZmZWwuYXN0LkV4cHJlc3Npb24pIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsZWZ0LCByaWdodCk7XG4gICAgfVxuXG4gICAgbGVmdDpFeHByZXNzaW9uO1xuICAgIHJpZ2h0OkV4cHJlc3Npb247XG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZBc3NpZ25tZW50KHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIENyZWF0ZUluc3RydWN0aW9uIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgSW5zdHJ1Y3Rpb24ge1xuXG4gICAgY29uc3RydWN0b3IodGFyZ2V0OmVpZmZlbC5hc3QuSWRlbnRpZmllciwgbWV0aG9kOmVpZmZlbC5hc3QuSWRlbnRpZmllciwgYXJndW1lbnRzOmVpZmZlbC5hc3QuRXhwcmVzc2lvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRhcmdldCwgbWV0aG9kKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgdGFyZ2V0OklkZW50aWZpZXI7XG4gICAgbWV0aG9kOiBJZGVudGlmaWVyO1xuICAgIGFyZ3VtZW50czogRXhwcmVzc2lvbltdO1xuICAgIHN5bTpUeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52Q3JlYXRlSW5zdHJ1Y3Rpb24odGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QsIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgc3ltOiBUeXBlSW5zdGFuY2U7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVW5hcnlPcCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24ge1xuXG4gICAgY29uc3RydWN0b3Iob3BlcmF0b3I6ZWlmZmVsLmFzdC5VbmFyeU9wZXJhdG9yLCBvcGVyYW5kOmVpZmZlbC5hc3QuRXhwcmVzc2lvbiwgc3RhcnQ6IFBvcywgZW5kOiBQb3MpIHtcbiAgICAgIHN1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgdGhpcy5vcGVyYW5kID0gb3BlcmFuZDtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gZW5kO1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCk7XG4gICAgfVxuXG4gICAgb3BlcmF0b3I6VW5hcnlPcGVyYXRvcjtcbiAgICBvcGVyYW5kOkV4cHJlc3Npb247XG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52VW5hcnlPcCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBCaW5hcnlPcCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24ge1xuXG4gICAgY29uc3RydWN0b3Iob3BlcmF0b3I6IGVpZmZlbC5hc3QuQmluYXJ5T3BlcmF0b3IsIGxlZnQ6IGVpZmZlbC5hc3QuRXhwcmVzc2lvbiwgcmlnaHQ6ZWlmZmVsLmFzdC5FeHByZXNzaW9uLCBzdGFydDogUG9zLCBlbmQ6IFBvcykge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsZWZ0LCByaWdodCk7XG4gICAgfVxuXG4gICAgb3BlcmF0b3I6QmluYXJ5T3BlcmF0b3I7XG4gICAgbGVmdDpFeHByZXNzaW9uO1xuICAgIHJpZ2h0OkV4cHJlc3Npb247XG5cbiAgICBzdGFydDogUG9zO1xuICAgIGVuZDogUG9zO1xuXG4gICAgc3ltOlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZCaW5hcnlPcCh0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG5cbiAgZXhwb3J0IGNvbnN0IGVudW0gVW5hcnlPcGVyYXRvciB7XG4gICAgTWludXMsXG4gICAgUGx1cyxcbiAgICBOb3QsXG4gICAgT2xkLFxuICB9XG5cbiAgZXhwb3J0IGNvbnN0IGVudW0gQmluYXJ5T3BlcmF0b3Ige1xuICAgIE1pbnVzLFxuICAgIFBsdXMsXG4gICAgTXVsdGlwbGljYXRpb24sXG4gICAgRGl2aXNpb24sXG4gICAgSW50ZWdlckRpdmlzaW9uLFxuICAgIE1vZHVsbyxcbiAgICBFeHBvbmVudGlhbCxcbiAgICBEb3REb3QsXG4gICAgSWRlbnRpY2FsLFxuICAgIE5vdElkZW50aWNhbCxcbiAgICBJc0VxdWFsLFxuICAgIE5vdElzRXF1YWwsXG4gICAgTGVzc1RoYW4sXG4gICAgR3JlYXRlclRoYW4sXG4gICAgTGVzc09yRXF1YWwsXG4gICAgR3JlYXRlck9yRXF1YWwsXG4gICAgQW5kLFxuICAgIEFuZFRoZW4sXG4gICAgT3IsXG4gICAgT3JFbHNlLFxuICAgIFhvcixcbiAgICBJbXBsaWVzLFxuICB9XG5cbiAgdmFyIHN0cmluZ1RvVW5hcnlPcDpMb29rdXBUYWJsZTxVbmFyeU9wZXJhdG9yPiA9IHtcbiAgICBcIi1cIjogVW5hcnlPcGVyYXRvci5NaW51cyxcbiAgICBcIitcIjogVW5hcnlPcGVyYXRvci5QbHVzLFxuICAgIFwibm90XCI6IFVuYXJ5T3BlcmF0b3IuTm90LFxuICAgIFwib2xkXCI6IFVuYXJ5T3BlcmF0b3IuT2xkLFxuICB9O1xuXG4gIHZhciBzdHJpbmdUb0JpbmFyeU9wOkxvb2t1cFRhYmxlPEJpbmFyeU9wZXJhdG9yPiA9IHtcbiAgICBcIi1cIjogQmluYXJ5T3BlcmF0b3IuTWludXMsXG4gICAgXCIrXCI6IEJpbmFyeU9wZXJhdG9yLlBsdXMsXG4gICAgXCIqXCI6IEJpbmFyeU9wZXJhdG9yLk11bHRpcGxpY2F0aW9uLFxuICAgIFwiL1wiOiBCaW5hcnlPcGVyYXRvci5EaXZpc2lvbixcbiAgICBcIi8vXCI6IEJpbmFyeU9wZXJhdG9yLkludGVnZXJEaXZpc2lvbixcbiAgICBcIlxcXFxcXFxcXCI6IEJpbmFyeU9wZXJhdG9yLk1vZHVsbyxcbiAgICBcIl5cIjogQmluYXJ5T3BlcmF0b3IuRXhwb25lbnRpYWwsXG4gICAgXCIuLlwiOiBCaW5hcnlPcGVyYXRvci5Eb3REb3QsXG4gICAgXCI9XCI6IEJpbmFyeU9wZXJhdG9yLklkZW50aWNhbCxcbiAgICBcIi89XCI6IEJpbmFyeU9wZXJhdG9yLk5vdElkZW50aWNhbCxcbiAgICBcIn5cIjogQmluYXJ5T3BlcmF0b3IuSXNFcXVhbCxcbiAgICBcIi9+XCI6IEJpbmFyeU9wZXJhdG9yLk5vdElzRXF1YWwsXG4gICAgXCI8XCI6IEJpbmFyeU9wZXJhdG9yLkxlc3NUaGFuLFxuICAgIFwiPlwiOiBCaW5hcnlPcGVyYXRvci5HcmVhdGVyVGhhbixcbiAgICBcIjw9XCI6IEJpbmFyeU9wZXJhdG9yLkxlc3NPckVxdWFsLFxuICAgIFwiPj1cIjogQmluYXJ5T3BlcmF0b3IuR3JlYXRlck9yRXF1YWwsXG4gICAgXCJhbmRcIjogQmluYXJ5T3BlcmF0b3IuQW5kLFxuICAgIFwiYW5kIHRoZW5cIjogQmluYXJ5T3BlcmF0b3IuQW5kVGhlbixcbiAgICBcIm9yXCI6IEJpbmFyeU9wZXJhdG9yLk9yLFxuICAgIFwib3IgZWxzZVwiOiBCaW5hcnlPcGVyYXRvci5PckVsc2UsXG4gICAgXCJ4b3JcIjogQmluYXJ5T3BlcmF0b3IuWG9yLFxuICAgIFwiaW1wbGllc1wiOiBCaW5hcnlPcGVyYXRvci5JbXBsaWVzLFxuICB9O1xuXG4gIGV4cG9ydCBjbGFzcyBDYWxsRXhwcmVzc2lvbiBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24sIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3Iob3BlcmFuZDplaWZmZWwuYXN0LkV4cHJlc3Npb24sIG5hbWU6ZWlmZmVsLmFzdC5JZGVudGlmaWVyLCBwYXJhbWV0ZXJzOmVpZmZlbC5hc3QuRXhwcmVzc2lvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMub3BlcmFuZCA9IG9wZXJhbmQ7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcblxuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG9wZXJhbmQsIG5hbWUpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgcGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgc3ltOmVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgb3BlcmFuZDogRXhwcmVzc2lvbjtcbiAgICBuYW1lOiBJZGVudGlmaWVyO1xuICAgIHBhcmFtZXRlcnM6IEV4cHJlc3Npb25bXTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZDYWxsRXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBJbmRleEV4cHJlc3Npb24gZXh0ZW5kcyBBU1QgaW1wbGVtZW50cyBFeHByZXNzaW9uLCBWaXNpdG9yQWNjZXB0b3Ige1xuICAgIGNvbnN0cnVjdG9yKG9wZXJhbmQ6IGVpZmZlbC5hc3QuRXhwcmVzc2lvbiwgYXJndW1lbnQ6IGVpZmZlbC5hc3QuRXhwcmVzc2lvbikge1xuICAgICAgc3VwZXIodGhpcyk7XG4gICAgICB0aGlzLm9wZXJhbmQgPSBvcGVyYW5kO1xuICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xuXG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2gob3BlcmFuZCwgYXJndW1lbnQpO1xuICAgIH1cblxuICAgIG9wZXJhbmQ6IEV4cHJlc3Npb247XG4gICAgYXJndW1lbnQ6IEV4cHJlc3Npb247XG5cbiAgICBzeW06ZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52SW5kZXhFeHByZXNzaW9uKHRoaXMsIGFyZyk7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGNsYXNzIEF0dGFjaGVkRXhwcmVzc2lvbiBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEV4cHJlc3Npb24sIFZpc2l0b3JBY2NlcHRvciB7XG4gICAgY29uc3RydWN0b3Iob2ZUeXBlOiBJZGVudGlmaWVyLCBvdXRlclZhcjogSWRlbnRpZmllckFjY2VzcywgbmV3VmFyOiBJZGVudGlmaWVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMub2ZUeXBlID0gb2ZUeXBlO1xuICAgICAgdGhpcy5vdXRlclZhciA9IG91dGVyVmFyO1xuICAgICAgdGhpcy5uZXdWYXIgPSBuZXdWYXI7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChvZlR5cGUsIG91dGVyVmFyLCBuZXdWYXIpO1xuICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgfVxuICAgIHN0YXJ0OiBQb3M7XG4gICAgZW5kOiBQb3M7XG5cbiAgICBvZlR5cGU6IElkZW50aWZpZXI7IG91dGVyVmFyOlxuICAgIElkZW50aWZpZXJBY2Nlc3M7XG4gICAgbmV3VmFyOiBJZGVudGlmaWVyO1xuXG4gICAgc3ltOmVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkF0dGFjaGVkRXhwcmVzc2lvbih0aGlzLCBhcmcpO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBGcm9tTG9vcCBleHRlbmRzIEFTVCBpbXBsZW1lbnRzIEluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsaXplckJsb2NrOiBJbnN0cnVjdGlvbltdLCB1bnRpbDogRXhwcmVzc2lvbiwgbG9vcEJsb2NrOiBJbnN0cnVjdGlvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZXJCbG9jayA9IGluaXRpYWxpemVyQmxvY2s7XG4gICAgICB0aGlzLnVudGlsID0gdW50aWw7XG4gICAgICB0aGlzLmxvb3BCbG9jayA9IGxvb3BCbG9jaztcblxuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgaW5pdGlhbGl6ZXJCbG9jayk7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2godW50aWwpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgbG9vcEJsb2NrKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplckJsb2NrOmVpZmZlbC5hc3QuSW5zdHJ1Y3Rpb25bXTtcbiAgICB1bnRpbDplaWZmZWwuYXN0LkV4cHJlc3Npb247XG4gICAgbG9vcEJsb2NrOmVpZmZlbC5hc3QuSW5zdHJ1Y3Rpb25bXTtcblxuICAgIHN5bTogZWlmZmVsLmFzdC5UeXBlSW5zdGFuY2U7XG5cbiAgICBhY2NlcHQ8QSwgUj4odmlzaXRvcjpWaXNpdG9yPEEsIFI+LCBhcmc6QSk6UiB7XG4gICAgICByZXR1cm4gdmlzaXRvci52RnJvbUxvb3AodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgSWZFbHNlIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgSW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbmRpdGlvbjogRXhwcmVzc2lvbiwgdGhlbkJsb2NrOiBJbnN0cnVjdGlvbltdLCBlbHNlSWZzOiBFbHNlSWZbXSwgZWxzZUJsb2NrOiBJbnN0cnVjdGlvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgdGhpcy50aGVuQmxvY2sgPSB0aGVuQmxvY2s7XG4gICAgICB0aGlzLmVsc2VJZnMgPSBlbHNlSWZzO1xuICAgICAgdGhpcy5lbHNlQmxvY2sgPSBlbHNlQmxvY2s7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjb25kaXRpb24pO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhlbkJsb2NrKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGVsc2VJZnMpO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgZWxzZUJsb2NrKTtcbiAgICB9XG5cbiAgICBjb25kaXRpb246ZWlmZmVsLmFzdC5FeHByZXNzaW9uO1xuICAgIHRoZW5CbG9jazplaWZmZWwuYXN0Lkluc3RydWN0aW9uW107XG4gICAgZWxzZUlmczplaWZmZWwuYXN0LkVsc2VJZltdO1xuICAgIGVsc2VCbG9jazplaWZmZWwuYXN0Lkluc3RydWN0aW9uW107XG4gICAgc3ltOiBlaWZmZWwuYXN0LlR5cGVJbnN0YW5jZTtcblxuICAgIGFjY2VwdDxBLCBSPih2aXNpdG9yOlZpc2l0b3I8QSwgUj4sIGFyZzpBKTpSIHtcbiAgICAgIHJldHVybiB2aXNpdG9yLnZJZkVsc2UodGhpcywgYXJnKTtcbiAgICB9XG4gIH1cblxuICBleHBvcnQgY2xhc3MgRWxzZUlmIGV4dGVuZHMgQVNUIGltcGxlbWVudHMgSW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbmRpdGlvbjogRXhwcmVzc2lvbiwgdGhlbkJsb2NrOiBJbnN0cnVjdGlvbltdKSB7XG4gICAgICBzdXBlcih0aGlzKTtcbiAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgdGhpcy50aGVuQmxvY2sgPSB0aGVuQmxvY2s7XG5cbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjb25kaXRpb24pO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5jaGlsZHJlbiwgdGhlbkJsb2NrKTtcbiAgICB9XG5cbiAgICBjb25kaXRpb246ZWlmZmVsLmFzdC5FeHByZXNzaW9uO1xuICAgIHRoZW5CbG9jazplaWZmZWwuYXN0Lkluc3RydWN0aW9uW107XG5cbiAgICBzeW06IGVpZmZlbC5hc3QuVHlwZUluc3RhbmNlO1xuXG4gICAgYWNjZXB0PEEsIFI+KHZpc2l0b3I6VmlzaXRvcjxBLCBSPiwgYXJnOkEpOlIge1xuICAgICAgcmV0dXJuIHZpc2l0b3IudkVsc2VJZih0aGlzLCBhcmcpO1xuICAgIH1cblxuICB9XG59XG4iLCJtb2R1bGUgZWlmZmVsLmJ1aWx0aW4ge1xuICBleHBvcnQgdmFyIFNURF9GSUxFID0ge1xuICAgIFwicHV0X3N0cmluZ1wiOiBbXG4gICAgICBmdW5jdGlvbiAoY3R4KSB7XG5cbiAgICAgIH1cbiAgICBdXG4gIH1cblxufVxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInZpc2l0b3IudHNcIiAvPlxuZGVjbGFyZSB2YXIgX19laWZmZWxfYnVpbHRpbjtcbm1vZHVsZSBlaWZmZWwuc2VtYW50aWNzIHtcbiAgaW1wb3J0IHN5bSA9IGVpZmZlbC5zeW1ib2xzO1xuXG4gIHZhciBjcmVhdGVDbGFzc1N5bWJvbHMgPSBmdW5jdGlvbiAoYXN0cywgYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQpIHtcbiAgICBhc3RzLmZvckVhY2goZnVuY3Rpb24gKGFzdDplaWZmZWwuYXN0LkNsYXNzKSB7XG4gICAgICBpZiAoIShhc3QgaW5zdGFuY2VvZiBlaWZmZWwuYXN0LkNsYXNzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIiwgYXN0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBBU1Qgbm9kZSBpcyBub3QgaW5zdGFuY2Ugb2YgQ2xhc3NcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gYXN0Lm5hbWUubmFtZTtcbiAgICAgIHZhciBjbGFzc1N5bWJvbCA9IG5ldyBzeW1ib2xzLkNsYXNzU3ltYm9sKG5hbWUsIGFzdCk7XG5cbiAgICAgIGFuYWx5c2lzQ29udGV4dC5jbGFzc1N5bWJvbHNbbmFtZV0gPSBjbGFzc1N5bWJvbDtcbiAgICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLnB1c2goY2xhc3NTeW1ib2wpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVGZWF0dXJlU3ltYm9scyA9IGZ1bmN0aW9uIChhbmFseXNpc0NvbnRleHQ6IEFuYWx5c2lzQ29udGV4dCkge1xuICAgIGFuYWx5c2lzQ29udGV4dC5hbGxDbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzU3ltYm9sKSB7XG4gICAgICBjbGFzc1N5bWJvbC5hc3QuYWNjZXB0KG5ldyBGZWF0dXJlRGlzY292ZXJ5KGFuYWx5c2lzQ29udGV4dCwgY2xhc3NTeW1ib2wpLCBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyA9IGZ1bmN0aW9uIChhbGxSb3V0aW5lcykge1xuICAgIGFsbFJvdXRpbmVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRpbmU6c3ltYm9scy5Sb3V0aW5lU3ltYm9sKSB7XG4gICAgICByb3V0aW5lLmFzdC5wYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtZXRlckxpc3Q6ZWlmZmVsLmFzdC5WYXJEZWNsTGlzdCkge1xuICAgICAgICBwYXJhbWV0ZXJMaXN0LnZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckRlY2wubmFtZS5uYW1lO1xuICAgICAgICAgIHZhciB2YXJpYWJsZVN5bWJvbCA9IG5ldyBzeW1ib2xzLlZhcmlhYmxlU3ltYm9sKHZhck5hbWUsIHZhckRlY2wpO1xuICAgICAgICAgIHJvdXRpbmUucGFyYW1zSW5PcmRlci5wdXNoKHZhcmlhYmxlU3ltYm9sKTtcbiAgICAgICAgICByb3V0aW5lLmxvY2Fsc0FuZFBhcmFtc0J5TmFtZVt2YXJOYW1lXSA9IHZhcmlhYmxlU3ltYm9sO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVSb3V0aW5lTG9jYWxTeW1ib2xzID0gZnVuY3Rpb24gKGFuYWx5c2lzQ29udGV4dCkge1xuICAgIGFuYWx5c2lzQ29udGV4dC5hbGxSb3V0aW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0aW5lOnN5bWJvbHMuUm91dGluZVN5bWJvbCkge1xuICAgICAgcm91dGluZS5hc3QubG9jYWxzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2xMaXN0czplaWZmZWwuYXN0LlZhckRlY2xMaXN0W10pIHtcbiAgICAgICAgdmFyRGVjbExpc3RzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtZXRlckxpc3QpIHtcbiAgICAgICAgICBwYXJhbWV0ZXJMaXN0LnZhckRlY2xzLmZvckVhY2goZnVuY3Rpb24gKHZhckRlY2wpIHtcbiAgICAgICAgICAgIHZhciB2YXJOYW1lID0gdmFyRGVjbC5uYW1lLm5hbWU7XG4gICAgICAgICAgICB2YXIgdmFyaWFibGVTeW1ib2wgPSBuZXcgc3ltYm9scy5WYXJpYWJsZVN5bWJvbCh2YXJOYW1lLCB2YXJEZWNsKTtcbiAgICAgICAgICAgIHJvdXRpbmUubG9jYWxzLnB1c2godmFyaWFibGVTeW1ib2wpO1xuICAgICAgICAgICAgcm91dGluZS5sb2NhbHNBbmRQYXJhbXNCeU5hbWVbdmFyTmFtZV0gPSB2YXJpYWJsZVN5bWJvbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBleHBvcnQgZnVuY3Rpb24gYW5hbHl6ZSguLi5tYW55QXN0czogYXN0LkNsYXNzW11bXSk6IEFuYWx5c2lzUmVzdWx0IHtcbiAgICB2YXIgYnVpbHRpblNvdXJjZXMgPSBfX2VpZmZlbF9idWlsdGluLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHguY29udGVudDtcbiAgICB9KTtcbiAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShtYW55QXN0cywgYnVpbHRpblNvdXJjZXMubWFwKGZ1bmN0aW9uKHNvdXJjZSkgeyByZXR1cm4gZWlmZmVsLnBhcnNlci5wYXJzZShzb3VyY2UpfSkpO1xuICAgIHZhciBhc3RzOiBhc3QuQ2xhc3NbXSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIG1hbnlBc3RzKTtcbiAgICB2YXIgYW5hbHlzaXNDb250ZXh0ID0gbmV3IEFuYWx5c2lzQ29udGV4dCgpO1xuICAgIGNyZWF0ZUNsYXNzU3ltYm9scyhhc3RzLCBhbmFseXNpc0NvbnRleHQpO1xuICAgIGNyZWF0ZUZlYXR1cmVTeW1ib2xzKGFuYWx5c2lzQ29udGV4dCk7XG4gICAgY3JlYXRlUm91dGluZVBhcmFtU3ltYm9scyhhbmFseXNpc0NvbnRleHQuYWxsUm91dGluZXMpO1xuICAgIGNyZWF0ZVJvdXRpbmVMb2NhbFN5bWJvbHMoYW5hbHlzaXNDb250ZXh0KTtcbiAgICBhbmFseXNpc0NvbnRleHQuYWxsQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc1N5bWJvbCkge1xuICAgICAgY2xhc3NTeW1ib2wuYXN0LmNyZWF0aW9uQ2xhdXNlLmZvckVhY2goZnVuY3Rpb24gKGlkZW50aWZpZXIpIHtcbiAgICAgICAgdmFyIG5hbWU6IHN0cmluZyA9IGlkZW50aWZpZXIubmFtZTtcbiAgICAgICAgaWYgKGNsYXNzU3ltYm9sLnByb2NlZHVyZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBjbGFzc1N5bWJvbC5jcmVhdGlvblByb2NlZHVyZXNbbmFtZV0gPSBjbGFzc1N5bWJvbC5wcm9jZWR1cmVzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzU3ltYm9sLmZ1bmN0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgYW5hbHlzaXNDb250ZXh0LmVycm9ycy5wdXNoKFwiRnVuY3Rpb25zIGNhbm5vdCBiZSB1c2VkIGFzIGNyZWF0aW9uIHByb2NlZHVyZXMgXCIgKyBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhbmFseXNpc0NvbnRleHQuZXJyb3JzLnB1c2goXCJUaGVyZSBpcyBub3QgcHJvY2VkdXJlIHdpdGggbmFtZSBcIiArIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuXG5cblxuICAgIHZhciBuZXdWYXIgPSB7XG4gICAgICAgIGFzdHM6IGFzdHMsXG4gICAgICAgIGVycm9yczogYW5hbHlzaXNDb250ZXh0LmVycm9ycyxcbiAgICAgICAgY29udGV4dDogYW5hbHlzaXNDb250ZXh0LFxuICAgICAgfTtcbiAgICByZXR1cm4gbmV3VmFyO1xuICB9XG5cbiAgY2xhc3MgQW5hbHlzaXNDb250ZXh0IHtcbiAgICBjbGFzc1N5bWJvbHM6IExvb2t1cFRhYmxlPHN5bS5DbGFzc1N5bWJvbD4gPSB7fTtcbiAgICBhbGxGdW5jdGlvbnM6IHN5bWJvbHMuRnVuY3Rpb25TeW1ib2xbXSA9IFtdO1xuICAgIGFsbFByb2NlZHVyZXM6IHN5bWJvbHMuUHJvY2VkdXJlU3ltYm9sW10gPSBbXTtcbiAgICBhbGxSb3V0aW5lczogc3ltYm9scy5Sb3V0aW5lU3ltYm9sW10gPSBbXTtcbiAgICBhbGxDbGFzc2VzOiBzeW1ib2xzLkNsYXNzU3ltYm9sW10gPSBbXTtcblxuICAgIGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgfVxuXG4gIGNsYXNzIFNlbWFudGljVmlzaXRvcjxBLCBSPiBleHRlbmRzIGFzdC5WaXNpdG9yPEEsIFI+IHtcbiAgICBjbGFzc1N5bWJvbHM6TG9va3VwVGFibGU8c3ltLkNsYXNzU3ltYm9sPjtcbiAgICBhbmFseXNpc0NvbnRleHQ6IEFuYWx5c2lzQ29udGV4dDtcblxuXG4gICAgY29uc3RydWN0b3IoYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dCA9IGFuYWx5c2lzQ29udGV4dDtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2xzID0gYW5hbHlzaXNDb250ZXh0LmNsYXNzU3ltYm9scztcbiAgICB9XG5cbiAgICBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGtpbmQ6IFNlbWFudGljRXJyb3JLaW5kKSB7XG4gICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5lcnJvcnMucHVzaChTZW1hbnRpY0Vycm9yS2luZFtraW5kXSArIG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGVudW0gU2VtYW50aWNFcnJvcktpbmQge1xuICAgIER1cGxpY2F0ZUZlYXR1cmVOYW1lLFxuICAgIER1cGxpY2F0ZVBhcmFtZXRlck5hbWUsXG4gICAgRHVwbGljYXRlQ2xhc3NOYW1lLFxuICB9XG5cbiAgY2xhc3MgRmVhdHVyZURpc2NvdmVyeSBleHRlbmRzIFNlbWFudGljVmlzaXRvcjxhbnksIGFueT4ge1xuXG4gICAgY29uc3RydWN0b3IoYW5hbHlzaXNDb250ZXh0OiBBbmFseXNpc0NvbnRleHQsIGNsYXNzU3ltYm9sOnN5bWJvbHMuQ2xhc3NTeW1ib2wpIHtcbiAgICAgIHN1cGVyKGFuYWx5c2lzQ29udGV4dCk7XG4gICAgICB0aGlzLmNsYXNzU3ltYm9sID0gY2xhc3NTeW1ib2w7XG4gICAgfVxuXG4gICAgY2xhc3NTeW1ib2w6IHN5bWJvbHMuQ2xhc3NTeW1ib2w7XG5cbiAgICB2QXR0cihhdHRyOmVpZmZlbC5hc3QuQXR0cmlidXRlLCBfOmFueSk6YW55IHtcbiAgICAgIHZhciBuYW1lID0gYXR0ci5uYW1lLm5hbWU7XG4gICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIG5hbWUpO1xuXG4gICAgICB2YXIgYXR0cmlidXRlU3ltYm9sID0gbmV3IHN5bWJvbHMuQXR0cmlidXRlU3ltYm9sKG5hbWUsIGF0dHIpO1xuXG4gICAgICBhdHRyLnN5bSA9IGF0dHJpYnV0ZVN5bWJvbDtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlc1tuYW1lXSA9IGF0dHJpYnV0ZVN5bWJvbDtcblxuICAgICAgLy9yZXR1cm4gc3VwZXIudkF0dHIoYXR0ciwgdGhpcy5jbGFzc1N5bWJvbCk7XG4gICAgfVxuXG4gICAgdkZ1bmN0aW9uKGZ1bmM6ZWlmZmVsLmFzdC5GdW5jdGlvbiwgXzphbnkpOmFueSB7XG4gICAgICB2YXIgZnVuY3Rpb25OYW1lID0gZnVuYy5uYW1lLm5hbWU7XG4gICAgICB0aGlzLmVycm9yT25EdXBsaWNhdGVGZWF0dXJlKHRoaXMuY2xhc3NTeW1ib2wsIGZ1bmN0aW9uTmFtZSk7XG5cbiAgICAgIHZhciBzeW0gPSBuZXcgc3ltYm9scy5GdW5jdGlvblN5bWJvbChmdW5jdGlvbk5hbWUsIGZ1bmMpO1xuXG4gICAgICBmdW5jLnN5bSA9IHN5bTtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2wuZnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0gPSBzeW07XG4gICAgICB0aGlzLmNsYXNzU3ltYm9sLnJvdXRpbmVzW2Z1bmN0aW9uTmFtZV0gPSBzeW07XG4gICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxGdW5jdGlvbnMucHVzaChzeW0pO1xuICAgICAgdGhpcy5hbmFseXNpc0NvbnRleHQuYWxsUm91dGluZXMucHVzaChzeW0pO1xuXG4gICAgICAvL3JldHVybiBzdXBlci52RnVuY3Rpb24oZnVuYywgdGhpcy5jbGFzc1N5bWJvbCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlcnJvck9uRHVwbGljYXRlRmVhdHVyZShjbGFzc1N5bWJvbCwgZmVhdHVyZU5hbWUpIHtcbiAgICAgIGlmIChjbGFzc1N5bWJvbC5oYXNTeW1ib2woZmVhdHVyZU5hbWUpKSB7XG4gICAgICAgIHRoaXMuZXJyb3IoXCJGZWF0dXJlIHdpdGggbmFtZSBcIiArIGZlYXR1cmVOYW1lICsgXCIgYWxyZWFkeSBleGlzdHNcIiwgU2VtYW50aWNFcnJvcktpbmQuRHVwbGljYXRlRmVhdHVyZU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZQcm9jZWR1cmUocHJvY2VkdXJlOmVpZmZlbC5hc3QuUHJvY2VkdXJlLCBfOmFueSk6YW55IHtcbiAgICAgIHZhciBwcm9jZWR1cmVOYW1lID0gcHJvY2VkdXJlLm5hbWUubmFtZTtcbiAgICAgIHRoaXMuZXJyb3JPbkR1cGxpY2F0ZUZlYXR1cmUodGhpcy5jbGFzc1N5bWJvbCwgcHJvY2VkdXJlTmFtZSk7XG5cbiAgICAgIHZhciBzeW0gPSBuZXcgc3ltYm9scy5Qcm9jZWR1cmVTeW1ib2wocHJvY2VkdXJlTmFtZSwgcHJvY2VkdXJlKTtcblxuICAgICAgcHJvY2VkdXJlLnN5bSA9IHN5bTtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2wucHJvY2VkdXJlc1twcm9jZWR1cmVOYW1lXSA9IHN5bTtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2wucm91dGluZXNbcHJvY2VkdXJlTmFtZV0gPSBzeW07XG4gICAgICB0aGlzLmFuYWx5c2lzQ29udGV4dC5hbGxQcm9jZWR1cmVzLnB1c2goc3ltKTtcbiAgICAgIHRoaXMuYW5hbHlzaXNDb250ZXh0LmFsbFJvdXRpbmVzLnB1c2goc3ltKTtcblxuICAgICAgLy9yZXR1cm4gc3VwZXIudlByb2NlZHVyZShwcm9jZWR1cmUsIHRoaXMuY2xhc3NTeW1ib2wpO1xuICAgIH1cblxuICAgIHZDb25zdGFudEF0dHJpYnV0ZShjb25zdGFudEF0dHJpYnV0ZTplaWZmZWwuYXN0LkNvbnN0YW50QXR0cmlidXRlLCBfOmFueSk6YW55IHtcbiAgICAgIHZhciBuYW1lID0gY29uc3RhbnRBdHRyaWJ1dGUubmFtZS5uYW1lO1xuICAgICAgdGhpcy5lcnJvck9uRHVwbGljYXRlRmVhdHVyZSh0aGlzLmNsYXNzU3ltYm9sLCBuYW1lKTtcblxuICAgICAgdmFyIGF0dHJpYnV0ZVN5bWJvbCA9IG5ldyBzeW1ib2xzLkF0dHJpYnV0ZVN5bWJvbChuYW1lLCBjb25zdGFudEF0dHJpYnV0ZSk7XG5cbiAgICAgIGNvbnN0YW50QXR0cmlidXRlLnN5bSA9IGF0dHJpYnV0ZVN5bWJvbDtcbiAgICAgIHRoaXMuY2xhc3NTeW1ib2wuYXR0cmlidXRlc1tuYW1lXSA9IGF0dHJpYnV0ZVN5bWJvbDtcblxuICAgICAgLy9yZXR1cm4gc3VwZXIudkNvbnN0YW50QXR0cmlidXRlKGNvbnN0YW50QXR0cmlidXRlLCB0aGlzLmNsYXNzU3ltYm9sKTtcbiAgICB9XG4gIH1cblxuICBjbGFzcyBUeXBlQ29ubmVjdG9yIGV4dGVuZHMgU2VtYW50aWNWaXNpdG9yPGFueSwgYW55PiB7XG5cblxuICB9XG5cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQW5hbHlzaXNSZXN1bHQge1xuICAgIGFzdHM6IGVpZmZlbC5hc3QuQ2xhc3NbXTtcbiAgICBlcnJvcnM6IGFueVtdO1xuICAgIGNvbnRleHQ6IEFuYWx5c2lzQ29udGV4dDtcbiAgfVxufVxuIiwibW9kdWxlIGVpZmZlbC5zeW1ib2xzIHtcbiAgICBleHBvcnQgY2xhc3MgU3ltYm9sIHtcblxuICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICB9XG5cbiAgICAgIG5hbWU6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgUm91dGluZVN5bWJvbCBleHRlbmRzIFN5bWJvbCB7XG4gICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGFzdDphc3QuUm91dGluZSkge1xuICAgICAgICBzdXBlcihuYW1lKTtcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICB9XG5cbiAgICAgIGxvY2FsczogVmFyaWFibGVTeW1ib2xbXSA9IFtdO1xuICAgICAgbG9jYWxzQW5kUGFyYW1zQnlOYW1lOiBMb29rdXBUYWJsZTxWYXJpYWJsZVN5bWJvbD4gPSB7fTtcbiAgICAgIHBhcmFtc0luT3JkZXI6IFZhcmlhYmxlU3ltYm9sW10gPSBbXTtcbiAgICAgIGFzdDogYXN0LlJvdXRpbmU7XG4gICAgfVxuXG4gICAgZXhwb3J0IGNsYXNzIEZ1bmN0aW9uU3ltYm9sIGV4dGVuZHMgUm91dGluZVN5bWJvbCB7XG4gICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGFzdDphc3QuRnVuY3Rpb24pIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYXN0KTtcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICB9XG5cbiAgICAgIGFzdDogYXN0LkZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGV4cG9ydCBjbGFzcyBQcm9jZWR1cmVTeW1ib2wgZXh0ZW5kcyBSb3V0aW5lU3ltYm9sIHtcblxuXG4gICAgICBjb25zdHJ1Y3RvcihuYW1lOnN0cmluZywgYXN0OmFzdC5Qcm9jZWR1cmUpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYXN0KTtcbiAgICAgICAgdGhpcy5hc3QgPSBhc3Q7XG4gICAgICB9XG5cbiAgICAgIGFzdDogYXN0LlByb2NlZHVyZTtcbiAgICB9XG5cbiAgZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZVN5bWJvbCBleHRlbmRzIFN5bWJvbCB7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGF0dHI6YXN0LlZhck9yQ29uc3RBdHRyaWJ1dGUpIHtcbiAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgdGhpcy5hc3QgPSBhdHRyO1xuICAgIH1cblxuICAgIGFzdDogYXN0LlZhck9yQ29uc3RBdHRyaWJ1dGU7XG4gIH1cblxuICBleHBvcnQgY2xhc3MgVmFyaWFibGVTeW1ib2wgZXh0ZW5kcyBTeW1ib2wge1xuXG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFzdDphc3QuVmFyRGVjbEVudHJ5KSB7XG4gICAgICBzdXBlcihuYW1lKTtcbiAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgIH1cblxuICAgIGFzdDogYXN0LlZhckRlY2xFbnRyeTtcbiAgfVxuXG4gIGV4cG9ydCBjbGFzcyBDbGFzc1N5bWJvbCBleHRlbmRzIFN5bWJvbCB7XG4gICAgY29uc3RydWN0b3IobmFtZTpzdHJpbmcsIGFzdDogYXN0LkNsYXNzKSB7XG4gICAgICBzdXBlcihuYW1lKTtcbiAgICAgIHRoaXMuYXN0ID0gYXN0O1xuICAgIH1cblxuICAgIGFzdDogYXN0LkNsYXNzO1xuICAgIGZ1bmN0aW9uczogTG9va3VwVGFibGU8RnVuY3Rpb25TeW1ib2w+ID0ge307XG4gICAgcHJvY2VkdXJlczogTG9va3VwVGFibGU8UHJvY2VkdXJlU3ltYm9sPiA9IHt9O1xuICAgIHJvdXRpbmVzOiBMb29rdXBUYWJsZTxSb3V0aW5lU3ltYm9sPiA9IHt9O1xuICAgIGF0dHJpYnV0ZXM6IExvb2t1cFRhYmxlPEF0dHJpYnV0ZVN5bWJvbD4gPSB7fTtcbiAgICBjcmVhdGlvblByb2NlZHVyZXM6IExvb2t1cFRhYmxlPFByb2NlZHVyZVN5bWJvbD4gPSB7fTtcblxuXG4gICAgaGFzU3ltYm9sKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgaWYgKHRoaXMucm91dGluZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJlc29sdmVTeW1ib2wobmFtZTogc3RyaW5nKTogU3ltYm9sIHtcbiAgICAgIGlmICh0aGlzLnJvdXRpbmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRpbmVzW25hbWVdO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3ltYm9sIFwiICsgbmFtZSArIFwiIGRvZXMgbm90IGV4aXN0IGluIGNsYXNzIFwiICsgdGhpcy5uYW1lICsgXCIuXCIpO1xuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9