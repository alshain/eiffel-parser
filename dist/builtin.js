var __eiffel_builtin = [];
__eiffel_builtin.push({"filename":"abstract_special.e","content":"note\n  description: \"Ancestor of SPECIAL to perform queries on SPECIAL without knowing its actual generic type.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-04-12 16:54:50 -0700 (Fri, 12 Apr 2013) $\"\n  revision: \"$Revision: 92440 $\"\n\ndeferred class\n  ABSTRACT_SPECIAL\n\ninherit\n  DEBUG_OUTPUT\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Count of special area\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\n  capacity: INTEGER\n      -- Capacity of special area\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    deferred\n    end\n\nfeature -- Output\n\n  debug_output: STRING\n      -- String that should be displayed in debugger to represent `Current'.\n    do\n      create Result.make (12)\n      Result.append_string (\"count=\")\n      Result.append_integer (count)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"any.e","content":"class\n  ANY\n\nfeature -- Status report\n\n  conforms_to (other: ANY): BOOLEAN\n      -- Does type of current object conform to type\n      -- of `other' (as per Eiffel: The Language, chapter 13)?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    end\n\n  same_type (other: ANY): BOOLEAN\n      -- Is type of current object identical to type of `other'?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      definition: Result = (conforms_to (other) and\n                    other.conforms_to (Current))\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object considered\n      -- equal to current object?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      symmetric: Result implies other ~ Current\n      consistent: standard_is_equal (other) implies Result\n    end\n\n  frozen standard_is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object, and field-by-field identical to it?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      same_type: Result implies same_type (other)\n      symmetric: Result implies other.standard_is_equal (Current)\n    end\n\n  frozen equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void or attached\n      -- to objects considered equal?\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then\n              a.is_equal (b)\n      end\n    ensure\n      definition: Result = (a = Void and b = Void) or else\n            ((a /= Void and b /= Void) and then\n            a.is_equal (b))\n    end\n\n  frozen standard_equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void or attached to\n      -- field-by-field identical objects of the same type?\n      -- Always uses default object comparison criterion.\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then\n              a.standard_is_equal (b)\n      end\n    ensure\n      definition: Result = (a = Void and b = Void) or else\n            ((a /= Void and b /= Void) and then\n            a.standard_is_equal (b))\n    end\n\n  frozen is_deep_equal (other: like Current): BOOLEAN\n      -- Are `Current' and `other' attached to isomorphic object structures?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      shallow_implies_deep: standard_is_equal (other) implies Result\n      same_type: Result implies same_type (other)\n      symmetric: Result implies other.is_deep_equal (Current)\n    end\n\n  frozen deep_equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void\n      -- or attached to isomorphic object structures?\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then a.is_deep_equal (b)\n      end\n    ensure\n      shallow_implies_deep: standard_equal (a, b) implies Result\n      both_or_none_void: (a = Void) implies (Result = (b = Void))\n      same_type: (Result and (a /= Void)) implies (b /= Void and then a.same_type (b))\n      symmetric: Result implies deep_equal (b, a)\n    end\n\nfeature -- Output\n\n  io: STD_FILES\n      -- Handle to standard file setup\n    external\n      \"built_in\"\n    ensure\n      io_not_void: Result /= Void\n    end\n\n  out: STRING\n      -- New string containing terse printable representation\n      -- of current object\n    do\n      Result := tagged_out\n    ensure\n      out_not_void: Result /= Void\n    end\n\n  frozen tagged_out: STRING\n      -- New string containing terse printable representation\n      -- of current object\n    external\n      \"built_in\"\n    ensure\n      tagged_out_not_void: Result /= Void\n    end\n\n  print (o: detachable ANY)\n      -- Write terse external representation of `o'\n      -- on standard output.\n    do\n      if o /= Void then\n        io.put_string (o.out)\n      end\n    end\n\nfeature {NONE} -- Initialization\n\n  default_create\n      -- Process instances of classes with no creation clause.\n      -- (Default: do nothing.)\n    do\n    end\n\nfeature -- Basic operations\n  frozen dlo_nothing\n      -- Execute a null action.\n    do\n    end\n\ninvariant\n  reflexive_equality: standard_is_equal (Current)\n  reflexive_conformance: conforms_to (Current)\n\n\nend\n"});
__eiffel_builtin.push({"filename":"array.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-25 14:18:20 -0800 (Fri, 25 Jan 2013) $\"\n  revision: \"$Revision: 92138 $\"\n\nclass ARRAY [G] inherit\n\n  RESIZABLE [G]\n    redefine\n      full, copy, is_equal, resizable\n    end\n\n  INDEXABLE [G, INTEGER]\n    rename\n      item as item alias \"[]\"\n    redefine\n      copy, is_equal\n    end\n\n  TO_SPECIAL [G]\n    export\n      {ARRAY} set_area\n    redefine\n      copy, is_equal, item, put, at, valid_index\n    end\n\ncreate\n  make_empty,\n  make,\n  make_filled,\n  make_from_array,\n  make_from_special,\n  make_from_cil\n\nconvert\n  to_cil: {NATIVE_ARRAY [G]},\n  to_special: {SPECIAL [G]},\n  make_from_cil ({NATIVE_ARRAY [G]})\n\nfeature -- Initialization\n\n  make_empty\n      -- Allocate empty array starting at `1'.\n    do\n      lower := 1\n      upper := 0\n      make_empty_area (0)\n    ensure\n      lower_set: lower = 1\n      upper_set: upper = 0\n      items_set: all_default\n    end\n\n  make_filled (a_default_value: G; min_index, max_index: INTEGER)\n      -- Allocate array; set index interval to\n      -- `min_index' .. `max_index'; set all values to default.\n      -- (Make array empty if `min_index' = `max_index' + 1).\n    require\n      valid_bounds: min_index <= max_index + 1\n    local\n      n: INTEGER\n    do\n      lower := min_index\n      upper := max_index\n      if min_index <= max_index then\n        n := max_index - min_index + 1\n      end\n      make_filled_area (a_default_value, n)\n    ensure\n      lower_set: lower = min_index\n      upper_set: upper = max_index\n      items_set: filled_with (a_default_value)\n    end\n\n  make (min_index, max_index: INTEGER)\n      -- Allocate array; set index interval to\n      -- `min_index' .. `max_index'; set all values to default.\n      -- (Make array empty if `min_index' = `max_index' + 1).\n    obsolete\n      \" `make' is not void-safe statically. Use `make_empty' or `make_filled' instead. [07-2010]\"\n    require\n      valid_bounds: min_index <= max_index + 1\n      has_default: min_index <= max_index implies ({G}).has_default\n    do\n      lower := min_index\n      upper := max_index\n      if min_index <= max_index then\n        make_filled_area (({G}).default, max_index - min_index + 1)\n      else\n        make_empty_area (0)\n      end\n    ensure\n      lower_set: lower = min_index\n      upper_set: upper = max_index\n      items_set: all_default\n    end\n\n  make_from_array (a: ARRAY [G])\n      -- Initialize from the items of `a'.\n      -- (Useful in proper descendants of class `ARRAY',\n      -- to initialize an array-like object from a manifest array.)\n    require\n      array_exists: a /= Void\n    do\n      set_area (a.area)\n      lower := a.lower\n      upper := a.upper\n    ensure\n      shared: area = a.area\n      lower_set: lower = a.lower\n      upper_set: upper = a.upper\n    end\n\n  make_from_special (a: SPECIAL [G])\n      -- Initialize Current from items of `a'.\n    require\n      special_attached: a /= Void\n    do\n      set_area (a)\n      lower := 1\n      upper := a.count\n    ensure\n      shared: area = a\n      lower_set: lower = 1\n      upper_set: upper = a.count\n    end\n\n  make_from_cil (na: NATIVE_ARRAY [like item])\n      -- Initialize array from `na'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n      na_not_void: na /= Void\n    do\n      create area.make_from_native_array (na)\n      lower := 1\n      upper := area.count\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): G assign put\n      -- Entry at index `i', if in index interval\n    do\n      Result := area.item (i - lower)\n    end\n\n  entry (i: INTEGER): G\n      -- Entry at index `i', if in index interval\n    require\n      valid_key: valid_index (i)\n    do\n      Result := item (i)\n    end\n\n  has (v: G): BOOLEAN\n      -- Does `v' appear in array?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      l_area := area\n      nb := upper - lower\n      if object_comparison and v /= Void then\n        from\n        until\n          i > nb or Result\n        loop\n          Result := l_area.item (i) ~ v\n          i := i + 1\n        end\n      else\n        from\n        until\n          i > nb or Result\n        loop\n          Result := l_area.item (i) = v\n          i := i + 1\n        end\n      end\n    end\n\nfeature -- Measurement\n\n  lower: INTEGER\n      -- Minimum index\n\n  upper: INTEGER\n      -- Maximum index\n\n  count, capacity: INTEGER\n      -- Number of available indices\n    do\n      Result := upper - lower + 1\n    ensure then\n      consistent_with_bounds: Result = upper - lower + 1\n    end\n\n  occurrences (v: G): INTEGER\n      -- Number of times `v' appears in structure\n    local\n      i: INTEGER\n    do\n      if object_comparison then\n        from\n          i := lower\n        until\n          i > upper\n        loop\n          if item (i) ~ v then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      else\n        from\n          i := lower\n        until\n          i > upper\n        loop\n          if item (i) = v then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      end\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (lower, upper)\n    ensure then\n      same_count: Result.count = count\n      same_bounds:\n        ((Result.lower = lower) and (Result.upper = upper))\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is array made of the same items as `other'?\n    local\n      i: INTEGER\n    do\n      if other = Current then\n        Result := True\n      elseif lower = other.lower and then upper = other.upper and then\n        object_comparison = other.object_comparison\n      then\n        if object_comparison then\n          from\n            Result := True\n            i := lower\n          until\n            not Result or i > upper\n          loop\n            Result := item (i) ~ other.item (i)\n            i := i + 1\n          end\n        else\n          Result := area.same_items (other.area, 0, 0, count)\n        end\n      end\n    end\n\nfeature -- Status report\n\n  all_default: BOOLEAN\n      -- Are all items set to default values?\n    do\n      if count > 0 then\n        Result := ({G}).has_default and then area.filled_with (({G}).default, 0, upper - lower)\n      else\n        Result := True\n      end\n    ensure\n      definition: Result = (count = 0 or else\n        ((not attached item (upper) as i or else i = ({G}).default) and\n        subarray (lower, upper - 1).all_default))\n    end\n\n  filled_with (v: G): BOOLEAN\n      -- Are all items set to `v'?\n    do\n      Result := area.filled_with (v, 0, upper - lower)\n    ensure\n      definition: Result = (count = 0 or else\n        (item (upper) = v and subarray (lower, upper - 1).filled_with (v)))\n    end\n\n  full: BOOLEAN\n      -- Is structure filled to capacity? (Answer: yes)\n    do\n      Result := True\n    end\n\n  same_items (other: like Current): BOOLEAN\n      -- Do `other' and Current have same items?\n    require\n      other_not_void: other /= Void\n    do\n      if count = other.count then\n        Result := area.same_items (other.area, 0, 0, count)\n      end\n    ensure\n      definition: Result = ((count = other.count) and then\n        (count = 0 or else (item (upper) = other.item (other.upper)\n        and subarray (lower, upper - 1).same_items\n        (other.subarray (other.lower, other.upper - 1)))))\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of the array?\n    do\n      Result := (lower <= i) and then (i <= upper)\n    end\n\n  extendible: BOOLEAN\n      -- May items be added?\n      -- (Answer: no, although array may be resized.)\n    do\n      Result := False\n    end\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: no.)\n    do\n      Result := False\n    end\n\n  resizable: BOOLEAN\n      -- Can array be resized automatically?\n    do\n      Result := ({G}).has_default\n    end\n\n  valid_index_set: BOOLEAN\n    do\n      Result := index_set.count = count\n    end\n\nfeature -- Element change\n\n  put (v: like item; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    do\n      area.put (v, i - lower)\n    end\n\n  enter (v: like item; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    require\n      valid_key: valid_index (i)\n    do\n      area.put (v, i - lower)\n    end\n\n  force (v: like item; i: INTEGER)\n      -- Assign item `v' to `i'-th entry.\n      -- Resize the array if `i' falls out of currently defined bounds; preserve existing items.\n      -- In void-safe mode, if ({G}).has_default does not hold, then you can only insert between\n      -- `lower - 1' or `upper + 1' position in the ARRAY.\n    require\n      has_default_if_too_low:\n        (i < lower - 1 and lower /= {like lower}.min_value) implies ({G}).has_default\n      has_default_if_too_high:\n        (i > upper + 1 and upper /= {like upper}.max_value) implies ({G}).has_default\n    local\n      old_size, new_size: INTEGER\n      new_lower, new_upper: INTEGER\n      l_count, l_offset: INTEGER\n      l_increased_by_one: BOOLEAN\n    do\n      new_lower := lower.min (i)\n      new_upper := upper.max (i)\n      new_size := new_upper - new_lower + 1\n      l_increased_by_one := (i = upper + 1) or (i = lower - 1)\n      if empty_area then\n          -- List is empty. First we create an empty SPECIAL of the right capacity.\n        make_empty_area (new_size.max (additional_space))\n        if not l_increased_by_one then\n            -- We need to fill the SPECIAL for `0' to `new_size - 2' with the default value.\n          area.fill_with (({G}).default, 0, new_size - 2)\n        end\n        area.extend (v)\n      else\n        old_size := area.capacity\n        if new_size > old_size then\n          set_area (area.aliased_resized_area (new_size.max (old_size + additional_space)))\n        end\n        if new_lower < lower then\n            -- We have inserted below the previous `lower'. We need to shift entries to the right\n            -- before we can insert `v'.\n          l_offset := lower - new_lower\n          l_count := capacity\n          if not l_increased_by_one and l_offset > l_count then\n              -- With the `new_lower' given, the data has to move\n              -- beyond the `area''s count which requires us to fill\n              -- the gap between the old data's location and the new one\n              -- with the default value.\n            area.fill_with (({G}).default, l_count, l_offset - 1)\n          end\n          area.move_data (0, l_offset, l_count)\n          if not l_increased_by_one then\n              -- We start at `1' and not `0' because next instruction\n              -- will update the item at position `0'.\n            area.fill_with (({G}).default, 1, l_offset - 1)\n          end\n            -- Insert `v' at the new lower position.\n          area.put (v, 0)\n        else\n          if new_size > area.count then\n              -- We are adding to the new `upper' position. First we fill the non-initialized\n              -- elements if any up to `new_size - 2' (i.e. up the the item prior to `upper').\n            if not l_increased_by_one then\n              area.fill_with (({G}).default, area.count, new_size - 2)\n            end\n              -- Add `v' at upper position.\n            area.extend (v)\n          else\n              -- Here `lower' hasn't changed\n            area.put (v, i - lower)\n          end\n        end\n      end\n      lower := new_lower\n      upper := new_upper\n    ensure\n      inserted: item (i) = v\n      higher_count: count >= old count\n      lower_set: lower = (old lower).min (i)\n      upper_set: upper = (old upper).max (i)\n    end\n\n  fill_with (v: G)\n      -- Set items between `lower' and `upper' with `v'.\n    do\n      area.fill_with (v, 0, upper - lower)\n    ensure\n      same_capacity: capacity = old capacity\n      count_definition: count = old count\n      filled: filled_with (v)\n    end\n\n  subcopy (other: ARRAY [like item]; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy items of `other' within bounds `start_pos' and `end_pos'\n      -- to current array starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: start_pos >= other.lower\n      valid_end_pos: end_pos <= other.upper\n      valid_bounds: start_pos <= end_pos + 1\n      valid_index_pos: index_pos >= lower\n      enough_space: (upper - index_pos) >= (end_pos - start_pos)\n    do\n      area.copy_data (other.area, start_pos - other.lower, index_pos - lower, end_pos - start_pos + 1)\n    ensure\n      -- copied: forall `i' in 0 .. (`end_pos'-`start_pos'),\n      --     item (index_pos + i) = other.item (start_pos + i)\n    end\n\nfeature -- Iteration\n\n  do_all (action: PROCEDURE [ANY, TUPLE [G]])\n      -- Apply `action' to every item, from first to last.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    do\n      area.do_all_in_bounds (action, 0, count - 1)\n    end\n\n  do_if (action: PROCEDURE [ANY, TUPLE [G]]; test: FUNCTION [ANY, TUPLE [G], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    do\n      area.do_if_in_bounds (action, test, 0, count - 1)\n    end\n\n  there_exists (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for at least one item?\n    require\n      test_not_void: test /= Void\n    do\n      Result := area.there_exists_in_bounds (test, 0, count - 1)\n    end\n\n  for_all (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for all items?\n    require\n      test_not_void: test /= Void\n    do\n      Result := area.for_all_in_bounds (test, 0, count - 1)\n    end\n\n  do_all_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]])\n      -- Apply `action' to every item, from first to last.\n      -- `action' receives item and its index.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area\n      until\n        i > nb\n      loop\n        action.call ([l_area.item (i), j])\n        j := j + 1\n        i := i + 1\n      end\n    end\n\n  do_if_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]]; test: FUNCTION [ANY, TUPLE [G, INTEGER], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- `action' and `test' receive the item and its index.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area\n      until\n        i > nb\n      loop\n        if test.item ([l_area.item (i), j]) then\n          action.call ([l_area.item (i), j])\n        end\n        j := j + 1\n        i := i + 1\n      end\n    end\n\nfeature -- Removal\n\n  wipe_out\n      -- Make array empty.\n    obsolete\n      \"Not applicable since not `prunable'. Use `discard_items' instead.\"\n    do\n      discard_items\n    end\n\n  discard_items\n      -- Reset all items to default values with reallocation.\n    require\n      has_default: ({G}).has_default\n    do\n      create area.make_filled (({G}).default, capacity)\n    ensure\n      default_items: all_default\n    end\n\n  clear_all\n      -- Reset all items to default values.\n    require\n      has_default: ({G}).has_default\n    do\n      area.fill_with (({G}).default, 0, area.count - 1)\n    ensure\n      stable_lower: lower = old lower\n      stable_upper: upper = old upper\n      default_items: all_default\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all items except for the first `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    do\n      if n < count then\n        upper := lower + n - 1\n        area := area.aliased_resized_area (n)\n      end\n    ensure\n      new_count: count = n.min (old count)\n      same_lower: lower = old lower\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all items except for the last `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    local\n      nb: INTEGER\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        lower := upper - n + 1\n        area := area.aliased_resized_area (n)\n      end\n    ensure\n      new_count: count = n.min (old count)\n      same_upper: upper = old upper\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' items;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        upper := lower - 1\n        area := area.aliased_resized_area (0)\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      new_count: count = (old count - n).max (0)\n      same_upper: upper = old upper\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' items;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        upper := lower - 1\n        area := area.aliased_resized_area (0)\n      else\n        keep_head (count - n)\n      end\n    ensure\n      new_count: count = (old count - n).max (0)\n      same_lower: lower = old lower\n    end\n\nfeature -- Resizing\n\n  grow (i: INTEGER)\n      -- Change the capacity to at least `i'.\n    do\n      if i > capacity then\n        conservative_resize_with_default (({G}).default, lower, upper + i - capacity)\n      end\n    end\n\n  conservative_resize (min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    obsolete\n      \" `conservative_resize' is not void-safe statically. Use `conservative_resize_with_default' instead. [07-2010]\"\n    require\n      good_indices: min_index <= max_index\n      has_default: ({G}).has_default\n    do\n      conservative_resize_with_default (({G}).default, min_index, max_index)\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  conservative_resize_with_default (a_default_value: G; min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    require\n      good_indices: min_index <= max_index\n    local\n      new_size: INTEGER\n      new_lower, new_upper: INTEGER\n      offset: INTEGER\n    do\n      if empty_area then\n        set_area (area.aliased_resized_area_with_default (a_default_value, max_index - min_index + 1))\n        lower := min_index\n        upper := max_index\n      else\n        new_lower := min_index.min (lower)\n        new_upper := max_index.max (upper)\n        new_size := new_upper - new_lower + 1\n        if new_size > area.count then\n          set_area (area.aliased_resized_area_with_default (a_default_value, new_size))\n        end\n        if new_lower < lower then\n          offset := lower - new_lower\n          area.move_data (0, offset, upper - lower + 1)\n          area.fill_with (a_default_value, 0, offset - 1)\n        end\n        lower := new_lower\n        upper := new_upper\n      end\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  resize (min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    obsolete\n      \"Use `conservative_resize_with_default' instead as future versions will implement `resize' as specified in ELKS.\"\n    require\n      good_indices: min_index <= max_index\n      has_default: ({G}).has_default\n    do\n      conservative_resize_with_default (({G}).default, min_index, max_index)\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < area.capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_items: same_items (old twin)\n    end\n\n  rebase (a_lower: like lower)\n      -- Without changing the actual content of `Current' we set `lower' to `a_lower'\n      -- and `upper' accordingly to `a_lower + count - 1'.\n    local\n      l_old_lower: like lower\n    do\n      l_old_lower := lower\n      lower := a_lower\n      upper := a_lower + (upper - l_old_lower)\n    ensure\n      lower_set: lower = a_lower\n      upper_set: upper = a_lower + old count - 1\n    end\n\nfeature -- Conversion\n\n  to_c: ANY\n      -- Address of actual sequence of values,\n      -- for passing to external (non-Eiffel) routines.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    do\n      Result := area\n    end\n\n  to_cil: NATIVE_ARRAY [G]\n      -- Address of actual sequence of values,\n      -- for passing to external (non-Eiffel) routines.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      Result := area.native_array\n    ensure\n      to_cil_not_void: Result /= Void\n    end\n\n  to_special: SPECIAL [G]\n      -- 'area'.\n    do\n      Result := area\n    ensure\n      to_special_not_void: Result /= Void\n    end\n\n  linear_representation: LINEAR [G]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [G]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := lower\n      until\n        i > upper\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying all the items of `other'.\n      -- (This is also used by `clone'.)\n    do\n      if other /= Current then\n        standard_copy (other)\n        set_area (other.area.twin)\n      end\n    ensure then\n      equal_areas: area ~ other.area\n    end\n\n  subarray (start_pos, end_pos: INTEGER): ARRAY [G]\n      -- Array made of items of current array within\n      -- bounds `start_pos' and `end_pos'.\n    require\n      valid_start_pos: valid_index (start_pos)\n      valid_end_pos: end_pos <= upper\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n    do\n      if start_pos <= end_pos then\n        create Result.make_filled (item (start_pos), start_pos, end_pos)\n          -- Only copy elements if needed.\n        Result.subcopy (Current, start_pos, end_pos, start_pos)\n      else\n          -- make empty\n        create Result.make_empty\n        Result.rebase (start_pos)\n      end\n    ensure\n      lower: Result.lower = start_pos\n      upper: Result.upper = end_pos\n      -- copied: forall `i' in `start_pos' .. `end_pos',\n      --     Result.item (i) = item (i)\n    end\n\nfeature {NONE} -- Inapplicable\n\n  prune (v: G)\n      -- Remove first occurrence of `v' if any.\n      -- (Precondition is False.)\n    do\n    end\n\n  extend (v: G)\n      -- Add `v' to structure.\n      -- (Precondition is False.)\n    do\n    end\n\nfeature {NONE} -- Implementation\n\n  empty_area: BOOLEAN\n      -- Is `area' empty?\n    do\n      Result := area = Void or else area.capacity = 0\n    end\n\ninvariant\n\n  area_exists: area /= Void\n  consistent_size: capacity = upper - lower + 1\n  non_negative_count: count >= 0\n  index_set_has_same_count: valid_index_set\n-- Internal discussion haven't reached an agreement on this invariant\n--  index_set_has_same_bounds: ((index_set.lower = lower) and\n--        (index_set.upper = lower + count - 1))\n\nend\n"});
__eiffel_builtin.push({"filename":"bag.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: bag, access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BAG [G] inherit\n\n  COLLECTION [G]\n    redefine\n      extend\n    end\n\nfeature -- Measurement\n\n  occurrences (v: G): INTEGER\n      -- Number of times `v' appears in structure\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    deferred\n    ensure\n      non_negative_occurrences: Result >= 0\n    end\n\nfeature -- Element change\n\n  extend (v: G)\n      -- Add a new occurrence of `v'.\n    deferred\n    ensure then\n        -- Commented due to the expensive nature of the check when inserting a new item\n        -- in a containers with many items.\n      -- one_more_occurrence: occurrences (v) = old (occurrences (v)) + 1\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"boolean.e","content":"note\n  description: \"Truth values, with the boolean operations\"\n  external_name: \"System.Boolean\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class BOOLEAN\n\ninherit\n  BOOLEAN_REF\n    redefine\n      conjuncted,\n      conjuncted_semistrict,\n      disjuncted,\n      disjuncted_semistrict,\n      disjuncted_exclusive,\n      implication,\n      negated\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({BOOLEAN_REF})\n\nfeature -- Basic operations\n\n  conjuncted alias \"and\" (other: BOOLEAN): BOOLEAN\n      -- Boolean conjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  conjuncted_semistrict alias \"and then\" (other: BOOLEAN): BOOLEAN\n      -- Boolean semi-strict conjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  implication alias \"implies\" (other: BOOLEAN): BOOLEAN\n      -- Boolean implication of `other'\n      -- (semi-strict)\n    external\n      \"built_in\"\n    end\n\n  negated alias \"not\": BOOLEAN\n      -- Negation\n    external\n      \"built_in\"\n    end\n\n  disjuncted alias \"or\" (other: BOOLEAN): BOOLEAN\n      -- Boolean disjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  disjuncted_semistrict alias \"or else\" (other: BOOLEAN): BOOLEAN\n      -- Boolean semi-strict disjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  disjuncted_exclusive alias \"xor\" (other: BOOLEAN): BOOLEAN\n      -- Boolean exclusive or with `other'\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"boolean_ref.e","content":"note\n  description: \"References to objects containing a boolean value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass BOOLEAN_REF inherit\n\n  HASHABLE\n    redefine\n      out\n    end\n\nfeature -- Access\n\n  item: BOOLEAN\n      -- Boolean value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      if item then\n        Result := 1\n      end\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: BOOLEAN_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: BOOLEAN_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n      same_item: Result.item = item\n    end\n\n  to_integer: INTEGER\n      -- 1 if `True'\n      -- 0 if `False'\n    do\n      if item then\n        Result := 1\n      end\n    ensure\n      not_item_implies_zero: not item implies Result = 0\n      item_implies_one: item implies Result = 1\n    end\n\nfeature -- Element change\n\n  set_item (b: BOOLEAN)\n      -- Make `b' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  conjuncted alias \"and\" (other: like Current): BOOLEAN\n      -- Boolean conjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item and other.item\n    ensure\n      de_morgan: Result = not (not Current or not other)\n      commutative: Result = (other and Current)\n      consistent_with_semi_strict: Result implies (Current and then other)\n    end\n\n  conjuncted_semistrict alias \"and then\" (other: like Current): BOOLEAN\n      -- Boolean semi-strict conjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item and then other.item\n    ensure\n      de_morgan: Result = not (not Current or else not other)\n    end\n\n  implication alias \"implies\" (other: like Current): BOOLEAN\n      -- Boolean implication of `other'\n      -- (semi-strict)\n    require\n      other_exists: other /= Void\n    do\n      Result := item implies other.item\n    ensure\n      definition: Result = (not Current or else other)\n    end\n\n  negated alias \"not\": BOOLEAN\n      -- Negation\n    do\n      Result := not item\n    end\n\n  disjuncted alias \"or\" (other: like Current): BOOLEAN\n      -- Boolean disjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item or other.item\n    ensure\n      de_morgan: Result = not (not Current and not other)\n      commutative: Result = (other or Current)\n      consistent_with_semi_strict: Result implies (Current or else other)\n    end\n\n  disjuncted_semistrict alias \"or else\" (other: like Current): BOOLEAN\n      -- Boolean semi-strict disjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item or else other.item\n    ensure\n      de_morgan: Result = not (not Current and then not other)\n    end\n\n  disjuncted_exclusive alias \"xor\" (other: like Current): BOOLEAN\n      -- Boolean exclusive or with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item xor other.item\n    ensure\n      definition: Result = ((Current or other) and not (Current and other))\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of boolean\n    do\n      Result := \"False\"\n      if item then\n        Result := \"True\"\n      end\n    end\n\ninvariant\n  involutive_negation: (not (not Current)).item = item\n  non_contradiction: not ((not Current) and Current)\n  completeness: (not Current) or Current\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"bounded.e","content":"note\n  description: \"Bounded data structures, with a notion of capacity.\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: bounded, storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BOUNDED [G] inherit\n\n  FINITE [G]\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Number of items that may be stored\n    deferred\n    ensure\n      capacity_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  full: BOOLEAN\n      -- Is structure full?\n    do\n      Result := (count = capacity)\n    end\n\n  resizable: BOOLEAN\n      -- May `capacity' be changed?\n    deferred\n    end\n\ninvariant\n\n  valid_count: count <= capacity\n  full_definition: full = (count = capacity)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"box.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BOX [G] inherit\n\n  CONTAINER [G]\n\nfeature -- Status report\n\n  full: BOOLEAN\n      -- Is structure filled to capacity?\n    deferred\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"character_32.e","content":"note\n  description: \"Unicode characters, with comparison operations\"\n  assembly: \"mscorlib\"\n  external_name: \"System.UInt32\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class\n  CHARACTER_32\n\ninherit\n  CHARACTER_32_REF\n    redefine\n      code,\n      natural_32_code,\n      to_character_8\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({CHARACTER_32_REF})\n\nfeature -- Access\n\n  code: INTEGER\n      -- Associated integer value\n    external\n      \"built_in\"\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  to_character_8: CHARACTER_8\n      -- Convert current to CHARACTER_8\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"character_32_ref.e","content":"note\n  description: \"References to objects containing a unicode character value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  CHARACTER_32_REF\n\ninherit\n  COMPARABLE\n    redefine\n      is_equal, out\n    end\n\n  HASHABLE\n    redefine\n      is_equal, out\n    end\n\nfeature -- Access\n\n  item: CHARACTER_32\n      -- Unicode character value\n    external\n      \"built_in\"\n    end\n\n  code: INTEGER\n      -- Associated integer value\n    obsolete\n      \"Use `natural_32_code' instead.\"\n    do\n      Result := natural_32_code.as_integer_32\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := natural_32_code.hash_code\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    do\n      Result := item.natural_32_code\n    ensure\n      natural_32_code_in_range: Result >= min_value and Result <= max_value\n    end\n\n  min_value: NATURAL_32 = 0\n  max_value: NATURAL_32 = 4294967295\n      -- Bounds for integer representation of CHARACTER_32\n\n  max_unicode_value: NATURAL_32 = 0x10FFFD\n      -- Maximum Unicode characters.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current character?\n    do\n      Result := natural_32_code < other.natural_32_code\n    ensure then\n      definition: Result = (natural_32_code < other.natural_32_code)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Basic routines\n\n  plus alias \"+\" (incr: NATURAL_32): CHARACTER_32\n      -- Add `incr' to the code of `item'.\n    require\n      valid_increment: (item.natural_32_code.to_natural_64 + incr).is_valid_character_32_code\n    do\n      Result := (item.natural_32_code + incr).to_character_32\n    ensure\n      valid_result: Result |-| item = incr\n    end\n\n  minus alias \"-\" (decr: NATURAL_32): CHARACTER_32\n      -- Subtract `decr' from the code of `item'.\n    require\n      valid_decrement: (item.natural_32_code.to_integer_64 - decr).is_valid_character_32_code\n    do\n      Result := (item.natural_32_code - decr).to_character_32\n    ensure\n      valid_result: item |-| Result = decr\n    end\n\n  difference alias \"|-|\" (other: CHARACTER_32): INTEGER_64\n      -- Difference between the codes of `item' and `other'.\n    do\n      Result := item.natural_32_code.to_integer_64 - other.natural_32_code.to_integer_64\n    ensure\n      valid_non_negative_result: Result >= 0 implies ((other + Result.to_natural_32) = item)\n      valid_negative_result: Result < 0 implies (other = (item + Result.to_natural_32))\n    end\n\n  next: CHARACTER_32\n      -- Next character.\n    require\n      valid_character: (item.natural_32_code.to_natural_64 + 1).is_valid_character_32_code\n    do\n      Result := item + 1\n    ensure\n      valid_result: Result |-| item = 1\n    end\n\n  previous: CHARACTER_32\n      -- Previous character.\n    require\n      valid_character: (item.natural_32_code.to_natural_64 - 1).is_valid_character_32_code\n    do\n      Result := item - 1\n    ensure\n      valid_result: Result |-| item = -1\n    end\n\nfeature -- Element change\n\n  set_item (c: CHARACTER_32)\n      -- Make `c' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of wide character.\n    do\n      create Result.make (6)\n      Result.append_character ('U')\n      Result.append_character ('+')\n      Result.append_string (natural_32_code.to_hex_string)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: CHARACTER_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: CHARACTER_32_REF\n      -- Associated reference of Current.\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  to_character_8: CHARACTER_8\n      -- Convert current to CHARACTER_8.\n    require\n      is_character_8_compatible: is_character_8\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Convert current to CHARACTER_32.\n    do\n      Result := item\n    end\n\n  as_upper, upper: CHARACTER_32\n      -- Uppercase value of `item'.\n      -- Returns `item' if not `is_lower'.\n    do\n      Result := properties.to_upper (item)\n    end\n\n  as_lower, lower: CHARACTER_32\n      -- Lowercase value of `item'.\n      -- Returns `item' if not `is_upper'.\n    do\n      Result := properties.to_lower (item)\n    end\n\nfeature -- Status report\n\n  is_character_8: BOOLEAN\n      -- Can current be represented on a CHARACTER_8?\n    do\n      Result := natural_32_code <= {CHARACTER_8}.max_value.to_natural_32\n    end\n\n  is_alpha: BOOLEAN\n      -- Is `item' alphabetic?\n      -- Alphabetic is `is_upper' or `is_lower'.\n    do\n      Result := properties.is_alpha (item)\n    end\n\n  is_upper: BOOLEAN\n      -- Is `item' uppercase?\n    do\n      Result := properties.is_upper (item)\n    end\n\n  is_lower: BOOLEAN\n      -- Is `item' lowercase?\n    do\n      Result := properties.is_lower (item)\n    end\n\n  is_digit: BOOLEAN\n      -- Is `item' a decimal digit as expected for ASCII characters?\n      -- A digit is one of 0123456789.\n    do\n      Result := '0' <= item and item <= '9'\n    end\n\n  is_unicode_digit: BOOLEAN\n      -- Is `item' a decimal digit as expected for Unicode characters?\n    do\n      Result := properties.is_digit (item)\n    end\n\n  is_hexa_digit: BOOLEAN\n      -- Is `item' a hexadecimal digit as expected for ASCII characters?\n      -- A digit is one of 0123456789ABCDEFabcedf.\n    do\n      Result := properties.is_hexa_digit (item)\n    end\n\n  is_space: BOOLEAN\n      -- Is `item' a white space?\n    do\n      Result := properties.is_space (item)\n    end\n\n  is_punctuation: BOOLEAN\n      -- Is `item' a punctuation?\n    do\n      Result := properties.is_punctuation (item)\n    end\n\n  is_alpha_numeric: BOOLEAN\n      -- Is `item' alphabetic or a digit?\n    do\n      Result := properties.is_alpha (item) or properties.is_digit (item)\n    end\n\n  is_control: BOOLEAN\n      -- Is `item' a control character?\n    do\n      Result := properties.is_control (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  properties: CHARACTER_PROPERTY\n      -- Property for Unicode characters.\n    once\n      create Result.make\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"character_8.e","content":"note\n  description: \"Characters, with comparison operations and an ASCII code\"\n  external_name: \"System.Char\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class\n  CHARACTER_8\n\ninherit\n  CHARACTER_8_REF\n    redefine\n      code,\n      to_character_32\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({CHARACTER_8_REF}),\n  to_character_32: {CHARACTER_32}\n\nfeature -- Access\n\n  code: INTEGER\n      -- Associated integer value\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"character_8_ref.e","content":"note\n  description: \"References to objects containing a character value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass CHARACTER_8_REF inherit\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      out, is_equal\n    end\n\nfeature -- Access\n\n  item: CHARACTER_8\n      -- Character value\n    external\n      \"built_in\"\n    end\n\n  code: INTEGER\n      -- Associated integer value\n    obsolete\n      \"Use `natural_32_code' instead.\"\n    do\n      Result := item.code\n    ensure\n      code_non_negatif: Result >= 0\n      code_in_range: Result >= min_value and Result <= max_value\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    do\n      Result := item.code.to_natural_32\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := natural_32_code.hash_code\n    end\n\n  min_value: INTEGER = 0\n  max_value: INTEGER = 255\n  max_ascii_value: INTEGER = 127\n      -- Bounds for integer representation of characters (ASCII)\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current character?\n    do\n      Result := natural_32_code < other.natural_32_code\n    ensure then\n      definition: Result = (natural_32_code < other.natural_32_code)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Basic routines\n\n  plus alias \"+\" (incr: INTEGER): CHARACTER_8\n      -- Add `incr' to the code of `item'\n    require\n      valid_increment: (item.code + incr).is_valid_character_8_code\n    do\n      Result := (item.code + incr).to_character_8\n    ensure\n      valid_result: Result |-| item = incr\n    end\n\n  minus alias \"-\" (decr: INTEGER): CHARACTER_8\n      -- Subtract `decr' from the code of `item'\n    require\n      valid_decrement: (item.code - decr).is_valid_character_8_code\n    do\n      Result := (item.code - decr).to_character_8\n    ensure\n      valid_result: item |-| Result = decr\n    end\n\n  difference alias \"|-|\" (other: CHARACTER_8): INTEGER\n      -- Difference between the codes of `item' and `other'\n    do\n      Result := item.code - other.code\n    ensure\n      valid_result: other + Result = item\n    end\n\n  next: CHARACTER_8\n      -- Next character\n    require\n      valid_character: (item.code + 1).is_valid_character_8_code\n    do\n      Result := item + 1\n    ensure\n      valid_result: Result |-| item = 1\n    end\n\n  previous: CHARACTER_8\n      -- Previous character\n    require\n      valid_character: (item.code - 1).is_valid_character_8_code\n    do\n      Result := item - 1\n    ensure\n      valid_result: Result |-| item = -1\n    end\n\nfeature -- Element change\n\n  set_item (c: CHARACTER_8)\n      -- Make `c' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of character\n    do\n      create Result.make (1)\n      Result.append_character (item)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: CHARACTER_8_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: CHARACTER_8_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version\n    do\n      Result := item\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version\n    do\n      Result := item.to_character_32\n    end\n\n  as_upper, upper: CHARACTER_8\n      -- Uppercase value of `item'\n      -- Returns `item' if not `is_lower'\n    do\n      if is_lower then\n        Result := (item.code - ('a').code + ('A').code).to_character_8\n      else\n        Result := item\n      end\n    end\n\n  as_lower, lower: CHARACTER_8\n      -- Lowercase value of `item'\n      -- Returns `item' if not `is_upper'\n    do\n      if is_upper then\n        Result := (item.code - ('A').code + ('a').code).to_character_8\n      else\n        Result := item\n      end\n    end\n\nfeature -- Status report\n\n  is_alpha: BOOLEAN\n      -- Is `item' alphabetic?\n      -- Alphabetic is `is_upper' or `is_lower'\n    do\n      Result := (character_types (item.code) & (is_upper_flag | is_lower_flag)) > 0\n    end\n\n  is_upper: BOOLEAN\n      -- Is `item' uppercase?\n    do\n      Result := (character_types (item.code) & is_upper_flag) > 0\n    end\n\n  is_lower: BOOLEAN\n      -- Is `item' lowercase?\n    do\n      Result := (character_types (item.code) & is_lower_flag) > 0\n    end\n\n  is_digit: BOOLEAN\n      -- Is `item' a digit?\n      -- A digit is one of 0123456789\n    do\n      Result := (character_types (item.code) & is_digit_flag) > 0\n    end\n\n  is_hexa_digit: BOOLEAN\n      -- Is `item' an hexadecimal digit?\n      -- A digit is one of 0123456789ABCDEFabcedf\n    do\n      Result := (character_types (item.code) & (is_hexa_digit_flag | is_digit_flag)) > 0\n    end\n\n  is_space: BOOLEAN\n      -- Is `item' a white space?\n    do\n      Result := (character_types (item.code) & is_white_space_flag) > 0\n    end\n\n  is_punctuation: BOOLEAN\n      -- Is `item' a punctuation?\n    do\n      Result := (character_types (item.code) & is_punctuation_flag) > 0\n    end\n\n  is_alpha_numeric: BOOLEAN\n      -- Is `item' alphabetic or a digit?\n    do\n      Result := (character_types (item.code) & (is_upper_flag | is_lower_flag | is_digit_flag)) > 0\n    end\n\n  is_printable: BOOLEAN\n      -- Is `item' a printable character including space?\n    do\n      Result := (character_types (item.code) &\n        (is_upper_flag | is_lower_flag | is_digit_flag | is_punctuation_flag | is_space_flag)) > 0\n    end\n\n  is_graph: BOOLEAN\n      -- Is `item' a printable character except space?\n    do\n      Result := (character_types (item.code) &\n        (is_upper_flag | is_lower_flag | is_digit_flag | is_punctuation_flag)) > 0\n    end\n\n  is_control: BOOLEAN\n      -- Is `item' a control character?\n    do\n      Result := (character_types (item.code) & is_control_flag) > 0\n    end\n\nfeature {NONE} -- Implementation\n\n  character_types (a_code: INTEGER): NATURAL_8\n      -- Associated type for character of code `a_code'\n    do\n        -- For character whose code is above 256, it is as if\n        -- we had no information about it.\n      if a_code < 256 then\n        Result := internal_character_types.item (a_code)\n      end\n    end\n\n  internal_character_types: SPECIAL [NATURAL_8]\n      -- Array which stores the various type for the ASCII characters\n    once\n      create Result.make_empty (256)\n      Result.extend (is_control_flag)             -- 0  null\n      Result.extend (is_control_flag)                         -- 1  start of heading\n      Result.extend (is_control_flag)                         -- 2  start of text\n      Result.extend (is_control_flag)                         -- 3  end of text\n      Result.extend (is_control_flag)                         -- 4  end of transmission\n      Result.extend (is_control_flag)                         -- 5  enquiry\n      Result.extend (is_control_flag)                         -- 6  acknowledge\n      Result.extend (is_control_flag)                         -- 7  bell\n      Result.extend (is_control_flag)                         -- 8  backspace\n      Result.extend (is_control_flag | is_white_space_flag)   -- 9  horizontal tab\n      Result.extend (is_control_flag | is_white_space_flag)   -- 10 NL line feed, new line\n      Result.extend (is_control_flag | is_white_space_flag)   -- 11 vertical tab\n      Result.extend (is_control_flag | is_white_space_flag)   -- 12 NP form feed, new page\n      Result.extend (is_control_flag | is_white_space_flag)   -- 13 carriage return=CR\n      Result.extend (is_control_flag)                         -- 14 shift out\n      Result.extend (is_control_flag)                         -- 15 shift in\n      Result.extend (is_control_flag)                         -- 16\n      Result.extend (is_control_flag)                         -- 17\n      Result.extend (is_control_flag)                         -- 18\n      Result.extend (is_control_flag)                         -- 19\n      Result.extend (is_control_flag)                         -- 20\n      Result.extend (is_control_flag)                         -- 21\n      Result.extend (is_control_flag)                         -- 22\n      Result.extend (is_control_flag)                         -- 23\n      Result.extend (is_control_flag)                         -- 24\n      Result.extend (is_control_flag)                         -- 25\n      Result.extend (is_control_flag)                         -- 26\n      Result.extend (is_control_flag)                         -- 27 Escape\n      Result.extend (is_control_flag)                         -- 28 file separator\n      Result.extend (is_control_flag)                         -- 29 group separator\n      Result.extend (is_control_flag)                         -- 30 record separator\n      Result.extend (is_control_flag)                         -- 31 unit separator\n      Result.extend (is_white_space_flag | is_space_flag)     -- 32 Space\n      Result.extend (is_punctuation_flag)                     -- 33 !\n      Result.extend (is_punctuation_flag)                     -- 34 \"\n      Result.extend (is_punctuation_flag)                     -- 35 #\n      Result.extend (is_punctuation_flag)                     -- 36 $\n      Result.extend (is_punctuation_flag)                     -- 37 %\n      Result.extend (is_punctuation_flag)                     -- 38 &\n      Result.extend (is_punctuation_flag)                     -- 39 '\n      Result.extend (is_punctuation_flag)                     -- 40 (\n      Result.extend (is_punctuation_flag)                     -- 41 )\n      Result.extend (is_punctuation_flag)                     -- 42 *\n      Result.extend (is_punctuation_flag)                     -- 43 +\n      Result.extend (is_punctuation_flag)                     -- 44 ,\n      Result.extend (is_punctuation_flag)                     -- 45 -\n      Result.extend (is_punctuation_flag)                     -- 46 .\n      Result.extend (is_punctuation_flag)                     -- 47 /\n      Result.extend (is_digit_flag)                           -- 48 0\n      Result.extend (is_digit_flag)                           -- 49 1\n      Result.extend (is_digit_flag)                           -- 50 2\n      Result.extend (is_digit_flag)                           -- 51 3\n      Result.extend (is_digit_flag)                           -- 52 4\n      Result.extend (is_digit_flag)                           -- 53 5\n      Result.extend (is_digit_flag)                           -- 54 6\n      Result.extend (is_digit_flag)                           -- 55 7\n      Result.extend (is_digit_flag)                           -- 56 8\n      Result.extend (is_digit_flag)                           -- 57 9\n      Result.extend (is_punctuation_flag)                     -- 58 :\n      Result.extend (is_punctuation_flag)                     -- 59 ;\n      Result.extend (is_punctuation_flag)                     -- 60 <\n      Result.extend (is_punctuation_flag)                     -- 61 =\n      Result.extend (is_punctuation_flag)                     -- 62 >\n      Result.extend (is_punctuation_flag)                     -- 63 ?\n      Result.extend (is_punctuation_flag)                     -- 64 @\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 65 A\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 66 B\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 67 C\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 68 D\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 69 E\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 70 F\n      Result.extend (is_upper_flag)                           -- 71 G\n      Result.extend (is_upper_flag)                           -- 72 H\n      Result.extend (is_upper_flag)                           -- 73 I\n      Result.extend (is_upper_flag)                           -- 74 J\n      Result.extend (is_upper_flag)                           -- 75 K\n      Result.extend (is_upper_flag)                           -- 76 L\n      Result.extend (is_upper_flag)                           -- 77 M\n      Result.extend (is_upper_flag)                           -- 78 N\n      Result.extend (is_upper_flag)                           -- 79 O\n      Result.extend (is_upper_flag)                           -- 80 P\n      Result.extend (is_upper_flag)                           -- 81 Q\n      Result.extend (is_upper_flag)                           -- 82 R\n      Result.extend (is_upper_flag)                           -- 83 S\n      Result.extend (is_upper_flag)                           -- 84 T\n      Result.extend (is_upper_flag)                           -- 85 U\n      Result.extend (is_upper_flag)                           -- 86 V\n      Result.extend (is_upper_flag)                           -- 87 W\n      Result.extend (is_upper_flag)                           -- 88 X\n      Result.extend (is_upper_flag)                           -- 89 Y\n      Result.extend (is_upper_flag)                           -- 90 Z\n      Result.extend (is_punctuation_flag)                     -- 91 [\n      Result.extend (is_punctuation_flag)                     -- 92 \\\n      Result.extend (is_punctuation_flag)                     -- 93 ]\n      Result.extend (is_punctuation_flag)                     -- 94 ^\n      Result.extend (is_punctuation_flag)                     -- 95 _\n      Result.extend (is_punctuation_flag)                     -- 96 `\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 97 a\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 98 b\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 99 c\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 100  d\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 101  e\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 102  f\n      Result.extend (is_lower_flag)                           -- 103  g\n      Result.extend (is_lower_flag)                           -- 104  h\n      Result.extend (is_lower_flag)                           -- 105  i\n      Result.extend (is_lower_flag)                           -- 106  j\n      Result.extend (is_lower_flag)                           -- 107  k\n      Result.extend (is_lower_flag)                           -- 108  l\n      Result.extend (is_lower_flag)                           -- 109  m\n      Result.extend (is_lower_flag)                           -- 110  n\n      Result.extend (is_lower_flag)                           -- 111  o\n      Result.extend (is_lower_flag)                           -- 112  p\n      Result.extend (is_lower_flag)                           -- 113  q\n      Result.extend (is_lower_flag)                           -- 114  r\n      Result.extend (is_lower_flag)                           -- 115  s\n      Result.extend (is_lower_flag)                           -- 116  t\n      Result.extend (is_lower_flag)                           -- 117  u\n      Result.extend (is_lower_flag)                           -- 118  v\n      Result.extend (is_lower_flag)                           -- 119  w\n      Result.extend (is_lower_flag)                           -- 120  x\n      Result.extend (is_lower_flag)                           -- 121  y\n      Result.extend (is_lower_flag)                           -- 122  z\n      Result.extend (is_punctuation_flag)                     -- 123  {\n      Result.extend (is_punctuation_flag)                     -- 124  |\n      Result.extend (is_punctuation_flag)                     -- 125  }\n      Result.extend (is_punctuation_flag)                     -- 126  ~\n      Result.extend (is_control_flag)                         -- 127  DEL\n      Result.fill_with (0, 128, 255)              -- extended ASCII\n    ensure\n      internal_character_types_not_void: Result /= Void\n    end\n\n  is_upper_flag: NATURAL_8 = 0x01\n\n  is_lower_flag: NATURAL_8 = 0x02\n\n  is_digit_flag: NATURAL_8 = 0x04\n\n  is_white_space_flag: NATURAL_8 = 0x08\n\n  is_punctuation_flag: NATURAL_8 = 0x10\n\n  is_control_flag: NATURAL_8 = 0x20\n\n  is_hexa_digit_flag: NATURAL_8 = 0x40\n\n  is_space_flag: NATURAL_8 = 0x80;\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"collection.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: collection, access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class COLLECTION [G] inherit\n\n  CONTAINER [G]\n\nfeature -- Status report\n\n  extendible: BOOLEAN\n      -- May new items be added?\n    deferred\n    end\n\n  prunable: BOOLEAN\n      -- May items be removed?\n    deferred\n    end\n\n  is_inserted (v: G): BOOLEAN\n      -- Has `v' been inserted by the most recent insertion?\n      -- (By default, the value returned is equivalent to calling\n      -- `has (v)'. However, descendants might be able to provide more\n      -- efficient implementations.)\n    do\n      Result := has (v)\n    end\n\nfeature -- Element change\n\n  put, extend (v: G)\n      -- Ensure that structure includes `v'.\n    require\n      extendible: extendible\n    deferred\n    ensure\n      item_inserted: is_inserted (v)\n    end\n\n  fill (other: CONTAINER [G])\n      -- Fill with as many items of `other' as possible.\n      -- The representations of `other' and current structure\n      -- need not be the same.\n    require\n      other_not_void: other /= Void\n      extendible: extendible\n    local\n      lin_rep: LINEAR [G]\n    do\n      lin_rep := other.linear_representation\n      from\n        lin_rep.start\n      until\n        not extendible or else lin_rep.off\n      loop\n        extend (lin_rep.item)\n        lin_rep.forth\n      end\n    end\n\nfeature -- Removal\n\n  prune (v: G)\n      -- Remove one occurrence of `v' if any.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    require\n      prunable: prunable\n    deferred\n    end\n\n  prune_all (v: G)\n      -- Remove all occurrences of `v'.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n      --|Default implementation, usually inefficient.\n    require\n      prunable: prunable\n    do\n      from\n      until not has (v) loop\n        prune (v)\n      end\n    ensure\n      no_more_occurrences: not has (v)\n    end\n\n  wipe_out\n      -- Remove all items.\n    require\n      prunable: prunable\n    deferred\n    ensure\n      wiped_out: is_empty\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"comparable.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class COMPARABLE inherit\n\n  PART_COMPARABLE\n    redefine\n      is_less, is_less_equal,\n      is_greater, is_greater_equal,\n      is_equal\n    end\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current object less than `other'?\n    deferred\n    ensure then\n      asymmetric: Result implies not (other < Current)\n    end\n\n  is_less_equal alias \"<=\" (other: like Current): BOOLEAN\n      -- Is current object less than or equal to `other'?\n    do\n      Result := not (other < Current)\n    ensure then\n      definition: Result = ((Current < other) or (Current ~ other))\n    end\n\n  is_greater alias \">\" (other: like Current): BOOLEAN\n      -- Is current object greater than `other'?\n    do\n      Result := other < Current\n    ensure then\n      definition: Result = (other < Current)\n    end\n\n  is_greater_equal alias \">=\" (other: like Current): BOOLEAN\n      -- Is current object greater than or equal to `other'?\n    do\n      Result := not (Current < other)\n    ensure then\n      definition: Result = (other <= Current)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := (not (Current < other) and not (other < Current))\n    ensure then\n      trichotomy: Result = (not (Current < other) and not (other < Current))\n    end\n\n  three_way_comparison (other: like Current): INTEGER\n      -- If current object equal to `other', 0;\n      -- if smaller, -1; if greater, 1\n    require\n      other_exists: other /= Void\n    do\n      if Current < other then\n        Result := -1\n      elseif other < Current then\n        Result := 1\n      end\n    ensure\n      equal_zero: (Result = 0) = (Current ~ other)\n      smaller_negative: (Result = -1) = (Current < other)\n      greater_positive: (Result = 1) = (Current > other)\n    end\n\n  max (other: like Current): like Current\n      -- The greater of current object and `other'\n    require\n      other_exists: other /= Void\n    do\n      if Current >= other then\n        Result := Current\n      else\n        Result := other\n      end\n    ensure\n      current_if_not_smaller: Current >= other implies Result = Current\n      other_if_smaller: Current < other implies Result = other\n    end\n\n  min (other: like Current): like Current\n      -- The smaller of current object and `other'\n    require\n      other_exists: other /= Void\n    do\n      if Current <= other then\n        Result := Current\n      else\n        Result := other\n      end\n    ensure\n      current_if_not_greater: Current <= other implies Result = Current\n      other_if_greater: Current > other implies Result = other\n    end\n\ninvariant\n\n  irreflexive_comparison: not (Current < Current)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"container.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class\n  CONTAINER [G]\n\nfeature -- Access\n\n  has (v: G): BOOLEAN\n      -- Does structure include `v'?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    deferred\n    ensure\n      not_found_in_empty: Result implies not is_empty\n    end\n\nfeature -- Status report\n\n  is_empty: BOOLEAN\n      -- Is there no element?\n    deferred\n    end\n\n  empty: BOOLEAN\n      -- Is there no element?\n    obsolete\n      \"ELKS 2000: Use `is_empty' instead\"\n    do\n      Result := is_empty\n    end\n\n  object_comparison: BOOLEAN\n      -- Must search operations use `equal' rather than `='\n      -- for comparing references? (Default: no, use `='.)\n\n  changeable_comparison_criterion: BOOLEAN\n      -- May `object_comparison' be changed?\n      -- (Answer: yes by default.)\n    do\n      Result := True\n    end\n\nfeature -- Status setting\n\n  compare_objects\n      -- Ensure that future search operations will use `equal'\n      -- rather than `=' for comparing references.\n    require\n      changeable_comparison_criterion: changeable_comparison_criterion\n    do\n      object_comparison := True\n    ensure\n      object_comparison\n    end\n\n  compare_references\n      -- Ensure that future search operations will use `='\n      -- rather than `equal' for comparing references.\n    require\n      changeable_comparison_criterion: changeable_comparison_criterion\n    do\n      object_comparison := False\n    ensure\n      reference_comparison: not object_comparison\n    end\n\nfeature -- Conversion\n\n  linear_representation: LINEAR [G]\n      -- Representation as a linear structure\n    deferred\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"cycle.e","content":"class A1\ninherit\n  B1\nend\n\nclass B1\ninherit\n  A1\nend\n"});
__eiffel_builtin.push({"filename":"debug_output.e","content":"note\n  description: \"Objects that provide an output in debugger\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-17 11:46:15 -0800 (Thu, 17 Jan 2013) $\"\n  revision: \"$Revision: 92124 $\"\n\ndeferred class\n  DEBUG_OUTPUT\n\nfeature -- Status report\n\n  debug_output: READABLE_STRING_GENERAL\n      -- String that should be displayed in debugger to represent `Current'.\n    deferred\n    ensure\n      result_not_void: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"finite.e","content":"note\n  description: \"Structures with a finite item count\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: finite, storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class FINITE [G] inherit\n\n  BOX [G]\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Number of items\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  is_empty: BOOLEAN\n      -- Is structure empty?\n    do\n      Result := (count = 0)\n    end\n\ninvariant\n  empty_definition: is_empty = (count = 0)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"hashable.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  HASHABLE\n\nfeature -- Access\n\n  hash_code: INTEGER\n      -- Hash code value\n    deferred\n    ensure\n      good_hash_value: Result >= 0\n    end\n\nfeature -- Status report\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True by default.)\n    do\n      Result := True\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"indexable.e","content":"note\n  description: \"Tables whose keys are integers in a contiguous interval\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: indexable, access;\n  access: index, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class INDEXABLE [G, H -> INTEGER] inherit\n\n  TABLE [G, INTEGER]\n    rename\n      valid_key as valid_index,\n      force as put\n    end\n\n  READABLE_INDEXABLE [G]\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n\n\n\n"});
__eiffel_builtin.push({"filename":"integer.e","content":"expanded class INTEGER_32 inherit\n\n  INTEGER_32_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      opposite,\n      identity,\n      asa_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real,\n      to_double,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\n-- convert\n--   make_from_reference ({INTEGER_32_REF}),\n--   to_real: {REAL_32},\n--   to_double: {REAL_64},\n--   to_integer_64: {INTEGER_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: INTEGER_32): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: INTEGER_32): INTEGER_32\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: INTEGER_32): INTEGER_32\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: INTEGER_32): INTEGER_32\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: INTEGER_32): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": INTEGER_32\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": INTEGER_32\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: INTEGER_32): INTEGER_32\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: INTEGER_32): INTEGER_32\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: INTEGER_32): INTEGER_32\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: INTEGER_32): INTEGER_32\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: INTEGER_32): INTEGER_32\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: INTEGER_32\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): INTEGER_32\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): INTEGER_32\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_32_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 32 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  INTEGER_32_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\"\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: INTEGER_32\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Clear sign bit.\n      Result := item & 0x7FFFFFFF\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: INTEGER_32 = -2147483648\n  Max_value: INTEGER_32 = 2147483647\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: INTEGER_32)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item >= 0\n    ensure\n      in_bounds: Result = (item >= 0 and\n        item.to_natural_32 >= {CHARACTER_32}.Min_value and\n        item.to_natural_32 <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  abs: INTEGER_32\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: INTEGER_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: INTEGER_32_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_small: item >= {INTEGER_8}.Min_value\n      not_too_big: item <= {INTEGER_8}.Max_value\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_small: item >= {INTEGER_16}.Min_value\n      not_too_big: item <= {INTEGER_16}.Max_value\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer, frozen to_integer_32: INTEGER_32\n      -- Return `item'.\n    do\n      Result := item\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_double\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_32_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_32_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER_32): INTEGER\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_32: n <= 32\n      n_greater_or_equal_to_minus_32: n >= -32\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      Result := item & (1 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): INTEGER_32\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      if b then\n        Result := item | (1 |<< n)\n      else\n        Result := item & (1 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: INTEGER_32): INTEGER_32\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (11)\n      Result.append_integer (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item >= 0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n\n  sign_times_abs: sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"iterable.e","content":"note\n  description: \"Structure that can be iterated over using `across...loop...end'.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  ITERABLE [G]\n\nfeature -- Access\n\n  new_cursor: ITERATION_CURSOR [G]\n      -- Fresh cursor associated with current structure\n    deferred\n    ensure\n      result_attached: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"mismatch_corrector.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  MISMATCH_CORRECTOR\n\nfeature -- Correction\n\n  correct_mismatch\n      -- Attempt to correct object mismatch using `mismatch_information'.\n    local\n      l_msg: STRING\n      l_exc: EXCEPTIONS\n    do\n        -- If it is not redefined then we raise an exception.\n      create l_msg.make_from_string (\"Mismatch: \")\n      create l_exc\n      l_msg.append (generating_type)\n      l_exc.raise_retrieval_exception (l_msg)\n    end\n\n  mismatch_information: MISMATCH_INFORMATION\n      -- Original attribute values of mismatched object\n    once\n      create Result\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_32.e","content":"note\n  description: \"Unsigned integer values coded on 32 bits.\"\n  external_name: \"System.UInt32\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class NATURAL_32 inherit\n\n  NATURAL_32_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_32_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64},\n  to_integer_64: {INTEGER_64},\n  to_natural_64: {NATURAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_32): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_32): NATURAL_32\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_32): NATURAL_32\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_32): NATURAL_32\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_32): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_32\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_32): NATURAL_32\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_32): NATURAL_32\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Returns corresponding CHARACTER_32 to `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_32): NATURAL_32\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_32): NATURAL_32\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_32): NATURAL_32\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_32\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_32_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 32 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_32_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_32\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Clear sign bit.\n      Result := (item & 0x7FFFFFFF).to_integer_32\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_32 = 0\n  Max_value: NATURAL_32 = 4294967295\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_32)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item <= {CHARACTER_8}.Max_value.to_natural_32\n    ensure\n      in_bounds: Result = (\n        item >= {CHARACTER_8}.Min_value.to_natural_32 and\n        item <= {CHARACTER_8}.Max_value.to_natural_32)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: NATURAL_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_32_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_32\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_big: item <= {INTEGER_16}.Max_value.to_natural_32\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    require\n      not_too_big: item <= {INTEGER_32}.Max_value.to_natural_32\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i: INTEGER\n      a_digit, val: NATURAL_32\n    do\n      from\n        i := (create {PLATFORM}).Integer_32_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_32_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item.to_integer_32\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Returns corresponding CHARACTER_32 to `item' value.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_32: n <= 32\n      n_greater_or_equal_to_minus_32: n >= -32\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      Result := item & ((1).to_natural_32 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_32\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      if b then\n        Result := item | ((1).to_natural_32 |<< n)\n      else\n        Result := item & ((1).to_natural_32 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_32): NATURAL_32\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (20)\n      Result.append_natural_32 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_8.e","content":"note\n  description: \"Integer values coded on 8 bits\"\n  external_name: \"System.Byte\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class NATURAL_8 inherit\n\n  NATURAL_8_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_8_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64},\n  to_integer_16: {INTEGER_16},\n  to_integer_32: {INTEGER_32},\n  to_integer_64: {INTEGER_64},\n  to_natural_16: {NATURAL_16},\n  to_natural_32: {NATURAL_32},\n  to_natural_64: {NATURAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_8): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_8): NATURAL_8\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_8): NATURAL_8\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_8): NATURAL_8\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_8): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_8\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_8): NATURAL_8\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_8): NATURAL_8\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_8): NATURAL_8\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_8): NATURAL_8\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_8): NATURAL_8\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_8\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"natural_8_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 8 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_8_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_8\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead.\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_8 = 0\n  Max_value: NATURAL_8 = 255\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_8)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: NATURAL_8_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: V /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_8_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_8\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := 2\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 15)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      result_not_void: Result /= Void\n      result_valid_count: Result.count = 2\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      Result := tmp.to_hex_character\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_8: n <= 8\n      n_greater_or_equal_to_minus_8: n >= -8\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      Result := item & ((1).to_natural_8 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_8\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      if b then\n        Result := item | ((1).to_natural_8 |<< n)\n      else\n        Result := item & ((1).to_natural_8 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_8): NATURAL_8\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (3)\n      Result.append_natural_8 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"numeric.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n\n  NUMERIC\n\ninherit\n  DEBUG_OUTPUT\n    rename\n      debug_output as out\n    end\n\nfeature -- Access\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    obsolete\n      \"[2008_04_01] Will be removed since not used.\"\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other' (commutative).\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n      commutative: Result ~ (other + Current)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  quotient alias \"/\" (other: like Current): like Current\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\ninvariant\n\n--  neutral_addition: equal (Current + zero, Current);\n--  self_subtraction: equal (Current - Current, zero);\n--  neutral_multiplication: equal (Current * one, Current);\n--  self_division: divisible (Current) implies equal (Current / Current, one)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"part_comparable.e","content":"note\n  description: \"Objects that may be compared according to a partial order relation\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  PART_COMPARABLE\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current object less than `other'?\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\n  is_less_equal alias \"<=\" (other: like Current): BOOLEAN\n      -- Is current object less than or equal to `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := (Current < other) or (Current ~ other)\n    end\n\n  is_greater alias \">\" (other: like Current): BOOLEAN\n      -- Is current object greater than `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := other < Current\n    end\n\n  is_greater_equal alias \">=\" (other: like Current): BOOLEAN\n      -- Is current object greater than or equal to `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := (other < Current) or (Current ~ other)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_indexable.e","content":"note\n  description: \"Tables whose keys are integers in a contiguous interval\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: indexable, access;\n  access: index, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class READABLE_INDEXABLE [G]\n\ninherit\n  ITERABLE [G]\n\nfeature -- Access\n\n  item alias \"[]\" (i: INTEGER): G\n      -- Entry at position `i'\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  new_cursor: INDEXABLE_ITERATION_CURSOR [G]\n      -- <Precursor>\n    do\n      create Result.make (Current)\n      Result.start\n    end\n\nfeature -- Measurement\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    deferred\n    ensure\n      not_void: Result /= Void\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' a valid index?\n    deferred\n    ensure\n      only_if_in_index_set:\n        Result implies ((i >= index_set.lower) and (i <= index_set.upper))\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n\n\n\n"});
__eiffel_builtin.push({"filename":"readable_string_32.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-14 22:21:19 -0700 (Wed, 14 May 2014) $\"\n  revision: \"$Revision: 95060 $\"\n\ndeferred class\n  READABLE_STRING_32\n\ninherit\n  READABLE_STRING_GENERAL\n    rename\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general\n    redefine\n      copy, is_equal, out, has, index_of, last_index_of, occurrences\n    end\n\n  READABLE_INDEXABLE [CHARACTER_32]\n    redefine\n      copy, is_equal, out\n    end\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  as_readable_string_8: {READABLE_STRING_8},\n  as_string_8: {STRING_8},\n  as_string_32: {STRING_32}\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    do\n      count := 0\n      internal_hash_code := 0\n      create area.make_filled ('%/000/', n + 1)\n    end\n\n  make_filled (c: CHARACTER_32; n: INTEGER)\n      -- Create string of length `n' filled with `c'.\n    require\n      valid_count: n >= 0\n    do\n      make (n)\n      fill_character (c)\n    ensure\n      count_set: count = n\n      area_allocated: capacity >= n\n      filled: occurrences (c) = count\n    end\n\n  make_from_string (s: READABLE_STRING_32)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    do\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n      if Current /= s then\n        create area.make_empty (count + 1)\n        area.copy_data (s.area, s.area_lower, 0, count + 1)\n      end\n    ensure\n      not_shared_implementation: Current /= s implies not shared_with (s)\n      initialized: same_string (s)\n    end\n\n  make_from_string_general (s: READABLE_STRING_GENERAL)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    deferred\n    ensure\n      not_shared_implementation: Current /= s\n      initialized: same_string_general (s)\n    end\n\n  make_from_c (c_string: POINTER)\n      -- Initialize from contents of `c_string',\n      -- a string created by some C function\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n      l_count := c_string_provider.count\n      create area.make_filled ('%/000/', l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into_character_32_area (area, 1, l_count)\n    end\n\n  make_from_c_pointer (c_string: POINTER)\n      -- Create new instance from contents of `c_string',\n      -- a string created by some C function\n    obsolete\n      \"Use `make_from_c'.\"\n    require\n      c_string_exists: c_string /= default_pointer\n    do\n      make_from_c (c_string)\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    deferred\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_32\n      -- Character at position `i'\n    deferred\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'\n    obsolete\n      \"Due to potential truncation it is recommended to use `code (i)' instead.\"\n    require\n      index_small_enough: i <= count\n      index_large_enough: i > 0\n    deferred\n    end\n\n  shared_with (other: READABLE_STRING_32): BOOLEAN\n      -- Does string share the text of `other'?\n    do\n      Result := (other /= Void) and then (area = other.area)\n    end\n\n  index_of (c: CHARACTER_32; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    local\n      a: like area\n      i, nb, l_lower_area: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          l_lower_area := area_lower\n          i := start_index - 1 + l_lower_area\n          nb := nb + l_lower_area\n          a := area\n        until\n          i = nb or else a.item (i) = c\n        loop\n          i := i + 1\n        end\n        if i < nb then\n            -- We add +1 due to the area starting at 0 and not at 1\n            -- and substract `area_lower'\n          Result := i + 1 - l_lower_area\n        end\n      end\n    end\n\n  last_index_of (c: CHARACTER_32; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c',\n      -- 0 if none.\n    local\n      a: like area\n      i, l_lower_area: INTEGER\n    do\n      from\n        l_lower_area := area_lower\n        i := start_index_from_end - 1 + l_lower_area\n        a := area\n      until\n        i < l_lower_area or else a.item (i) = c\n      loop\n        i := i - 1\n      end\n        -- We add +1 due to the area starting at 0 and not at 1.\n      Result := i + 1 - l_lower_area\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_pos, end_pos)\n    end\n\n  string: STRING_32\n      -- New STRING_32 having same character sequence as `Current'.\n    do\n      create Result.make_from_string (Current)\n    ensure\n      string_not_void: Result /= Void\n      string_type: Result.same_type (create {STRING_32}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  string_representation: STRING_32\n      -- Similar to `string' but only create a new object if `Current' is not of dynamic type {STRING_32}\n    do\n      if same_type (create {STRING_32}.make_empty) and then attached {STRING_32} Current as l_s32 then\n        Result := l_s32\n      else\n        Result := string\n      end\n    ensure\n      Result_not_void: Result /= Void\n      correct_type: Result.same_type (create {STRING_32}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_index, count)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.fuzzy_index (Current, other, start, count, fuzz)\n    end\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Allocated space\n    do\n      Result := area.count - 1\n    end\n\n  count: INTEGER\n      -- Actual number of characters making up the string\n\n  occurrences (c: CHARACTER_32): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n      a: SPECIAL [CHARACTER_32]\n    do\n      from\n        i := area_lower\n        nb := count + i\n        a := area\n      until\n        i = nb\n      loop\n        if a.item (i) = c then\n          Result := Result + 1\n        end\n        i := i + 1\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (1, count)\n    ensure then\n      index_set_not_void: Result /= Void\n      index_set_count: Result.count = count\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is string made of same character sequence as `other'\n      -- (possibly with a different capacity)?\n    local\n        nb: INTEGER\n      l_hash, l_other_hash: like internal_hash_code\n      do\n        if other = Current then\n          Result := True\n        else\n          nb := count\n          if nb = other.count then\n            -- Let's compare the content if and only if the hash_code are the same or not yet computed.\n          l_hash := internal_hash_code\n          l_other_hash := other.internal_hash_code\n          if l_hash = 0 or else l_other_hash = 0 or else l_hash = l_other_hash then\n            Result := area.same_items (other.area, other.area_lower, area_lower, nb)\n          end\n          end\n        end\n\n    end\n\n  is_case_insensitive_equal (other: READABLE_STRING_32): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_prop: like character_properties\n      l_area, l_other_area: like area\n      c1,c2: CHARACTER_32\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_prop := character_properties\n          l_area := area\n          l_other_area := other.area\n          Result := True\n          i := area_lower + index_pos - 1\n          j := other.area_lower + start_pos - 1\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := l_area.item (i)\n          c2 := l_other_area.item (j)\n          if c1 /= c2 and then l_prop.to_lower (c1) /= l_prop.to_lower (c2) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  same_string (other: READABLE_STRING_32): BOOLEAN\n      -- Do `Current' and `other' have same character sequence?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      definition: Result = (string ~ other.string)\n    end\n\n  same_characters (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        Result := area.same_items (other.area, other.area_lower + start_pos - 1, area_lower + index_pos - 1, nb)\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is string lexicographically lower than `other'?\n    local\n      other_count: INTEGER\n      current_count: INTEGER\n    do\n      if other /= Current then\n        other_count := other.count\n        current_count := count\n        if other_count = current_count then\n          Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n        else\n          if current_count < other_count then\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, current_count) >= 0\n          else\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n          end\n        end\n      end\n    end\n\nfeature -- Status report\n\n  is_string_8: BOOLEAN = False\n      -- <Precursor>\n\n  is_string_32: BOOLEAN = True\n      -- <Precursor>\n\n  is_valid_as_string_8: BOOLEAN\n      -- <Precursor>\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      from\n        Result := True\n        i := area_lower\n        nb := count + i\n        l_area := area\n      until\n        i = nb or not Result\n      loop\n        Result := l_area.item (i).code <= {CHARACTER_8}.max_value\n        i := i + 1\n      end\n    end\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- <Precursor>\n    local\n      i, n: INTEGER\n      l_prop: like character_properties\n      l_area: like area\n    do\n      from\n        l_area := area\n        i := area_lower + start_index - 1\n        n := area_lower + end_index - 1\n        l_prop := character_properties\n      until\n        i > n or not l_prop.is_space (l_area.item (i))\n      loop\n        i := i + 1\n      end\n      Result := i > n\n    end\n\n  has (c: CHARACTER_32): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := area_lower\n          l_area := area\n          nb := nb + i\n        until\n          i = nb or else (l_area.item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i < nb)\n      end\n    end\n\n  starts_with (s: READABLE_STRING_32): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_lower + i\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_32): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_upper + 1\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  valid_code (v: NATURAL_32): BOOLEAN\n      -- Is `v' a valid code for a CHARACTER_32?\n    do\n      Result := True\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    local\n      nb: INTEGER\n    do\n      nb := count\n      if nb = 4 then\n          -- Check if this is `true_constant'\n        Result := is_case_insensitive_equal_general (true_constant)\n      elseif nb = 5 then\n          -- Check if this is `false_constant'\n        Result := is_case_insensitive_equal_general (false_constant)\n      end\n    end\n\nfeature {READABLE_STRING_32} -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying the characters of `other'.\n      -- (This is also used by `twin'.)\n    local\n      old_area: like area\n    do\n      if other /= Current then\n        old_area := area\n        standard_copy (other)\n          -- Note: <= is needed as all Eiffel string should have an\n          -- extra character to insert null character at the end.\n        if old_area = Void or else old_area = other.area or else old_area.count <= count then\n            -- Prevent copying of large `area' if only a few characters are actually used.\n          area := area.resized_area (count + 1)\n        else\n          old_area.copy_data (area, 0, 0, count)\n          area := old_area\n        end\n        internal_hash_code := 0\n      end\n    ensure then\n      new_result_count: count = other.count\n      -- same_characters: For every `i' in 1..`count', `item' (`i') = `other'.`item' (`i')\n    end\n\nfeature {NONE} -- Element change\n\n  fill_character (c: CHARACTER_32)\n      -- Fill with `capacity' characters all equal to `c'.\n    local\n      l_cap: like capacity\n    do\n      l_cap := capacity\n      if l_cap /= 0 then\n        area.fill_with (c, 0, l_cap - 1)\n        count := l_cap\n        internal_hash_code := 0\n      end\n    ensure\n      filled: count = capacity\n      same_size: capacity = old capacity\n      -- all_char: For every `i' in 1..`capacity', `item' (`i') = `c'\n    end\n\nfeature -- Conversion\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    deferred\n    ensure\n      same_count: Result.count = count\n      -- reversed: For every `i' in 1..`count', `Result'.`item' (`i') = `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation\n    do\n      create Result.make (count)\n      Result.append (as_string_8)\n    ensure then\n      out_not_void: Result /= Void\n      same_items: same_type (\"\") implies same_string_general (Result)\n    end\n\nfeature {NONE} -- Implementation\n\n  string_searcher: STRING_32_SEARCHER\n      -- String searcher specialized for READABLE_STRING_32 instances\n    once\n      create Result.make\n    end\n\nfeature {NONE} -- Implementation\n\n  str_strict_cmp (this, other: like area; this_index, other_index, n: INTEGER): INTEGER\n      -- Compare `n' characters from `this' starting at `this_index' with\n      -- `n' characters from and `other' starting at `other_index'.\n      -- 0 if equal, < 0 if `this' < `other',\n      -- > 0 if `this' > `other'\n    require\n      this_not_void: this /= Void\n      other_not_void: other /= Void\n      n_non_negative: n >= 0\n      n_valid: n <= (this.upper - this_index + 1) and n <= (other.upper - other_index + 1)\n    local\n      i, j, nb, l_current_code, l_other_code: INTEGER\n    do\n      from\n        i := this_index\n        nb := i + n\n        j := other_index\n      until\n        i = nb\n      loop\n        l_current_code := this.item (i).code\n        l_other_code := other.item (j).code\n        if l_current_code /= l_other_code then\n          Result := l_current_code - l_other_code\n          i := nb - 1 -- Jump out of loop\n        end\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  to_lower_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their lower version when available.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n      c1, c2: CHARACTER_32\n      l_prop: like character_properties\n    do\n      from\n        i := start_index\n        l_prop := character_properties\n      until\n        i > end_index\n      loop\n        c1 := a.item (i)\n        c2 := l_prop.to_lower (c1)\n          -- Let's avoid a write access if not needed.\n        if c1 /= c2 then\n          a.put (c2, i)\n        end\n        i := i + 1\n      end\n    end\n\n  to_upper_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their upper version when available.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n      c1, c2: CHARACTER_32\n      l_prop: like character_properties\n    do\n      from\n        i := start_index\n        l_prop := character_properties\n      until\n        i > end_index\n      loop\n        c1 := a.item (i)\n        c2 := l_prop.to_upper (c1)\n          -- Let's avoid a write access if not needed.\n        if c1 /= c2 then\n          a.put (c2, i)\n        end\n        i := i + 1\n      end\n    end\n\n  mirror_area (a: like area; start_index, end_index: INTEGER)\n      -- Mirror all characters in `a' between `start_index' and `end_index'.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      c: CHARACTER_32\n      i, j: INTEGER\n    do\n      from\n        i := end_index\n      until\n        i <= j\n      loop\n        c := a.item (i)\n        a.put (a.item (j), i)\n        a.put (c, j)\n        i := i - 1\n        j := j + 1\n      end\n    end\n\nfeature\n  {READABLE_STRING_8, READABLE_STRING_32,\n  STRING_8_SEARCHER, STRING_32_SEARCHER,\n  HEXADECIMAL_STRING_TO_INTEGER_CONVERTER,\n  STRING_TO_INTEGER_CONVERTOR,\n  STRING_TO_REAL_CONVERTOR} -- Implementation\n\n  area: SPECIAL [CHARACTER_32]\n      -- Storage for characters\n\n  area_lower: INTEGER\n      -- Minimum index\n    do\n    ensure\n      area_lower_non_negative: Result >= 0\n      area_lower_valid: Result <= area.upper\n    end\n\n  area_upper: INTEGER\n      -- Maximum index\n    do\n      Result := area_lower + count - 1\n    ensure\n      area_upper_valid: Result <= area.upper\n      area_upper_in_bound: area_lower <= Result + 1\n    end\n\ninvariant\n  area_not_void: area /= Void\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_string_8.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-14 22:22:02 -0700 (Wed, 14 May 2014) $\"\n  revision: \"$Revision: 95061 $\"\n\ndeferred class\n  READABLE_STRING_8\n\ninherit\n  READABLE_STRING_GENERAL\n    rename\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general,\n      item as character_32_item,\n      has as character_32_has,\n      index_of as character_32_index_of,\n      last_index_of as character_32_last_index_of,\n      occurrences as character_32_occurrences\n    redefine\n      copy, is_equal, out\n    end\n\n  READABLE_INDEXABLE [CHARACTER_8]\n    redefine\n      copy, is_equal, out\n    end\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  as_string_8: {STRING_8},\n  as_readable_string_32: {READABLE_STRING_32},\n  as_string_32: {STRING_32}\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    do\n      count := 0\n      internal_hash_code := 0\n      create area.make_filled ('%/000/', n + 1)\n    end\n\n  make_filled (c: CHARACTER_8; n: INTEGER)\n      -- Create string of length `n' filled with `c'.\n    require\n      valid_count: n >= 0\n    do\n      make (n)\n      fill_character (c)\n    ensure\n      count_set: count = n\n      area_allocated: capacity >= n\n      filled: occurrences (c) = count\n    end\n\n  make_from_string (s: READABLE_STRING_8)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    do\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n      if Current /= s then\n        create area.make_empty (count + 1)\n        area.copy_data (s.area, s.area_lower, 0, count + 1)\n      end\n    ensure\n      not_shared_implementation: Current /= s implies not shared_with (s)\n      initialized: same_string (s)\n    end\n\n  make_from_c (c_string: POINTER)\n      -- Initialize from contents of `c_string',\n      -- a string created by some C function\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n      l_count := c_string_provider.count\n      create area.make_filled ('%/000/', l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into_character_8_area (area, 1, l_count)\n    end\n\n  make_from_c_pointer (c_string: POINTER)\n      -- Create new instance from contents of `c_string',\n      -- a string created by some C function\n    obsolete\n      \"Use `make_from_c' instead.\"\n    require\n      c_string_exists: c_string /= default_pointer\n    do\n      make_from_c (c_string)\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    deferred\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_8\n      -- Character at position `i'.\n    deferred\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'.\n    obsolete\n      \"For consistency with Unicode string handling, use `code (i)' instead.\"\n    require\n      index_small_enough: i <= count\n      index_large_enough: i > 0\n    deferred\n    end\n\n  shared_with (other: READABLE_STRING_8): BOOLEAN\n      -- Does string share the text of `other'?\n    do\n      Result := (other /= Void) and then (area = other.area)\n    end\n\n  index_of (c: CHARACTER_8; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      a: like area\n      i, nb, l_lower_area: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          l_lower_area := area_lower\n          i := start_index - 1 + l_lower_area\n          nb := nb + l_lower_area\n          a := area\n        until\n          i = nb or else a.item (i) = c\n        loop\n          i := i + 1\n        end\n        if i < nb then\n            -- We add +1 due to the area starting at 0 and not at 1\n            -- and substract `area_lower'\n          Result := i + 1 - l_lower_area\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has (c)\n      found_if_present: substring (start_index, count).has (c) implies item (Result) = c\n      none_before: substring (start_index, count).has (c) implies\n        not substring (start_index, Result - 1).has (c)\n    end\n\n  last_index_of (c: CHARACTER_8; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c',\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    local\n      a: like area\n      i, l_lower_area: INTEGER\n    do\n      from\n        l_lower_area := area_lower\n        i := start_index_from_end - 1 + l_lower_area\n        a := area\n      until\n        i < l_lower_area or else a.item (i) = c\n      loop\n        i := i - 1\n      end\n        -- We add +1 due to the area starting at 0 and not at 1.\n      Result := i + 1 - l_lower_area\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has (c)\n      found_if_present: substring (1, start_index_from_end).has (c) implies item (Result) = c\n      none_after: substring (1, start_index_from_end).has (c) implies\n        not substring (Result + 1, start_index_from_end).has (c)\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_pos, end_pos)\n    end\n\n  string: STRING_8\n      -- New STRING_8 having same character sequence as `Current'.\n    do\n      create Result.make_from_string (Current)\n    ensure\n      string_not_void: Result /= Void\n      string_type: Result.same_type (create {STRING_8}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  string_representation: STRING_8\n      -- Similar to `string' but only create a new object if `Current' is not of dynamic type {STRING_8}\n    do\n      if same_type (create {STRING_8}.make_empty) and then attached {STRING_8} Current as l_s8 then\n        Result := l_s8\n      else\n        Result := string\n      end\n    ensure\n      Result_not_void: Result /= Void\n      correct_type: Result.same_type (create {STRING_8}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_index, count)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.fuzzy_index (Current, other, start, count, fuzz)\n    end\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Allocated space\n    do\n      Result := area.count - 1\n    end\n\n  count: INTEGER\n      -- Actual number of characters making up the string\n\n  occurrences (c: CHARACTER_8): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n      a: SPECIAL [CHARACTER_8]\n    do\n      from\n        i := area_lower\n        nb := count + i\n        a := area\n      until\n        i = nb\n      loop\n        if a.item (i) = c then\n          Result := Result + 1\n        end\n        i := i + 1\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (1, count)\n    ensure then\n      index_set_not_void: Result /= Void\n      index_set_count: Result.count = count\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is string made of same character sequence as `other'\n      -- (possibly with a different capacity)?\n    local\n      nb: INTEGER\n      l_hash, l_other_hash: like internal_hash_code\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n            -- Let's compare the content if and only if the hash_code are the same or not yet computed.\n          l_hash := internal_hash_code\n          l_other_hash := other.internal_hash_code\n          if l_hash = 0 or else l_other_hash = 0 or else l_hash = l_other_hash then\n            Result := area.same_items (other.area, other.area_lower, area_lower, nb)\n          end\n        end\n      end\n    end\n\n  is_case_insensitive_equal (other: READABLE_STRING_8): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_area, l_other_area: like area\n      c1,c2: CHARACTER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_area := area\n          l_other_area := other.area\n          Result := True\n          i := area_lower + index_pos - 1\n          j := other.area_lower + start_pos - 1\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := l_area.item (i)\n          c2 := l_other_area.item (j)\n          if c1 /= c2 and then c1.as_lower /= c2.as_lower then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: l_area.upper - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  same_string (other: READABLE_STRING_8): BOOLEAN\n      -- Do `Current' and `other' have same character sequence?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      definition: Result = (string ~ other.string)\n    end\n\n  same_characters (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        Result := area.same_items (other.area, other.area_lower + start_pos - 1, area_lower + index_pos - 1, nb)\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is string lexicographically lower than `other'?\n    local\n      other_count: INTEGER\n      current_count: INTEGER\n    do\n      if other /= Current then\n        other_count := other.count\n        current_count := count\n        if other_count = current_count then\n          Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n        else\n          if current_count < other_count then\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, current_count) >= 0\n          else\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n          end\n        end\n      end\n    end\n\nfeature -- Status report\n\n  is_string_8: BOOLEAN = True\n      -- <Precursor>\n\n  is_string_32: BOOLEAN = False\n      -- <Precursor>\n\n  is_valid_as_string_8: BOOLEAN = True\n      -- <Precursor>\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- <Precursor>\n    local\n      i, n: INTEGER\n      l_area: like area\n    do\n      from\n        l_area := area\n        i := area_lower + start_index - 1\n        n := area_lower + end_index - 1\n      until\n        i > n or not l_area.item (i).is_space\n      loop\n        i := i + 1\n      end\n      Result := i > n\n    end\n\n  has (c: CHARACTER_8): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := area_lower\n          l_area := area\n          nb := nb + i\n        until\n          i = nb or else (l_area.item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i < nb)\n      end\n    ensure\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then item (1) = c implies Result\n      recurse: (count > 0 and then item (1) /= c) implies\n        (Result = substring (2, count).has (c))\n    end\n\n  starts_with (s: READABLE_STRING_8): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_lower + i\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_8): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_upper + 1\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  valid_code (v: NATURAL_32): BOOLEAN\n      -- Is `v' a valid code for a CHARACTER_32?\n    do\n      Result := v <= {CHARACTER_8}.max_value.to_natural_32\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    local\n      nb: INTEGER\n      l_area: like area\n      i: INTEGER\n    do\n      nb := count\n      if nb = 4 then\n          -- Check if this is `true_constant'\n        l_area := area\n        i := area_lower\n        Result := l_area.item (i).lower = 't' and then\n          l_area.item (i + 1).lower = 'r' and then\n          l_area.item (i + 2).lower = 'u' and then\n          l_area.item (i + 3).lower = 'e'\n      elseif nb = 5 then\n          -- Check if this is `false_constant'\n        l_area := area\n        i := area_lower\n        Result := l_area.item (i).lower = 'f' and then\n          l_area.item (i + 1).lower = 'a' and then\n          l_area.item (i + 2).lower = 'l' and then\n          l_area.item (i + 3).lower = 's' and then\n          l_area.item (i + 4).lower = 'e'\n      end\n    end\n\nfeature {READABLE_STRING_8} -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying the characters of `other'.\n      -- (This is also used by `twin'.)\n    local\n      old_area: like area\n    do\n      if other /= Current then\n        old_area := area\n        standard_copy (other)\n          -- Note: <= is needed as all Eiffel string should have an\n          -- extra character to insert null character at the end.\n        if old_area = Void or else old_area = other.area or else old_area.count <= count then\n            -- Prevent copying of large `area' if only a few characters are actually used.\n          area := area.resized_area (count + 1)\n        else\n          old_area.copy_data (area, 0, 0, count)\n          area := old_area\n        end\n        internal_hash_code := 0\n      end\n    ensure then\n      new_result_count: count = other.count\n      -- same_characters: For every `i' in 1..`count', `item' (`i') = `other'.`item' (`i')\n    end\n\nfeature {NONE} -- Element change\n\n  fill_character (c: CHARACTER_8)\n      -- Fill with `capacity' characters all equal to `c'.\n    local\n      l_cap: like capacity\n    do\n      l_cap := capacity\n      if l_cap /= 0 then\n        area.fill_with (c, 0, l_cap - 1)\n        count := l_cap\n        internal_hash_code := 0\n      end\n    ensure\n      filled: count = capacity\n      same_size: capacity = old capacity\n      -- all_char: For every `i' in 1..`capacity', `item' (`i') = `c'\n    end\n\nfeature -- Conversion\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    deferred\n    ensure\n      same_count: Result.count = count\n      -- reversed: For every `i' in 1..`count', `Result'.`item' (`i') = `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation\n    do\n      create Result.make (count)\n      Result.append (Current)\n    ensure then\n      out_not_void: Result /= Void\n      same_items: same_type (\"\") implies Result.same_string (Current)\n    end\n\nfeature {NONE} -- Implementation\n\n  string_searcher: STRING_8_SEARCHER\n      -- String searcher specialized for READABLE_STRING_8 instances\n    once\n      create Result.make\n    end\n\n  str_strict_cmp (this, other: like area; this_index, other_index, n: INTEGER): INTEGER\n      -- Compare `n' characters from `this' starting at `this_index' with\n      -- `n' characters from and `other' starting at `other_index'.\n      -- 0 if equal, < 0 if `this' < `other',\n      -- > 0 if `this' > `other'\n    require\n      this_not_void: this /= Void\n      other_not_void: other /= Void\n      n_non_negative: n >= 0\n      n_valid: n <= (this.upper - this_index + 1) and n <= (other.upper - other_index + 1)\n    local\n      i, j, nb, l_current_code, l_other_code: INTEGER\n    do\n      from\n        i := this_index\n        nb := i + n\n        j := other_index\n      until\n        i = nb\n      loop\n        l_current_code := this.item (i).code\n        l_other_code := other.item (j).code\n        if l_current_code /= l_other_code then\n          Result := l_current_code - l_other_code\n          i := nb - 1 -- Jump out of loop\n        end\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  to_lower_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their lower version.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n    do\n      from\n        i := start_index\n      until\n        i > end_index\n      loop\n        a.put (a.item (i).lower, i)\n        i := i + 1\n      end\n    end\n\n  to_upper_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their upper version.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n    do\n      from\n        i := start_index\n      until\n        i > end_index\n      loop\n        a.put (a.item (i).upper, i)\n        i := i + 1\n      end\n    end\n\n  mirror_area (a: like area; start_index, end_index: INTEGER)\n      -- Mirror all characters in `a' between `start_index' and `end_index'.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      c: CHARACTER_8\n      i, j: INTEGER\n    do\n      from\n        i := end_index\n      until\n        i <= j\n      loop\n        c := a.item (i)\n        a.put (a.item (j), i)\n        a.put (c, j)\n        i := i - 1\n        j := j + 1\n      end\n    end\n\nfeature\n  {READABLE_STRING_8, READABLE_STRING_32,\n  STRING_8_SEARCHER, STRING_32_SEARCHER,\n  HEXADECIMAL_STRING_TO_INTEGER_CONVERTER,\n  STRING_TO_INTEGER_CONVERTOR,\n  STRING_TO_REAL_CONVERTOR} -- Implementation\n\n  area: SPECIAL [CHARACTER_8]\n      -- Storage for characters\n\n  area_lower: INTEGER\n      -- Minimum index\n    do\n    ensure\n      area_lower_non_negative: Result >= 0\n      area_lower_valid: Result <= area.upper\n    end\n\n  area_upper: INTEGER\n      -- Maximum index\n    do\n      Result := area_lower + count - 1\n    ensure\n      area_upper_valid: Result <= area.upper\n      area_upper_in_bound: area_lower <= Result + 1\n    end\n\ninvariant\n  area_not_void: area /= Void\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_string_general.e","content":"note\n  description: \"Common ancestors to all STRING classes. Read-only interface.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-19 06:27:01 -0700 (Wed, 19 Mar 2014) $\"\n  revision: \"$Revision: 94630 $\"\n\ndeferred class\n  READABLE_STRING_GENERAL\n\ninherit\n  COMPARABLE\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    end\n\n  HASHABLE\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    undefine\n      is_equal\n    end\n\n  STRING_HANDLER\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    undefine\n      is_equal\n    end\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n    require\n      non_negative_size: n >= 0\n    deferred\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\n  make_empty\n      -- Create empty string.\n    do\n      make (0)\n    ensure\n      empty: count = 0\n      area_allocated: capacity >= 0\n    end\n\nfeature -- Access\n\n  code (i: INTEGER): NATURAL_32\n      -- Code at position `i'\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  item alias \"[]\" (i: INTEGER): CHARACTER_32\n      -- Character at position `i'.\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  index_of (c: like item; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          i := start_index\n        until\n          i > nb or else item (i) = c\n        loop\n          i := i + 1\n        end\n        if i <= nb then\n          Result := i\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has (c)\n      found_if_present: substring (start_index, count).has (c) implies item (Result) = c\n      none_before: substring (start_index, count).has (c) implies\n        not substring (start_index, Result - 1).has (c)\n    end\n\n  last_index_of (c: like item; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c'.\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    do\n      from\n        Result := start_index_from_end\n      until\n        Result <= 0 or else item (Result) = c\n      loop\n        Result := Result - 1\n      end\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has (c)\n      found_if_present: substring (1, start_index_from_end).has (c) implies item (Result) = c\n      none_after: substring (1, start_index_from_end).has (c) implies\n        not substring (Result + 1, start_index_from_end).has (c)\n    end\n\n  index_of_code (c: like code; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          i := start_index\n        until\n          i > nb or else code (i) = c\n        loop\n          i := i + 1\n        end\n        if i <= nb then\n          Result := i\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has_code (c)\n      found_if_present: substring (start_index, count).has_code (c) implies code (Result) = c\n      none_before: substring (start_index, count).has_code (c) implies\n        not substring (start_index, Result - 1).has_code (c)\n    end\n\n  last_index_of_code (c: like code; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c'.\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    do\n      from\n        Result := start_index_from_end\n      until\n        Result <= 0 or else code (Result) = c\n      loop\n        Result := Result - 1\n      end\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has_code (c)\n      found_if_present: substring (1, start_index_from_end).has_code (c) implies code (Result) = c\n      none_after: substring (1, start_index_from_end).has_code (c) implies\n        not substring (Result + 1, start_index_from_end).has_code (c)\n    end\n\n  false_constant: STRING_8 = \"false\"\n      -- Constant string \"false\"\n\n  true_constant: STRING_8 = \"true\"\n      -- Constant string \"true\"\n\n  hash_code: INTEGER\n      -- Hash code value\n    local\n      i, nb: INTEGER\n    do\n      Result := internal_hash_code\n      if Result = 0 then\n          -- The magic number `8388593' below is the greatest prime lower than\n          -- 2^23 so that this magic number shifted to the left does not exceed 2^31.\n        from\n          i := 1\n          nb := count\n        until\n          i > nb\n        loop\n          Result := ((Result \\\\ 8388593) |<< 8) + item (i).code\n          i := i + 1\n        end\n        internal_hash_code := Result\n      end\n    end\n\n  case_insensitive_hash_code: INTEGER\n      -- Hash code value of the lower case version of `Current'.\n    local\n      l_props: like character_properties\n      i, nb: INTEGER\n    do\n      Result := internal_case_insensitive_hash_code\n      if Result = 0 then\n          -- The magic number `8388593' below is the greatest prime lower than\n          -- 2^23 so that this magic number shifted to the left does not exceed 2^31.\n        from\n          i := 1\n          nb := count\n          l_props := character_properties\n        until\n          i > nb\n        loop\n          Result := ((Result \\\\ 8388593) |<< 8) + l_props.to_lower (item (i)).code\n          i := i + 1\n        end\n        internal_case_insensitive_hash_code := Result\n      end\n    ensure\n      consistent: Result = as_lower.hash_code\n    end\n\nfeature -- Status report\n\n  is_immutable: BOOLEAN\n      -- Can the character sequence of `Current' be not changed?\n    do\n      Result := False\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of the string?\n    do\n      Result := (i > 0) and (i <= count)\n    ensure\n      definition: Result = (1 <= i and i <= count)\n    end\n\n  valid_code (v: like code): BOOLEAN\n      -- Is `v' a valid code for Current?\n    deferred\n    end\n\n  is_string_8: BOOLEAN\n      -- Is `Current' a sequence of CHARACTER_8?\n    deferred\n    end\n\n  is_string_32: BOOLEAN\n      -- Is `Current' a sequence of CHARACTER_32?\n    deferred\n    end\n\n  is_valid_as_string_8: BOOLEAN\n      -- Is `Current' convertible to a sequence of CHARACTER_8 without information loss?\n    deferred\n    end\n\n  is_empty: BOOLEAN\n      -- Is structure empty?\n    deferred\n    end\n\n  is_whitespace: BOOLEAN\n      -- Is structure containing only whitespace characters?\n    do\n      Result := is_substring_whitespace (1, count)\n    end\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- Is substring between `start_index' and `end_index' containing only whitespace characters?\n    require\n      start_index_big_enough: 1 <= start_index\n      end_index_small_enough: end_index <= count\n      consistent_indexes: start_index - 1 <= end_index\n    deferred\n    end\n\n  has (c: like item): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb or else (item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i <= nb)\n      end\n    ensure then\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then item (1) = c implies Result\n      recurse: (count > 0 and then item (1) /= c) implies\n        (Result = substring (2, count).has (c))\n    end\n\n  has_code (c: like code): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb or else (code (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i <= nb)\n      end\n    ensure then\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then code (1) = c implies Result\n      recurse: (count > 0 and then code (1) /= c) implies\n        (Result = substring (2, count).has_code (c))\n    end\n\n  is_number_sequence: BOOLEAN\n      -- Does `Current' represent a number sequence?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_no_limitation)\n    ensure\n      syntax_and_range:\n        -- Result is true if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- In the following BNF grammar, the value of\n        --  Current can be produced by \"Integer_literal\":\n        --\n        -- Integer_literal = [Space] [Sign] Integer [Space]\n        -- Space  = \" \" | \" \" Space\n        -- Sign   = \"+\" | \"-\"\n        -- Integer  = Digit | Digit Integer\n        -- Digit  = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n    end\n\n  is_real_sequence: BOOLEAN\n      -- Does `Current' represent a real sequence?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.is_integral_double\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following condition is satisfied:\n        --\n        -- In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n    end\n\n  is_real, is_real_32: BOOLEAN\n      -- Does `Current' represent a REAL_32?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_real)\n      Result := l_convertor.is_integral_real\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- 1. In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n        -- 2. The numerical value represented by 'Current'\n        --  is within the range that can be represented\n        --  by an instance of type REAL.\n    end\n\n  is_double, is_real_64: BOOLEAN\n      -- Does `Current' represent a REAL_64?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_double)\n      Result := l_convertor.is_integral_double\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- 1. In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n        -- 2. The numerical value represented by 'Current'\n        --  is within the range that can be represented\n        --  by an instance of type DOUBLE.\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    deferred\n    ensure\n      is_boolean: Result = (true_constant.same_string_general (as_lower) or\n        false_constant.same_string_general (as_lower))\n    end\n\n  is_integer_8: BOOLEAN\n      -- Does `Current' represent an INTEGER_8?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_8)\n    end\n\n  is_integer_16: BOOLEAN\n      -- Does `Current' represent an INTEGER_16?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_16)\n    end\n\n  is_integer, is_integer_32: BOOLEAN\n      -- Does `Current' represent an INTEGER_32?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_32)\n    end\n\n  is_integer_64: BOOLEAN\n      -- Does `Current' represent an INTEGER_64?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_64)\n    end\n\n  is_natural_8: BOOLEAN\n      -- Does `Current' represent a NATURAL_8?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_8)\n    end\n\n  is_natural_16: BOOLEAN\n      -- Does `Current' represent a NATURAL_16?\n\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_16)\n    end\n\n  is_natural, is_natural_32: BOOLEAN\n      -- Does `Current' represent a NATURAL_32?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_32)\n    end\n\n  is_natural_64: BOOLEAN\n      -- Does `Current' represent a NATURAL_64?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_64)\n    end\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Number of characters in Current\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\n  capacity: INTEGER\n      -- Number of characters allocated in Current\n    deferred\n    ensure\n      capacity_non_negative: Result >= 0\n    end\n\n  occurrences (c: CHARACTER_32): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          if item (i) = c then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\nfeature -- Comparison\n\n  is_case_insensitive_equal (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_GENERAL; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_prop: like character_properties\n      c1,c2: like item\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_prop := character_properties\n          Result := True\n          i := index_pos\n          j := start_pos\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := item (i)\n          c2 := other.item (j)\n          if c1 /= c2 and then l_prop.to_lower (c1) /= l_prop.to_lower (c2) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  has_substring (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does `Current' contain `other'?\n    require\n      other_not_void: other /= Void\n    do\n      if other = Current then\n        Result := True\n      elseif other.count <= count then\n        Result := substring_index (other, 1) > 0\n      end\n    ensure\n      false_if_too_small: count < other.count implies not Result\n      true_if_initial: (count >= other.count and then\n        other.same_string (substring (1, other.count))) implies Result\n      recurse: (count >= other.count and then\n        not other.same_string (substring (1, other.count))) implies\n        (Result = substring (2, count).has_substring (other))\n    end\n\n  same_string (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does `other' represent the same string as `Current'?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    end\n\n  same_characters (other: READABLE_STRING_GENERAL; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          Result := True\n          i := index_pos\n          j := start_pos\n          nb := nb + i\n        until\n          i = nb\n        loop\n          if item (i) /= other.item (j) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  starts_with (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i: INTEGER\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            Result := True\n          until\n            i = 0\n          loop\n            if code (i) /= s.code (i) then\n              Result := False\n              i := 1 -- Jump out of loop\n            end\n            i := i - 1\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j: INTEGER\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            Result := True\n          until\n            i = 0\n          loop\n            if code(j) /= s.code (i) then\n              Result := False\n              i := 1 -- Jump out of loop\n            end\n            i := i - 1\n            j := j - 1\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- Position of first occurrence of `other' at or after `start_pos'\n      -- and to or before `end_pos';\n      -- 0 if none.\n    require\n      other_nonvoid: other /= Void\n      other_notempty: not other.is_empty\n      start_pos_large_enough: start_pos >= 1\n      start_pos_small_enough: start_pos <= count\n      end_pos_large_enough: end_pos >= start_pos\n      end_pos_small_enough: end_pos <= count\n    deferred\n    ensure\n      correct_place: Result > 0 implies other.same_string (substring (Result, Result + other.count - 1))\n      -- forall x : start_pos..Result\n      --  not substring (x, x+other.count -1).is_equal (other)\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- Index of first occurrence of other at or after start_index;\n      -- 0 if none\n    require\n      other_not_void: other /= Void\n      valid_start_index: start_index >= 1 and start_index <= count + 1\n    deferred\n    ensure\n      valid_result: Result = 0 or else\n        (start_index <= Result and Result <= count - other.count + 1)\n      zero_if_absent: (Result = 0) =\n        not substring (start_index, count).has_substring (other)\n      at_this_index: Result >= start_index implies\n        other.same_string (substring (Result, Result + other.count - 1))\n      none_before: Result > start_index implies\n        not substring (start_index, Result + other.count - 2).has_substring (other)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- Position of first occurrence of `other' at or after `start'\n      -- with 0..`fuzz' mismatches between the string and `other'.\n      -- 0 if there are no fuzzy matches\n    require\n      other_exists: other /= Void\n      other_not_empty: not other.is_empty\n      start_large_enough: start >= 1\n      start_small_enough: start <= count\n      acceptable_fuzzy: fuzz <= other.count\n    deferred\n    end\n\nfeature -- Conversion\n\n  frozen to_cil: SYSTEM_STRING\n      -- Create an instance of SYSTEM_STRING using characters\n      -- of Current between indices `1' and `count'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      Result := dotnet_convertor.from_string_to_system_string (Current)\n    ensure\n      to_cil_not_void: Result /= Void\n    end\n\n  to_string_8: STRING_8\n      -- Convert `Current' as a STRING_8.\n    require\n      is_valid_as_string_8: is_valid_as_string_8\n    do\n      Result := as_string_8\n    ensure\n      as_string_8_not_void: Result /= Void\n      identity: (conforms_to (\"\") and Result = Current) or (not conforms_to (\"\") and Result /= Current)\n    end\n\n  as_string_8_conversion: STRING_8\n      -- Equivalent to `as_string_8' with a different name.\n      -- To be used for migrating existing code to Unicode\n      -- when you get a compiler error but cannot or do not have\n      -- the time yet to address the target recipient of the string to be\n      -- a READABLE_STRING_32 or descendants.\n    obsolete\n      \"Update recipient of call to use READABLE_STRING_32 and descendants instead.\"\n    do\n      Result := as_string_8\n    end\n\n  as_readable_string_8: READABLE_STRING_8\n      --\n    obsolete\n      \"Use explicit conversion `to_string_8' instead.\"\n    do\n      Result := as_string_8\n    end\n\n  as_string_8: STRING_8\n      -- Convert `Current' as a STRING_8. If a code of `Current' is\n      -- not a valid code for a STRING_8 it is replaced with the null\n      -- character.\n    local\n      i, nb: INTEGER\n      l_code: like code\n    do\n      if attached {STRING_8} Current as l_result then\n        Result := l_result\n      else\n        nb := count\n        create Result.make (nb)\n        Result.set_count (nb)\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          l_code := code (i)\n          if Result.valid_code (l_code) then\n            Result.put_code (l_code, i)\n          else\n            Result.put_code (0, i)\n          end\n          i := i + 1\n        end\n      end\n    ensure\n      as_string_8_not_void: Result /= Void\n      identity: (conforms_to (\"\") and Result = Current) or (not conforms_to (\"\") and Result /= Current)\n    end\n\n  as_string_32_conversion: STRING_32\n      -- Equivalent to `as_string_32' with a different name.\n      -- To be used for migrating existing code to Unicode\n      -- when you get a compiler error but cannot or do not have\n      -- the time yet to address the source of the string to be\n      -- a READABLE_STRING_32 or descendants.\n    obsolete\n      \"Update target of call to use READABLE_STRING_32 and descendants instead.\"\n    do\n      Result := as_string_32\n    end\n\n  as_readable_string_32: READABLE_STRING_32\n      --\n    obsolete\n      \"Use explicit conversion `to_string_32' instead.\"\n    do\n      Result := as_string_32\n    end\n\n  as_string_32, to_string_32: STRING_32\n      -- Convert `Current' as a STRING_32.\n    local\n      i, nb: INTEGER\n    do\n      if attached {STRING_32} Current as l_result then\n        Result := l_result\n      else\n        nb := count\n        create Result.make (nb)\n        Result.set_count (nb)\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          Result.put_code (code (i), i)\n          i := i + 1\n        end\n      end\n    ensure\n      as_string_32_not_void: Result /= Void\n      identity: (conforms_to (create {STRING_32}.make_empty) and Result = Current) or (not conforms_to (create {STRING_32}.make_empty) and Result /= Current)\n    end\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    deferred\n    ensure\n      as_lower_attached: Result /= Void\n      length: Result.count = count\n      anchor: count > 0 implies Result.item (1) = item (1).as_lower\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).as_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    deferred\n    ensure\n      as_upper_attached: Result /= Void\n      length: Result.count = count\n      anchor: count > 0 implies Result.item (1) = item (1).as_upper\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).as_upper\n    end\n\n  to_integer_8: INTEGER_8\n      -- 8-bit integer value\n    require\n      is_integer_8: is_integer_8\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_8\n    end\n\n  to_integer_16: INTEGER_16\n      -- 16-bit integer value\n    require\n      is_integer_16: is_integer_16\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_16\n    end\n\n  to_integer, to_integer_32: INTEGER_32\n      -- 32-bit integer value\n    require\n      is_integer: is_integer_32\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer\n    end\n\n  to_integer_64: INTEGER_64\n      -- 64-bit integer value\n    require\n      is_integer_64: is_integer_64\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_64\n    end\n\n  to_natural_8: NATURAL_8\n      -- 8-bit natural value\n    require\n      is_natural_8: is_natural_8\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_8\n    end\n\n  to_natural_16: NATURAL_16\n      -- 16-bit natural value\n    require\n      is_natural_16: is_natural_16\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_16\n    end\n\n  to_natural, to_natural_32: NATURAL_32\n      -- 32-bit natural value\n    require\n      is_natural: is_natural_32\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_32\n    end\n\n  to_natural_64: NATURAL_64\n      -- 64-bit natural value\n    require\n      is_natural_64: is_natural_64\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_64\n    end\n\n  to_real, to_real_32: REAL\n      -- Real value;\n      -- for example, when applied to \"123.0\", will yield 123.0\n    require\n      represents_a_real: is_real\n    do\n      Result := to_double.truncated_to_real\n    end\n\n  to_double, to_real_64: DOUBLE\n      -- \"Double\" value;\n      -- for example, when applied to \"123.0\", will yield 123.0 (double)\n    require\n      represents_a_double: is_double\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_double\n    end\n\n  to_boolean: BOOLEAN\n      -- Boolean value;\n      -- \"True\" yields `True', \"False\" yields `False'\n      -- (case-insensitive)\n    require\n      is_boolean: is_boolean\n    do\n      check true_constant.count = 4 end\n      if count = 4 then\n        Result := True\n      end\n    ensure\n      to_boolean: (Result = as_lower.same_string (true_constant)) or\n        (not Result = as_lower.same_string (false_constant))\n    end\n\nfeature -- Conversion\n\n  split (a_separator: CHARACTER_32): LIST [like Current]\n      -- Split on `a_separator'.\n    local\n      l_list: ARRAYED_LIST [like Current]\n      part: like Current\n      i, j, c: INTEGER\n    do\n      c := count\n        -- Worse case allocation: every character is a separator\n      create l_list.make (c + 1)\n      if c > 0 then\n        from\n          i := 1\n        until\n          i > c\n        loop\n          j := index_of (a_separator, i)\n          if j = 0 then\n              -- No separator was found, we will\n              -- simply create a list with a copy of\n              -- Current in it.\n            j := c + 1\n          end\n          part := substring (i, j - 1)\n          l_list.extend (part)\n          i := j + 1\n        end\n        if j = c then\n          check\n            last_character_is_a_separator: item (j) = a_separator\n          end\n            -- A separator was found at the end of the string\n          l_list.extend (new_string (0))\n        end\n      else\n          -- Extend empty string, since Current is empty.\n        l_list.extend (new_string (0))\n      end\n      Result := l_list\n      check\n        l_list.count = occurrences (a_separator) + 1\n      end\n    ensure\n      Result /= Void\n    end\n\nfeature -- Element change\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    deferred\n    ensure\n      plus_not_void: Result /= Void\n      new_count: Result.count = count + s.count\n      initial: elks_checking implies Result.substring (1, count) ~ Current\n      final: elks_checking implies Result.substring (count + 1, count + s.count).same_string (s)\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    ensure\n      substring_not_void: Result /= Void\n      substring_count: Result.count = end_index - start_index + 1 or Result.count = 0\n      first_code: Result.count > 0 implies Result.item (1) = item (start_index)\n      recurse: Result.count > 0 implies\n        Result.substring (2, Result.count) ~ substring (start_index + 1, end_index)\n    end\n\n  head (n: INTEGER): like Current\n      -- Prefix, retaining first `n' characters (or as many as available).\n    require\n      non_negative_argument: n >= 0\n    do\n      if n > count then\n        Result := twin\n      else\n        Result := substring (1, n)\n      end\n    ensure\n      same_count: count = old (count)\n      new_count: Result.count = n.min (count)\n    end\n\n  tail (n: INTEGER): like Current\n      -- Suffix, retaining last `n' characters (or as many as available).\n    require\n      non_negative_argument: n >= 0\n    do\n      if n > count then\n        Result := twin\n      else\n        Result := substring (count - n + 1, count)\n      end\n    ensure\n      same_count: count = old (count)\n      new_count: Result.count = n.min (count)\n    end\n\nfeature {NONE} -- Assertion helper\n\n  elks_checking: BOOLEAN = False\n      -- Are ELKS checkings verified? Must be True when changing implementation of STRING_GENERAL or descendant.\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    require\n      n_non_negative: n >= 0\n    deferred\n    ensure\n      new_string_not_void: Result /= Void\n      new_string_empty: Result.is_empty\n      new_string_area_big_enough: Result.capacity >= n\n    end\n\n  is_valid_integer_or_natural (type: INTEGER) : BOOLEAN\n      -- Is `Current' a valid number according to given `type'?\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.reset (type)\n      l_convertor.parse_string_with_type (Current, type)\n      Result := l_convertor.is_integral_integer\n    end\n\n  string_searcher: STRING_SEARCHER\n      -- Facilities to search string in another string.\n    deferred\n    ensure\n      string_searcher_not_void: Result /= Void\n    end\n\n  c_string_provider: C_STRING\n      -- To create Eiffel strings from C string.\n    once\n      create Result.make_empty (0)\n    ensure\n      c_string_provider_not_void: Result /= Void\n    end\n\n  ctoi_convertor: STRING_TO_INTEGER_CONVERTOR\n      -- Convertor used to convert string to integer or natural\n    once\n      create Result.make\n      Result.set_leading_separators (\" \")\n      Result.set_trailing_separators (\" \")\n      Result.set_leading_separators_acceptable (True)\n      Result.set_trailing_separators_acceptable (True)\n    ensure\n      ctoi_convertor_not_void: Result /= Void\n    end\n\n  ctor_convertor: STRING_TO_REAL_CONVERTOR\n      -- Convertor used to convert string to real or double\n    once\n      create Result.make\n      Result.set_leading_separators (\" \")\n      Result.set_trailing_separators (\" \")\n      Result.set_leading_separators_acceptable (True)\n      Result.set_trailing_separators_acceptable (True)\n    ensure\n      ctor_convertor_not_void: Result /= Void\n    end\n\n  dotnet_convertor: SYSTEM_STRING_FACTORY\n      -- Convertor used to convert from and to SYSTEM_STRING.\n    once\n      create Result\n    ensure\n      dotnet_convertor_not_void: Result /= Void\n    end\n\n  character_properties: CHARACTER_PROPERTY\n      -- Access to Unicode character properties\n    once\n      create Result.make\n    end\n\nfeature {READABLE_STRING_GENERAL} -- Implementation\n\n  internal_hash_code: INTEGER\n      -- Cache for `hash_code'.\n\n  internal_case_insensitive_hash_code: INTEGER;\n      -- Cash for `case_insensitive_hash_code'.\n\n\nfeature -- Access: Cursor\n\n  new_character_32_cursor: STRING_ITERATION_CURSOR\n      -- Fresh cursor for this string that iterates over code points (see `code')\n      -- exposed as {CHARACTER_32}.\n    do\n      create Result.make (Current)\n      Result.start\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"resizable.e","content":"note\n  description: \"Finite structures whose item count is subject to change\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: storage;\n  size: resizable;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class RESIZABLE [G] inherit\n\n  BOUNDED [G]\n\nfeature -- Measurement\n\n  Growth_percentage: INTEGER = 50\n      -- Percentage by which structure will grow automatically\n\n  Minimal_increase: INTEGER = 5\n      -- Minimal number of additional items\n\n  additional_space: INTEGER\n      -- Proposed number of additional items\n      --| Result is a reasonable value, resulting from a space-time tradeoff.\n    do\n        -- To prevent overflow we do not use `growth_percentage' but its known value.\n      Result := (capacity // 2).max (Minimal_increase)\n    ensure\n      At_least_one: Result >= 1\n    end\n\nfeature -- Status report\n\n  resizable: BOOLEAN\n      -- May `capacity' be changed? (Answer: yes.)\n    do\n      Result := True\n    end\n\nfeature -- Resizing\n\n  automatic_grow\n      -- Change the capacity to accommodate at least\n      -- `Growth_percentage' more items.\n      --| Trades space for time:\n      --| allocates fairly large chunks of memory but not very often.\n    require\n      resizable: resizable\n    do\n      grow (capacity + additional_space)\n    ensure\n      increased_capacity: capacity >= old capacity + old additional_space\n    end\n\n  grow (i: INTEGER)\n      -- Ensure that capacity is at least `i'.\n    require\n      resizable: resizable\n    deferred\n    ensure\n      new_capacity: capacity >= i\n    end\n\n  trim\n      -- Decrease `capacity' to the minimum value.\n      -- Apply to reduce allocated storage.\n    deferred\n    ensure\n      same_count: count = old count\n      minimal_capacity: capacity = count\n    end\n\ninvariant\n\n  increase_by_at_least_one: Minimal_increase >= 1\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"special.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-03-04 15:01:25 -0800 (Mon, 04 Mar 2013) $\"\n  revision: \"$Revision: 92178 $\"\n\nfrozen class\n  SPECIAL [T]\n\ninherit\n  ABSTRACT_SPECIAL\n    redefine\n      debug_output\n    end\n\n  READABLE_INDEXABLE [T]\n\ncreate\n  make_empty,\n  make_filled,\n  make_from_native_array\n\nfeature {NONE} -- Initialization\n\n  make_empty (n: INTEGER)\n      -- Create a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    external\n      \"built_in\"\n    ensure\n      capacity_set: capacity = n\n      count_set: count = 0\n    end\n\n  make_filled (v: T; n: INTEGER)\n      -- Create a special object for `n' entries initialized with `v'.\n    require\n      non_negative_argument: n >= 0\n    do\n      make_empty (n)\n      fill_with (v, 0, n - 1)\n    ensure\n      capacity_set: capacity = n\n      count_set: count = n\n      filled: filled_with (v, 0, n - 1)\n    end\n\n  make_from_native_array (an_array: like native_array)\n      -- Create a special object from `an_array'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n      an_array_not_void: an_array /= Void\n    do\n    end\n\nfeature -- Access\n\n  item alias \"[]\" (i: INTEGER): T assign put\n      -- Item at `i'-th position\n      -- (indices begin at 0)\n    external\n      \"built_in\"\n    end\n\n  at alias \"@\" (i: INTEGER): T\n      -- Item at `i'-th position\n      -- (indices begin at 0)\n    require\n      valid_index: valid_index (i)\n    do\n      Result := item (i)\n    end\n\n  index_of (v: T; start_position: INTEGER): INTEGER\n      -- Index of first occurrence of item identical to `v'.\n      -- -1 if none.\n      -- (Use object equality for comparison.)\n    require\n      valid_start_position: start_position >= 0\n    local\n      nb: INTEGER\n    do\n      from\n        Result := start_position\n        nb := count\n      until\n        Result >= nb or else item (Result) ~ v\n      loop\n        Result := Result + 1\n      end\n      if Result >= nb then\n        Result := -1\n      end\n    ensure\n      found_or_not_found: Result = -1 or else (Result >= 0 and then Result < count)\n    end\n\n  item_address (i: INTEGER): POINTER\n      -- Address of element at position `i'.\n      -- Use only when interfacing with C externals when Current is guaranteed to not move in memory.\n    require\n      not_dotnet: not {PLATFORM}.is_dotnet\n      index_large_enough: i >= 0\n      index_small_enough: i < count\n    do\n      Result := base_address + i * element_size\n    ensure\n      element_address_not_null: Result /= default_pointer\n    end\n\n  base_address: POINTER\n      -- Address of element at position `0'.\n      -- Use only when interfacing with C externals when Current is guaranteed to not move in memory.\n    require\n      not_dotnet: not {PLATFORM}.is_dotnet\n    external\n      \"built_in\"\n    ensure\n      base_address_not_null: Result /= default_pointer\n    end\n\n  native_array: NATIVE_ARRAY [T]\n      -- Only for compatibility with .NET\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      create Result\n    end\n\n  to_array: ARRAY [T]\n      -- Build an array representation of Current from `1' to `count'.\n    do\n      create Result.make_from_special (Current)\n    ensure\n      to_array_attached: Result /= Void\n      to_array_lower_set: Result.lower = 1\n      to_array_upper_set: Result.upper = count\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- <Precursor>\n    do\n      create Result.make (lower, upper)\n    end\n\nfeature -- Measurement\n\n  lower: INTEGER = 0\n      -- Minimum index of Current\n\n  upper: INTEGER\n      -- Maximum index of Current\n    do\n      Result := count - 1\n    ensure\n      definition: lower <= Result + 1\n    end\n\n  count: INTEGER\n      -- Count of special area\n    external\n      \"built_in\"\n    end\n\n  capacity: INTEGER\n      -- Capacity of special area\n    external\n      \"built_in\"\n    end\n\nfeature -- Status report\n\n  filled_with (v: T; start_index, end_index: INTEGER): BOOLEAN\n      -- Are all items between index `start_index' and `end_index'\n      -- set to `v'?\n      -- (Use reference equality for comparison.)\n    require\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < count\n    local\n      i: INTEGER\n    do\n      from\n        Result := True\n        i := start_index\n      until\n        i > end_index or else not Result\n      loop\n        Result := item (i) = v\n        i := i + 1\n      end\n    end\n\n  same_items (other: like Current; source_index, destination_index, n: INTEGER): BOOLEAN\n      -- Are the `n' elements of `other' from `source_index' position the same as\n      -- the `n' elements of `Current' from `destination_index'?\n      -- (Use reference equality for comparison.)\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: destination_index + n <= count\n    local\n      i, j, nb: INTEGER\n    do\n      Result := True\n      if other /= Current then\n        from\n          i := source_index\n          j := destination_index\n          nb := source_index + n\n        until\n          i = nb\n        loop\n          if other.item (i) /= item (j) then\n            Result := False\n            i := nb - 1\n          end\n          i := i + 1\n          j := j + 1\n        end\n      end\n    ensure\n      valid_on_empty_area: (n = 0) implies Result\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    do\n      Result := (0 <= i) and (i < count)\n    end\n\nfeature -- Element change\n\n  put (v: T; i: INTEGER)\n      -- Replace `i'-th item by `v'.\n      -- (Indices begin at 0.)\n    require\n      index_large_enough: i >= 0\n      index_small_enough: i < count\n    external\n      \"built_in\"\n    ensure\n      inserted: item (i) = v\n      same_count: count = old count\n      same_capacity: capacity = old capacity\n    end\n\n  force (v: T; i: INTEGER)\n      -- If `i' is equal to `count' increase `count' by one and insert `v' at index `count',\n      -- otherwise replace `i'-th item by `v'.\n      -- (Indices begin at 0.)\n    require\n      index_large_enough: i >= 0\n      index_small_enough: i <= count\n      not_full: i = count implies count < capacity\n    do\n      if i < count then\n        put (v, i)\n      else\n        extend (v)\n      end\n    ensure\n      count_updated: count = (i + 1).max (old count)\n      same_capacity: capacity = old capacity\n      inserted: item (i) = v\n    end\n\n  extend (v: T)\n      -- Add `v' at index `count'.\n    require\n      count_small_enough: count < capacity\n    external\n      \"built_in\"\n    ensure\n      count_increased: count = old count + 1\n      same_capacity: capacity = old capacity\n      inserted: item (count - 1) = v\n    end\n\n  extend_filled (v: T)\n      -- Set items between `count' and `capacity - 1' with `v'.\n    do\n      fill_with (v, count, capacity - 1)\n    ensure\n      same_capacity: capacity = old capacity\n      count_increased: count = capacity\n      filled: filled_with (v, old count, capacity - 1)\n    end\n\n  fill_with (v: T; start_index, end_index: INTEGER)\n      -- Set items between `start_index' and `end_index' with `v'.\n    require\n      start_index_non_negative: start_index >= 0\n      start_index_in_bound: start_index <= count\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < capacity\n    local\n      i, nb: INTEGER\n      l_count: like count\n    do\n      from\n        i := start_index\n        l_count := count.min (end_index + 1)\n        nb := l_count\n      until\n        i = nb\n      loop\n        put (v, i)\n        i := i + 1\n      end\n      from\n        i := l_count\n        nb := end_index + 1\n      until\n        i = nb\n      loop\n        extend (v)\n        i := i + 1\n      end\n    ensure\n      same_capacity: capacity = old capacity\n      count_definition: count = (old count).max (end_index + 1)\n      filled: filled_with (v, start_index, end_index)\n    end\n\n  fill_with_default (start_index, end_index: INTEGER)\n      -- Clear items between `start_index' and `end_index'.\n    require\n      is_self_initializing: ({T}).has_default\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < count\n    do\n      fill_with (({T}).default, start_index, end_index)\n    ensure\n      filled: filled_with (({T}).default, start_index, end_index)\n    end\n\n  insert_data (other: SPECIAL [T]; source_index, destination_index, n: INTEGER)\n      -- Insert `n' elements of `other' from `source_index' position to Current at\n      -- `destination_index' and shift elements between `destination_index' and `count'\n      -- to the right. Other elements of Current remain unchanged.\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: count + n <= capacity\n      same_type: other.conforms_to (Current)\n    local\n      l_remaining_items, l_offset, l_nb_items_left: INTEGER\n      l_source_index, l_end_index, l_destination_index: INTEGER\n    do\n      l_remaining_items := count - destination_index\n      if l_remaining_items = 0 then\n          -- It is being added at the end of Current, therefore we can simply extend.\n        copy_data (other, source_index, destination_index, n)\n      elseif n <= l_remaining_items then\n          -- Simple case where we can perform a move of the existing items to the end\n          -- and then copy the elements of `other'.\n        move_data (destination_index, destination_index + n, l_remaining_items)\n        copy_data (other, source_index, destination_index, n)\n      else\n          -- Because we cannot have uninitialized items, we cannot move all the remaining items beyond count\n          -- instead we copy by chunks of `l_remaining_items'.\n        from\n          l_source_index := source_index\n          l_destination_index := destination_index\n          l_end_index := source_index + n\n          l_nb_items_left := n\n          l_offset := l_remaining_items\n        until\n          l_source_index >= l_end_index\n        loop\n          move_data (l_destination_index, l_destination_index + l_offset, l_remaining_items)\n          copy_data (other, l_source_index, l_destination_index, l_offset)\n          l_destination_index := l_destination_index + l_offset\n          l_source_index := l_source_index + l_offset\n            -- Compute how many more items we have to copy.\n          l_nb_items_left := l_nb_items_left - l_remaining_items\n          l_offset := l_offset.min (l_nb_items_left)\n        end\n      end\n    ensure\n      copied: same_items (other, source_index, destination_index, n)\n      count_updated: count = old count + n\n    end\n\n  copy_data (other: SPECIAL [T]; source_index, destination_index, n: INTEGER)\n      -- Copy `n' elements of `other' from `source_index' position to Current at\n      -- `destination_index'. Other elements of Current remain unchanged.\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n      same_type: other.conforms_to (Current)\n    local\n      i, j, nb: INTEGER\n    do\n      if other = Current then\n        move_data (source_index, destination_index, n)\n      else\n        from\n          i := source_index\n          j := destination_index\n          nb := source_index + n\n        until\n          i = nb\n        loop\n          force (other.item (i), j)\n          i := i + 1\n          j := j + 1\n        end\n      end\n    ensure\n      copied: same_items (other, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  move_data (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    do\n      if source_index = destination_index then\n      elseif source_index > destination_index then\n        if destination_index + n < source_index then\n          non_overlapping_move (source_index, destination_index, n)\n        else\n          overlapping_move (source_index, destination_index, n)\n        end\n      else\n        if source_index + n < destination_index then\n          non_overlapping_move (source_index, destination_index, n)\n        else\n          overlapping_move (source_index, destination_index, n)\n        end\n      end\n    ensure\n      moved: same_items (old twin, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  overlapping_move (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      different_source_and_target: source_index /= destination_index\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    local\n      i, nb: INTEGER\n      l_offset: INTEGER\n    do\n      if source_index < destination_index then\n          -- We shift from left to right starting from the end\n          -- due to possible overlapping.\n        from\n          i := source_index + n - 1\n          nb := source_index - 1\n          l_offset := destination_index - source_index\n          if (destination_index + n >= count) then\n              -- Initialize elements above `count' to a dummy item.\n            fill_with (item (source_index), count, destination_index + n - 1)\n          end\n          check\n            l_offset_positive: l_offset > 0\n          end\n        until\n          i = nb\n        loop\n          put (item (i), i + l_offset)\n          i := i - 1\n        end\n      else\n          -- We shift from right to left.\n        from\n          i := source_index\n          nb := source_index + n\n          l_offset := source_index - destination_index\n          check\n            l_offset_positive: l_offset > 0\n          end\n        until\n          i = nb\n        loop\n          force (item (i), i - l_offset)\n          i := i + 1\n        end\n      end\n    ensure\n      moved: same_items (old twin, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  non_overlapping_move (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      different_source_and_target: source_index /= destination_index\n      non_overlapping:\n        (source_index < destination_index implies source_index + n < destination_index) or\n        (source_index > destination_index implies destination_index + n < source_index)\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    local\n      i, nb: INTEGER\n      l_offset: INTEGER\n    do\n      from\n        i := source_index\n        nb := source_index + n\n        l_offset := destination_index - source_index\n      until\n        i = nb\n      loop\n        force (item (i), i + l_offset)\n        i := i + 1\n      end\n    ensure\n      moved: same_items (Current, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\nfeature -- Resizing\n\n  keep_head (n: INTEGER)\n      -- Keep the first `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      set_count (n)\n    ensure\n      count_updated: count = n\n      kept: same_items (old twin, 0, 0, n)\n    end\n\n  keep_tail (n: INTEGER)\n      -- Keep the last `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      overlapping_move (count - n, 0, n)\n      set_count (n)\n    ensure\n      count_updated: count = n\n      kept: same_items (old twin, n, 0, n)\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove the first `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      keep_tail (count - n)\n    ensure\n      count_updated: count = old count - n\n      kept: same_items (old twin, n, 0, count)\n    end\n\n  remove_tail (n: INTEGER)\n      -- Keep the first  `count - n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      keep_head (count - n)\n    ensure\n      count_updated: count = old count - n\n      kept: same_items (old twin, 0, 0, count)\n    end\n\n  resized_area (n: INTEGER): like Current\n      -- Create a copy of Current with a count of `n'\n    require\n      n_non_negative: n >= 0\n    do\n      create Result.make_empty (n)\n      Result.copy_data (Current, 0, 0, n.min (count))\n    ensure\n      Result_not_void: Result /= Void\n      Result_different_from_current: Result /= Current\n      new_count: Result.count = n.min (old count)\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (Current, 0, 0, n.min (old count))\n    end\n\n  resized_area_with_default (a_default_value: T; n: INTEGER): like Current\n      -- Create a copy of Current with a count of `n' where not yet initialized\n      -- entries are set to `a_default_value'.\n    require\n      n_non_negative: n >= 0\n    do\n      create Result.make_empty (n)\n      if n > count then\n        Result.copy_data (Current, 0, 0, count)\n        Result.fill_with (a_default_value, count, n - 1)\n      else\n        Result.copy_data (Current, 0, 0, n)\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_different_from_current: Result /= Current\n      new_count: Result.count = n\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (Current, 0, 0, n.min (old count))\n    end\n\n  aliased_resized_area (n: INTEGER): like Current\n      -- Try to resize `Current' with a count of `n', if not\n      -- possible a new copy\n    require\n      n_non_negative: n >= 0\n    external\n      \"built_in\"\n    ensure\n      Result_not_void: Result /= Void\n      new_count: Result.count = n.min (old count)\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (old twin, 0, 0, n.min (old count))\n    end\n\n  aliased_resized_area_with_default (a_default_value: T; n: INTEGER): like Current\n      -- Try to resize `Current' with a count of `n', if not\n      -- possible a new copy. Non yet initialized entries are set to `a_default_value'.\n    require\n      n_non_negative: n >= 0\n    do\n      Result := aliased_resized_area (n)\n      Result.fill_with (a_default_value, Result.count, n - 1)\n    ensure\n      Result_not_void: Result /= Void\n      new_count: Result.count = n\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (old twin, 0, 0, n.min (old count))\n    end\n\nfeature -- Removal\n\n  replace_all (v: T)\n      -- Replace all items with `v'.\n    local\n      i: INTEGER\n    do\n      from\n        i := count - 1\n      until\n        i < 0\n      loop\n        put (v, i)\n        i := i - 1\n      end\n    ensure\n      cleared: filled_with (v, 0, upper)\n    end\n\n  wipe_out\n      -- Reset count to zero.\n    do\n      set_count (0)\n    ensure\n      same_capacity: capacity = old capacity\n      count_reset: count = 0\n    end\n\n  clear_all\n      -- Reset all items to default values.\n    obsolete\n      \"Because of the new precondition, it is recommended to use `fill_with' instead.\"\n    require\n      has_default: ({T}).has_default\n    do\n      fill_with_default (0, upper)\n    ensure\n      same_capacity: capacity = old capacity\n      count_reset: count = old count\n    end\n\nfeature -- Iteration\n\n  do_all_in_bounds (action: PROCEDURE [ANY, TUPLE [T]]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item, from first to last.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb\n      loop\n        action.call ([item (i)])\n        i := i + 1\n      end\n    end\n\n  do_if_in_bounds (action: PROCEDURE [ANY, TUPLE [T]]; test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb\n      loop\n        if test.item ([item (i)]) then\n          action.call ([item (i)])\n        end\n        i := i + 1\n      end\n    end\n\n  there_exists_in_bounds (test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER): BOOLEAN\n      -- Is `test' true for at least one item?\n    require\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb or Result\n      loop\n        Result := test.item ([item (i)])\n        i := i + 1\n      end\n    end\n\n  for_all_in_bounds (test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER): BOOLEAN\n      -- Is `test' true for all items?\n    require\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n        Result := True\n      until\n        i > nb or not Result\n      loop\n        Result := test.item ([item (i)])\n        i := i + 1\n      end\n    end\n\n  do_all_with_index_in_bounds (action: PROCEDURE [ANY, TUPLE [T, INTEGER]]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item, from first to last.\n      -- `action' receives item and its index.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    local\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_index\n        j := lower\n        nb := end_index\n      until\n        i > nb\n      loop\n        action.call ([item (i), j])\n        j := j + 1\n        i := i + 1\n      end\n    end\n\n  do_if_with_index_in_bounds (action: PROCEDURE [ANY, TUPLE [T, INTEGER]]; test: FUNCTION [ANY, TUPLE [T, INTEGER], BOOLEAN]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- `action' and `test' receive the item and its index.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    local\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_index\n        j := lower\n        nb := end_index\n      until\n        i > nb\n      loop\n        if test.item ([item (i), j]) then\n          action.call ([item (i), j])\n        end\n        j := j + 1\n        i := i + 1\n      end\n    end\n\nfeature -- Output\n\n  debug_output: STRING\n      -- String that should be displayed in debugger to represent `Current'.\n    do\n      Result := Precursor\n      Result.append_string (\", capacity=\")\n      Result.append_integer (capacity)\n    end\n\nfeature {NONE} -- Implementation\n\n  element_size: INTEGER\n      -- Size of elements\n    external\n      \"built_in\"\n    ensure\n      element_size_non_negative: Result >= 0\n    end\n\n  set_count (n: INTEGER)\n      -- Set `count' with `n'.\n    require\n      n_non_negative: n >= 0\n      valid_new_count: n <= count\n    external\n      \"built_in\"\n    ensure\n      count_set: count = n\n      capacity_preserved: capacity = old capacity\n    end\n\ninvariant\n  count_less_than_capacity: count <= capacity\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string.e","content":"class\n  STRING\n\ninherit\n  READABLE_STRING_32\n    redefine\n      area\n    export\n      {ANY} make, make_empty, make_filled, make_from_c, make_from_string, fill_character\n    end\n\n  STRING_GENERAL\n    undefine\n      copy, is_equal, out, has, index_of, last_index_of, occurrences\n    redefine\n      append_string_general,\n      prepend_string_general\n    rename\n      append as append_string_general,\n      append_substring as append_substring_general,\n      prepend as prepend_string_general,\n      prepend_substring as prepend_substring_general,\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general\n    end\n\n  INDEXABLE [CHARACTER_32, INTEGER]\n    undefine\n      copy, is_equal, out\n    redefine\n      prune_all,\n      changeable_comparison_criterion\n    end\n\n  RESIZABLE [CHARACTER_32]\n    undefine\n      copy, is_equal, out\n    redefine\n      changeable_comparison_criterion\n    end\n\n  TO_SPECIAL [CHARACTER_32]\n    undefine\n      copy, is_equal, out, item, at, put, valid_index\n    redefine\n      area\n    end\n\n  MISMATCH_CORRECTOR\n    undefine\n      copy, is_equal, out\n    redefine\n      correct_mismatch\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_string_general,\n  make_from_c,\n  make_from_c_pointer,\n  make_from_cil\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  make_from_cil ({SYSTEM_STRING}),\n  as_string_8: {READABLE_STRING_8, STRING_8}\n\nfeature -- Initialization\n\n  make_from_string_general (s: READABLE_STRING_GENERAL)\n      -- Initialize from the characters of `s'.\n    do\n      if attached {READABLE_STRING_32} s as s32 then\n        make_from_string (s32)\n      else\n        make (s.count)\n        append_string_general (s)\n      end\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 and then a_system_string /= Void then\n        set_count (l_count)\n        dotnet_convertor.read_system_string_into (a_system_string, Current)\n      end\n    end\n\n  from_c (c_string: POINTER)\n      -- Reset contents of string from contents of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n        -- Resize string in case it is not big enough\n      l_count := c_string_provider.count\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_string_into (Current)\n    ensure\n      no_zero_byte: not has ('%/0/')\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n      -- correct_count: the ASCII character at address c_string + count\n      --       is NULL\n    end\n\n  from_c_substring (c_string: POINTER; start_pos, end_pos: INTEGER)\n      -- Reset contents of string from substring of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      c_string_provider.set_shared_from_pointer_and_count (c_string + (start_pos - 1), l_count)\n        -- Resize string in case it is not big enough\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into (Current, 1, l_count)\n    ensure\n      valid_count: count = end_pos - start_pos + 1\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n    end\n\n  adapt (s: STRING_32): like Current\n      -- Object of a type conforming to the type of `s',\n      -- initialized with attributes from `s'\n    do\n      Result := new_string (0)\n      Result.share (s)\n    ensure\n      adapt_not_void: Result /= Void\n      shared_implementation: Result.shared_with (s)\n    end\n\n  remake (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    obsolete\n      \"Use `make' instead\"\n    require\n      non_negative_size: n >= 0\n    do\n      make (n)\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_32 assign put\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1)\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1).code.to_natural_32\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Character at position `i'\n    obsolete\n      \"Due to potential truncation it is recommended to use `code (i)' instead.\"\n    do\n      Result := area.item (i - 1).natural_32_code.as_integer_32\n    end\n\n  area: SPECIAL [CHARACTER_32]\n      -- Storage for characters\n\nfeature -- Status report\n\n  extendible: BOOLEAN = True\n      -- May new items be added? (Answer: yes.)\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  changeable_comparison_criterion: BOOLEAN = False\n\nfeature -- Element change\n\n  set (t: READABLE_STRING_32; n1, n2: INTEGER)\n      -- Set current string to substring of `t' from indices `n1'\n      -- to `n2', or to empty string if no such substring.\n    require\n      argument_not_void: t /= Void\n    local\n      s: READABLE_STRING_32\n    do\n      s := t.substring (n1, n2)\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n    ensure\n      is_substring: same_string (t.substring (n1, n2))\n    end\n\n  subcopy (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy characters of `other' within bounds `start_pos' and\n      -- `end_pos' to current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n      enough_space: (count - index_pos) >= (end_pos - start_pos)\n    local\n      l_other_area, l_area: like area\n    do\n      if end_pos >= start_pos then\n        l_other_area := other.area\n        l_area := area\n        if l_area /= l_other_area then\n          l_area.copy_data (l_other_area, start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        else\n          l_area.overlapping_move (start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      copied: elks_checking implies\n        (Current ~ (old substring (1, index_pos - 1) +\n        old other.substring (start_pos, end_pos) +\n        old substring (index_pos + (end_pos - start_pos + 1), count)))\n    end\n\n  replace_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Replace characters from `start_index' to `end_index' with `s'.\n    require\n      string_not_void: s /= Void\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningfull_interval: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      diff: INTEGER\n      l_area: like area\n      s_count: INTEGER\n      old_count: INTEGER\n    do\n      s_count := s.count\n      old_count := count\n      diff := s_count - (end_index - start_index + 1)\n      new_size := diff + old_count\n      if diff > 0 then\n          -- We need to resize the string.\n        grow (new_size)\n      end\n\n      l_area := area\n        --| We move the end of the string forward (if diff is > 0), backward (if diff < 0),\n        --| and nothing otherwise.\n      if diff /= 0 then\n        l_area.overlapping_move (end_index, end_index + diff, old_count - end_index)\n      end\n        --| Set new count\n      set_count (new_size)\n        --| We copy the substring.\n      l_area.copy_data (s.area, s.area_lower, start_index - 1, s_count)\n    ensure\n      new_count: count = old count + old s.count - end_index + start_index - 1\n      replaced: elks_checking implies\n        (Current ~ (old (substring (1, start_index - 1) +\n          s + substring (end_index + 1, count))))\n    end\n\n  replace_substring_all (original, new: READABLE_STRING_32)\n      -- Replace every occurrence of `original' with `new'.\n    require\n      original_exists: original /= Void\n      new_exists: new /= Void\n      original_not_empty: not original.is_empty\n    extern\n      \"built_in\"\n    end\n\n  replace_blank\n      -- Replace all current characters with blanks.\n    do\n      fill_with (' ')\n    ensure\n      same_size: (count = old count) and (capacity = old capacity)\n      all_blank: elks_checking implies occurrences (' ') = count\n    end\n\n  fill_blank\n      -- Fill with `capacity' blank characters.\n    do\n      fill_character (' ')\n    ensure\n      filled: full\n      same_size: (count = capacity) and (capacity = old capacity)\n      -- all_blank: For every `i' in `count'..`capacity', `item' (`i') = `Blank'\n    end\n\n  fill_with (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if l_count /= 0 then\n        area.fill_with (c, 0, l_count - 1)\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  replace_character (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    obsolete\n      \"ELKS 2001: use `fill_with' instead'\"\n    do\n      fill_with (c)\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    do\n      if n < count then\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    local\n      nb: like count\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    local\n      nb, nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count - 1\n        l_area := area\n      until\n        nb_space > nb or else not l_prop.is_space (l_area.item (nb_space))\n      loop\n        nb_space := nb_space + 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count value.\n        nb := nb + 1 - nb_space\n          -- Shift characters to the left.\n        l_area.overlapping_move (nb_space, 0, nb)\n          -- Set new count.\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n      c: CHARACTER_32\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n        -- Compute number of spaces at the right of current string.\n      from\n        nb := count - 1\n        i := nb\n        l_area := area\n      until\n        i < 0\n      loop\n        c := l_area.item (i)\n        if not l_prop.is_space (c) then\n            -- We are done.\n          i := -1\n        else\n          nb_space := nb_space + 1\n          i := i - 1\n        end\n      end\n\n      if nb_space > 0 then\n          -- Set new count.\n        count := nb + 1 - nb_space\n        internal_hash_code := 0\n      end\n    end\n\n  share (other: STRING_32)\n      -- Make current string share the text of `other'.\n      -- Subsequent changes to the characters of current string\n      -- will also affect `other', and conversely.\n    require\n      argument_not_void: other /= Void\n    do\n      area := other.area\n      count := other.count\n      internal_hash_code := 0\n    ensure\n      shared_count: other.count = count\n      shared_area: other.area = area\n    end\n\n  put (c: CHARACTER_32; i: INTEGER)\n      -- Replace character at position `i' by `c'.\n    do\n      area.put (c, i - 1)\n      internal_hash_code := 0\n    ensure then\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\n  put_code (v: NATURAL_32; i: INTEGER)\n      -- Replace character at position `i' by character of code `v'.\n    do\n      area.put (v.to_character_32, i - 1)\n      internal_hash_code := 0\n    end\n\n  prepend_string_general (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        prepend (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  precede, prepend_character (c: CHARACTER_32)\n      -- Add `c' at front.\n    local\n      l_area: like area\n    do\n      if count = capacity then\n        resize (count + additional_space)\n      end\n      l_area := area\n      l_area.overlapping_move (0, 1, count)\n      l_area.put (c, 0)\n      count := count + 1\n      internal_hash_code := 0\n    ensure\n      new_count: count = old count + 1\n    end\n\n  prepend (s: READABLE_STRING_32)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n    do\n      insert_string (s, 1)\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n\n          -- First shift from `s.count' position all characters of current.\n        l_area.overlapping_move (0, l_s_count, count)\n\n          -- Copy string `s' at beginning.\n        l_area.copy_data (s.area, s.area_lower + start_index - 1, 0, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index) + Current))\n    end\n\n  prepend_boolean (b: BOOLEAN)\n      -- Prepend the string representation of `b' at front.\n    do\n      prepend_string_general (b.out)\n    end\n\n  prepend_double (d: DOUBLE)\n      -- Prepend the string representation of `d' at front.\n    do\n      prepend_string_general (d.out)\n    end\n\n  prepend_integer (i: INTEGER)\n      -- Prepend the string representation of `i' at front.\n    do\n      prepend_string_general (i.out)\n    end\n\n  prepend_real (r: REAL)\n      -- Prepend the string representation of `r' at front.\n    do\n      prepend_string_general (r.out)\n    end\n\n  prepend_string (s: detachable READABLE_STRING_32)\n      -- Prepend characters of `s', if not void, at front.\n    do\n      if s /= Void then\n        prepend (s)\n      end\n    end\n\n  append_string_general (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        append (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  append (s: READABLE_STRING_32)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (Current + s))\n    end\n\n  append_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower + start_index - 1, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + (end_index - start_index + 1)\n      appended: elks_checking implies same_string (old (Current + s.substring (start_index, end_index)))\n    end\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    do\n      Result := new_string (count + s.count)\n      Result.append (Current)\n      Result.append_string_general (s)\n    end\n\n  append_string (s: detachable READABLE_STRING_32)\n      -- Append a copy of `s', if not void, at end.\n    do\n      if s /= Void then\n        append (s)\n      end\n    ensure\n      appended: s /= Void implies\n        (elks_checking implies Current ~ (old twin + old s.twin))\n    end\n\n  append_integer (i: INTEGER)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_8 (i: INTEGER_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_8}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_16 (i: INTEGER_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_16}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_64 (i: INTEGER_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_64}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_8 (i: NATURAL_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_16 (i: NATURAL_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_32 (i: NATURAL_32)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_32\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_64 (i: NATURAL_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_real (r: REAL)\n      -- Append the string representation of `r' at end.\n    do\n      append_string_general (r.out)\n    end\n\n  append_double (d: DOUBLE)\n      -- Append the string representation of `d' at end.\n    do\n      append_string_general (d.out)\n    end\n\n  append_character, extend (c: CHARACTER_32)\n      -- Append `c' at end.\n    local\n      current_count: INTEGER\n    do\n      current_count := count\n      if current_count = capacity then\n        resize (current_count + additional_space)\n      end\n      area.put (c, current_count)\n      count := current_count + 1\n      internal_hash_code := 0\n    ensure then\n      item_inserted: item (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append_boolean (b: BOOLEAN)\n      -- Append the string representation of `b' at end.\n    do\n      append_string_general (b.out)\n    end\n\n  insert (s: READABLE_STRING_32; i: INTEGER)\n      -- Add `s' to left of position `i' in current string.\n    obsolete\n      \"ELKS 2001: use `insert_string' instead\"\n    require\n      string_exists: s /= Void\n      index_small_enough: i <= count + 1\n      index_large_enough: i > 0\n    do\n      insert_string (s, i)\n    ensure\n      inserted: elks_checking implies\n        (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_string (s: READABLE_STRING_32; i: INTEGER)\n      -- Insert `s' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      string_exists: s /= Void\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := s.count\n      if l_s_count /= 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n        pos := i - 1\n\n          -- First shift from `s.count' position all characters starting at index `pos'.\n        l_area.overlapping_move (pos, pos + l_s_count, count - pos)\n\n          -- Copy string `s' at index `pos'.\n        l_area.copy_data (s.area, s.area_lower, pos, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      inserted: elks_checking implies (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_character (c: CHARACTER_32; i: INTEGER)\n      -- Insert `c' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_area: like area\n    do\n        -- Resize Current if necessary.\n      new_size := 1 + count\n      if new_size > capacity then\n        resize (new_size + additional_space)\n      end\n\n        -- Perform all operations using a zero based arrays.\n      pos := i - 1\n      l_area := area\n\n        -- First shift from `s.count' position all characters starting at index `pos'.\n      l_area.overlapping_move (pos, pos + 1, count - pos)\n\n        -- Insert new character\n      l_area.put (c, pos)\n\n      count := new_size\n      internal_hash_code := 0\n    ensure\n      one_more_character: count = old count + 1\n      inserted: item (i) = c\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i, count))\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n        -- Shift characters to the left.\n      area.overlapping_move (i, i - 1, l_count - i)\n        -- Update content.\n      count := l_count - 1\n      internal_hash_code := 0\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (n.min (count) + 1, count))\n    end\n\n  remove_substring (start_index, end_index: INTEGER)\n      -- Remove all characters from `start_index'\n      -- to `end_index' inclusive.\n    require\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningful_interval: start_index <= end_index + 1\n    local\n      l_count, nb_removed: INTEGER\n    do\n      nb_removed := end_index - start_index + 1\n      if nb_removed > 0 then\n        l_count := count\n        area.overlapping_move (start_index + nb_removed - 1, start_index - 1, l_count - end_index)\n        count := l_count - nb_removed\n        internal_hash_code := 0\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, start_index - 1) + old substring (end_index + 1, count))\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if n > l_count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_head (l_count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, count - n.min (count)))\n    end\n\n  prune (c: CHARACTER_32)\n      -- Remove first occurrence of `c', if any.\n    require else\n      True\n    local\n      counter: INTEGER\n    do\n      from\n        counter := 1\n      until\n        counter > count or else (item (counter) = c)\n      loop\n        counter := counter + 1\n      end\n      if counter <= count then\n        remove (counter)\n      end\n    end\n\n  prune_all (c: CHARACTER_32)\n      -- Remove all occurrences of `c'.\n    require else\n      True\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n      l_char: CHARACTER_32\n    do\n        -- Traverse string and shift characters to the left\n        -- each time we find an occurrence of `c'.\n      from\n        l_area := area\n        nb := count\n      until\n        i = nb\n      loop\n        l_char := l_area.item (i)\n        if l_char /= c then\n          l_area.put (l_char, j)\n          j := j + 1\n        end\n        i := i + 1\n      end\n      count := j\n      internal_hash_code := 0\n    ensure then\n      changed_count: count = (old count) - (old occurrences (c))\n      -- removed: For every `i' in 1..`count', `item' (`i') /= `c'\n    end\n\n  prune_all_leading (c: CHARACTER_32)\n      -- Remove all leading occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (1) /= c\n      loop\n        remove (1)\n      end\n    end\n\n  prune_all_trailing (c: CHARACTER_32)\n      -- Remove all trailing occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (count) /= c\n      loop\n        remove (count)\n      end\n    end\n\n  wipe_out\n      -- Remove all characters.\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure then\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\n  clear_all\n      -- Reset all characters.\n    obsolete\n      \"Use `wipe_out' instead.\"\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\nfeature -- Resizing\n\n  adapt_size\n      -- Adapt the size to accommodate `count' characters.\n    do\n      resize (count)\n    end\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n      -- Do not lose any previously entered character.\n    do\n      area := area.aliased_resized_area_with_default ('%/000/', newsize + 1)\n    end\n\n  grow (newsize: INTEGER)\n      -- Ensure that the capacity is at least `newsize'.\n    do\n      if newsize > capacity then\n        resize (newsize)\n      end\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_string: same_string (old twin)\n    end\n\nfeature -- Conversion\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    do\n      Result := twin\n      Result.to_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    do\n      Result := twin\n      Result.to_upper\n    end\n\n  left_justify\n      -- Left justify Current using `count' as witdth.\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n        -- Remove leading white spaces.\n      nb := count\n      left_adjust\n\n        -- Get new count\n      i := count\n      if i < nb then\n          -- `left_adjust' did remove some characters, so we need to add\n          -- some white spaces at the end of the string.\n        from\n          l_area := area\n        until\n          i = nb\n        loop\n          l_area.put (' ', i)\n          i := i + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  center_justify\n      -- Center justify Current using `count' as width.\n    local\n      i, nb, l_offset: INTEGER\n      left_nb_space, right_nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count\n        l_area := area\n      until\n        left_nb_space = nb or else not l_prop.is_space (l_area.item (left_nb_space))\n      loop\n        left_nb_space := left_nb_space + 1\n      end\n\n        -- Compute number of spaces at the right of current string.\n      from\n        i := nb - 1\n        l_area := area\n      until\n        i = -1 or else not l_prop.is_space (l_area.item (i))\n      loop\n        right_nb_space := right_nb_space + 1\n        i := i - 1\n      end\n\n        -- We encourage that more spaces will be put to the left, when\n        -- number of spaces is not even.\n      l_offset := left_nb_space + right_nb_space\n      if l_offset \\\\ 2 = 0 then\n        l_offset := left_nb_space - l_offset // 2\n      else\n        l_offset := left_nb_space - l_offset // 2 - 1\n      end\n      if l_offset /= 0 then\n          -- Shift characters to the right or left (depending on sign of\n          -- `l_offset' by `l_offset' position.\n        l_area.move_data (left_nb_space, left_nb_space - l_offset,\n          nb - left_nb_space - right_nb_space)\n\n        if l_offset < 0 then\n            -- Fill left part with spaces.\n          l_area.fill_with (' ', left_nb_space, left_nb_space - l_offset - 1)\n        else\n            -- Fill right part with spaces.\n          l_area.fill_with (' ', nb - right_nb_space - l_offset, nb - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  right_justify\n      -- Right justify Current using `count' as width.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n      nb := count\n      right_adjust\n      i := count\n      nb_space := nb - i\n      if nb_space > 0 then\n          -- Shift characters to the right.\n        from\n          l_area := area\n        until\n          i = 0\n        loop\n          i := i - 1\n          l_area.put (l_area.item (i), i + nb_space)\n        variant\n          i + 1\n        end\n\n          -- Fill left part with spaces.\n        from\n        until\n          nb_space = 0\n        loop\n          nb_space := nb_space - 1\n          l_area.put (' ', nb_space)\n        variant\n          nb_space + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n    end\n\n  character_justify (pivot: CHARACTER_32; position: INTEGER)\n      -- Justify a string based on a `pivot'\n      -- and the `position' it needs to be in\n      -- the final string.\n      -- This will grow the string if necessary\n      -- to get the pivot in the correct place.\n    require\n      valid_position: position <= capacity\n      positive_position: position >= 1\n      pivot_not_space: pivot /= ' '\n      not_empty: not is_empty\n    local\n      l_index_of_pivot, l_new_size: INTEGER\n      l_area: like area\n    do\n      l_index_of_pivot := index_of (pivot, 1)\n      if l_index_of_pivot /= 0 then\n        if l_index_of_pivot < position then\n            -- We need to resize Current so that we can shift Current by\n            -- `l_index_of_pivot - position'.\n          l_new_size := count + position - l_index_of_pivot\n          grow (l_new_size)\n          l_area := area\n          l_area.move_data (0, position - l_index_of_pivot, count)\n          l_area.fill_with (' ', 0, position - l_index_of_pivot - 1)\n          count := l_new_size\n        else\n            -- Simply shift content to the left and reset trailing with spaces.\n          l_area := area\n          l_area.move_data (l_index_of_pivot - position, 0, count - l_index_of_pivot + position)\n          l_area.fill_with (' ', count - l_index_of_pivot + position, count - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  to_lower\n      -- Convert to lower case.\n    do\n      to_lower_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_lower)\n    end\n\n  to_upper\n      -- Convert to upper case.\n    do\n      to_upper_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_upper)\n    end\n\n  linear_representation: LINEAR [CHARACTER_32]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_32]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\n  frozen to_c: ANY\n      -- A reference to a C form of current string.\n      -- Useful only for interfacing with C software.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    local\n      l_area: like area\n    do\n      l_area := area\n      l_area.put ('%U', count)\n      Result := l_area\n    end\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    do\n      Result := twin\n      if count > 0 then\n        Result.mirror\n      end\n    end\n\n  mirror\n      -- Reverse the order of characters.\n      -- \"Hello world\" -> \"dlrow olleH\".\n    local\n      a: like area\n      c: CHARACTER_32\n      i, j: INTEGER\n    do\n      if count > 0 then\n        from\n          i := count - 1\n          a := area\n        until\n          i <= j\n        loop\n          c := a.item (i)\n          a.put (a.item (j), i)\n          a.put (c, j)\n          i := i - 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      -- reversed: For every `i' in 1..`count', `item' (`i') = old `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        Result := new_string (end_index - start_index + 1)\n        Result.area.copy_data (area, start_index - 1, 0, end_index - start_index + 1)\n        Result.set_count (end_index - start_index + 1)\n      else\n        Result := new_string (0)\n      end\n    end\n\n  multiply (n: INTEGER)\n      -- Duplicate a string within itself\n      -- (\"hello\").multiply(3) => \"hellohellohello\"\n    require\n      meaningful_multiplier: n >= 1\n    local\n      s: like Current\n      i: INTEGER\n    do\n      s := twin\n      grow (n * count)\n      from\n        i := n\n      until\n        i = 1\n      loop\n        append (s)\n        i := i - 1\n      end\n    end\n\nfeature {STRING_HANDLER} -- Implementation\n\n  frozen set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    do\n      count := number\n      internal_hash_code := 0\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    do\n      create Result.make (n)\n    end\n\nfeature -- Transformation\n\n  correct_mismatch\n      -- Attempt to correct object mismatch during retrieve using `mismatch_information'.\n    do\n        -- Nothing to be done because we only added `internal_hash_code' that will\n        -- be recomputed next time we query `hash_code'.\n\n        -- In .NET, we have a mismatch that is triggered due to the implementation of\n        -- SPECIAL [CHARACTER_32] as a .NET array of UInt16.\n      if area = Void and then attached {like area} mismatch_information.item (\"area\") as l_area then\n        area := l_area\n      end\n    end\n\ninvariant\n  extendible: extendible\n  compare_character: not object_comparison\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_8.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-26 14:49:40 -0700 (Wed, 26 Mar 2014) $\"\n  revision: \"$Revision: 94721 $\"\n\nclass\n  STRING_8\n\ninherit\n  READABLE_STRING_8\n    export\n      {ANY} make, make_empty, make_filled, make_from_c, make_from_string, fill_character\n    redefine\n      area\n    end\n\n  STRING_GENERAL\n    rename\n      append as append_string_general,\n      append_substring as append_substring_general,\n      prepend as prepend_string_general,\n      prepend_substring as prepend_substring_general,\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general,\n      item as character_32_item,\n      has as character_32_has,\n      index_of as character_32_index_of,\n      last_index_of as character_32_last_index_of,\n      occurrences as character_32_occurrences\n    undefine\n      copy, is_equal, out\n    redefine\n      append_string_general,\n      prepend_string_general\n    end\n\n  INDEXABLE [CHARACTER_8, INTEGER]\n    undefine\n      copy, is_equal, out\n    redefine\n      prune_all,\n      changeable_comparison_criterion\n    end\n\n  RESIZABLE [CHARACTER_8]\n    undefine\n      copy, is_equal, out\n    redefine\n      changeable_comparison_criterion\n    end\n\n  TO_SPECIAL [CHARACTER_8]\n    undefine\n      copy, is_equal, out, item, at, put, valid_index\n    redefine\n      area\n    end\n\n  MISMATCH_CORRECTOR\n    undefine\n      copy, is_equal, out\n    redefine\n      correct_mismatch\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_c,\n  make_from_c_pointer,\n  make_from_cil\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  make_from_cil ({SYSTEM_STRING}),\n  as_string_32: {READABLE_STRING_32, STRING_32}\n\nfeature -- Initialization\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 and then a_system_string /= Void then\n        set_count (l_count)\n        dotnet_convertor.read_system_string_into (a_system_string, Current)\n      end\n    end\n\n  from_c (c_string: POINTER)\n      -- Reset contents of string from contents of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n        -- Resize string in case it is not big enough\n      l_count := c_string_provider.count\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_string_into (Current)\n    ensure\n      no_zero_byte: not has ('%/0/')\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n      -- correct_count: the ASCII character at address c_string + count\n      --       is NULL\n    end\n\n  from_c_substring (c_string: POINTER; start_pos, end_pos: INTEGER)\n      -- Reset contents of string from substring of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      c_string_provider.set_shared_from_pointer_and_count (c_string + (start_pos - 1), l_count)\n        -- Resize string in case it is not big enough\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into (Current, 1, l_count)\n    ensure\n      valid_count: count = end_pos - start_pos + 1\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n    end\n\n  adapt (s: STRING_8): like Current\n      -- Object of a type conforming to the type of `s',\n      -- initialized with attributes from `s'\n    do\n      Result := new_string (0)\n      Result.share (s)\n    ensure\n      adapt_not_void: Result /= Void\n      shared_implementation: Result.shared_with (s)\n    end\n\n  remake (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    obsolete\n      \"Use `make' instead\"\n    require\n      non_negative_size: n >= 0\n    do\n      make (n)\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_8 assign put\n      -- Character at position `i'.\n    do\n      Result := area.item (i - 1)\n    end\n\n  character_32_item (i: INTEGER): CHARACTER_32\n      -- Character at position `i'.\n    do\n        -- We should be using `area.item (i - 1).to_character_32'\n        -- but some descendants of STRING that have their content encoded\n        -- in UTF-8 for example relies on `code' to get the corresponding\n        -- CHARACTER_32 by reading more than one byte. Once they have\n        -- been updated to use `character_32_item' we can revert the code\n        -- back to using `area' directly.\n      Result := code (i).to_character_32\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Numeric code of character at position `i'.\n    do\n      Result := area.item (i - 1).code.to_natural_32\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'.\n      -- Use `code' instead for consistency with Unicode handling.\n      --| Not obsolete because old code using just ASCII is safe.\n    do\n      Result := area.item (i - 1).code\n    end\n\n  area: SPECIAL [CHARACTER_8]\n      -- Storage for characters.\n\nfeature -- Status report\n\n  extendible: BOOLEAN = True\n      -- May new items be added? (Answer: yes.)\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  changeable_comparison_criterion: BOOLEAN = False\n\nfeature -- Element change\n\n  set (t: READABLE_STRING_8; n1, n2: INTEGER)\n      -- Set current string to substring of `t' from indices `n1'\n      -- to `n2', or to empty string if no such substring.\n    require\n      argument_not_void: t /= Void\n    local\n      s: READABLE_STRING_8\n    do\n      s := t.substring (n1, n2)\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n    ensure\n      is_substring: same_string (t.substring (n1, n2))\n    end\n\n  subcopy (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy characters of `other' within bounds `start_pos' and\n      -- `end_pos' to current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n      enough_space: (count - index_pos) >= (end_pos - start_pos)\n    local\n      l_other_area, l_area: like area\n    do\n      if end_pos >= start_pos then\n        l_other_area := other.area\n        l_area := area\n        if l_area /= l_other_area then\n          l_area.copy_data (l_other_area, start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        else\n          l_area.overlapping_move (start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      copied: elks_checking implies\n        (Current ~ (old substring (1, index_pos - 1) +\n        old other.substring (start_pos, end_pos) +\n        old substring (index_pos + (end_pos - start_pos + 1), count)))\n    end\n\n  replace_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Replace characters from `start_index' to `end_index' with `s'.\n    require\n      string_not_void: s /= Void\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningfull_interval: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      diff: INTEGER\n      l_area: like area\n      s_count: INTEGER\n      old_count: INTEGER\n    do\n      s_count := s.count\n      old_count := count\n      diff := s_count - (end_index - start_index + 1)\n      new_size := diff + old_count\n      if diff > 0 then\n          -- We need to resize the string.\n        grow (new_size)\n      end\n\n      l_area := area\n        --| We move the end of the string forward (if diff is > 0), backward (if diff < 0),\n        --| and nothing otherwise.\n      if diff /= 0 then\n        l_area.overlapping_move (end_index, end_index + diff, old_count - end_index)\n      end\n        --| Set new count\n      set_count (new_size)\n        --| We copy the substring.\n      l_area.copy_data (s.area, s.area_lower, start_index - 1, s_count)\n    ensure\n      new_count: count = old count + old s.count - end_index + start_index - 1\n      replaced: elks_checking implies\n        (Current ~ (old (substring (1, start_index - 1) +\n          s + substring (end_index + 1, count))))\n    end\n\n  replace_substring_all (original, new: READABLE_STRING_8)\n      -- Replace every occurrence of `original' with `new'.\n    require\n      original_exists: original /= Void\n      new_exists: new /= Void\n      original_not_empty: not original.is_empty\n    local\n      l_first_pos, l_next_pos: INTEGER\n      l_orig_count, l_new_count, l_new_lower, l_count, i, l_index_count: INTEGER\n      l_src_index, l_dest_index, l_prev_index, l_copy_delta: INTEGER\n      l_area, l_new_area: like area\n      l_offset: INTEGER\n      l_string_searcher: like string_searcher\n      l_index_list: SPECIAL [INTEGER]\n    do\n      if not is_empty then\n        l_count := count\n        l_string_searcher := string_searcher\n        l_string_searcher.initialize_deltas (original)\n        l_orig_count := original.count\n        l_new_count := new.count\n        if l_orig_count >= l_new_count then\n          l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, 1, l_count)\n          if l_first_pos > 0 then\n            if l_orig_count = l_new_count then\n                -- String will not be resized, simply perform character substitution\n              from\n                l_area := area\n                l_new_area := new.area\n                l_new_lower := new.area_lower\n              until\n                l_first_pos = 0\n              loop\n                l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1, l_new_count)\n                if l_first_pos + l_new_count <= l_count then\n                  l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_new_count, l_count)\n                else\n                  l_first_pos := 0\n                end\n              end\n            elseif l_orig_count > l_new_count then\n                -- New string is smaller than previous string, we can optimize\n                -- substitution by only moving block between two occurrences of `orginal'.\n              from\n                l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n                l_area := area\n                l_new_area := new.area\n                l_new_lower := new.area_lower\n              until\n                l_next_pos = 0\n              loop\n                  -- Copy new string into Current\n                l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n                  -- Shift characters between `l_first_pos' and `l_next_pos'\n                l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n                  l_first_pos + l_new_count - 1 - l_offset, l_next_pos - l_first_pos - l_orig_count)\n                l_first_pos := l_next_pos\n                l_offset := l_offset + (l_orig_count - l_new_count)\n                if l_first_pos + l_new_count <= l_count then\n                  l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n                else\n                  l_next_pos := 0\n                end\n              end\n                -- Perform final substitution:\n                -- Copy new string into Current\n              l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n                -- Shift characters between `l_first_pos' and the end of the string\n              l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n                l_first_pos + l_new_count - 1 - l_offset, l_count + 1 - l_first_pos - l_orig_count)\n                  -- Perform last substitution\n              l_offset := l_offset + (l_orig_count - l_new_count)\n\n                -- Update `count'\n              set_count (l_count - l_offset)\n            end\n              -- String was modified we need to recompute the `hash_code'.\n            internal_hash_code := 0\n          end\n        elseif attached l_string_searcher.substring_index_list_with_deltas (Current, original, 1, l_count) as l_list then\n            -- Get the number of substitution to be performed by getting a list\n            -- of location where `original' appears.\n          l_index_list := l_list.area\n          l_index_count := l_index_list.count\n            -- Store the index of the last character up to which we need to move\n            -- characters in the reallocated string.\n          l_prev_index := l_count\n            -- Resize Current with the appropriate number of characters\n          l_copy_delta := l_new_count - l_orig_count\n          l_count := l_count + (l_index_count * l_copy_delta)\n          l_area := area.resized_area_with_default ('%U', l_count + 1)\n          area := l_area\n            -- Perform the substitution starting from the end.\n          from\n            i := l_index_count\n            l_new_lower := new.area_lower\n            l_new_area := new.area\n          until\n            i = 0\n          loop\n            i := i - 1\n            l_src_index := l_index_list.item (i)\n            l_dest_index := l_src_index + i * l_copy_delta\n              -- Shift non-matching characters to the right of the newly replaced string.\n            l_area.overlapping_move (l_src_index + l_orig_count - 1, l_dest_index + l_new_count - 1, l_prev_index - l_src_index - l_orig_count + 1)\n              -- Store new end of string where characters will be moved.\n            l_prev_index := l_src_index - 1\n\n              -- Copy `new' to its appropriate position\n            l_area.copy_data (l_new_area, l_new_lower, l_dest_index - 1, l_new_count)\n          end\n            -- Update the new `count' which also resets the `hash_code'.\n          set_count (l_count)\n        end\n      end\n    end\n\n  replace_blank\n      -- Replace all current characters with blanks.\n    do\n      fill_with (' ')\n    ensure\n      same_size: (count = old count) and (capacity = old capacity)\n      all_blank: elks_checking implies occurrences (' ') = count\n    end\n\n  fill_blank\n      -- Fill with `capacity' blank characters.\n    do\n      fill_character (' ')\n    ensure\n      filled: full\n      same_size: (count = capacity) and (capacity = old capacity)\n      -- all_blank: For every `i' in `count'..`capacity', `item' (`i') = `Blank'\n    end\n\n  fill_with (c: CHARACTER_8)\n      -- Replace every character with `c'.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if l_count /= 0 then\n        area.fill_with (c, 0, l_count - 1)\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  replace_character (c: CHARACTER_8)\n      -- Replace every character with `c'.\n    obsolete\n      \"ELKS 2001: use `fill_with' instead'\"\n    do\n      fill_with (c)\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    do\n      if n < count then\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    local\n      nb: like count\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    local\n      nb, nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count - 1\n        l_area := area\n      until\n        nb_space > nb or else not l_area.item (nb_space).is_space\n      loop\n        nb_space := nb_space + 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count value.\n        nb := nb + 1 - nb_space\n          -- Shift characters to the left.\n        l_area.overlapping_move (nb_space, 0, nb)\n          -- Set new count.\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the right of current string.\n      from\n        nb := count - 1\n        i := nb\n        l_area := area\n      until\n        i < 0 or else not l_area.item (i).is_space\n      loop\n        nb_space := nb_space + 1\n        i := i - 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count.\n        count := nb + 1 - nb_space\n        internal_hash_code := 0\n      end\n    end\n\n  share (other: STRING_8)\n      -- Make current string share the text of `other'.\n      -- Subsequent changes to the characters of current string\n      -- will also affect `other', and conversely.\n    require\n      argument_not_void: other /= Void\n    do\n      area := other.area\n      count := other.count\n      internal_hash_code := 0\n    ensure\n      shared_count: other.count = count\n      shared_area: other.area = area\n    end\n\n  put (c: CHARACTER_8; i: INTEGER)\n      -- Replace character at position `i' by `c'.\n    do\n      area.put (c, i - 1)\n      internal_hash_code := 0\n    ensure then\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\n  put_code (v: NATURAL_32; i: INTEGER)\n      -- Replace character at position `i' by character of code `v'.\n    do\n      area.put (v.to_character_8, i - 1)\n      internal_hash_code := 0\n    end\n\n  precede, prepend_character (c: CHARACTER_8)\n      -- Add `c' at front.\n    local\n      l_area: like area\n    do\n      if count = capacity then\n        resize (count + additional_space)\n      end\n      l_area := area\n      l_area.overlapping_move (0, 1, count)\n      l_area.put (c, 0)\n      count := count + 1\n      internal_hash_code := 0\n    ensure\n      new_count: count = old count + 1\n    end\n\n  prepend_string_general (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    do\n      if attached {READABLE_STRING_8} s as l_s8 then\n        prepend (l_s8)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  prepend (s: READABLE_STRING_8)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n    do\n      insert_string (s, 1)\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n\n          -- First shift from `s.count' position all characters of current.\n        l_area.overlapping_move (0, l_s_count, count)\n\n          -- Copy string `s' at beginning.\n        l_area.copy_data (s.area, s.area_lower + start_index - 1, 0, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index) + Current))\n    end\n\n  prepend_boolean (b: BOOLEAN)\n      -- Prepend the string representation of `b' at front.\n    do\n      prepend (b.out)\n    end\n\n  prepend_double (d: DOUBLE)\n      -- Prepend the string representation of `d' at front.\n    do\n      prepend (d.out)\n    end\n\n  prepend_integer (i: INTEGER)\n      -- Prepend the string representation of `i' at front.\n    do\n      prepend (i.out)\n    end\n\n  prepend_real (r: REAL)\n      -- Prepend the string representation of `r' at front.\n    do\n      prepend (r.out)\n    end\n\n  prepend_string (s: detachable READABLE_STRING_8)\n      -- Prepend characters of `s', if not void, at front.\n    do\n      if s /= Void then\n        prepend (s)\n      end\n    end\n\n  append_string_general (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    do\n      if attached {READABLE_STRING_8} s as l_s8 then\n        append (l_s8)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  append (s: READABLE_STRING_8)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (Current + s))\n    end\n\n  append_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower + start_index - 1, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + (end_index - start_index + 1)\n      appended: elks_checking implies same_string (old (Current + s.substring (start_index, end_index)))\n    end\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    do\n      Result := new_string (count + s.count)\n      Result.append (Current)\n      Result.append_string_general (s)\n    end\n\n  append_string (s: detachable READABLE_STRING_8)\n      -- Append a copy of `s', if not void, at end.\n    do\n      if s /= Void then\n        append (s)\n      end\n    ensure\n      appended: s /= Void implies\n        (elks_checking implies Current ~ (old twin + old s.twin))\n    end\n\n  append_integer (i: INTEGER)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_8 (i: INTEGER_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_8}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_16 (i: INTEGER_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_16}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_64 (i: INTEGER_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_64}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_8 (i: NATURAL_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_16 (i: NATURAL_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_32 (i: NATURAL_32)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_32\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_64 (i: NATURAL_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_real (r: REAL)\n      -- Append the string representation of `r' at end.\n    do\n      append (r.out)\n    end\n\n  append_double (d: DOUBLE)\n      -- Append the string representation of `d' at end.\n    do\n      append (d.out)\n    end\n\n  append_character, extend (c: CHARACTER_8)\n      -- Append `c' at end.\n    local\n      current_count: INTEGER\n    do\n      current_count := count\n      if current_count = capacity then\n        resize (current_count + additional_space)\n      end\n      area.put (c, current_count)\n      count := current_count + 1\n      internal_hash_code := 0\n    ensure then\n      item_inserted: item (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append_boolean (b: BOOLEAN)\n      -- Append the string representation of `b' at end.\n    do\n      append (b.out)\n    end\n\n  insert (s: READABLE_STRING_8; i: INTEGER)\n      -- Add `s' to left of position `i' in current string.\n    obsolete\n      \"ELKS 2001: use `insert_string' instead\"\n    require\n      string_exists: s /= Void\n      index_small_enough: i <= count + 1\n      index_large_enough: i > 0\n    do\n      insert_string (s, i)\n    ensure\n      inserted: elks_checking implies\n        (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_string (s: READABLE_STRING_8; i: INTEGER)\n      -- Insert `s' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      string_exists: s /= Void\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := s.count\n      if l_s_count /= 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n        pos := i - 1\n\n          -- First shift from `s.count' position all characters starting at index `pos'.\n        l_area.overlapping_move (pos, pos + l_s_count, count - pos)\n\n          -- Copy string `s' at index `pos'.\n        l_area.copy_data (s.area, s.area_lower, pos, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      inserted: elks_checking implies (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_character (c: CHARACTER_8; i: INTEGER)\n      -- Insert `c' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_area: like area\n    do\n        -- Resize Current if necessary.\n      new_size := 1 + count\n      if new_size > capacity then\n        resize (new_size + additional_space)\n      end\n\n        -- Perform all operations using a zero based arrays.\n      pos := i - 1\n      l_area := area\n\n        -- First shift from `s.count' position all characters starting at index `pos'.\n      l_area.overlapping_move (pos, pos + 1, count - pos)\n\n        -- Insert new character\n      l_area.put (c, pos)\n\n      count := new_size\n      internal_hash_code := 0\n    ensure\n      one_more_character: count = old count + 1\n      inserted: item (i) = c\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i, count))\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n        -- Shift characters to the left.\n      area.overlapping_move (i, i - 1, l_count - i)\n        -- Update content.\n      count := l_count - 1\n      internal_hash_code := 0\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (n.min (count) + 1, count))\n    end\n\n  remove_substring (start_index, end_index: INTEGER)\n      -- Remove all characters from `start_index'\n      -- to `end_index' inclusive.\n    require\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningful_interval: start_index <= end_index + 1\n    local\n      l_count, nb_removed: INTEGER\n    do\n      nb_removed := end_index - start_index + 1\n      if nb_removed > 0 then\n        l_count := count\n        area.overlapping_move (start_index + nb_removed - 1, start_index - 1, l_count - end_index)\n        count := l_count - nb_removed\n        internal_hash_code := 0\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, start_index - 1) + old substring (end_index + 1, count))\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if n > l_count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_head (l_count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, count - n.min (count)))\n    end\n\n  prune (c: CHARACTER_8)\n      -- Remove first occurrence of `c', if any.\n    require else\n      True\n    local\n      counter: INTEGER\n    do\n      from\n        counter := 1\n      until\n        counter > count or else (item (counter) = c)\n      loop\n        counter := counter + 1\n      end\n      if counter <= count then\n        remove (counter)\n      end\n    end\n\n  prune_all (c: CHARACTER_8)\n      -- Remove all occurrences of `c'.\n    require else\n      True\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n      l_char: CHARACTER_8\n    do\n        -- Traverse string and shift characters to the left\n        -- each time we find an occurrence of `c'.\n      from\n        l_area := area\n        nb := count\n      until\n        i = nb\n      loop\n        l_char := l_area.item (i)\n        if l_char /= c then\n          l_area.put (l_char, j)\n          j := j + 1\n        end\n        i := i + 1\n      end\n      count := j\n      internal_hash_code := 0\n    ensure then\n      changed_count: count = (old count) - (old occurrences (c))\n      -- removed: For every `i' in 1..`count', `item' (`i') /= `c'\n    end\n\n  prune_all_leading (c: CHARACTER_8)\n      -- Remove all leading occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (1) /= c\n      loop\n        remove (1)\n      end\n    end\n\n  prune_all_trailing (c: CHARACTER_8)\n      -- Remove all trailing occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (count) /= c\n      loop\n        remove (count)\n      end\n    end\n\n  wipe_out\n      -- Remove all characters.\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure then\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\n  clear_all\n      -- Reset all characters.\n    obsolete\n      \"Use `wipe_out' instead.\"\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\nfeature -- Resizing\n\n  adapt_size\n      -- Adapt the size to accommodate `count' characters.\n    do\n      resize (count)\n    end\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n    do\n      area := area.aliased_resized_area_with_default ('%/000/', newsize + 1)\n    end\n\n  grow (newsize: INTEGER)\n      -- Ensure that the capacity is at least `newsize'.\n    do\n      if newsize > capacity then\n        resize (newsize)\n      end\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_string: same_string (old twin)\n    end\n\nfeature -- Conversion\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    do\n      Result := twin\n      Result.to_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    do\n      Result := twin\n      Result.to_upper\n    end\n\n  left_justify\n      -- Left justify Current using `count' as witdth.\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n        -- Remove leading white spaces.\n      nb := count\n      left_adjust\n\n        -- Get new count\n      i := count\n      if i < nb then\n          -- `left_adjust' did remove some characters, so we need to add\n          -- some white spaces at the end of the string.\n        from\n          l_area := area\n        until\n          i = nb\n        loop\n          l_area.put (' ', i)\n          i := i + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  center_justify\n      -- Center justify Current using `count' as width.\n    local\n      i, nb, l_offset: INTEGER\n      left_nb_space, right_nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count\n        l_area := area\n      until\n        left_nb_space = nb or else not l_area.item (left_nb_space).is_space\n      loop\n        left_nb_space := left_nb_space + 1\n      end\n\n        -- Compute number of spaces at the right of current string.\n      from\n        i := nb - 1\n        l_area := area\n      until\n        i = -1 or else not l_area.item (i).is_space\n      loop\n        right_nb_space := right_nb_space + 1\n        i := i - 1\n      end\n\n        -- We encourage that more spaces will be put to the left, when\n        -- number of spaces is not even.\n      l_offset := left_nb_space + right_nb_space\n      if l_offset \\\\ 2 = 0 then\n        l_offset := left_nb_space - l_offset // 2\n      else\n        l_offset := left_nb_space - l_offset // 2 - 1\n      end\n      if l_offset /= 0 then\n          -- Shift characters to the right or left (depending on sign of\n          -- `l_offset' by `l_offset' position.\n        l_area.move_data (left_nb_space, left_nb_space - l_offset,\n          nb - left_nb_space - right_nb_space)\n\n        if l_offset < 0 then\n            -- Fill left part with spaces.\n          l_area.fill_with (' ', left_nb_space, left_nb_space - l_offset - 1)\n        else\n            -- Fill right part with spaces.\n          l_area.fill_with (' ', nb - right_nb_space - l_offset, nb - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  right_justify\n      -- Right justify Current using `count' as width.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n      nb := count\n      right_adjust\n      i := count\n      nb_space := nb - i\n      if nb_space > 0 then\n          -- Shift characters to the right.\n        from\n          l_area := area\n        until\n          i = 0\n        loop\n          i := i - 1\n          l_area.put (l_area.item (i), i + nb_space)\n        variant\n          i + 1\n        end\n\n          -- Fill left part with spaces.\n        from\n        until\n          nb_space = 0\n        loop\n          nb_space := nb_space - 1\n          l_area.put (' ', nb_space)\n        variant\n          nb_space + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n    end\n\n  character_justify (pivot: CHARACTER_8; position: INTEGER)\n      -- Justify a string based on a `pivot'\n      -- and the `position' it needs to be in\n      -- the final string.\n      -- This will grow the string if necessary\n      -- to get the pivot in the correct place.\n    require\n      valid_position: position <= capacity\n      positive_position: position >= 1\n      pivot_not_space: pivot /= ' '\n      not_empty: not is_empty\n    local\n      l_index_of_pivot, l_new_size: INTEGER\n      l_area: like area\n    do\n      l_index_of_pivot := index_of (pivot, 1)\n      if l_index_of_pivot /= 0 then\n        if l_index_of_pivot < position then\n            -- We need to resize Current so that we can shift Current by\n            -- `l_index_of_pivot - position'.\n          l_new_size := count + position - l_index_of_pivot\n          grow (l_new_size)\n          l_area := area\n          l_area.move_data (0, position - l_index_of_pivot, count)\n          l_area.fill_with (' ', 0, position - l_index_of_pivot - 1)\n          count := l_new_size\n        else\n            -- Simply shift content to the left and reset trailing with spaces.\n          l_area := area\n          l_area.move_data (l_index_of_pivot - position, 0, count - l_index_of_pivot + position)\n          l_area.fill_with (' ', count - l_index_of_pivot + position, count - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  to_lower\n      -- Convert to lower case.\n    do\n      to_lower_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_lower)\n    end\n\n  to_upper\n      -- Convert to upper case.\n    do\n      to_upper_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_upper)\n    end\n\n  linear_representation: LINEAR [CHARACTER_8]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_8]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\n  frozen to_c: ANY\n      -- A reference to a C form of current string.\n      -- Useful only for interfacing with C software.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    local\n      l_area: like area\n    do\n      l_area := area\n      l_area.put ('%U', count)\n      Result := l_area\n    end\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    do\n      Result := twin\n      if count > 0 then\n        Result.mirror\n      end\n    end\n\n  mirror\n      -- Reverse the order of characters.\n      -- \"Hello world\" -> \"dlrow olleH\".\n    local\n      a: like area\n      c: CHARACTER_8\n      i, j: INTEGER\n    do\n      if count > 0 then\n        from\n          i := count - 1\n          a := area\n        until\n          i <= j\n        loop\n          c := a.item (i)\n          a.put (a.item (j), i)\n          a.put (c, j)\n          i := i - 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      -- reversed: For every `i' in 1..`count', `item' (`i') = old `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        Result := new_string (end_index - start_index + 1)\n        Result.area.copy_data (area, start_index - 1, 0, end_index - start_index + 1)\n        Result.set_count (end_index - start_index + 1)\n      else\n        Result := new_string (0)\n      end\n    end\n\n  multiply (n: INTEGER)\n      -- Duplicate a string within itself\n      -- (\"hello\").multiply(3) => \"hellohellohello\"\n    require\n      meaningful_multiplier: n >= 1\n    local\n      s: like Current\n      i: INTEGER\n    do\n      s := twin\n      grow (n * count)\n      from\n        i := n\n      until\n        i = 1\n      loop\n        append (s)\n        i := i - 1\n      end\n    end\n\nfeature {STRING_HANDLER} -- Implementation\n\n  frozen set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    do\n      count := number\n      internal_hash_code := 0\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    do\n      create Result.make (n)\n    end\n\nfeature -- Transformation\n\n  correct_mismatch\n      -- Attempt to correct object mismatch during retrieve using `mismatch_information'.\n    do\n      -- Nothing to be done because we only added `internal_hash_code' that will\n      -- be recomputed next time we query `hash_code'.\n    end\n\nfeature {NONE} -- Implementation\n\n  empty_area: SPECIAL [CHARACTER_8]\n      -- Empty `area' to avoid useless creation of empty areas when wiping out a STRING.\n    obsolete\n      \"Simply create `area' directly.\"\n    do\n      create Result.make_empty (1)\n      Result.extend ('%U')\n    ensure\n      empty_area_not_void: Result /= Void\n    end\n\ninvariant\n  extendible: extendible\n  compare_character: not object_comparison\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_general.e","content":"note\n  description: \"Common ancestors to all STRING classes.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-19 07:36:10 -0700 (Wed, 19 Mar 2014) $\"\n  revision: \"$Revision: 94633 $\"\n\ndeferred class\n  STRING_GENERAL\n\ninherit\n  READABLE_STRING_GENERAL\n    export\n      {ANY} copy, standard_copy, deep_copy\n    end\n\nconvert\n  as_string_32: {READABLE_STRING_32, STRING_32},\n  to_cil: {SYSTEM_STRING}\n\nfeature -- Settings\n\n  put_code (v: like code; i: INTEGER)\n      -- Put code `v' at position `i'.\n    require\n      valid_code: valid_code (v)\n      valid_index: valid_index (i)\n    deferred\n    ensure\n      inserted: code (i) = v\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\nfeature {STRING_HANDLER} -- Settings\n\n  set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    require\n      valid_count: 0 <= number and number <= capacity\n    deferred\n    ensure\n      new_count: count = number\n    end\n\n  set_internal_hash_code (v: like internal_hash_code)\n      -- Set `internal_hash_code' with `v'.\n    require\n      v_nonnegative: v >= 0\n    do\n      internal_hash_code := v\n    ensure\n      internal_hash_code_set: internal_hash_code = v\n    end\n\nfeature -- Element change\n\n  append_code (c: like code)\n      -- Append `c' at end.\n    require\n      valid_code: valid_code (c)\n    local\n      current_count: INTEGER\n    do\n      current_count := count + 1\n      if current_count > capacity then\n        resize (current_count)\n      end\n      set_count (current_count)\n      put_code (c, current_count)\n    ensure then\n      item_inserted: code (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n        from\n          i := 1\n        until\n          i > l_s_count\n        loop\n          append_code (s.code (i))\n          i := i + 1\n        end\n        set_count (l_new_size)\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (to_string_32 + s))\n    end\n\n  append_substring (s: READABLE_STRING_GENERAL; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n        from\n          i := start_index\n        until\n          i > end_index\n        loop\n          append_code (s.code (i))\n          i := i + 1\n        end\n        set_count (l_new_size)\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      appended: elks_checking implies same_string (old (to_string_32 + s.substring (start_index, end_index)))\n    end\n\n  prepend (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n          -- Copy `Current' at the end starting from the end since it will probably overlap.\n        set_count (l_new_size)\n        from\n          i := l_count\n        until\n          i = 0\n        loop\n          put_code (code (i), i + l_s_count)\n          i := i - 1\n        end\n          -- Copy `s' at the beginning of Current.\n        from\n          i := 1\n        until\n          i > l_s_count\n        loop\n          put_code (s.code (i), i)\n          i := i + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s.to_string_32 + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_GENERAL; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i, j: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n          -- Copy `Current' at the end starting from the end since it will probably overlap.\n        set_count (l_new_size)\n        from\n          i := l_count\n        until\n          i = 0\n        loop\n          put_code (code (i), i + l_s_count)\n          i := i - 1\n        end\n          -- Copy `s' at the beginning of Current.\n        from\n          i := start_index\n          j := 1\n        until\n          i > end_index\n        loop\n          put_code (s.code (i), j)\n          i := i + 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index).to_string_32 + Current))\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    deferred\n    ensure\n      new_count: count = n.min (old count)\n      kept: elks_checking implies Current ~ (old substring (1, n.min (count)))\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    deferred\n    ensure\n      new_count: count = n.min (old count)\n      kept: elks_checking implies Current ~ (old substring (count - n.min(count) + 1, count))\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    deferred\n    ensure\n      valid_count: count <= old count\n      new_count: not is_empty implies not item (1).is_space\n      kept: elks_checking implies Current ~ ((old twin).substring (old count - count + 1, old count))\n      only_spaces_removed_before: elks_checking implies (old twin).is_substring_whitespace (1, (old twin).substring_index (Current, 1) - 1)\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    deferred\n    ensure\n      valid_count: count <= old count\n      new_count: not is_empty implies not item (count).is_space\n      kept: elks_checking implies Current ~ ((old twin).substring (1, count))\n      only_spaces_removed_after: elks_checking implies (old twin).is_substring_whitespace ((old twin).substring_index (Current, 1) + count, old count)\n    end\n\n  adjust\n      -- Remove leading and/or trailing whitespace.\n    do\n      left_adjust\n      right_adjust\n    ensure\n      valid_count: count <= old count\n      new_count_left: not is_empty implies not item (1).is_space\n      new_count_right: not is_empty implies not item (count).is_space\n      kept: elks_checking implies (old twin).has_substring (Current)\n      only_spaces_removed_before: elks_checking implies (old twin).is_substring_whitespace (1, (old twin).substring_index (Current, 1) - 1)\n      only_spaces_removed_after: elks_checking implies (old twin).is_substring_whitespace ((old twin).substring_index (Current, 1) + count, old count)\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    require\n      valid_index: valid_index (i)\n    deferred\n    ensure\n      new_count: count = old count - 1\n      removed: elks_checking implies\n        to_string_32 ~ (old substring (1, i - 1).to_string_32 + old substring (i + 1, count).to_string_32)\n    end\n\nfeature -- Resizing\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n      -- Do not lose any previously entered character.\n    require\n      new_size_large_enough: newsize >= count\n    deferred\n    ensure\n      same_count: count = old count\n      capacity_large_enough: capacity >= newsize\n      same_content: elks_checking implies same_string (old twin)\n    end\n\ninvariant\n  mutable: not is_immutable\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_handler.e","content":"note\n  description: \"Objects that can access `set_count' from STRING\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  STRING_HANDLER\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"table.e","content":"note\n  description: \"Containers whose items are accessible through keys\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: table, access;\n  access: key, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class TABLE [G, H] inherit\n\n  BAG [G]\n    rename\n      put as bag_put\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (k: H): G assign force\n      -- Entry of key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    end\n\nfeature -- Status report\n\n  valid_key (k: H): BOOLEAN\n      -- Is `k' a valid key?\n    deferred\n    end\n\nfeature -- Element change\n\n  put (v: G; k: H)\n      -- Associate value `v' with key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    end\n\n  force (v: G; k: H)\n      -- Associate value `v' with key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    ensure\n      inserted: item (k) = v\n    end\n\nfeature {NONE} -- Inapplicable\n\n  bag_put (v: G)\n    do\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"to_special.e","content":"note\n  description: \"References to special objects, for direct access to arrays and strings\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass TO_SPECIAL [T]\n\ncreate\n  make_empty_area,\n  make_filled_area\n\nfeature -- Access\n\n  area: SPECIAL [T]\n      -- Special data zone\n\nfeature {NONE} -- Initialization\n\n  make_empty_area (n: INTEGER)\n      -- Creates a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    do\n      create area.make_empty (n)\n    ensure\n      area_allocated: area /= Void\n      capacity_set: area.capacity = n\n      count_set: area.count = 0\n    end\n\n  make_filled_area (a_default_value: T; n: INTEGER)\n      -- Creates a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    do\n      create area.make_filled (a_default_value, n)\n    ensure\n      area_allocated: area /= Void\n      capacity_set: area.capacity = n\n      count_set: area.count = n\n      area_filled: area.filled_with (a_default_value, 0, n - 1)\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): T assign put\n      -- Entry at index `i', if in index interval\n    require\n      valid_index: valid_index (i)\n    do\n      Result := area.item (i)\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    do\n      Result := area.valid_index (i)\n    end\n\nfeature -- Element change\n\n  put (v: T; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    require\n      valid_index: valid_index (i)\n    do\n      area.put (v, i)\n    ensure\n      inserted: item (i) = v\n    end\n\nfeature {NONE} -- Element change\n\n  set_area (other: like area)\n      -- Make `other' the new `area'\n    do\n      area := other\n    ensure\n      area_set: area = other\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
//# sourceMappingURL=data:application/json;base64,