var __eiffel_builtin = [];
__eiffel_builtin.push({"filename":"C_STRING.e","content":"note\n  description: \"A low-level string class to solve some garbage %\n    %collector problems (mainly objects moving around) when %\n    %interfacing with C APIs.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-20 16:35:07 -0800 (Sun, 20 Jan 2013) $\"\n  revision: \"$Revision: 92128 $\"\n\nclass\n  C_STRING\n\ninherit\n  STRING_HANDLER\n\ncreate\n  make,\n  make_empty,\n  make_by_pointer,\n  make_by_pointer_and_count,\n  make_shared_from_pointer,\n  make_shared_from_pointer_and_count,\n  own_from_pointer,\n  own_from_pointer_and_count\n\nfeature {NONE} -- Initialization\n\n  make (a_string: READABLE_STRING_GENERAL)\n      -- Make a C string from `a_string'.\n    require\n      a_string_not_void: a_string /= Void\n      a_string_is_valid_as_string_8: a_string.is_valid_as_string_8\n    do\n      make_empty (a_string.count)\n      set_string (a_string)\n    end\n\n  make_empty (a_length: INTEGER)\n      -- Make an empty C string of `a_length' characters.\n      -- C memory area is not initialized.\n    require\n      a_length_positive: a_length >= 0\n    do\n      create managed_data.make (a_length + 1)\n      count := 0\n    end\n\n  make_by_pointer (a_ptr: POINTER)\n      -- Make a copy of string pointed by `a_ptr'.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n    do\n      make_by_pointer_and_count (a_ptr, c_strlen (a_ptr))\n    end\n\n  make_by_pointer_and_count (a_ptr: POINTER; a_length: INTEGER)\n      -- Make a copy of first `a_length' byte of string pointed by `a_ptr'.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      a_length_non_negative: a_length >= 0\n    do\n      count := a_length\n      create managed_data.make ((a_length + 1))\n      managed_data.item.memory_copy (a_ptr, a_length)\n    end\n\n  make_shared_from_pointer (a_ptr: POINTER)\n      -- New instance sharing `a_ptr'.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n    do\n      make_shared_from_pointer_and_count (a_ptr, c_strlen (a_ptr))\n    end\n\n  make_shared_from_pointer_and_count (a_ptr: POINTER; a_length: INTEGER)\n      -- New instance sharing `a_ptr' of `a_length' byte.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      a_length_non_negative: a_length >= 0\n    do\n      count := a_length\n      create managed_data.share_from_pointer (a_ptr, a_length + 1)\n    end\n\n  own_from_pointer (a_ptr: POINTER)\n      -- New instance using `a_ptr' as memory. Current will free pointed memory\n      -- by `a_ptr' when collected.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n    do\n      own_from_pointer_and_count (a_ptr, c_strlen (a_ptr))\n    end\n\n  own_from_pointer_and_count (a_ptr: POINTER; a_length: INTEGER)\n      -- New instance using `a_ptr' as memory. Current will free pointed memory\n      -- by `a_ptr' when collected.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      a_length_non_negative: a_length >= 0\n    do\n      count := a_length\n      create managed_data.own_from_pointer (a_ptr, a_length)\n    end\n\nfeature -- Initialization\n\n  set_shared_from_pointer (a_ptr: POINTER)\n      -- Share `a_ptr'.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n    do\n      set_shared_from_pointer_and_count (a_ptr, c_strlen (a_ptr))\n    end\n\n  set_shared_from_pointer_and_count (a_ptr: POINTER; a_length: INTEGER)\n      -- Share `a_ptr' of `a_length' byte.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      a_length_non_negative: a_length >= 0\n    do\n      count := a_length\n      if not managed_data.is_shared then\n        create managed_data.share_from_pointer (a_ptr, a_length + 1)\n      else\n        managed_data.set_from_pointer (a_ptr, a_length + 1)\n      end\n    end\n\n  share_from_pointer (a_ptr: POINTER)\n      -- New instance sharing `a_ptr'.\n    obsolete\n      \"Use `make_shared_from_pointer' to create object and `set_shared_from_pointer' to modify it.\"\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n    do\n      set_shared_from_pointer_and_count (a_ptr, c_strlen (a_ptr))\n    end\n\n  share_from_pointer_and_count (a_ptr: POINTER; a_length: INTEGER)\n      -- New instance sharing `a_ptr' of `a_length' byte.\n    obsolete\n      \"Use `make_shared_from_pointer_and_count' to create object and `set_shared_from_pointer_and_count' to modify it.\"\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      a_length_non_negative: a_length >= 0\n    do\n      set_shared_from_pointer_and_count (a_ptr, a_length)\n    end\n\nfeature -- Access\n\n  substring (start_pos, end_pos: INTEGER): STRING\n      -- Copy of substring containing all characters at indices\n      -- between `start_pos' and `end_pos'.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_position_not_too_big: end_pos <= capacity\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      create Result.make (l_count)\n      Result.set_count (l_count)\n      read_substring_into (Result, start_pos, end_pos)\n    ensure\n      susbstring_not_void: Result /= Void\n    end\n\n  string: STRING\n      -- Eiffel string, ignoring `count'. Reads until a null character is being read.\n    do\n      Result := substring (1, c_strlen (item))\n    ensure\n      string_not_void: Result /= Void\n    end\n\n  copy_to_string (a_string: STRING_GENERAL; source_index, destination_index, n: INTEGER)\n      -- Copy `n' characters of `Current' from `source_index' position to `a_string' at\n      -- `destination_index'. Other characters of `a_string' remain unchanged.\n    require\n      a_string_not_void: a_string /= Void\n      source_index_positive: source_index >= 1\n      destination_index_positive: destination_index >= 1\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + (n - 1) <= capacity\n      n_is_small_enough_for_destination: destination_index + (n - 1) <= a_string.count\n    local\n      l_data: like managed_data\n      i, j, nb: INTEGER\n    do\n      from\n        i := source_index - 1\n        j := destination_index\n        nb := source_index + (n - 1)\n        l_data := managed_data\n      until\n        i = nb\n      loop\n        a_string.put_code (l_data.read_natural_8 (i), j)\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  read_substring_into (a_string: STRING_GENERAL; start_pos, end_pos: INTEGER)\n      -- Copy of substring containing all characters at indices\n      -- between `start_pos' and `end_pos' into `a_string'.\n    require\n      a_string_not_void: a_string /= Void\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_position_not_too_big: end_pos <= capacity\n      a_string_large_enough: a_string.count >= end_pos - start_pos + 1\n    local\n      l_data: like managed_data\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_pos - 1\n        nb := end_pos - start_pos\n        l_data := managed_data\n        j := 1\n      until\n        i > nb\n      loop\n        a_string.put_code (l_data.read_natural_8 (i), j)\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  read_string_into (a_string: STRING_GENERAL)\n      -- Copy of substring containing all characters at indices\n      -- between `start_pos' and `end_pos' into `a_string' replacing any\n      -- existing characters.\n    require\n      a_string_not_void: a_string /= Void\n      a_string_large_enough: a_string.count >= count\n    do\n      read_substring_into (a_string, 1, count)\n    end\n\n  read_substring_into_character_8_area (a_area: SPECIAL [CHARACTER_8]; start_pos, end_pos: INTEGER)\n      -- Copy of substring containing all characters at indices\n      -- between `start_pos' and `end_pos' into `a_area'.\n    require\n      a_area_not_void: a_area /= Void\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_position_not_too_big: end_pos <= capacity\n      a_area_large_enough: a_area.count >= end_pos - start_pos + 1\n    local\n      l_data: like managed_data\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_pos - 1\n        nb := end_pos - start_pos\n        l_data := managed_data\n      until\n        i > nb\n      loop\n        a_area.put (l_data.read_natural_8 (i).to_character_8, j)\n        i := i + 1\n        j := j + 1\n      end\n    ensure\n      copied: -- for i in 0..end_pos - start_pos, a_area [i] = Current [i + start_pos]\n    end\n\n  read_substring_into_character_32_area (a_area: SPECIAL [CHARACTER_32]; start_pos, end_pos: INTEGER)\n      -- Copy of substring containing all characters at indices\n      -- between `start_pos' and `end_pos' into `a_area'.\n    require\n      a_area_not_void: a_area /= Void\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_position_not_too_big: end_pos <= capacity\n      a_area_large_enough: a_area.count >= end_pos - start_pos + 1\n    local\n      l_data: like managed_data\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_pos - 1\n        nb := end_pos - start_pos\n        l_data := managed_data\n      until\n        i > nb\n      loop\n        a_area.put (l_data.read_natural_8 (i).to_character_32, j)\n        i := i + 1\n        j := j + 1\n      end\n    ensure\n      copied: -- for i in 0..end_pos - start_pos, a_area [i] = Current [i + start_pos]\n    end\n\n  item: POINTER\n      -- Get pointer to allocated area.\n    do\n      Result := managed_data.item\n    ensure\n      item_not_null: Result /= default_pointer\n    end\n\n  managed_data: MANAGED_POINTER\n      -- Hold data of Current.\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Number of characters in Current.\n    do\n      Result := managed_data.count\n    end\n\n  bytes_count: INTEGER\n      -- Number of bytes represented by the string.\n    do\n      Result := count\n    end\n\n  count: INTEGER\n      -- Number of characters in Current.\n\n  character_size: INTEGER = 1\n      -- Size of a character\n\nfeature -- Element change\n\n  set_string (a_string: READABLE_STRING_GENERAL)\n      -- Set `string' with `a_string'.\n    require\n      a_string_not_void: a_string /= Void\n      a_string_is_string_8: a_string.is_valid_as_string_8\n    do\n      set_substring (a_string, 1, a_string.count)\n    end\n\n  set_substring (a_string: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER)\n      -- Set `string' with `a_string'.\n    require\n      a_string_not_void: a_string /= Void\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= a_string.count\n    local\n      i, nb: INTEGER\n      new_size: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      count := nb\n\n      new_size := nb + 1\n\n      if managed_data.count < new_size  then\n        managed_data.resize (new_size)\n      end\n\n      from\n        i := 0\n      until\n        i = nb\n      loop\n        managed_data.put_natural_8 (a_string.code (i + start_pos).to_natural_8, i)\n        i := i +  1\n      end\n      managed_data.put_natural_8 (0, nb)\n    end\n\n  set_count (a_count: INTEGER)\n      -- Set `count' with `a_count'.\n      -- Note: Current content from index `1' to\n      -- `count.min (a_count)' is unchanged.\n    require\n      a_count_non_negative: a_count >= 0\n    local\n      new_size: INTEGER\n    do\n      new_size := a_count + 1\n      if managed_data.count < new_size then\n        managed_data.resize (new_size)\n      end\n      count := a_count\n    ensure\n      count_set: count = a_count\n    end\n\n  fill_blank\n      -- Fill Current with zeros.\n    do\n      fill_value (0)\n    ensure\n      -- all_values: For every `i' in 1..`count', `item' (`i') = `0'\n    end\n\n  fill_value (a_value: INTEGER_8)\n      -- Fill Current with `a_value'.\n    do\n      managed_data.item.memory_set (a_value, managed_data.count)\n    ensure\n      -- all_values: For every `i' in 1..`count', `item' (`i') = `a_value'\n    end\n\nfeature {NONE} -- Implementation\n\n  c_strlen (ptr: POINTER): INTEGER\n    external\n      \"C signature (char *): EIF_INTEGER use <string.h>\"\n    alias\n      \"strlen\"\n    end\n\ninvariant\n  managed_data_not_void: managed_data /= Void\n  count_not_negative: count >= 0\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"abstract_special.e","content":"note\n  description: \"Ancestor of SPECIAL to perform queries on SPECIAL without knowing its actual generic type.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-04-12 16:54:50 -0700 (Fri, 12 Apr 2013) $\"\n  revision: \"$Revision: 92440 $\"\n\ndeferred class\n  ABSTRACT_SPECIAL\n\ninherit\n  DEBUG_OUTPUT\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Count of special area\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\n  capacity: INTEGER\n      -- Capacity of special area\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    deferred\n    end\n\nfeature -- Output\n\n  debug_output: STRING\n      -- String that should be displayed in debugger to represent `Current'.\n    do\n      create Result.make (12)\n      Result.append_string (\"count=\")\n      Result.append_integer (count)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"active.e","content":"note\n  description: \"[\n    ``Active'' data structures, which at every stage have\n    a possibly undefined ``current item''.\n    Basic access and modification operations apply to the current item.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: active, access\n  access: membership\n  contents: generic\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class ACTIVE [G] inherit\n\n  BAG [G]\n\nfeature -- Access\n\n  item: G\n      -- Current item\n    require\n      readable: readable\n    deferred\n    end\n\nfeature -- Status report\n\n  readable: BOOLEAN\n      -- Is there a current item that may be read?\n    deferred\n    end\n\n  writable: BOOLEAN\n      -- Is there a current item that may be modified?\n    deferred\n    end\n\n  replaceable: BOOLEAN\n      -- Can current item be replaced?\n    do\n      Result := True\n    end\n\nfeature -- Element change\n\n  replace (v: G)\n      -- Replace current item by `v'.\n    require\n      writable: writable\n      replaceable: replaceable\n    deferred\n    ensure\n      item_replaced: item = v\n    end\n\nfeature -- Removal\n\n  remove\n      -- Remove current item.\n    require\n      prunable: prunable\n      writable: writable\n    deferred\n    end\n\ninvariant\n\n  writable_constraint: writable implies readable\n  empty_constraint: is_empty implies (not readable) and (not writable)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"any.e","content":"class\n  ANY\n\nfeature -- Status report\n\n  conforms_to (other: ANY): BOOLEAN\n      -- Does type of current object conform to type\n      -- of `other' (as per Eiffel: The Language, chapter 13)?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    end\n\n  same_type (other: ANY): BOOLEAN\n      -- Is type of current object identical to type of `other'?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      definition: Result = (conforms_to (other) and\n                    other.conforms_to (Current))\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object considered\n      -- equal to current object?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      symmetric: Result implies other ~ Current\n      consistent: standard_is_equal (other) implies Result\n    end\n\n  frozen standard_is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object, and field-by-field identical to it?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      same_type: Result implies same_type (other)\n      symmetric: Result implies other.standard_is_equal (Current)\n    end\n\n  frozen equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void or attached\n      -- to objects considered equal?\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then\n              a.is_equal (b)\n      end\n    ensure\n      definition: Result = (a = Void and b = Void) or else\n            ((a /= Void and b /= Void) and then\n            a.is_equal (b))\n    end\n\n  frozen standard_equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void or attached to\n      -- field-by-field identical objects of the same type?\n      -- Always uses default object comparison criterion.\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then\n              a.standard_is_equal (b)\n      end\n    ensure\n      definition: Result = (a = Void and b = Void) or else\n            ((a /= Void and b /= Void) and then\n            a.standard_is_equal (b))\n    end\n\n  frozen is_deep_equal (other: like Current): BOOLEAN\n      -- Are `Current' and `other' attached to isomorphic object structures?\n    require\n      other_not_void: other /= Void\n    external\n      \"built_in\"\n    ensure\n      shallow_implies_deep: standard_is_equal (other) implies Result\n      same_type: Result implies same_type (other)\n      symmetric: Result implies other.is_deep_equal (Current)\n    end\n\n  frozen deep_equal (a: detachable ANY; b: like a): BOOLEAN\n      -- Are `a' and `b' either both void\n      -- or attached to isomorphic object structures?\n    do\n      if a = Void then\n        Result := b = Void\n      else\n        Result := b /= Void and then a.is_deep_equal (b)\n      end\n    ensure\n      shallow_implies_deep: standard_equal (a, b) implies Result\n      both_or_none_void: (a = Void) implies (Result = (b = Void))\n      same_type: (Result and (a /= Void)) implies (b /= Void and then a.same_type (b))\n      symmetric: Result implies deep_equal (b, a)\n    end\n\nfeature -- Output\n\n  io: STD_FILES\n      -- Handle to standard file setup\n    external\n      \"built_in\"\n    ensure\n      io_not_void: Result /= Void\n    end\n\n  out: STRING\n      -- New string containing terse printable representation\n      -- of current object\n    do\n      Result := tagged_out\n    ensure\n      out_not_void: Result /= Void\n    end\n\n  frozen tagged_out: STRING\n      -- New string containing terse printable representation\n      -- of current object\n    external\n      \"built_in\"\n    ensure\n      tagged_out_not_void: Result /= Void\n    end\n\n  print (o: detachable ANY)\n      -- Write terse external representation of `o'\n      -- on standard output.\n    do\n      if o /= Void then\n        io.put_string (o.out)\n      end\n    end\n\nfeature {NONE} -- Initialization\n\n  default_create\n      -- Process instances of classes with no creation clause.\n      -- (Default: do nothing.)\n    do\n    end\n\nfeature -- Basic operations\n  frozen do_nothing\n      -- Execute a null action.\n    do\n    end\n\ninvariant\n  reflexive_equality: standard_is_equal (Current)\n  reflexive_conformance: conforms_to (Current)\n\n\nend\n"});
__eiffel_builtin.push({"filename":"array.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-25 14:18:20 -0800 (Fri, 25 Jan 2013) $\"\n  revision: \"$Revision: 92138 $\"\n\nclass ARRAY [G] inherit\n\n  RESIZABLE [G]\n    redefine\n      full, copy, is_equal, resizable\n    end\n\n  INDEXABLE [G, INTEGER]\n    rename\n      item as item alias \"[]\"\n    redefine\n      copy, is_equal\n    end\n\n  TO_SPECIAL [G]\n    export\n      {ARRAY} set_area\n    redefine\n      copy, is_equal, item, put, at, valid_index\n    end\n\ncreate\n  make_empty,\n  make,\n  make_filled,\n  make_from_array,\n  make_from_special,\n  make_from_cil\n\nconvert\n  to_cil: {NATIVE_ARRAY [G]},\n  to_special: {SPECIAL [G]},\n  make_from_cil ({NATIVE_ARRAY [G]})\n\nfeature -- Initialization\n\n  make_empty\n      -- Allocate empty array starting at `1'.\n    do\n      lower := 1\n      upper := 0\n      make_empty_area (0)\n    ensure\n      lower_set: lower = 1\n      upper_set: upper = 0\n      items_set: all_default\n    end\n\n  make_filled (a_default_value: G; min_index, max_index: INTEGER)\n      -- Allocate array; set index interval to\n      -- `min_index' .. `max_index'; set all values to default.\n      -- (Make array empty if `min_index' = `max_index' + 1).\n    require\n      valid_bounds: min_index <= max_index + 1\n    local\n      n: INTEGER\n    do\n      lower := min_index\n      upper := max_index\n      if min_index <= max_index then\n        n := max_index - min_index + 1\n      end\n      make_filled_area (a_default_value, n)\n    ensure\n      lower_set: lower = min_index\n      upper_set: upper = max_index\n      items_set: filled_with (a_default_value)\n    end\n\n  make (min_index, max_index: INTEGER)\n      -- Allocate array; set index interval to\n      -- `min_index' .. `max_index'; set all values to default.\n      -- (Make array empty if `min_index' = `max_index' + 1).\n    obsolete\n      \" `make' is not void-safe statically. Use `make_empty' or `make_filled' instead. [07-2010]\"\n    require\n      valid_bounds: min_index <= max_index + 1\n      has_default: min_index <= max_index implies ({G}).has_default\n    do\n      lower := min_index\n      upper := max_index\n      if min_index <= max_index then\n        make_filled_area (({G}).default, max_index - min_index + 1)\n      else\n        make_empty_area (0)\n      end\n    ensure\n      lower_set: lower = min_index\n      upper_set: upper = max_index\n      items_set: all_default\n    end\n\n  make_from_array (a: ARRAY [G])\n      -- Initialize from the items of `a'.\n      -- (Useful in proper descendants of class `ARRAY',\n      -- to initialize an array-like object from a manifest array.)\n    require\n      array_exists: a /= Void\n    do\n      set_area (a.area)\n      lower := a.lower\n      upper := a.upper\n    ensure\n      shared: area = a.area\n      lower_set: lower = a.lower\n      upper_set: upper = a.upper\n    end\n\n  make_from_special (a: SPECIAL [G])\n      -- Initialize Current from items of `a'.\n    require\n      special_attached: a /= Void\n    do\n      set_area (a)\n      lower := 1\n      upper := a.count\n    ensure\n      shared: area = a\n      lower_set: lower = 1\n      upper_set: upper = a.count\n    end\n\n  make_from_cil (na: NATIVE_ARRAY [like item])\n      -- Initialize array from `na'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n      na_not_void: na /= Void\n    do\n      create area.make_from_native_array (na)\n      lower := 1\n      upper := area.count\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): G assign put\n      -- Entry at index `i', if in index interval\n    do\n      Result := area.item (i - lower)\n    end\n\n  entry (i: INTEGER): G\n      -- Entry at index `i', if in index interval\n    require\n      valid_key: valid_index (i)\n    do\n      Result := item (i)\n    end\n\n  has (v: G): BOOLEAN\n      -- Does `v' appear in array?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      l_area := area\n      nb := upper - lower\n      if object_comparison and v /= Void then\n        from\n        until\n          i > nb or Result\n        loop\n          Result := l_area.item (i) ~ v\n          i := i + 1\n        end\n      else\n        from\n        until\n          i > nb or Result\n        loop\n          Result := l_area.item (i) = v\n          i := i + 1\n        end\n      end\n    end\n\nfeature -- Measurement\n\n  lower: INTEGER\n      -- Minimum index\n\n  upper: INTEGER\n      -- Maximum index\n\n  count, capacity: INTEGER\n      -- Number of available indices\n    do\n      Result := upper - lower + 1\n    ensure then\n      consistent_with_bounds: Result = upper - lower + 1\n    end\n\n  occurrences (v: G): INTEGER\n      -- Number of times `v' appears in structure\n    local\n      i: INTEGER\n    do\n      if object_comparison then\n        from\n          i := lower\n        until\n          i > upper\n        loop\n          if item (i) ~ v then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      else\n        from\n          i := lower\n        until\n          i > upper\n        loop\n          if item (i) = v then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      end\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (lower, upper)\n    ensure then\n      same_count: Result.count = count\n      same_bounds:\n        ((Result.lower = lower) and (Result.upper = upper))\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is array made of the same items as `other'?\n    local\n      i: INTEGER\n    do\n      if other = Current then\n        Result := True\n      elseif lower = other.lower and then upper = other.upper and then\n        object_comparison = other.object_comparison\n      then\n        if object_comparison then\n          from\n            Result := True\n            i := lower\n          until\n            not Result or i > upper\n          loop\n            Result := item (i) ~ other.item (i)\n            i := i + 1\n          end\n        else\n          Result := area.same_items (other.area, 0, 0, count)\n        end\n      end\n    end\n\nfeature -- Status report\n\n  all_default: BOOLEAN\n      -- Are all items set to default values?\n    do\n      if count > 0 then\n        Result := ({G}).has_default and then area.filled_with (({G}).default, 0, upper - lower)\n      else\n        Result := True\n      end\n    ensure\n      definition: Result = (count = 0 or else\n        ((not attached item (upper) as i or else i = ({G}).default) and\n        subarray (lower, upper - 1).all_default))\n    end\n\n  filled_with (v: G): BOOLEAN\n      -- Are all items set to `v'?\n    do\n      Result := area.filled_with (v, 0, upper - lower)\n    ensure\n      definition: Result = (count = 0 or else\n        (item (upper) = v and subarray (lower, upper - 1).filled_with (v)))\n    end\n\n  full: BOOLEAN\n      -- Is structure filled to capacity? (Answer: yes)\n    do\n      Result := True\n    end\n\n  same_items (other: like Current): BOOLEAN\n      -- Do `other' and Current have same items?\n    require\n      other_not_void: other /= Void\n    do\n      if count = other.count then\n        Result := area.same_items (other.area, 0, 0, count)\n      end\n    ensure\n      definition: Result = ((count = other.count) and then\n        (count = 0 or else (item (upper) = other.item (other.upper)\n        and subarray (lower, upper - 1).same_items\n        (other.subarray (other.lower, other.upper - 1)))))\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of the array?\n    do\n      Result := (lower <= i) and then (i <= upper)\n    end\n\n  extendible: BOOLEAN\n      -- May items be added?\n      -- (Answer: no, although array may be resized.)\n    do\n      Result := False\n    end\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: no.)\n    do\n      Result := False\n    end\n\n  resizable: BOOLEAN\n      -- Can array be resized automatically?\n    do\n      Result := ({G}).has_default\n    end\n\n  valid_index_set: BOOLEAN\n    do\n      Result := index_set.count = count\n    end\n\nfeature -- Element change\n\n  put (v: like item; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    do\n      area.put (v, i - lower)\n    end\n\n  enter (v: like item; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    require\n      valid_key: valid_index (i)\n    do\n      area.put (v, i - lower)\n    end\n\n  force (v: like item; i: INTEGER)\n      -- Assign item `v' to `i'-th entry.\n      -- Resize the array if `i' falls out of currently defined bounds; preserve existing items.\n      -- In void-safe mode, if ({G}).has_default does not hold, then you can only insert between\n      -- `lower - 1' or `upper + 1' position in the ARRAY.\n    require\n      has_default_if_too_low:\n        (i < lower - 1 and lower /= {like lower}.min_value) implies ({G}).has_default\n      has_default_if_too_high:\n        (i > upper + 1 and upper /= {like upper}.max_value) implies ({G}).has_default\n    local\n      old_size, new_size: INTEGER\n      new_lower, new_upper: INTEGER\n      l_count, l_offset: INTEGER\n      l_increased_by_one: BOOLEAN\n    do\n      new_lower := lower.min (i)\n      new_upper := upper.max (i)\n      new_size := new_upper - new_lower + 1\n      l_increased_by_one := (i = upper + 1) or (i = lower - 1)\n      if empty_area then\n          -- List is empty. First we create an empty SPECIAL of the right capacity.\n        make_empty_area (new_size.max (additional_space))\n        if not l_increased_by_one then\n            -- We need to fill the SPECIAL for `0' to `new_size - 2' with the default value.\n          area.fill_with (({G}).default, 0, new_size - 2)\n        end\n        area.extend (v)\n      else\n        old_size := area.capacity\n        if new_size > old_size then\n          set_area (area.aliased_resized_area (new_size.max (old_size + additional_space)))\n        end\n        if new_lower < lower then\n            -- We have inserted below the previous `lower'. We need to shift entries to the right\n            -- before we can insert `v'.\n          l_offset := lower - new_lower\n          l_count := capacity\n          if not l_increased_by_one and l_offset > l_count then\n              -- With the `new_lower' given, the data has to move\n              -- beyond the `area''s count which requires us to fill\n              -- the gap between the old data's location and the new one\n              -- with the default value.\n            area.fill_with (({G}).default, l_count, l_offset - 1)\n          end\n          area.move_data (0, l_offset, l_count)\n          if not l_increased_by_one then\n              -- We start at `1' and not `0' because next instruction\n              -- will update the item at position `0'.\n            area.fill_with (({G}).default, 1, l_offset - 1)\n          end\n            -- Insert `v' at the new lower position.\n          area.put (v, 0)\n        else\n          if new_size > area.count then\n              -- We are adding to the new `upper' position. First we fill the non-initialized\n              -- elements if any up to `new_size - 2' (i.e. up the the item prior to `upper').\n            if not l_increased_by_one then\n              area.fill_with (({G}).default, area.count, new_size - 2)\n            end\n              -- Add `v' at upper position.\n            area.extend (v)\n          else\n              -- Here `lower' hasn't changed\n            area.put (v, i - lower)\n          end\n        end\n      end\n      lower := new_lower\n      upper := new_upper\n    ensure\n      inserted: item (i) = v\n      higher_count: count >= old count\n      lower_set: lower = (old lower).min (i)\n      upper_set: upper = (old upper).max (i)\n    end\n\n  fill_with (v: G)\n      -- Set items between `lower' and `upper' with `v'.\n    do\n      area.fill_with (v, 0, upper - lower)\n    ensure\n      same_capacity: capacity = old capacity\n      count_definition: count = old count\n      filled: filled_with (v)\n    end\n\n  subcopy (other: ARRAY [like item]; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy items of `other' within bounds `start_pos' and `end_pos'\n      -- to current array starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: start_pos >= other.lower\n      valid_end_pos: end_pos <= other.upper\n      valid_bounds: start_pos <= end_pos + 1\n      valid_index_pos: index_pos >= lower\n      enough_space: (upper - index_pos) >= (end_pos - start_pos)\n    do\n      area.copy_data (other.area, start_pos - other.lower, index_pos - lower, end_pos - start_pos + 1)\n    ensure\n      -- copied: forall `i' in 0 .. (`end_pos'-`start_pos'),\n      --     item (index_pos + i) = other.item (start_pos + i)\n    end\n\nfeature -- Iteration\n\n  do_all (action: PROCEDURE [ANY, TUPLE [G]])\n      -- Apply `action' to every item, from first to last.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    do\n      area.do_all_in_bounds (action, 0, count - 1)\n    end\n\n  do_if (action: PROCEDURE [ANY, TUPLE [G]]; test: FUNCTION [ANY, TUPLE [G], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    do\n      area.do_if_in_bounds (action, test, 0, count - 1)\n    end\n\n  there_exists (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for at least one item?\n    require\n      test_not_void: test /= Void\n    do\n      Result := area.there_exists_in_bounds (test, 0, count - 1)\n    end\n\n  for_all (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for all items?\n    require\n      test_not_void: test /= Void\n    do\n      Result := area.for_all_in_bounds (test, 0, count - 1)\n    end\n\n  do_all_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]])\n      -- Apply `action' to every item, from first to last.\n      -- `action' receives item and its index.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area\n      until\n        i > nb\n      loop\n        action.call ([l_area.item (i), j])\n        j := j + 1\n        i := i + 1\n      end\n    end\n\n  do_if_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]]; test: FUNCTION [ANY, TUPLE [G, INTEGER], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- `action' and `test' receive the item and its index.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area\n      until\n        i > nb\n      loop\n        if test.item ([l_area.item (i), j]) then\n          action.call ([l_area.item (i), j])\n        end\n        j := j + 1\n        i := i + 1\n      end\n    end\n\nfeature -- Removal\n\n  wipe_out\n      -- Make array empty.\n    obsolete\n      \"Not applicable since not `prunable'. Use `discard_items' instead.\"\n    do\n      discard_items\n    end\n\n  discard_items\n      -- Reset all items to default values with reallocation.\n    require\n      has_default: ({G}).has_default\n    do\n      create area.make_filled (({G}).default, capacity)\n    ensure\n      default_items: all_default\n    end\n\n  clear_all\n      -- Reset all items to default values.\n    require\n      has_default: ({G}).has_default\n    do\n      area.fill_with (({G}).default, 0, area.count - 1)\n    ensure\n      stable_lower: lower = old lower\n      stable_upper: upper = old upper\n      default_items: all_default\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all items except for the first `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    do\n      if n < count then\n        upper := lower + n - 1\n        area := area.aliased_resized_area (n)\n      end\n    ensure\n      new_count: count = n.min (old count)\n      same_lower: lower = old lower\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all items except for the last `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    local\n      nb: INTEGER\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        lower := upper - n + 1\n        area := area.aliased_resized_area (n)\n      end\n    ensure\n      new_count: count = n.min (old count)\n      same_upper: upper = old upper\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' items;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        upper := lower - 1\n        area := area.aliased_resized_area (0)\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      new_count: count = (old count - n).max (0)\n      same_upper: upper = old upper\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' items;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        upper := lower - 1\n        area := area.aliased_resized_area (0)\n      else\n        keep_head (count - n)\n      end\n    ensure\n      new_count: count = (old count - n).max (0)\n      same_lower: lower = old lower\n    end\n\nfeature -- Resizing\n\n  grow (i: INTEGER)\n      -- Change the capacity to at least `i'.\n    do\n      if i > capacity then\n        conservative_resize_with_default (({G}).default, lower, upper + i - capacity)\n      end\n    end\n\n  conservative_resize (min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    obsolete\n      \" `conservative_resize' is not void-safe statically. Use `conservative_resize_with_default' instead. [07-2010]\"\n    require\n      good_indices: min_index <= max_index\n      has_default: ({G}).has_default\n    do\n      conservative_resize_with_default (({G}).default, min_index, max_index)\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  conservative_resize_with_default (a_default_value: G; min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    require\n      good_indices: min_index <= max_index\n    local\n      new_size: INTEGER\n      new_lower, new_upper: INTEGER\n      offset: INTEGER\n    do\n      if empty_area then\n        set_area (area.aliased_resized_area_with_default (a_default_value, max_index - min_index + 1))\n        lower := min_index\n        upper := max_index\n      else\n        new_lower := min_index.min (lower)\n        new_upper := max_index.max (upper)\n        new_size := new_upper - new_lower + 1\n        if new_size > area.count then\n          set_area (area.aliased_resized_area_with_default (a_default_value, new_size))\n        end\n        if new_lower < lower then\n          offset := lower - new_lower\n          area.move_data (0, offset, upper - lower + 1)\n          area.fill_with (a_default_value, 0, offset - 1)\n        end\n        lower := new_lower\n        upper := new_upper\n      end\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  resize (min_index, max_index: INTEGER)\n      -- Rearrange array so that it can accommodate\n      -- indices down to `min_index' and up to `max_index'.\n      -- Do not lose any previously entered item.\n    obsolete\n      \"Use `conservative_resize_with_default' instead as future versions will implement `resize' as specified in ELKS.\"\n    require\n      good_indices: min_index <= max_index\n      has_default: ({G}).has_default\n    do\n      conservative_resize_with_default (({G}).default, min_index, max_index)\n    ensure\n      no_low_lost: lower = min_index or else lower = old lower\n      no_high_lost: upper = max_index or else upper = old upper\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < area.capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_items: same_items (old twin)\n    end\n\n  rebase (a_lower: like lower)\n      -- Without changing the actual content of `Current' we set `lower' to `a_lower'\n      -- and `upper' accordingly to `a_lower + count - 1'.\n    local\n      l_old_lower: like lower\n    do\n      l_old_lower := lower\n      lower := a_lower\n      upper := a_lower + (upper - l_old_lower)\n    ensure\n      lower_set: lower = a_lower\n      upper_set: upper = a_lower + old count - 1\n    end\n\nfeature -- Conversion\n\n  to_c: ANY\n      -- Address of actual sequence of values,\n      -- for passing to external (non-Eiffel) routines.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    do\n      Result := area\n    end\n\n  to_cil: NATIVE_ARRAY [G]\n      -- Address of actual sequence of values,\n      -- for passing to external (non-Eiffel) routines.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      Result := area.native_array\n    ensure\n      to_cil_not_void: Result /= Void\n    end\n\n  to_special: SPECIAL [G]\n      -- 'area'.\n    do\n      Result := area\n    ensure\n      to_special_not_void: Result /= Void\n    end\n\n  linear_representation: LINEAR [G]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [G]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := lower\n      until\n        i > upper\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying all the items of `other'.\n      -- (This is also used by `clone'.)\n    do\n      if other /= Current then\n        standard_copy (other)\n        set_area (other.area.twin)\n      end\n    ensure then\n      equal_areas: area ~ other.area\n    end\n\n  subarray (start_pos, end_pos: INTEGER): ARRAY [G]\n      -- Array made of items of current array within\n      -- bounds `start_pos' and `end_pos'.\n    require\n      valid_start_pos: valid_index (start_pos)\n      valid_end_pos: end_pos <= upper\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n    do\n      if start_pos <= end_pos then\n        create Result.make_filled (item (start_pos), start_pos, end_pos)\n          -- Only copy elements if needed.\n        Result.subcopy (Current, start_pos, end_pos, start_pos)\n      else\n          -- make empty\n        create Result.make_empty\n        Result.rebase (start_pos)\n      end\n    ensure\n      lower: Result.lower = start_pos\n      upper: Result.upper = end_pos\n      -- copied: forall `i' in `start_pos' .. `end_pos',\n      --     Result.item (i) = item (i)\n    end\n\nfeature {NONE} -- Inapplicable\n\n  prune (v: G)\n      -- Remove first occurrence of `v' if any.\n      -- (Precondition is False.)\n    do\n    end\n\n  extend (v: G)\n      -- Add `v' to structure.\n      -- (Precondition is False.)\n    do\n    end\n\nfeature {NONE} -- Implementation\n\n  empty_area: BOOLEAN\n      -- Is `area' empty?\n    do\n      Result := area = Void or else area.capacity = 0\n    end\n\ninvariant\n\n  area_exists: area /= Void\n  consistent_size: capacity = upper - lower + 1\n  non_negative_count: count >= 0\n  index_set_has_same_count: valid_index_set\n-- Internal discussion haven't reached an agreement on this invariant\n--  index_set_has_same_bounds: ((index_set.lower = lower) and\n--        (index_set.upper = lower + count - 1))\n\nend\n"});
__eiffel_builtin.push({"filename":"arrayed_list.e","content":"note\n  description: \"Lists implemented by resizable arrays\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: sequence;\n  representation: array;\n  access: index, cursor, membership;\n  size: fixed;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass ARRAYED_LIST [G] inherit\n\n  TO_SPECIAL [G]\n    rename\n      put as array_put,\n      at as array_at,\n      item as array_item,\n      valid_index as array_valid_index,\n      area as area_v2\n    redefine\n      is_equal, copy\n    end\n\n  RESIZABLE [G]\n    redefine\n      is_equal, copy\n    end\n\n  DYNAMIC_LIST [G]\n    undefine\n      put_i_th,\n      force, is_inserted, copy\n    redefine\n      first, last, swap, wipe_out, i_th, at,\n      go_i_th, move, prunable, start, finish,\n      count, prune, remove,\n      put_left, merge_left,\n      merge_right, duplicate, prune_all, has, search,\n      append, valid_index, is_equal, copy,\n      for_all, there_exists, do_all, do_if\n    end\n\n  MISMATCH_CORRECTOR\n    redefine\n      is_equal, copy, correct_mismatch\n    end\n\ncreate\n  make, make_filled, make_from_array\n\nfeature -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate list with `n' items.\n      -- (`n' may be zero for empty list.)\n    require\n      valid_number_of_items: n >= 0\n    do\n      index := 0\n      create area_v2.make_empty (n)\n    ensure\n      correct_position: before\n      is_empty: is_empty\n    end\n\n  make_filled (n: INTEGER)\n      -- Allocate list with `n' items.\n      -- (`n' may be zero for empty list.)\n      -- This list will be full.\n    require\n      valid_number_of_items: n >= 0\n      has_default: ({G}).has_default\n    do\n      index := 0\n      make_filled_area (({G}).default, n)\n    ensure\n      correct_position: before\n      filled: full\n    end\n\n  make_from_array (a: ARRAY [G])\n      -- Create list from array `a'.\n    require\n      array_exists: a /= Void\n    do\n      index := 0\n      area_v2 := a.area\n    ensure\n      shared: area = a.area\n      correct_position: before\n      filled: count = a.count\n    end\n\nfeature -- Access\n\n  area: SPECIAL [G]\n      -- Access to internal storage of ARRAYED_LIST\n    do\n        -- Internal storage is called `area_v2' so that it triggers\n        -- a mismatch during retrieval.\n      Result := area_v2\n    end\n\n  item: G\n      -- Current item\n    require else\n      index_is_valid: valid_index (index)\n    do\n      Result := area_v2.item (index - 1)\n    end\n\n  i_th alias \"[]\", at alias \"@\" (i: INTEGER): like item assign put_i_th\n      -- Item at `i'-th position\n    do\n      Result := area_v2.item (i - 1)\n    end\n\n  first: like item\n      -- Item at first position\n    do\n      Result := area_v2.item (0)\n    end\n\n  last: like first\n      -- Item at last position\n    do\n      Result := area_v2.item (count - 1)\n    end\n\n  index: INTEGER\n      -- Index of `item', if valid.\n\n  cursor: ARRAYED_LIST_CURSOR\n      -- Current cursor position\n    do\n      create Result.make (index)\n    end\n\n  has (v: like item): BOOLEAN\n      -- Does current include `v'?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      l_area: like area_v2\n      i, nb: INTEGER\n    do\n      l_area := area_v2\n      nb := count - 1\n      if object_comparison and v /= Void then\n        from\n        until\n          i > nb or Result\n        loop\n          Result := v ~ l_area.item (i)\n          i := i + 1\n        end\n      else\n        from\n        until\n          i > nb or Result\n        loop\n          Result := v = l_area.item (i)\n          i := i + 1\n        end\n      end\n    end\n\n  to_array: ARRAY [G]\n      -- Share content to be used as an ARRAY.\n      -- Note that although the content is shared, it might\n      -- not be shared when a resizing occur in either ARRAY or Current.\n    do\n      create Result.make_from_special (area_v2)\n    ensure\n      to_array_attached: Result /= Void\n      array_lower_set: Result.lower = 1\n      array_upper_set: Result.upper = count\n      shared_area: Result.area = area\n    end\n\nfeature -- Iteration\n\n  do_all (action: PROCEDURE [ANY, TUPLE [G]])\n      -- Apply `action' to every item, from first to last.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    do\n      area_v2.do_all_in_bounds (action, 0, area_v2.count - 1)\n    end\n\n  do_if (action: PROCEDURE [ANY, TUPLE [G]]; test: FUNCTION [ANY, TUPLE [G], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    do\n      area_v2.do_if_in_bounds (action, test, 0, area_v2.count - 1)\n    end\n\n  there_exists (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for at least one item?\n    do\n      Result := area_v2.there_exists_in_bounds (test, 0, area_v2.count - 1)\n    end\n\n  for_all (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for all items?\n    do\n      Result := area_v2.for_all_in_bounds (test, 0, area_v2.count - 1)\n    end\n\n  do_all_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]])\n      -- Apply `action' to every item, from first to last.\n      -- `action' receives item and its index.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    local\n      i, j, nb: INTEGER\n      l_area: like area_v2\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area_v2\n      until\n        i > nb\n      loop\n        action.call ([l_area.item (i), j])\n        j := j + 1\n        i := i + 1\n      end\n    end\n\n  do_if_with_index (action: PROCEDURE [ANY, TUPLE [G, INTEGER]]; test: FUNCTION [ANY, TUPLE [G, INTEGER], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- `action' and `test' receive the item and its index.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    local\n      i, j, nb: INTEGER\n      l_area: like area_v2\n    do\n      from\n        i := 0\n        j := lower\n        nb := count - 1\n        l_area := area_v2\n      until\n        i > nb\n      loop\n        if test.item ([l_area.item (i), j]) then\n          action.call ([l_area.item (i), j])\n        end\n        j := j + 1\n        i := i + 1\n      end\n    end\n\nfeature -- Measurement\n\n  lower: INTEGER = 1\n      -- Lower bound for accessing list items via indexes\n\n  upper: INTEGER\n      -- Upper bound for accessing list items via indexes\n    do\n      Result := area_v2.count\n    end\n\n  count: INTEGER\n      -- Number of items\n    do\n      Result := area_v2.count\n    end\n\n  capacity: INTEGER\n    do\n      Result := area_v2.capacity\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is array made of the same items as `other'?\n    local\n      i: INTEGER\n    do\n      if other = Current then\n        Result := True\n      elseif count = other.count and then object_comparison = other.object_comparison then\n        if object_comparison then\n          from\n            Result := True\n            i := lower\n          until\n            not Result or i > upper\n          loop\n            Result := i_th (i) ~ other.i_th (i)\n            i := i + 1\n          end\n        else\n          Result := area_v2.same_items (other.area_v2, 0, 0, count)\n        end\n      end\n    end\n\nfeature -- Status report\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  valid_cursor (p: CURSOR): BOOLEAN\n      -- Can the cursor be moved to position `p'?\n    do\n      if attached {ARRAYED_LIST_CURSOR} p as al_c then\n        Result := valid_cursor_index (al_c.index)\n      end\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' a valid index?\n    do\n      Result := (1 <= i) and (i <= count)\n    end\n\n  is_inserted (v: G): BOOLEAN\n      -- Has `v' been inserted at the end by the most recent `put' or\n      -- `extend'?\n    do\n      if not is_empty then\n        Result := (v = last) or else (not off and then (v = item))\n      end\n    end\n\n  all_default: BOOLEAN\n      -- Are all items set to default values?\n    require\n      has_default: ({G}).has_default\n    do\n      Result := area_v2.filled_with (({G}).default, 0, area_v2.upper)\n    end\n\nfeature -- Cursor movement\n\n  move (i: INTEGER)\n      -- Move cursor `i' positions.\n    do\n      index := index + i\n      if (index > count + 1) then\n        index := count + 1\n      elseif (index < 0) then\n        index := 0\n      end\n    end\n\n  start\n      -- Move cursor to first position if any.\n    do\n      index := 1\n    ensure then\n      after_when_empty: is_empty implies after\n    end\n\n  finish\n      -- Move cursor to last position if any.\n    do\n      index := count\n    ensure then\n      before_when_empty: is_empty implies before\n    end\n\n  forth\n      -- Move cursor one position forward.\n    do\n      index := index + 1\n    end\n\n  back\n      -- Move cursor one position backward.\n    do\n      index := index - 1\n    end\n\n  go_i_th (i: INTEGER)\n      -- Move cursor to `i'-th position.\n    do\n      index := i\n    end\n\n  go_to (p: CURSOR)\n      -- Move cursor to position `p'.\n    do\n      if attached {ARRAYED_LIST_CURSOR} p as al_c then\n        index := al_c.index\n      else\n        check\n          correct_cursor_type: False\n        end\n      end\n    end\n\n  search (v: like item)\n      -- Move to first position (at or after current\n      -- position) where `item' and `v' are equal.\n      -- If structure does not include `v' ensure that\n      -- `exhausted' will be true.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      l_area: like area_v2\n      i, nb: INTEGER\n      l_found: BOOLEAN\n    do\n      l_area := area_v2\n      nb := count - 1\n        -- If we are before we need to be sure\n        -- that i is positive.\n      i := (index - 1).max (0)\n      if object_comparison and v /= Void then\n        from\n        until\n          i > nb or l_found\n        loop\n          l_found := v ~ l_area.item (i)\n          i := i + 1\n        end\n      else\n        from\n        until\n          i > nb or l_found\n        loop\n          l_found := v = l_area.item (i)\n          i := i + 1\n        end\n      end\n        -- Set position of `index' to `i', location of item when\n        -- found, otherwise to `i + 1' which corresponds to `after'.\n      if l_found then\n        index := i\n      else\n        index := i + 1\n      end\n    end\n\nfeature -- Element change\n\n  put_front (v: like item)\n      -- Add `v' to the beginning.\n      -- Do not move cursor.\n    do\n      if is_empty then\n        extend (v)\n      else\n        insert (v, 1)\n      end\n      index := index + 1\n    end\n\n  put_i_th (v: like i_th; i: INTEGER_32)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    do\n      area_v2.put (v, i - 1)\n    end\n\n  force, extend (v: like item)\n      -- Add `v' to end.\n      -- Do not move cursor.\n    local\n      i: INTEGER\n      l_area: like area_v2\n    do\n      i := count + 1\n      l_area := area_v2\n      if i > l_area.capacity then\n        l_area := l_area.aliased_resized_area (i + additional_space)\n        area_v2 := l_area\n      end\n      l_area.extend (v)\n    end\n\n  put_left (v: like item)\n      -- Add `v' to the left of current position.\n      -- Do not move cursor.\n    do\n      if after or is_empty then\n        extend (v)\n      else\n        insert (v, index)\n      end\n      index := index + 1\n    end\n\n  put_right (v: like item)\n      -- Add `v' to the right of current position.\n      -- Do not move cursor.\n    do\n      if index = count then\n        extend (v)\n      else\n        insert (v, index + 1)\n      end\n    end\n\n  replace (v: like first)\n      -- Replace current item by `v'.\n    do\n      put_i_th (v, index)\n    end\n\n  merge_left (other: ARRAYED_LIST [G])\n      -- Merge `other' into current structure before cursor.\n    local\n      old_index: INTEGER\n      old_other_count: INTEGER\n    do\n      old_index := index\n      old_other_count := other.count\n      index := index - 1\n      merge_right (other)\n      index := old_index + old_other_count\n    end\n\n  merge_right (other: ARRAYED_LIST [G])\n      -- Merge `other' into current structure after cursor.\n    local\n      l_new_count, l_old_count: INTEGER\n    do\n      if not other.is_empty then\n        l_old_count := count\n        l_new_count := l_old_count + other.count\n        if l_new_count > area_v2.capacity then\n          area_v2 := area_v2.aliased_resized_area (l_new_count)\n        end\n        area_v2.insert_data (other.area_v2, 0, index, other.count)\n        other.wipe_out\n      end\n    end\n\n  append (s: SEQUENCE [G])\n      -- Append a copy of `s'.\n    local\n      c, old_count, new_count: INTEGER\n    do\n      if attached {ARRAYED_LIST [G]} s as al then -- Optimization for arrayed lists\n        c := al.count\n          -- If `s' is empty nothing to be done.\n        if c > 0 then\n          old_count := count\n          new_count := old_count + al.count\n          if new_count > area_v2.capacity then\n            area_v2 := area_v2.aliased_resized_area (new_count)\n          end\n          area_v2.copy_data (al.area_v2, 0, old_count, c)\n        end\n      else\n        Precursor {DYNAMIC_LIST} (s)\n      end\n    end\n\nfeature -- Resizing\n\n  grow (i: INTEGER)\n      -- Change the capacity to at least `i'.\n    do\n      if i > area_v2.capacity then\n        area_v2 := area_v2.aliased_resized_area (i)\n      end\n    end\n\n  resize (new_capacity: INTEGER)\n      -- Resize list so that it can contain\n      -- at least `n' items. Do not lose any item.\n    require\n      resizable: resizable\n      new_capacity_large_enough: new_capacity >= capacity\n    do\n      grow (new_capacity)\n    ensure\n      capacity_set: capacity >= new_capacity\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < area_v2.capacity then\n        area_v2 := area_v2.aliased_resized_area (n)\n      end\n    ensure then\n      same_items: to_array.same_items (old to_array)\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying all the items of `other'.\n      -- (This is also used by `clone'.)\n    do\n      if other /= Current then\n        standard_copy (other)\n        set_area (other.area_v2.twin)\n      end\n    ensure then\n      equal_areas: area_v2 ~ other.area_v2\n    end\n\nfeature -- Removal\n\n  prune (v: like item)\n      -- Remove first occurrence of `v', if any,\n      -- after cursor position.\n      -- Move cursor to right neighbor.\n      -- (or `after' if no right neighbor or `v' does not occur)\n    do\n      if before then\n        index := 1\n      end\n      if object_comparison then\n        from\n        until\n          after or else item ~ v\n        loop\n          forth\n        end\n      else\n        from\n        until\n          after or else item = v\n        loop\n          forth\n        end\n      end\n      if not after then\n        remove\n      end\n    end\n\n  remove\n      -- Remove current item.\n      -- Move cursor to right neighbor\n      -- (or `after' if no right neighbor)\n    do\n      if index < count then\n        area_v2.move_data (index, index - 1, count - index)\n      end\n      area_v2.remove_tail (1)\n    ensure then\n      index: index = old index\n    end\n\n  prune_all (v: like item)\n      -- Remove all occurrences of `v'.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      i, nb: INTEGER\n      offset: INTEGER\n      res: BOOLEAN\n      obj_cmp: BOOLEAN\n      l_area: like area_v2\n    do\n      obj_cmp := object_comparison\n      from\n        l_area := area_v2\n        i := 0\n        nb := count\n      until\n        i = count\n      loop\n        if i < nb - offset then\n          if offset > 0 then\n            l_area.put (l_area.item (i + offset), i)\n          end\n          if obj_cmp then\n            res := v ~ l_area.item (i)\n          else\n            res := v = l_area.item (i)\n          end\n          if res then\n            offset := offset + 1\n          else\n            i := i + 1\n          end\n        else\n          i := i + 1\n        end\n      end\n      l_area.remove_tail (offset)\n      index := count + 1\n    ensure then\n      is_after: after\n    end\n\n  remove_left\n      -- Remove item to the left of cursor position.\n      -- Do not move cursor.\n    do\n      index := index - 1\n      remove\n    end\n\n  remove_right\n      -- Remove item to the right of cursor position\n      -- Do not move cursor\n    do\n      index := index + 1\n      remove\n      index := index - 1\n    end\n\n  wipe_out\n      -- Remove all items.\n    do\n      area_v2.wipe_out\n      index := 0\n    end\n\nfeature -- Transformation\n\n  swap (i: INTEGER)\n      -- Exchange item at `i'-th position with item\n      -- at cursor position.\n    local\n      old_item: like item\n    do\n      old_item := item\n      replace (area_v2.item (i - 1))\n      area_v2.put (old_item, i - 1)\n    end\n\nfeature -- Retrieval\n\n  correct_mismatch\n    local\n      i: INTEGER\n    do\n      if\n        not mismatch_information.has (\"area_v2\") and then\n        attached {SPECIAL [G]} mismatch_information.item (\"area\") as l_area and then\n        attached {INTEGER} mismatch_information.item (\"count\") as l_count and then\n        attached {BOOLEAN} mismatch_information.item (\"object_comparison\") as l_comp and then\n        attached {INTEGER} mismatch_information.item (\"index\") as l_index\n      then\n        create area_v2.make_empty (l_count)\n        from\n          i := 0\n        until\n          i = l_count\n        loop\n          area_v2.extend (l_area.item (i))\n          i := i + 1\n        end\n        object_comparison := l_comp\n        index := l_index\n      else\n        Precursor\n      end\n    end\n\nfeature -- Duplication\n\n  duplicate (n: INTEGER): like Current\n      -- Copy of sub-list beginning at current position\n      -- and having min (`n', `count' - `index' + 1) items.\n    local\n      end_pos: INTEGER\n    do\n      if after then\n        Result := new_filled_list (0)\n      else\n        end_pos := count.min (index + n - 1)\n        Result := new_filled_list (end_pos - index + 1)\n        Result.area_v2.copy_data (area_v2, index - 1, 0, end_pos - index + 1)\n      end\n    end\n\nfeature {NONE} -- Inapplicable\n\n  new_chain: like Current\n      -- Unused\n    do\n      Result := Current\n    end\n\nfeature {NONE} -- Implementation\n\n  force_i_th (v: like i_th; pos: INTEGER)\n    do\n      if count + 1 > capacity then\n        grow (count + additional_space)\n      end\n      area_v2.force (v, pos)\n    end\n\n  insert (v: like item; pos: INTEGER)\n      -- Add `v' at `pos', moving subsequent items\n      -- to the right.\n    require\n      index_small_enough: pos <= count\n      index_large_enough: pos >= 1\n    do\n      if count + 1 > capacity then\n        grow (count + additional_space)\n      end\n      area_v2.move_data (pos - 1, pos, count - pos + 1)\n      put_i_th (v, pos)\n    ensure\n      new_count: count = old count + 1\n      index_unchanged: index = old index\n      insertion_done: i_th (pos) = v\n    end\n\n  new_filled_list (n: INTEGER): like Current\n      -- New list with `n' elements.\n    require\n      n_non_negative: n >=0\n    do\n      create Result.make (n)\n    ensure\n      new_filled_list_not_void: Result /= Void\n      new_filled_list_count_set: Result.count = 0\n      new_filled_list_before: Result.before\n    end\n\ninvariant\n  prunable: prunable\n  starts_from_one: lower = 1\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"bag.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: bag, access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BAG [G] inherit\n\n  COLLECTION [G]\n    redefine\n      extend\n    end\n\nfeature -- Measurement\n\n  occurrences (v: G): INTEGER\n      -- Number of times `v' appears in structure\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    deferred\n    ensure\n      non_negative_occurrences: Result >= 0\n    end\n\nfeature -- Element change\n\n  extend (v: G)\n      -- Add a new occurrence of `v'.\n    deferred\n    ensure then\n        -- Commented due to the expensive nature of the check when inserting a new item\n        -- in a containers with many items.\n      -- one_more_occurrence: occurrences (v) = old (occurrences (v)) + 1\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"bilinear.e","content":"note\n  description: \"Structures that may be traversed forward and backward\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: bidirectional, traversing;\n  access: cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BILINEAR [G] inherit\n\n  LINEAR [G]\n    rename\n      search as sequential_search\n    export\n      {NONE}\n        sequential_search\n    redefine\n      off\n    end\n\n  LINEAR [G]\n    redefine\n      search, off\n    select\n      search\n    end\n\nfeature -- Access\n\n  off: BOOLEAN\n      -- Is there no current item?\n    do\n      Result := before or after\n    end\n\nfeature -- Cursor movement\n\n  before: BOOLEAN\n      -- Is there no valid position to the left of current one?\n    deferred\n    end\n\n  back\n      -- Move to previous position.\n    require\n      not_before: not before\n    deferred\n    ensure then\n      -- moved_forth_after_start: (not before) implies index = old index - 1\n    end\n\n  search (v: like item)\n      -- Move to first position (at or after current\n      -- position) where `item' and `v' are equal.\n      -- If structure does not include `v' ensure that\n      -- `exhausted' will be true.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    do\n      if before and not is_empty then\n        forth\n      end\n      sequential_search (v)\n    end\n\ninvariant\n\n  not_both: not (after and before)\n  before_constraint: before implies off\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"boolean.e","content":"note\n  description: \"Truth values, with the boolean operations\"\n  external_name: \"System.Boolean\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class BOOLEAN\n\ninherit\n  BOOLEAN_REF\n    redefine\n      conjuncted,\n      conjuncted_semistrict,\n      disjuncted,\n      disjuncted_semistrict,\n      disjuncted_exclusive,\n      implication,\n      negated\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({BOOLEAN_REF})\n\nfeature -- Basic operations\n\n  conjuncted alias \"and\" (other: BOOLEAN): BOOLEAN\n      -- Boolean conjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  conjuncted_semistrict alias \"and then\" (other: BOOLEAN): BOOLEAN\n      -- Boolean semi-strict conjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  implication alias \"implies\" (other: BOOLEAN): BOOLEAN\n      -- Boolean implication of `other'\n      -- (semi-strict)\n    external\n      \"built_in\"\n    end\n\n  negated alias \"not\": BOOLEAN\n      -- Negation\n    external\n      \"built_in\"\n    end\n\n  disjuncted alias \"or\" (other: BOOLEAN): BOOLEAN\n      -- Boolean disjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  disjuncted_semistrict alias \"or else\" (other: BOOLEAN): BOOLEAN\n      -- Boolean semi-strict disjunction with `other'\n    external\n      \"built_in\"\n    end\n\n  disjuncted_exclusive alias \"xor\" (other: BOOLEAN): BOOLEAN\n      -- Boolean exclusive or with `other'\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"boolean_ref.e","content":"note\n  description: \"References to objects containing a boolean value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass BOOLEAN_REF inherit\n\n  HASHABLE\n    redefine\n      out\n    end\n\nfeature -- Access\n\n  item: BOOLEAN\n      -- Boolean value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      if item then\n        Result := 1\n      end\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: BOOLEAN_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: BOOLEAN_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n      same_item: Result.item = item\n    end\n\n  to_integer: INTEGER\n      -- 1 if `True'\n      -- 0 if `False'\n    do\n      if item then\n        Result := 1\n      end\n    ensure\n      not_item_implies_zero: not item implies Result = 0\n      item_implies_one: item implies Result = 1\n    end\n\nfeature -- Element change\n\n  set_item (b: BOOLEAN)\n      -- Make `b' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  conjuncted alias \"and\" (other: like Current): BOOLEAN\n      -- Boolean conjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item and other.item\n    ensure\n      de_morgan: Result = not (not Current or not other)\n      commutative: Result = (other and Current)\n      consistent_with_semi_strict: Result implies (Current and then other)\n    end\n\n  conjuncted_semistrict alias \"and then\" (other: like Current): BOOLEAN\n      -- Boolean semi-strict conjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item and then other.item\n    ensure\n      de_morgan: Result = not (not Current or else not other)\n    end\n\n  implication alias \"implies\" (other: like Current): BOOLEAN\n      -- Boolean implication of `other'\n      -- (semi-strict)\n    require\n      other_exists: other /= Void\n    do\n      Result := item implies other.item\n    ensure\n      definition: Result = (not Current or else other)\n    end\n\n  negated alias \"not\": BOOLEAN\n      -- Negation\n    do\n      Result := not item\n    end\n\n  disjuncted alias \"or\" (other: like Current): BOOLEAN\n      -- Boolean disjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item or other.item\n    ensure\n      de_morgan: Result = not (not Current and not other)\n      commutative: Result = (other or Current)\n      consistent_with_semi_strict: Result implies (Current or else other)\n    end\n\n  disjuncted_semistrict alias \"or else\" (other: like Current): BOOLEAN\n      -- Boolean semi-strict disjunction with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item or else other.item\n    ensure\n      de_morgan: Result = not (not Current and then not other)\n    end\n\n  disjuncted_exclusive alias \"xor\" (other: like Current): BOOLEAN\n      -- Boolean exclusive or with `other'\n    require\n      other_exists: other /= Void\n    do\n      Result := item xor other.item\n    ensure\n      definition: Result = ((Current or other) and not (Current and other))\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of boolean\n    do\n      Result := \"False\"\n      if item then\n        Result := \"True\"\n      end\n    end\n\ninvariant\n  involutive_negation: (not (not Current)).item = item\n  non_contradiction: not ((not Current) and Current)\n  completeness: (not Current) or Current\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"bounded.e","content":"note\n  description: \"Bounded data structures, with a notion of capacity.\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: bounded, storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BOUNDED [G] inherit\n\n  FINITE [G]\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Number of items that may be stored\n    deferred\n    ensure\n      capacity_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  full: BOOLEAN\n      -- Is structure full?\n    do\n      Result := (count = capacity)\n    end\n\n  resizable: BOOLEAN\n      -- May `capacity' be changed?\n    deferred\n    end\n\ninvariant\n\n  valid_count: count <= capacity\n  full_definition: full = (count = capacity)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"box.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class BOX [G] inherit\n\n  CONTAINER [G]\n\nfeature -- Status report\n\n  full: BOOLEAN\n      -- Is structure filled to capacity?\n    deferred\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"cell.e","content":"note\n  description: \"Cells containing an item\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: cell;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\nclass CELL [G]\n\ncreate\n  put\n\nfeature -- Access\n\n  item: G\n      -- Content of cell.\n\nfeature -- Element change\n\n  put, replace (v: like item)\n      -- Make `v' the cell's `item'.\n    do\n      item := v\n    ensure\n      item_inserted: item = v\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"chain.e","content":"note\n  description: \"[\n    Possibly circular sequences of items,\n    without commitment to a particular representation\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: chain, sequence;\n  access: index, cursor, membership;\n  contents: generic;\n  date: \"$Date: 2013-01-15 13:41:22 -0800 (Tue, 15 Jan 2013) $\"\n  revision: \"$Revision: 92122 $\"\n\ndeferred class CHAIN [G] inherit\n\n  CURSOR_STRUCTURE [G]\n    rename\n      put as sequence_put\n    undefine\n      prune_all\n    redefine\n      fill\n    end\n\n  INDEXABLE [G, INTEGER]\n    rename\n      item as i_th alias \"[]\",\n      put as put_i_th,\n      bag_put as sequence_put\n    undefine\n      prune_all, sequence_put\n    redefine\n      fill\n    end\n\n  SEQUENCE [G]\n    rename\n      put as sequence_put\n    export\n      {NONE} sequence_put\n    redefine\n      index_of, has, off, occurrences, fill, append\n    select\n      index_of, has, occurrences\n    end\n\n  SEQUENCE [G]\n    rename\n      put as sequence_put,\n      index_of as sequential_index_of,\n      has as sequential_has,\n      occurrences as sequential_occurrences\n    export\n      {NONE}\n        sequential_index_of, sequential_has,\n        sequence_put, sequential_occurrences\n    redefine\n      off, fill, append\n    end\n\nfeature -- Access\n\n  first: like item\n      -- Item at first position\n    require\n      not_empty: not is_empty\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      start\n      Result := item\n      go_to (pos)\n    end\n\n  last: like item\n      -- Item at last position\n    require\n      not_empty: not is_empty\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      finish\n      Result := item\n      go_to (pos)\n    end\n\n  has (v: like item): BOOLEAN\n      -- Does chain include `v'?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      Result := sequential_has (v)\n      go_to (pos)\n    end\n\n  index_of (v: like item; i: INTEGER): INTEGER\n      -- Index of `i'-th occurrence of item identical to `v'.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n      -- 0 if none.\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      Result := sequential_index_of (v, i)\n      go_to (pos)\n    end\n\n  i_th alias \"[]\", at alias \"@\" (i: INTEGER): like item assign put_i_th\n      -- Item at `i'-th position\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      go_i_th (i)\n      Result := item\n      go_to (pos)\n    end\n\nfeature -- Measurement\n\n  occurrences (v: like item): INTEGER\n      -- Number of times `v' appears.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      Result := sequential_occurrences (v)\n      go_to (pos)\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (1, count)\n    ensure then\n      count_definition: Result.count = count\n    end\n\nfeature -- Cursor movement\n\n  start\n      -- Move cursor to first position.\n      -- (No effect if empty)\n    do\n      if not is_empty then\n        go_i_th (1)\n      end\n    ensure then\n      at_first: not is_empty implies isfirst\n    end\n\n  finish\n      -- Move cursor to last position.\n      -- (No effect if empty)\n    do\n      if not is_empty then\n        go_i_th (count)\n      end\n    ensure then\n      at_last: not is_empty implies islast\n    end\n\n  move (i: INTEGER)\n      -- Move cursor `i' positions. The cursor\n      -- may end up `off' if the absolute value of `i'\n      -- is too big.\n    local\n      counter, pos, final: INTEGER\n    do\n      if i > 0 then\n        from\n        until\n          (counter = i) or else after\n        loop\n          forth\n          counter := counter + 1\n        end\n      elseif i < 0 then\n        final := index + i\n        if final <= 0 then\n          start\n          back\n        else\n          from\n            start\n            pos := 1\n          until\n            pos = final\n          loop\n            forth\n            pos := pos + 1\n          end\n        end\n      end\n    ensure\n      too_far_right: (old index + i > count) implies exhausted\n      too_far_left: (old index + i < 1) implies exhausted\n      expected_index: (not exhausted) implies (index = old index + i)\n    end\n\n  go_i_th (i: INTEGER)\n      -- Move cursor to `i'-th position.\n    require\n      valid_cursor_index: valid_cursor_index (i)\n    do\n      move (i - index)\n    ensure\n      position_expected: index = i\n    end\n\n feature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within allowable bounds?\n    do\n      Result := (i >= 1) and (i <= count)\n    ensure then\n      valid_index_definition: Result = ((i >= 1) and (i <= count))\n    end\n\n\n  isfirst: BOOLEAN\n      -- Is cursor at first position?\n    do\n      Result := not is_empty and (index = 1)\n    ensure\n      valid_position: Result implies not is_empty\n    end\n\n  islast: BOOLEAN\n      -- Is cursor at last position?\n    do\n      Result := not is_empty and (index = count)\n    ensure\n      valid_position: Result implies not is_empty\n    end\n\n  off: BOOLEAN\n      -- Is there no current item?\n    do\n      Result := (index = 0) or (index = count + 1)\n    end\n\n\n  valid_cursor_index (i: INTEGER): BOOLEAN\n      -- Is `i' correctly bounded for cursor movement?\n    do\n      Result := (i >= 0) and (i <= count + 1)\n    ensure\n      valid_cursor_index_definition: Result = ((i >= 0) and (i <= count + 1))\n    end\n\nfeature -- Element change\n\n  put (v: like item)\n      -- Replace current item by `v'.\n      -- (Synonym for `replace')\n    require\n      writeable: writable\n      replaceable: replaceable\n    do\n      replace (v)\n    ensure\n      same_count: count = old count\n      is_inserted: is_inserted (v)\n    end\n\n  put_i_th (v: like item; i: INTEGER)\n      -- Put `v' at `i'-th position.\n    local\n      pos: CURSOR\n    do\n      pos := cursor\n      go_i_th (i)\n      replace (v)\n      go_to (pos)\n    end\n\n  append (s: SEQUENCE [G])\n      -- Append a copy of `s'.\n    local\n      l: SEQUENCE [G]\n      l_cursor: CURSOR\n    do\n      l := s\n      if s = Current then\n        l := twin\n      end\n      from\n        l_cursor := cursor\n        l.start\n      until\n        l.exhausted\n      loop\n        extend (l.item)\n        finish\n        l.forth\n      end\n      go_to (l_cursor)\n    end\n\n  fill (other: CONTAINER [G])\n      -- Fill with as many items of `other' as possible.\n      -- The representations of `other' and current structure\n      -- need not be the same.\n    local\n      lin_rep: LINEAR [G]\n      l_cursor: CURSOR\n    do\n      lin_rep := other.linear_representation\n      from\n        l_cursor := cursor\n        lin_rep.start\n      until\n        not extendible or else lin_rep.off\n      loop\n        extend (lin_rep.item)\n        finish\n        lin_rep.forth\n      end\n      go_to (l_cursor)\n    end\nfeature -- Transformation\n\n  swap (i: INTEGER)\n      -- Exchange item at `i'-th position with item\n      -- at cursor position.\n    require\n      not_off: not off\n      valid_index: valid_index (i)\n    local\n      old_item, new_item: like item\n      pos: CURSOR\n    do\n      pos := cursor\n      old_item := item\n      go_i_th (i)\n      new_item := item\n      replace (old_item)\n      go_to (pos)\n      replace (new_item)\n    ensure\n      swapped_to_item: item = old i_th (i)\n      swapped_from_item: i_th (i) = old item\n    end\n\nfeature -- Duplication\n\n  duplicate (n: INTEGER): like Current\n      -- Copy of sub-chain beginning at current position\n      -- and having min (`n', `from_here') items,\n      -- where `from_here' is the number of items\n      -- at or to the right of current position.\n    require\n      not_off_unless_after: off implies after\n      valid_subchain: n >= 0\n    deferred\n    end\n\nfeature {NONE} -- Inapplicable\n\n  remove\n      -- Remove current item.\n    do\n    end\n\ninvariant\n\n  non_negative_index: index >= 0\n  index_small_enough: index <= count + 1\n  off_definition: off = ((index = 0) or (index = count + 1))\n  isfirst_definition: isfirst = ((not is_empty) and (index = 1))\n  islast_definition: islast = ((not is_empty) and (index = count))\n  item_corresponds_to_index: (not off) implies (item = i_th (index))\n  index_set_has_same_count: index_set.count = count\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"character_32.e","content":"note\n  description: \"Unicode characters, with comparison operations\"\n  assembly: \"mscorlib\"\n  external_name: \"System.UInt32\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class\n  CHARACTER_32\n\ninherit\n  CHARACTER_32_REF\n    redefine\n      code,\n      natural_32_code,\n      to_character_8\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({CHARACTER_32_REF})\n\nfeature -- Access\n\n  code: INTEGER\n      -- Associated integer value\n    external\n      \"built_in\"\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  to_character_8: CHARACTER_8\n      -- Convert current to CHARACTER_8\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"character_32_ref.e","content":"note\n  description: \"References to objects containing a unicode character value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  CHARACTER_32_REF\n\ninherit\n  COMPARABLE\n    redefine\n      is_equal, out\n    end\n\n  HASHABLE\n    redefine\n      is_equal, out\n    end\n\nfeature -- Access\n\n  item: CHARACTER_32\n      -- Unicode character value\n    external\n      \"built_in\"\n    end\n\n  code: INTEGER\n      -- Associated integer value\n    obsolete\n      \"Use `natural_32_code' instead.\"\n    do\n      Result := natural_32_code.as_integer_32\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := natural_32_code.hash_code\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    do\n      Result := item.natural_32_code\n    ensure\n      natural_32_code_in_range: Result >= min_value and Result <= max_value\n    end\n\n  min_value: NATURAL_32 = 0\n  max_value: NATURAL_32 = 4294967295\n      -- Bounds for integer representation of CHARACTER_32\n\n  max_unicode_value: NATURAL_32 = 0x10FFFD\n      -- Maximum Unicode characters.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current character?\n    do\n      Result := natural_32_code < other.natural_32_code\n    ensure then\n      definition: Result = (natural_32_code < other.natural_32_code)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Basic routines\n\n  plus alias \"+\" (incr: NATURAL_32): CHARACTER_32\n      -- Add `incr' to the code of `item'.\n    require\n      valid_increment: (item.natural_32_code.to_natural_64 + incr).is_valid_character_32_code\n    do\n      Result := (item.natural_32_code + incr).to_character_32\n    ensure\n      valid_result: Result |-| item = incr\n    end\n\n  minus alias \"-\" (decr: NATURAL_32): CHARACTER_32\n      -- Subtract `decr' from the code of `item'.\n    require\n      valid_decrement: (item.natural_32_code.to_integer_64 - decr).is_valid_character_32_code\n    do\n      Result := (item.natural_32_code - decr).to_character_32\n    ensure\n      valid_result: item |-| Result = decr\n    end\n\n  difference alias \"|-|\" (other: CHARACTER_32): INTEGER_64\n      -- Difference between the codes of `item' and `other'.\n    do\n      Result := item.natural_32_code.to_integer_64 - other.natural_32_code.to_integer_64\n    ensure\n      valid_non_negative_result: Result >= 0 implies ((other + Result.to_natural_32) = item)\n      valid_negative_result: Result < 0 implies (other = (item + Result.to_natural_32))\n    end\n\n  next: CHARACTER_32\n      -- Next character.\n    require\n      valid_character: (item.natural_32_code.to_natural_64 + 1).is_valid_character_32_code\n    do\n      Result := item + 1\n    ensure\n      valid_result: Result |-| item = 1\n    end\n\n  previous: CHARACTER_32\n      -- Previous character.\n    require\n      valid_character: (item.natural_32_code.to_natural_64 - 1).is_valid_character_32_code\n    do\n      Result := item - 1\n    ensure\n      valid_result: Result |-| item = -1\n    end\n\nfeature -- Element change\n\n  set_item (c: CHARACTER_32)\n      -- Make `c' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of wide character.\n    do\n      create Result.make (6)\n      Result.append_character ('U')\n      Result.append_character ('+')\n      Result.append_string (natural_32_code.to_hex_string)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: CHARACTER_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: CHARACTER_32_REF\n      -- Associated reference of Current.\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  to_character_8: CHARACTER_8\n      -- Convert current to CHARACTER_8.\n    require\n      is_character_8_compatible: is_character_8\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Convert current to CHARACTER_32.\n    do\n      Result := item\n    end\n\n  as_upper, upper: CHARACTER_32\n      -- Uppercase value of `item'.\n      -- Returns `item' if not `is_lower'.\n    do\n      Result := properties.to_upper (item)\n    end\n\n  as_lower, lower: CHARACTER_32\n      -- Lowercase value of `item'.\n      -- Returns `item' if not `is_upper'.\n    do\n      Result := properties.to_lower (item)\n    end\n\nfeature -- Status report\n\n  is_character_8: BOOLEAN\n      -- Can current be represented on a CHARACTER_8?\n    do\n      Result := natural_32_code <= {CHARACTER_8}.max_value.to_natural_32\n    end\n\n  is_alpha: BOOLEAN\n      -- Is `item' alphabetic?\n      -- Alphabetic is `is_upper' or `is_lower'.\n    do\n      Result := properties.is_alpha (item)\n    end\n\n  is_upper: BOOLEAN\n      -- Is `item' uppercase?\n    do\n      Result := properties.is_upper (item)\n    end\n\n  is_lower: BOOLEAN\n      -- Is `item' lowercase?\n    do\n      Result := properties.is_lower (item)\n    end\n\n  is_digit: BOOLEAN\n      -- Is `item' a decimal digit as expected for ASCII characters?\n      -- A digit is one of 0123456789.\n    do\n      Result := '0' <= item and item <= '9'\n    end\n\n  is_unicode_digit: BOOLEAN\n      -- Is `item' a decimal digit as expected for Unicode characters?\n    do\n      Result := properties.is_digit (item)\n    end\n\n  is_hexa_digit: BOOLEAN\n      -- Is `item' a hexadecimal digit as expected for ASCII characters?\n      -- A digit is one of 0123456789ABCDEFabcedf.\n    do\n      Result := properties.is_hexa_digit (item)\n    end\n\n  is_space: BOOLEAN\n      -- Is `item' a white space?\n    do\n      Result := properties.is_space (item)\n    end\n\n  is_punctuation: BOOLEAN\n      -- Is `item' a punctuation?\n    do\n      Result := properties.is_punctuation (item)\n    end\n\n  is_alpha_numeric: BOOLEAN\n      -- Is `item' alphabetic or a digit?\n    do\n      Result := properties.is_alpha (item) or properties.is_digit (item)\n    end\n\n  is_control: BOOLEAN\n      -- Is `item' a control character?\n    do\n      Result := properties.is_control (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  properties: CHARACTER_PROPERTY\n      -- Property for Unicode characters.\n    once\n      create Result.make\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"character_8.e","content":"note\n  description: \"Characters, with comparison operations and an ASCII code\"\n  external_name: \"System.Char\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class\n  CHARACTER_8\n\ninherit\n  CHARACTER_8_REF\n    redefine\n      code,\n      to_character_32\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({CHARACTER_8_REF}),\n  to_character_32: {CHARACTER_32}\n\nfeature -- Access\n\n  code: INTEGER\n      -- Associated integer value\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"character_8_ref.e","content":"note\n  description: \"References to objects containing a character value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass CHARACTER_8_REF inherit\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      out, is_equal\n    end\n\nfeature -- Access\n\n  item: CHARACTER_8\n      -- Character value\n    external\n      \"built_in\"\n    end\n\n  code: INTEGER\n      -- Associated integer value\n    obsolete\n      \"Use `natural_32_code' instead.\"\n    do\n      Result := item.code\n    ensure\n      code_non_negatif: Result >= 0\n      code_in_range: Result >= min_value and Result <= max_value\n    end\n\n  natural_32_code: NATURAL_32\n      -- Associated natural value\n    do\n      Result := item.code.to_natural_32\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := natural_32_code.hash_code\n    end\n\n  min_value: INTEGER = 0\n  max_value: INTEGER = 255\n  max_ascii_value: INTEGER = 127\n      -- Bounds for integer representation of characters (ASCII)\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current character?\n    do\n      Result := natural_32_code < other.natural_32_code\n    ensure then\n      definition: Result = (natural_32_code < other.natural_32_code)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Basic routines\n\n  plus alias \"+\" (incr: INTEGER): CHARACTER_8\n      -- Add `incr' to the code of `item'\n    require\n      valid_increment: (item.code + incr).is_valid_character_8_code\n    do\n      Result := (item.code + incr).to_character_8\n    ensure\n      valid_result: Result |-| item = incr\n    end\n\n  minus alias \"-\" (decr: INTEGER): CHARACTER_8\n      -- Subtract `decr' from the code of `item'\n    require\n      valid_decrement: (item.code - decr).is_valid_character_8_code\n    do\n      Result := (item.code - decr).to_character_8\n    ensure\n      valid_result: item |-| Result = decr\n    end\n\n  difference alias \"|-|\" (other: CHARACTER_8): INTEGER\n      -- Difference between the codes of `item' and `other'\n    do\n      Result := item.code - other.code\n    ensure\n      valid_result: other + Result = item\n    end\n\n  next: CHARACTER_8\n      -- Next character\n    require\n      valid_character: (item.code + 1).is_valid_character_8_code\n    do\n      Result := item + 1\n    ensure\n      valid_result: Result |-| item = 1\n    end\n\n  previous: CHARACTER_8\n      -- Previous character\n    require\n      valid_character: (item.code - 1).is_valid_character_8_code\n    do\n      Result := item - 1\n    ensure\n      valid_result: Result |-| item = -1\n    end\n\nfeature -- Element change\n\n  set_item (c: CHARACTER_8)\n      -- Make `c' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of character\n    do\n      create Result.make (1)\n      Result.append_character (item)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: CHARACTER_8_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: CHARACTER_8_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version\n    do\n      Result := item\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version\n    do\n      Result := item.to_character_32\n    end\n\n  as_upper, upper: CHARACTER_8\n      -- Uppercase value of `item'\n      -- Returns `item' if not `is_lower'\n    do\n      if is_lower then\n        Result := (item.code - ('a').code + ('A').code).to_character_8\n      else\n        Result := item\n      end\n    end\n\n  as_lower, lower: CHARACTER_8\n      -- Lowercase value of `item'\n      -- Returns `item' if not `is_upper'\n    do\n      if is_upper then\n        Result := (item.code - ('A').code + ('a').code).to_character_8\n      else\n        Result := item\n      end\n    end\n\nfeature -- Status report\n\n  is_alpha: BOOLEAN\n      -- Is `item' alphabetic?\n      -- Alphabetic is `is_upper' or `is_lower'\n    do\n      Result := (character_types (item.code) & (is_upper_flag | is_lower_flag)) > 0\n    end\n\n  is_upper: BOOLEAN\n      -- Is `item' uppercase?\n    do\n      Result := (character_types (item.code) & is_upper_flag) > 0\n    end\n\n  is_lower: BOOLEAN\n      -- Is `item' lowercase?\n    do\n      Result := (character_types (item.code) & is_lower_flag) > 0\n    end\n\n  is_digit: BOOLEAN\n      -- Is `item' a digit?\n      -- A digit is one of 0123456789\n    do\n      Result := (character_types (item.code) & is_digit_flag) > 0\n    end\n\n  is_hexa_digit: BOOLEAN\n      -- Is `item' an hexadecimal digit?\n      -- A digit is one of 0123456789ABCDEFabcedf\n    do\n      Result := (character_types (item.code) & (is_hexa_digit_flag | is_digit_flag)) > 0\n    end\n\n  is_space: BOOLEAN\n      -- Is `item' a white space?\n    do\n      Result := (character_types (item.code) & is_white_space_flag) > 0\n    end\n\n  is_punctuation: BOOLEAN\n      -- Is `item' a punctuation?\n    do\n      Result := (character_types (item.code) & is_punctuation_flag) > 0\n    end\n\n  is_alpha_numeric: BOOLEAN\n      -- Is `item' alphabetic or a digit?\n    do\n      Result := (character_types (item.code) & (is_upper_flag | is_lower_flag | is_digit_flag)) > 0\n    end\n\n  is_printable: BOOLEAN\n      -- Is `item' a printable character including space?\n    do\n      Result := (character_types (item.code) &\n        (is_upper_flag | is_lower_flag | is_digit_flag | is_punctuation_flag | is_space_flag)) > 0\n    end\n\n  is_graph: BOOLEAN\n      -- Is `item' a printable character except space?\n    do\n      Result := (character_types (item.code) &\n        (is_upper_flag | is_lower_flag | is_digit_flag | is_punctuation_flag)) > 0\n    end\n\n  is_control: BOOLEAN\n      -- Is `item' a control character?\n    do\n      Result := (character_types (item.code) & is_control_flag) > 0\n    end\n\nfeature {NONE} -- Implementation\n\n  character_types (a_code: INTEGER): NATURAL_8\n      -- Associated type for character of code `a_code'\n    do\n        -- For character whose code is above 256, it is as if\n        -- we had no information about it.\n      if a_code < 256 then\n        Result := internal_character_types.item (a_code)\n      end\n    end\n\n  internal_character_types: SPECIAL [NATURAL_8]\n      -- Array which stores the various type for the ASCII characters\n    once\n      create Result.make_empty (256)\n      Result.extend (is_control_flag)             -- 0  null\n      Result.extend (is_control_flag)                         -- 1  start of heading\n      Result.extend (is_control_flag)                         -- 2  start of text\n      Result.extend (is_control_flag)                         -- 3  end of text\n      Result.extend (is_control_flag)                         -- 4  end of transmission\n      Result.extend (is_control_flag)                         -- 5  enquiry\n      Result.extend (is_control_flag)                         -- 6  acknowledge\n      Result.extend (is_control_flag)                         -- 7  bell\n      Result.extend (is_control_flag)                         -- 8  backspace\n      Result.extend (is_control_flag | is_white_space_flag)   -- 9  horizontal tab\n      Result.extend (is_control_flag | is_white_space_flag)   -- 10 NL line feed, new line\n      Result.extend (is_control_flag | is_white_space_flag)   -- 11 vertical tab\n      Result.extend (is_control_flag | is_white_space_flag)   -- 12 NP form feed, new page\n      Result.extend (is_control_flag | is_white_space_flag)   -- 13 carriage return=CR\n      Result.extend (is_control_flag)                         -- 14 shift out\n      Result.extend (is_control_flag)                         -- 15 shift in\n      Result.extend (is_control_flag)                         -- 16\n      Result.extend (is_control_flag)                         -- 17\n      Result.extend (is_control_flag)                         -- 18\n      Result.extend (is_control_flag)                         -- 19\n      Result.extend (is_control_flag)                         -- 20\n      Result.extend (is_control_flag)                         -- 21\n      Result.extend (is_control_flag)                         -- 22\n      Result.extend (is_control_flag)                         -- 23\n      Result.extend (is_control_flag)                         -- 24\n      Result.extend (is_control_flag)                         -- 25\n      Result.extend (is_control_flag)                         -- 26\n      Result.extend (is_control_flag)                         -- 27 Escape\n      Result.extend (is_control_flag)                         -- 28 file separator\n      Result.extend (is_control_flag)                         -- 29 group separator\n      Result.extend (is_control_flag)                         -- 30 record separator\n      Result.extend (is_control_flag)                         -- 31 unit separator\n      Result.extend (is_white_space_flag | is_space_flag)     -- 32 Space\n      Result.extend (is_punctuation_flag)                     -- 33 !\n      Result.extend (is_punctuation_flag)                     -- 34 \"\n      Result.extend (is_punctuation_flag)                     -- 35 #\n      Result.extend (is_punctuation_flag)                     -- 36 $\n      Result.extend (is_punctuation_flag)                     -- 37 %\n      Result.extend (is_punctuation_flag)                     -- 38 &\n      Result.extend (is_punctuation_flag)                     -- 39 '\n      Result.extend (is_punctuation_flag)                     -- 40 (\n      Result.extend (is_punctuation_flag)                     -- 41 )\n      Result.extend (is_punctuation_flag)                     -- 42 *\n      Result.extend (is_punctuation_flag)                     -- 43 +\n      Result.extend (is_punctuation_flag)                     -- 44 ,\n      Result.extend (is_punctuation_flag)                     -- 45 -\n      Result.extend (is_punctuation_flag)                     -- 46 .\n      Result.extend (is_punctuation_flag)                     -- 47 /\n      Result.extend (is_digit_flag)                           -- 48 0\n      Result.extend (is_digit_flag)                           -- 49 1\n      Result.extend (is_digit_flag)                           -- 50 2\n      Result.extend (is_digit_flag)                           -- 51 3\n      Result.extend (is_digit_flag)                           -- 52 4\n      Result.extend (is_digit_flag)                           -- 53 5\n      Result.extend (is_digit_flag)                           -- 54 6\n      Result.extend (is_digit_flag)                           -- 55 7\n      Result.extend (is_digit_flag)                           -- 56 8\n      Result.extend (is_digit_flag)                           -- 57 9\n      Result.extend (is_punctuation_flag)                     -- 58 :\n      Result.extend (is_punctuation_flag)                     -- 59 ;\n      Result.extend (is_punctuation_flag)                     -- 60 <\n      Result.extend (is_punctuation_flag)                     -- 61 =\n      Result.extend (is_punctuation_flag)                     -- 62 >\n      Result.extend (is_punctuation_flag)                     -- 63 ?\n      Result.extend (is_punctuation_flag)                     -- 64 @\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 65 A\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 66 B\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 67 C\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 68 D\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 69 E\n      Result.extend (is_upper_flag | is_hexa_digit_flag)      -- 70 F\n      Result.extend (is_upper_flag)                           -- 71 G\n      Result.extend (is_upper_flag)                           -- 72 H\n      Result.extend (is_upper_flag)                           -- 73 I\n      Result.extend (is_upper_flag)                           -- 74 J\n      Result.extend (is_upper_flag)                           -- 75 K\n      Result.extend (is_upper_flag)                           -- 76 L\n      Result.extend (is_upper_flag)                           -- 77 M\n      Result.extend (is_upper_flag)                           -- 78 N\n      Result.extend (is_upper_flag)                           -- 79 O\n      Result.extend (is_upper_flag)                           -- 80 P\n      Result.extend (is_upper_flag)                           -- 81 Q\n      Result.extend (is_upper_flag)                           -- 82 R\n      Result.extend (is_upper_flag)                           -- 83 S\n      Result.extend (is_upper_flag)                           -- 84 T\n      Result.extend (is_upper_flag)                           -- 85 U\n      Result.extend (is_upper_flag)                           -- 86 V\n      Result.extend (is_upper_flag)                           -- 87 W\n      Result.extend (is_upper_flag)                           -- 88 X\n      Result.extend (is_upper_flag)                           -- 89 Y\n      Result.extend (is_upper_flag)                           -- 90 Z\n      Result.extend (is_punctuation_flag)                     -- 91 [\n      Result.extend (is_punctuation_flag)                     -- 92 \\\n      Result.extend (is_punctuation_flag)                     -- 93 ]\n      Result.extend (is_punctuation_flag)                     -- 94 ^\n      Result.extend (is_punctuation_flag)                     -- 95 _\n      Result.extend (is_punctuation_flag)                     -- 96 `\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 97 a\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 98 b\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 99 c\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 100  d\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 101  e\n      Result.extend (is_lower_flag | is_hexa_digit_flag)      -- 102  f\n      Result.extend (is_lower_flag)                           -- 103  g\n      Result.extend (is_lower_flag)                           -- 104  h\n      Result.extend (is_lower_flag)                           -- 105  i\n      Result.extend (is_lower_flag)                           -- 106  j\n      Result.extend (is_lower_flag)                           -- 107  k\n      Result.extend (is_lower_flag)                           -- 108  l\n      Result.extend (is_lower_flag)                           -- 109  m\n      Result.extend (is_lower_flag)                           -- 110  n\n      Result.extend (is_lower_flag)                           -- 111  o\n      Result.extend (is_lower_flag)                           -- 112  p\n      Result.extend (is_lower_flag)                           -- 113  q\n      Result.extend (is_lower_flag)                           -- 114  r\n      Result.extend (is_lower_flag)                           -- 115  s\n      Result.extend (is_lower_flag)                           -- 116  t\n      Result.extend (is_lower_flag)                           -- 117  u\n      Result.extend (is_lower_flag)                           -- 118  v\n      Result.extend (is_lower_flag)                           -- 119  w\n      Result.extend (is_lower_flag)                           -- 120  x\n      Result.extend (is_lower_flag)                           -- 121  y\n      Result.extend (is_lower_flag)                           -- 122  z\n      Result.extend (is_punctuation_flag)                     -- 123  {\n      Result.extend (is_punctuation_flag)                     -- 124  |\n      Result.extend (is_punctuation_flag)                     -- 125  }\n      Result.extend (is_punctuation_flag)                     -- 126  ~\n      Result.extend (is_control_flag)                         -- 127  DEL\n      Result.fill_with (0, 128, 255)              -- extended ASCII\n    ensure\n      internal_character_types_not_void: Result /= Void\n    end\n\n  is_upper_flag: NATURAL_8 = 0x01\n\n  is_lower_flag: NATURAL_8 = 0x02\n\n  is_digit_flag: NATURAL_8 = 0x04\n\n  is_white_space_flag: NATURAL_8 = 0x08\n\n  is_punctuation_flag: NATURAL_8 = 0x10\n\n  is_control_flag: NATURAL_8 = 0x20\n\n  is_hexa_digit_flag: NATURAL_8 = 0x40\n\n  is_space_flag: NATURAL_8 = 0x80;\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"collection.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: collection, access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class COLLECTION [G] inherit\n\n  CONTAINER [G]\n\nfeature -- Status report\n\n  extendible: BOOLEAN\n      -- May new items be added?\n    deferred\n    end\n\n  prunable: BOOLEAN\n      -- May items be removed?\n    deferred\n    end\n\n  is_inserted (v: G): BOOLEAN\n      -- Has `v' been inserted by the most recent insertion?\n      -- (By default, the value returned is equivalent to calling\n      -- `has (v)'. However, descendants might be able to provide more\n      -- efficient implementations.)\n    do\n      Result := has (v)\n    end\n\nfeature -- Element change\n\n  put, extend (v: G)\n      -- Ensure that structure includes `v'.\n    require\n      extendible: extendible\n    deferred\n    ensure\n      item_inserted: is_inserted (v)\n    end\n\n  fill (other: CONTAINER [G])\n      -- Fill with as many items of `other' as possible.\n      -- The representations of `other' and current structure\n      -- need not be the same.\n    require\n      other_not_void: other /= Void\n      extendible: extendible\n    local\n      lin_rep: LINEAR [G]\n    do\n      lin_rep := other.linear_representation\n      from\n        lin_rep.start\n      until\n        not extendible or else lin_rep.off\n      loop\n        extend (lin_rep.item)\n        lin_rep.forth\n      end\n    end\n\nfeature -- Removal\n\n  prune (v: G)\n      -- Remove one occurrence of `v' if any.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    require\n      prunable: prunable\n    deferred\n    end\n\n  prune_all (v: G)\n      -- Remove all occurrences of `v'.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n      --|Default implementation, usually inefficient.\n    require\n      prunable: prunable\n    do\n      from\n      until not has (v) loop\n        prune (v)\n      end\n    ensure\n      no_more_occurrences: not has (v)\n    end\n\n  wipe_out\n      -- Remove all items.\n    require\n      prunable: prunable\n    deferred\n    ensure\n      wiped_out: is_empty\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"comparable.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class COMPARABLE inherit\n\n  PART_COMPARABLE\n    redefine\n      is_less, is_less_equal,\n      is_greater, is_greater_equal,\n      is_equal\n    end\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current object less than `other'?\n    deferred\n    ensure then\n      asymmetric: Result implies not (other < Current)\n    end\n\n  is_less_equal alias \"<=\" (other: like Current): BOOLEAN\n      -- Is current object less than or equal to `other'?\n    do\n      Result := not (other < Current)\n    ensure then\n      definition: Result = ((Current < other) or (Current ~ other))\n    end\n\n  is_greater alias \">\" (other: like Current): BOOLEAN\n      -- Is current object greater than `other'?\n    do\n      Result := other < Current\n    ensure then\n      definition: Result = (other < Current)\n    end\n\n  is_greater_equal alias \">=\" (other: like Current): BOOLEAN\n      -- Is current object greater than or equal to `other'?\n    do\n      Result := not (Current < other)\n    ensure then\n      definition: Result = (other <= Current)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := (not (Current < other) and not (other < Current))\n    ensure then\n      trichotomy: Result = (not (Current < other) and not (other < Current))\n    end\n\n  three_way_comparison (other: like Current): INTEGER\n      -- If current object equal to `other', 0;\n      -- if smaller, -1; if greater, 1\n    require\n      other_exists: other /= Void\n    do\n      if Current < other then\n        Result := -1\n      elseif other < Current then\n        Result := 1\n      end\n    ensure\n      equal_zero: (Result = 0) = (Current ~ other)\n      smaller_negative: (Result = -1) = (Current < other)\n      greater_positive: (Result = 1) = (Current > other)\n    end\n\n  max (other: like Current): like Current\n      -- The greater of current object and `other'\n    require\n      other_exists: other /= Void\n    do\n      if Current >= other then\n        Result := Current\n      else\n        Result := other\n      end\n    ensure\n      current_if_not_smaller: Current >= other implies Result = Current\n      other_if_smaller: Current < other implies Result = other\n    end\n\n  min (other: like Current): like Current\n      -- The smaller of current object and `other'\n    require\n      other_exists: other /= Void\n    do\n      if Current <= other then\n        Result := Current\n      else\n        Result := other\n      end\n    ensure\n      current_if_not_greater: Current <= other implies Result = Current\n      other_if_greater: Current > other implies Result = other\n    end\n\ninvariant\n\n  irreflexive_comparison: not (Current < Current)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"container.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: access;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class\n  CONTAINER [G]\n\nfeature -- Access\n\n  has (v: G): BOOLEAN\n      -- Does structure include `v'?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    deferred\n    ensure\n      not_found_in_empty: Result implies not is_empty\n    end\n\nfeature -- Status report\n\n  is_empty: BOOLEAN\n      -- Is there no element?\n    deferred\n    end\n\n  empty: BOOLEAN\n      -- Is there no element?\n    obsolete\n      \"ELKS 2000: Use `is_empty' instead\"\n    do\n      Result := is_empty\n    end\n\n  object_comparison: BOOLEAN\n      -- Must search operations use `equal' rather than `='\n      -- for comparing references? (Default: no, use `='.)\n\n  changeable_comparison_criterion: BOOLEAN\n      -- May `object_comparison' be changed?\n      -- (Answer: yes by default.)\n    do\n      Result := True\n    end\n\nfeature -- Status setting\n\n  compare_objects\n      -- Ensure that future search operations will use `equal'\n      -- rather than `=' for comparing references.\n    require\n      changeable_comparison_criterion: changeable_comparison_criterion\n    do\n      object_comparison := True\n    ensure\n      object_comparison\n    end\n\n  compare_references\n      -- Ensure that future search operations will use `='\n      -- rather than `equal' for comparing references.\n    require\n      changeable_comparison_criterion: changeable_comparison_criterion\n    do\n      object_comparison := False\n    ensure\n      reference_comparison: not object_comparison\n    end\n\nfeature -- Conversion\n\n  linear_representation: LINEAR [G]\n      -- Representation as a linear structure\n    deferred\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"cursor.e","content":"note\n  description: \"Cursors for remembering positions in arbitrary data structures\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: cursor;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\nclass\n  CURSOR\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"cursor_structure.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: cursor_structure, access;\n  access: cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class CURSOR_STRUCTURE [G] inherit\n\n  ACTIVE [G]\n\nfeature -- Access\n\n  cursor: CURSOR\n      -- Current cursor position\n    deferred\n    ensure\n      cursor_not_void: Result /= Void\n    end\n\nfeature -- Status report\n\n  valid_cursor (p: CURSOR): BOOLEAN\n      -- Can the cursor be moved to position `p'?\n    deferred\n    end\n\nfeature -- Cursor movement\n\n  go_to (p: CURSOR)\n      -- Move cursor to position `p'.\n    require\n      cursor_position_valid: valid_cursor (p)\n    deferred\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"debug_output.e","content":"note\n  description: \"Objects that provide an output in debugger\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-17 11:46:15 -0800 (Thu, 17 Jan 2013) $\"\n  revision: \"$Revision: 92124 $\"\n\ndeferred class\n  DEBUG_OUTPUT\n\nfeature -- Status report\n\n  debug_output: READABLE_STRING_GENERAL\n      -- String that should be displayed in debugger to represent `Current'.\n    deferred\n    ensure\n      result_not_void: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"developer_exception.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-12-26 18:57:50 -0800 (Wed, 26 Dec 2012) $\"\n  revision: \"$Revision: 92096 $\"\n\nclass\n  DEVELOPER_EXCEPTION\n\ninherit\n  EXCEPTION\n    redefine\n      code,\n      tag\n    end\n\nfeature -- Access\n\n  frozen code: INTEGER\n      -- Exception code\n    do\n      Result := {EXCEP_CONST}.developer_exception\n    end\n\n  tag: IMMUTABLE_STRING_32\n    once\n      create Result.make_from_string_8 (\"Developer exception.\")\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"disposable.e","content":"note\n  description: \"Perform cleanup operations before current instance is reclaimed by garbage collection.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  DISPOSABLE\n\nfeature -- Removal\n\n  dispose\n      -- Action to be executed just before garbage collection\n      -- reclaims an object.\n      -- Effect it in descendants to perform specific dispose\n      -- actions. Those actions should only take care of freeing\n      -- external resources; they should not perform remote calls\n      -- on other objects since these may also be dead and reclaimed.\n    deferred\n    end\n\nfeature {NONE} -- Status report\n\n  is_in_final_collect: BOOLEAN\n      -- Is GC currently performing final collection\n      -- after execution of current program?\n      -- Safe to use in `dispose'.\n    external\n      \"C inline use %\"eif_memory.h%\"\"\n    alias\n      \"return eif_is_in_final_collect;\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"dynamic_chain.e","content":"note\n  description: \"Dynamically modifiable chains\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: dynamic_chain, sequence;\n  access: index, cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class DYNAMIC_CHAIN [G] inherit\n\n  CHAIN [G]\n    export\n      {ANY} remove, prune_all, prune\n    undefine\n      remove, prune_all, prune\n    end\n\n  UNBOUNDED [G]\n\nfeature -- Status report\n\n  extendible: BOOLEAN\n      -- May new items be added? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\nfeature -- Element change\n\n  put_front (v: like item)\n      -- Add `v' at beginning.\n      -- Do not move cursor.\n    require\n      extendible: extendible\n    deferred\n    ensure\n      new_count: count = old count + 1\n      item_inserted: first = v\n    end\n\n  put_left (v: like item)\n      -- Add `v' to the left of cursor position.\n      -- Do not move cursor.\n    require\n      extendible: extendible\n      not_before: not before\n    deferred\n    ensure\n      new_count: count = old count + 1\n      new_index: index = old index + 1\n    end\n\n  put_right (v: like item)\n      -- Add `v' to the right of cursor position.\n      -- Do not move cursor.\n    require\n      extendible: extendible\n      not_after: not after\n    deferred\n    ensure\n      new_count: count = old count + 1\n      same_index: index = old index\n    end\n\n  merge_left (other: like Current)\n      -- Merge `other' into current structure before cursor\n      -- position. Do not move cursor. Empty `other'.\n    require\n      extendible: extendible\n      not_before: not before\n      other_exists: other /= Void\n      not_current: other /= Current\n    deferred\n    ensure\n      new_count: count = old count + old other.count\n      new_index: index = old index + old other.count\n      other_is_empty: other.is_empty\n    end\n\n  merge_right (other: like Current)\n      -- Merge `other' into current structure after cursor\n      -- position. Do not move cursor. Empty `other'.\n    require\n      extendible: extendible\n      not_after: not after\n      other_exists: other /= Void\n      not_current: other /= Current\n    deferred\n    ensure\n      new_count: count = old count + old other.count\n      same_index: index = old index\n      other_is_empty: other.is_empty\n    end\n\nfeature -- Removal\n\n  prune (v: like item)\n      -- Remove first occurrence of `v', if any,\n      -- after cursor position.\n      -- If found, move cursor to right neighbor;\n      -- if not, make structure `exhausted'.\n    do\n      search (v)\n      if not exhausted then\n        remove\n      end\n    end\n\n  remove_left\n      -- Remove item to the left of cursor position.\n      -- Do not move cursor.\n    require\n      left_exists: index > 1\n    deferred\n    ensure\n      new_count: count = old count - 1\n      new_index: index = old index - 1\n    end\n\n  remove_right\n      -- Remove item to the right of cursor position.\n      -- Do not move cursor.\n    require\n      right_exists: index < count\n    deferred\n    ensure\n      new_count: count = old count - 1\n      same_index: index = old index\n    end\n\n  prune_all (v: like item)\n      -- Remove all occurrences of `v'.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n      -- Leave structure `exhausted'.\n    do\n      from\n        start\n        search (v)\n      until\n        exhausted\n      loop\n        remove\n        search (v)\n      end\n    ensure then\n      is_exhausted: exhausted\n    end\n\n  wipe_out\n      -- Remove all items.\n    do\n      from\n        start\n      until\n        is_empty\n      loop\n        remove\n      end\n    end\n\nfeature -- Duplication\n\n  duplicate (n: INTEGER): like Current\n      -- Copy of sub-chain beginning at current position\n      -- and having min (`n', `from_here') items,\n      -- where `from_here' is the number of items\n      -- at or to the right of current position.\n    local\n      pos: CURSOR\n      counter: INTEGER\n    do\n      from\n        Result := new_chain\n        if object_comparison then\n          Result.compare_objects\n        end\n        pos := cursor\n      until\n        (counter = n) or else exhausted\n      loop\n        Result.extend (item)\n        forth\n        counter := counter + 1\n      end\n      go_to (pos)\n    end\n\nfeature {DYNAMIC_CHAIN} -- Implementation\n\n  new_chain: like Current\n      -- A newly created instance of the same type.\n      -- This feature may be redefined in descendants so as to\n      -- produce an adequately allocated and initialized object.\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"dynamic_list.e","content":"note\n  description: \"[\n    Sequential, dynamically modifiable lists,\n    without commitment to a particular representation\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: dynamic_list, sequence;\n  access: index, cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class DYNAMIC_LIST [G] inherit\n\n  LIST [G]\n    undefine\n      prune,\n      sequential_index_of, sequential_has,\n      remove, prune_all\n    end\n\n  DYNAMIC_CHAIN [G]\n    rename\n      wipe_out as chain_wipe_out\n    export\n      {NONE} chain_wipe_out\n    undefine\n      is_equal\n    redefine\n      put_left, put_right,\n      remove_left, remove_right\n    end\n\n  DYNAMIC_CHAIN [G]\n    undefine\n      is_equal\n    redefine\n      put_left, put_right,\n      remove_left, remove_right, wipe_out\n    select\n      wipe_out\n    end\n\nfeature -- Element change\n\n  put_left (v: like item)\n      -- Add `v' to the left of cursor position.\n      -- Do not move cursor.\n    local\n      temp: like item\n    do\n      if is_empty then\n        put_front (v)\n      elseif after then\n        back\n        put_right (v)\n        move (2)\n      else\n        temp := item\n        replace (v)\n        put_right (temp)\n        forth\n      end\n    end\n\n  put_right (v: like item)\n      -- Add `v' to the right of cursor position.\n      -- Do not move cursor.\n    deferred\n    end\n\n  merge_left (other: like Current)\n      -- Merge `other' into current structure before cursor\n      -- position. Do not move cursor. Empty `other'.\n    do\n      from\n        other.start\n      until\n        other.is_empty\n      loop\n        put_left (other.item)\n        other.remove\n      end\n    end\n\n  merge_right (other: like Current)\n      -- Merge `other' into current structure after cursor\n      -- position. Do not move cursor. Empty `other'.\n    do\n      from\n        other.finish\n      until\n        other.is_empty\n      loop\n        put_right (other.item)\n        other.back\n        other.remove_right\n      end\n    end\n\nfeature -- Removal\n\n  remove\n      -- Remove current item.\n      -- Move cursor to right neighbor\n      -- (or `after' if no right neighbor).\n    deferred\n    ensure then\n      after_when_empty: is_empty implies after\n    end\n\n  remove_left\n      -- Remove item to the left of cursor position.\n      -- Do not move cursor.\n    deferred\n    end\n\n  remove_right\n      -- Remove item to the right of cursor position.\n      -- Do not move cursor.\n    deferred\n    end\n\n  wipe_out\n      -- Remove all items.\n    do\n      chain_wipe_out\n      back\n    ensure then\n      is_before: before\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"excep_const.e","content":"note\n  description: \"[\n    Constants used for exception handling.\n    This class may be used as ancestor by classes needing its facilities.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  EXCEP_CONST\n\nfeature -- Access\n\n  Void_call_target: INTEGER = 1\n      -- Exception code for feature applied to void reference\n\n  No_more_memory: INTEGER = 2\n      -- Exception code for failed memory allocation\n\n  Precondition: INTEGER = 3\n      -- Exception code for violated precondition\n\n  Postcondition: INTEGER = 4\n      -- Exception code for violated postcondition\n\n  Floating_point_exception: INTEGER = 5\n      -- Exception code for floating point exception\n\n  Class_invariant: INTEGER = 6\n      -- Exception code for violated class invariant\n\n  Check_instruction: INTEGER = 7\n      -- Exception code for violated check\n\n  Routine_failure: INTEGER = 8\n      -- Exception code for failed routine\n\n  Incorrect_inspect_value: INTEGER =  9\n      -- Exception code for inspect value which is not one\n      -- of the inspect constants, if there is no Else_part\n\n  Loop_variant: INTEGER = 10\n      -- Exception code for non-decreased loop variant\n\n  Loop_invariant: INTEGER = 11\n      -- Exception code for violated loop invariant\n\n  Signal_exception: INTEGER = 12\n      -- Exception code for operating system signal\n\n  Eiffel_runtime_panic: INTEGER = 13\n      -- Eiffel run-time panic\n\n  Rescue_exception: INTEGER = 14\n      -- Exception code for exception in rescue clause\n\n  Out_of_memory: INTEGER = 15\n      -- Out of memory (cannot be ignored)\n\n  Resumption_failed: INTEGER = 16\n      -- Resumption failed (retry did not succeed)\n\n  Create_on_deferred: INTEGER = 17\n      -- Create on deferred\n\n  External_exception: INTEGER = 18\n      -- Exception code for operating system error\n      -- which does not set the `errno' variable\n      -- (Unix-specific)\n\n  Void_assigned_to_expanded: INTEGER = 19\n      -- Exception code for assignment of void value\n      -- to expanded entity\n\n  Exception_in_signal_handler: INTEGER = 20\n      -- Exception in signal handler\n\n  Io_exception: INTEGER = 21\n      -- Exception code for I/O error\n\n  Operating_system_exception: INTEGER = 22\n      -- Exception code for operating system error\n      -- which sets the `errno' variable\n      -- (Unix-specific)\n\n  Retrieve_exception: INTEGER = 23\n      -- Exception code for retrieval error\n      -- may be raised by `retrieved' in `IO_MEDIUM'.\n\n  Developer_exception: INTEGER = 24\n      -- Exception code for developer exception\n\n  Eiffel_runtime_fatal_error: INTEGER = 25\n      -- Eiffel run-time fatal error\n\n  Dollar_applied_to_melted_feature: INTEGER = 26\n      -- $ applied to melted feature\n\n  Runtime_io_exception: INTEGER = 27\n      -- Exception code for I/O error raised by runtime functions\n      -- such as store/retrieve, file access...\n\n  Com_exception: INTEGER = 28\n      -- Exception code for a COM error.\n\n  Runtime_check_exception: INTEGER = 29\n      -- Exception code for runtime check being violated.\n\n  old_exception: INTEGER = 30\n      -- Old exception code.\n\n  serialization_exception: INTEGER = 31\n      -- Serialization exception code.\n\n  number_of_codes: INTEGER = 31\n      -- How many codes are there to represent exceptions?\n\n  valid_code (c: INTEGER): BOOLEAN\n      -- Is `c' a valid code to represent some kind of exceptions?\n    do\n      Result := c >= 1 and c <= number_of_codes\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"exception.e","content":"note\n  description: \"[\n    Ancestor of all exception classes.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-12-28 06:07:03 -0800 (Fri, 28 Dec 2012) $\"\n  revision: \"$Revision: 92098 $\"\n\nclass\n  EXCEPTION\n\ninherit\n  EXCEPTION_MANAGER_FACTORY\n    undefine\n      out\n    end\n\ncreate\n  default_create,\n  make_with_tag_and_trace\n\nfeature {NONE} -- Initialization\n\n  make_with_tag_and_trace (a_tag, a_trace_string: STRING)\n      -- Make `Current' with `description' set to `a_tag'.\n    obsolete\n      \"Use `default_create' and `set_description' instead.\"\n    require\n      tag_not_void: a_tag /= Void\n      trace_string_not_void: a_trace_string /= Void\n    do\n      set_description (a_tag)\n    ensure\n      description_set: attached description as l_des and then a_tag.same_string_general (l_des)\n    end\n\nfeature -- Raise\n\n  raise\n      -- Raise current exception\n    require\n      is_raisable: is_raisable\n    do\n      exception_manager.raise (Current)\n    end\n\nfeature -- Access\n\n  meaning: STRING\n      -- A short message describing what current exception is\n    obsolete\n      \"Use `tag' instead.\"\n    do\n      Result := tag.as_string_8\n    end\n\n  tag: IMMUTABLE_STRING_32\n      -- A short message describing what current exception is\n    once\n      create Result.make_from_string_8 (\"General exception\")\n    end\n\n  message: detachable STRING\n      -- Message of current exception\n    obsolete\n      \"Use `description' instead.\"\n    do\n      if attached c_description as l_m then\n        Result := l_m.substring (1, l_m.count)\n      end\n    end\n\n  description: detachable READABLE_STRING_GENERAL\n      -- Detailed description of current exception\n    local\n      u: UTF_CONVERTER\n      l_res: STRING_32\n    do\n      if attached c_description as l_m then\n          -- Description is encoded in UTF-8 by the runtime.\n        create l_res.make (l_m.count)\n        u.utf_8_0_subpointer_into_escaped_string_32 (l_m.managed_data, 0, l_m.count - 1, False, l_res)\n        Result := l_res\n      end\n    end\n\n  exception_trace: detachable STRING\n      -- String representation of current exception trace\n    obsolete\n      \"Use `trace' instead.\"\n    do\n      Result := internal_trace\n    end\n\n  trace: detachable STRING_32\n      -- String representation of current exception trace\n    local\n      u: UTF_CONVERTER\n    do\n      if attached internal_trace as l_trace then\n        Result := u.utf_8_string_8_to_string_32 (l_trace)\n      end\n    end\n\n  code: INTEGER\n      -- Code of the exception.\n    do\n    end\n\n  frozen original: EXCEPTION\n      -- The original exception directly triggered current exception\n    local\n      t: like throwing_exception\n    do\n      t := throwing_exception\n      if t = Current or else t = Void then\n        Result := Current\n      elseif (attached {ROUTINE_FAILURE} Current) or else (attached {OLD_VIOLATION} Current) then\n        Result := t.original\n      else\n        Result := Current\n      end\n    ensure\n      original_not_void: Result /= Void\n    end\n\n  frozen cause: EXCEPTION\n      -- The cause of current exception raised during rescue processing\n    do\n      if attached original.throwing_exception as e then\n        Result := e\n      else\n        Result := Current\n      end\n    ensure\n      cause_not_void: Result /= Void\n    end\n\n  frozen recipient_name: detachable STRING\n      -- Name of the routine whose execution was\n      -- interrupted by current exception\n\n  frozen type_name: detachable STRING\n      -- Name of the class that includes the recipient\n      -- of original form of current exception\n\n  frozen line_number: INTEGER\n      -- Line number\n\nfeature -- Access obselete\n\n  trace_as_string: detachable STRING\n      -- Exception trace represented as a string\n    obsolete\n      \"Use `trace' instead.\"\n    do\n      Result := exception_trace\n    end\n\nfeature -- Status settings\n\n  set_message (a_message: like message)\n      -- Set `message' with `a_message'.\n    obsolete\n      \"Use `set_description' instead.\"\n    do\n      set_description (a_message)\n    ensure\n      message_set: message ~ a_message\n    end\n\n  set_description (a_description: detachable READABLE_STRING_GENERAL)\n      -- Set `description' with `a_description'.\n    local\n      u: UTF_CONVERTER\n      l_upper: CELL [INTEGER]\n      l_c: like c_description\n    do\n      if a_description /= Void then\n        create l_c.make_empty (a_description.count)\n        create l_upper.put (0)\n        u.utf_32_string_into_utf_8_0_pointer (a_description, l_c.managed_data, 0, l_upper)\n        l_c.set_count (l_upper.item)\n        c_description := l_c\n      else\n        c_description := Void\n      end\n    ensure\n      description_set: (attached a_description as a_des and then attached description as l_des and then l_des.same_string (l_des)) or else\n              (a_description = Void and then description = Void)\n    end\n\nfeature -- Status report\n\n  frozen is_ignorable: BOOLEAN\n      -- Is current exception ignorable?\n    do\n      Result := exception_manager.is_ignorable (generating_type)\n    end\n\n  frozen is_raisable: BOOLEAN\n      -- Is current exception raisable by `raise'?\n    do\n      Result := exception_manager.is_raisable (generating_type)\n    end\n\n  frozen is_ignored: BOOLEAN\n      -- If set, current exception is not raised.\n    do\n      Result := exception_manager.is_ignored (generating_type)\n    ensure\n      is_ignored_implies_is_ignorable: Result implies is_ignorable\n      not_is_caught: Result = not is_caught\n    end\n\n  frozen is_caught: BOOLEAN\n      -- If set, current exception is raised.\n    do\n      Result := not is_ignored\n    ensure\n      not_is_caught_implies_is_ignorable: not Result implies is_ignorable\n      not_is_ignored: Result = not is_ignored\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- New string containing terse printable representation\n      -- of current object\n    local\n      t: detachable STRING_32\n    do\n      Result := generating_type\n      t := trace\n      if t /= Void then\n        Result.append_character ('%N')\n        Result.append_string (t.as_string_8)\n      end\n    end\n\nfeature {EXCEPTION} -- Access\n\n  frozen throwing_exception: detachable EXCEPTION\n      -- The exception throwing current exception\n\nfeature {EXCEPTION_MANAGER} -- Implementation\n\n  frozen set_throwing_exception (a_exception: detachable EXCEPTION)\n      -- Set `throwing_exception' with `a_exception'.\n    do\n      throwing_exception := a_exception\n    ensure\n      throwing_exception_set: throwing_exception = a_exception\n    end\n\n  frozen set_recipient_name (a_name: like recipient_name)\n      -- Set `recipient_name' with `a_name'\n    do\n      recipient_name := a_name\n    end\n\n  frozen set_line_number (a_number: like line_number)\n      -- Set `line_number' with `a_number'.\n    do\n      line_number := a_number\n    end\n\n  frozen set_c_description (a_des: detachable STRING_8)\n      -- Set `c_description' with `a_des'. `a_des' is in UTF-8.\n    do\n      if a_des /= Void then\n        create c_description.make (a_des)\n      else\n        c_description := Void\n      end\n    end\n\n  c_description: detachable C_STRING\n      -- Message, stored as C string to keep it alive and usable by the runtime trace printing.\n\n  frozen set_type_name (a_type: like type_name)\n      -- Set `type_name' with `a_type'\n    do\n      type_name := a_type\n    end\n\n  frozen internal_is_ignorable: BOOLEAN\n      -- Internal `is_ignorable'\n\n  frozen set_exception_trace (a_trace: like exception_trace)\n      -- Set `exception_trace' with `a_trace'.\n    do\n      internal_trace := a_trace\n    end\n\n  internal_trace: detachable STRING;\n      -- String representation of the exception trace\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"exception_manager.e","content":"note\n  description: \"[\n    Common exception operations and management.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  EXCEPTION_MANAGER\n\nfeature -- Access\n\n  last_exception: detachable EXCEPTION\n      -- Last exception\n    external\n      \"built_in\"\n    end\n\nfeature -- Raise\n\n  raise (a_exception: EXCEPTION)\n      -- Raise `a_exception'.\n    require\n      a_exception_not_void: a_exception /= Void\n      a_exception_is_raisable: a_exception.is_raisable\n    external\n      \"built_in\"\n    end\n\nfeature -- Status setting\n\n  ignore (a_exception: TYPE [detachable EXCEPTION])\n      -- Ignore type of `a_exception'.\n    require\n      a_exception_not_void: a_exception /= Void\n      is_ignorable: is_ignorable (a_exception)\n    external\n      \"built_in\"\n    ensure\n      is_caught: is_ignored (a_exception)\n    end\n\n  catch (a_exception: TYPE [detachable EXCEPTION])\n      -- Set type of `a_exception' `is_caught'.\n    require\n      a_exception_not_void: a_exception /= Void\n    external\n      \"built_in\"\n    ensure\n      is_ignored: not is_ignored (a_exception)\n    end\n\n  set_is_ignored (a_exception: TYPE [detachable EXCEPTION]; a_ignored: BOOLEAN)\n      -- Set type of `a_exception' to be `a_ignored'.\n    require\n      a_exception_not_void: a_exception /= Void\n      a_ignored_implies_is_ignorable: a_ignored implies is_ignorable (a_exception)\n    external\n      \"built_in\"\n    ensure\n      is_ignored_set: is_ignored (a_exception) = a_ignored\n    end\n\nfeature -- Status report\n\n  is_ignorable (a_exception: TYPE [detachable EXCEPTION]): BOOLEAN\n      -- If set, type of `a_exception' is ignorable.\n    external\n      \"built_in\"\n    end\n\n  is_raisable (a_exception: TYPE [detachable EXCEPTION]): BOOLEAN\n      -- If set, type of `a_exception' is raisable.\n    external\n      \"built_in\"\n    end\n\n  is_ignored (a_exception: TYPE [detachable EXCEPTION]): BOOLEAN\n      -- If set, type of `a_exception' is not raised.\n    external\n      \"built_in\"\n    ensure\n      not_is_caught: Result = not is_caught (a_exception)\n    end\n\n  is_caught (a_exception: TYPE [detachable EXCEPTION]): BOOLEAN\n      -- If set, type of `a_exception' is raised.\n    external\n      \"built_in\"\n    ensure\n      not_is_ignored: Result = not is_ignored (a_exception)\n    end\n\nfeature {EXCEPTIONS} -- Backward compatibility support\n\n  type_of_code (a_code: INTEGER): detachable TYPE [EXCEPTION]\n      -- Exception type of `a_code'\n    external\n      \"built_in\"\n    end\n\n  exception_from_code (a_code: INTEGER): detachable EXCEPTION\n      -- Create exception object from `a_code'\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"exception_manager_factory.e","content":"note\n  description: \"[\n    Exception manager factory.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  EXCEPTION_MANAGER_FACTORY\n\nfeature -- Access\n\n  exception_manager: EXCEPTION_MANAGER\n      -- Exception manager\n    external\n      \"built_in\"\n    ensure\n      exception_manager_not_void: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"exceptions.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-01-18 11:50:31 -0800 (Fri, 18 Jan 2013) $\"\n  revision: \"$Revision: 92126 $\"\n\nclass EXCEPTIONS\n\ninherit\n  EXCEP_CONST\n\n  EXCEPTION_MANAGER_FACTORY\n\nfeature -- Status report\n\n  meaning (except: INTEGER): detachable STRING\n      -- A message in English describing what `except' is\n    do\n      if attached exception_manager.exception_from_code (except) as l_exception then\n        Result := l_exception.tag.as_string_8\n      end\n    end\n\n  assertion_violation: BOOLEAN\n      -- Is last exception originally due to a violated\n      -- assertion or non-decreasing variant?\n    do\n      Result := attached exception_manager.last_exception as l_exception and then\n            attached {ASSERTION_VIOLATION} l_exception.original\n    end\n\n  is_developer_exception: BOOLEAN\n      -- Is the last exception originally due to\n      -- a developer exception?\n    do\n      Result := attached exception_manager.last_exception as l_exception and then\n            attached {DEVELOPER_EXCEPTION} l_exception.original\n    end\n\n  is_developer_exception_of_name (name: detachable STRING): BOOLEAN\n      -- Is the last exception originally due to a developer\n      -- exception of name `name'?\n    do\n      if is_developer_exception then\n        Result := developer_exception_name ~ name\n      end\n    end\n\n  developer_exception_name: detachable STRING\n      -- Name of last developer-raised exception\n    require\n      applicable: is_developer_exception\n    do\n      if attached exception_manager.last_exception as l_exception and then attached l_exception.original.description as l_des then\n        Result := l_des.as_string_8\n      end\n    end\n\n  is_signal: BOOLEAN\n      -- Is last exception originally due to an external\n      -- event (operating system signal)?\n    do\n      Result := attached exception_manager.last_exception as l_exception and then\n            attached {OPERATING_SYSTEM_SIGNAL_FAILURE} l_exception.original\n    end\n\n  is_system_exception: BOOLEAN\n      -- Is last exception originally due to an\n      -- external event (operating system error)?\n    do\n      if\n        attached exception_manager.last_exception as l_exception and\n        attached exception_manager.exception_from_code (external_exception) as l_external\n      then\n        Result := l_exception.original.conforms_to (l_external) or else\n            attached {OPERATING_SYSTEM_FAILURE} l_exception.original\n      end\n    end\n\n  tag_name: detachable STRING\n      -- Tag of last violated assertion clause\n    do\n      if attached exception_manager.last_exception as l_exception and then attached l_exception.description as l_des then\n        Result := l_des.as_string_8\n      end\n    end\n\n  recipient_name: detachable STRING\n      -- Name of the routine whose execution was\n      -- interrupted by last exception\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.recipient_name\n      end\n    end\n\n  class_name: detachable STRING\n      -- Name of the class that includes the recipient\n      -- of original form of last exception\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.type_name\n      end\n    end\n\n  exception: INTEGER\n      -- Code of last exception that occurred\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.code\n      end\n    end\n\n  exception_trace: detachable STRING\n      -- String representation of the exception trace\n    do\n      if attached exception_manager.last_exception as l_exception and then attached l_exception.original.trace as l_trace then\n        Result := l_trace.as_string_8\n      end\n    end\n\n  original_tag_name: detachable STRING\n      -- Assertion tag for original form of last\n      -- assertion violation.\n    do\n      if attached exception_manager.last_exception as l_exception and then attached l_exception.cause.original.description as l_des then\n        Result := l_des.as_string_8\n      end\n    end\n\n  original_exception: INTEGER\n      -- Original code of last exception that triggered\n      -- current exception\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.cause.original.code\n      end\n    end\n\n  original_recipient_name: detachable STRING\n      -- Name of the routine whose execution was\n      -- interrupted by original form of last exception\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.cause.original.recipient_name\n      end\n    end\n\n  original_class_name: detachable STRING\n      -- Name of the class that includes the recipient\n      -- of original form of last exception\n    do\n      if attached exception_manager.last_exception as l_exception then\n        Result := l_exception.cause.original.type_name\n      end\n    end\n\nfeature -- Status setting\n\n  catch (code: INTEGER)\n      -- Make sure that any exception of code `code' will be\n      -- caught. This is the default.\n    do\n      if attached exception_manager.type_of_code (code) as l_type then\n        exception_manager.catch (l_type)\n      end\n    end\n\n  ignore (code: INTEGER)\n      -- Make sure that any exception of code `code' will be\n      -- ignored. This is not the default.\n    do\n      if attached exception_manager.type_of_code (code) as l_type then\n        exception_manager.ignore (l_type)\n      end\n    end\n\n  raise (name: detachable STRING)\n      -- Raise a developer exception of name `name'.\n    local\n      l_exception: DEVELOPER_EXCEPTION\n    do\n      create l_exception\n      l_exception.set_description (name)\n      l_exception.raise\n    end\n\n  raise_retrieval_exception (name: detachable STRING)\n      -- Raise a retrieval exception of name `name'.\n    do\n      if attached exception_manager.exception_from_code (serialization_exception) as l_exception then\n        l_exception.set_description (name)\n        l_exception.raise\n      end\n    end\n\n  die (code: INTEGER)\n      -- Terminate execution with exit status `code',\n      -- without triggering an exception.\n    external\n      \"C use %\"eif_except.h%\"\"\n    alias\n      \"esdie\"\n    ensure\n      False\n    end\n\n  new_die (code: INTEGER) obsolete \"Use ``die''\"\n      -- Terminate execution with exit status `code',\n      -- without triggering an exception.\n    external\n      \"C use %\"eif_except.h%\"\"\n    alias\n      \"esdie\"\n    ensure\n      False\n    end\n\n  message_on_failure\n      -- Print an exception history table\n      -- in case of failure.\n      -- This is the default.\n    do\n      c_trace_exception (True)\n    end\n\n  no_message_on_failure\n      -- Do not print an exception history table\n      -- in case of failure.\n    do\n      c_trace_exception (False)\n    end\n\nfeature {NONE} -- Implementation\n\n  c_trace_exception (b: BOOLEAN)\n    external\n      \"C use %\"eif_except.h%\"\"\n    alias\n      \"eetrace\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"finite.e","content":"note\n  description: \"Structures with a finite item count\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: finite, storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class FINITE [G] inherit\n\n  BOX [G]\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Number of items\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  is_empty: BOOLEAN\n      -- Is structure empty?\n    do\n      Result := (count = 0)\n    end\n\ninvariant\n  empty_definition: is_empty = (count = 0)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"function.e","content":"note\n  description: \"[\n    Objects representing delayed calls to a function,\n    with some arguments possibly still open.\n\n    Note: Features are the same as those of ROUTINE,\n      with `apply' made effective, and the addition\n      of `last_result' and `item'.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-01-28 14:35:23 -0800 (Tue, 28 Jan 2014) $\"\n  revision: \"$Revision: 94109 $\"\n\nclass\n  FUNCTION [BASE_TYPE -> detachable ANY, OPEN_ARGS -> detachable TUPLE create default_create end, RESULT_TYPE]\n\ninherit\n  ROUTINE [BASE_TYPE, OPEN_ARGS]\n    redefine\n      is_equal, copy\n    end\n\ncreate {NONE}\n  set_rout_disp\n\nfeature -- Access\n\n  last_result: detachable RESULT_TYPE\n      -- Result of last call, if any\n\n  call (args: detachable separate OPEN_ARGS)\n      -- <Precursor>\n    do\n      last_result := item (args)\n    end\n\n  item alias \"()\" (args: detachable separate OPEN_ARGS): RESULT_TYPE\n      -- Result of calling function with `args' as operands.\n    require\n      valid_operands: valid_operands (args)\n    local\n      l_closed_count: INTEGER\n      c: like closed_operands\n    do\n      c := closed_operands\n      if c/= Void then\n        l_closed_count :=  c.count\n      end\n      Result := fast_item (encaps_rout_disp, calc_rout_addr, $closed_operands, $args, routine_id,\n        is_basic, written_type_id_inline_agent, l_closed_count, open_count, $open_map)\n    end\n\n  apply\n      -- Call function with `operands' as last set.\n    do\n      last_result := item (operands)\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is associated function the same as the one\n      -- associated with `other'?\n    do\n      Result := Precursor (other) and then (last_result ~ other.last_result)\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Use same function as `other'.\n    do\n      if other /= Current then\n        Precursor (other)\n        last_result := other.last_result\n      end\n    end\n\nfeature -- Obsolete\n\n  eval (args: detachable OPEN_ARGS): RESULT_TYPE\n      -- Result of evaluating function for `args'.\n    obsolete\n      \"Please use `item' instead\"\n    require\n      valid_operands: valid_operands (args)\n    do\n      Result := item (args)\n    end\n\nfeature -- Removal\n\n  clear_last_result\n      -- Reset content of `last_result' to its default value.\n    local\n      l_result: detachable RESULT_TYPE\n    do\n      last_result := l_result\n    end\n\nfeature -- Extended operations\n\n  flexible_item (a: detachable separate TUPLE): RESULT_TYPE\n      -- Result of calling function with `a' as arguments.\n      -- Compared to `item' the type of `a' may be different from `{OPEN_ARGS}'.\n    require\n      valid_operands: valid_operands (a)\n    local\n      default_arguments: detachable OPEN_ARGS\n    do\n      if not attached a then\n        Result := item (default_arguments)\n      else\n        -- TODO: Implement in JavaScript\n        -- check\n        --   from_precondition: attached {OPEN_ARGS} new_tuple_from_tuple (({OPEN_ARGS}).type_id, a) as x\n        -- then\n        --   Result := item (x)\n        -- end\n      end\n    end\n\nfeature {NONE} -- Implementation\n\n  fast_item (a_rout_disp, a_calc_rout_addr: POINTER\n           a_closed_operands: POINTER; a_operands: POINTER\n         a_routine_id: INTEGER; a_is_basic: BOOLEAN; a_class_id_inline_agent: INTEGER;\n         a_closed_count, a_open_count: INTEGER; a_open_map: POINTER): RESULT_TYPE\n    external\n      \"C inline use %\"eif_rout_obj.h%\"\"\n    alias\n      \"[\n      #ifdef WORKBENCH\n        $$_result_type result;\n        if ($a_rout_disp != 0) {\n          return (FUNCTION_CAST(EIF_TYPED_VALUE, (EIF_POINTER, EIF_REFERENCE, EIF_REFERENCE)) $a_rout_disp)(\n            $a_calc_rout_addr, $a_closed_operands, $a_operands).$$_result_value;\n        } else {\n          rout_obj_call_function_dynamic (\n            $a_routine_id,\n            $a_is_basic,\n            $a_class_id_inline_agent,\n            $a_closed_operands,\n            $a_closed_count,\n            $a_operands,\n            $a_open_count,\n            $a_open_map,\n            &result);\n          return result;\n        }\n      #else\n        return (FUNCTION_CAST($$_result_type, (EIF_POINTER, EIF_REFERENCE, EIF_REFERENCE)) $a_rout_disp)(\n          $a_calc_rout_addr, $a_closed_operands, $a_operands);\n      #endif\n      ]\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"hashable.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  HASHABLE\n\nfeature -- Access\n\n  hash_code: INTEGER\n      -- Hash code value\n    deferred\n    ensure\n      good_hash_value: Result >= 0\n    end\n\nfeature -- Status report\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True by default.)\n    do\n      Result := True\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"immutable_string_8.e","content":"note\n  description: \"[\n    Sequences of immutable 8-bit characters, accessible through integer indices\n    in a contiguous range.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-01-03 14:26:20 -0800 (Fri, 03 Jan 2014) $\"\n  revision: \"$Revision: 93888 $\"\n\nfrozen class\n  IMMUTABLE_STRING_8\n\ninherit\n  READABLE_STRING_8\n    undefine\n      is_immutable\n    redefine\n      copy, area_lower\n    end\n\n  IMMUTABLE_STRING_GENERAL\n    rename\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general,\n      item as character_32_item,\n      has as character_32_has,\n      index_of as character_32_index_of,\n      last_index_of as character_32_last_index_of,\n      occurrences as character_32_occurrences\n    undefine\n      is_equal, out, copy\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_c,\n  make_from_cil,\n  make_from_separate\n\ncreate {IMMUTABLE_STRING_8}\n  make_from_area_and_bounds\n\nconvert\n  make_from_string ({READABLE_STRING_8, STRING_8}),\n  make_from_cil ({SYSTEM_STRING}),\n  to_cil: {SYSTEM_STRING},\n  as_string_32: {STRING_32},\n  as_string_8: {STRING_8}\n\nfeature {NONE} -- Initialization\n\n  make_from_area_and_bounds (a: like area; low, n: like count)\n      -- Initialize current with area `a' with lower bounds `low' and count `n'.\n    require\n      a_not_void: a /= Void\n      a_valid_count: (a.count - low) >= count + 1\n      low_non_negative: low >= 0\n      n_non_negative: n >= 0\n    do\n      area := a\n      area_lower := low\n      count := n\n    ensure\n      area_set: area = a\n      area_lower_set: area_lower = low\n      count_set: count = n\n    end\n\n  make_from_cil (a_system_string: SYSTEM_STRING)\n      -- <Precursor>\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 then\n        dotnet_convertor.read_system_string_into_area_8 (a_system_string, area)\n        count := l_count\n      end\n    end\n\nfeature {IMMUTABLE_STRING_8} -- Duplication\n\n  copy (other: like Current)\n      -- <Precursor>\n    do\n      if other /= Current then\n          -- Because it is immutable we can simply share the `area' from `other'.\n        standard_copy (other)\n      end\n    ensure then\n      new_result_count: count = other.count\n      -- same_characters: For every `i' in 1..`count', `item' (`i') = `other'.`item' (`i')\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_8\n      -- Character at position `i'.\n    do\n      Result := area.item (i + area_lower - 1)\n    end\n\n  character_32_item (i: INTEGER): CHARACTER_32\n      -- Character at position `i'.\n    do\n      Result := area.item (i + area_lower - 1).to_character_32\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Numeric code of character at position `i'.\n    do\n      Result := area.item (i + area_lower - 1).natural_32_code\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'.\n      -- Use `code' instead for consistency with Unicode handling.\n      --| Not obsolete because old code using just ASCII is safe.\n    do\n      Result := area.item (i + area_lower - 1).code\n    end\n\nfeature -- Element change\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    local\n      a, a_8: like area\n      i, j, nb: INTEGER\n      l_s32_area: SPECIAL [CHARACTER_32]\n    do\n      create a.make_empty (count + s.count + 1)\n      a.copy_data (area, area_lower, 0, count)\n      if attached {READABLE_STRING_8} s as l_s8 then\n        a.copy_data (l_s8.area, l_s8.area_lower, count, l_s8.count + 1)\n      elseif attached {READABLE_STRING_32} s as l_s32 then\n        create a_8.make_empty (l_s32.count + 1)\n        from\n          i := 0\n          j := l_s32.area_lower\n          l_s32_area := l_s32.area\n          nb := l_s32.count - 1\n        until\n          i > nb\n        loop\n          a_8.extend (l_s32_area [j].to_character_8)\n          i := i + 1\n          j := j + 1\n        end\n        a_8.extend ('%/000/')\n        a.copy_data (a_8, 0, count, nb + 2)\n      end\n      create Result.make_from_area_and_bounds (a, 0, count + s.count)\n    end\n\n  mirrored: like Current\n      -- <Precursor>\n    local\n      a: like area\n    do\n      create a.make_empty (count + 1)\n      a.copy_data (area, area_lower, 0, count + 1)\n      mirror_area (a, 0, count - 1)\n      create Result.make_from_area_and_bounds (a, 0, count)\n    end\n\n  as_lower: like Current\n      -- <Precursor>\n    local\n      a: like area\n    do\n      create a.make_empty (count + 1)\n      a.copy_data (area, area_lower, 0, count + 1)\n      to_lower_area (a, 0, count - 1)\n      create Result.make_from_area_and_bounds (a, 0, count)\n    end\n\n  as_upper: like Current\n      -- <Precursor>\n    local\n      a: like area\n    do\n      create a.make_empty (count + 1)\n      a.copy_data (area, area_lower, 0, count + 1)\n      to_upper_area (a, 0, count - 1)\n      create Result.make_from_area_and_bounds (a, 0, count)\n    end\n\n  substring (start_index, end_index: INTEGER_32): like Current\n      -- <Precursor>\n    local\n      a: like area\n      nb: INTEGER\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        nb := end_index - start_index + 1\n        create a.make_empty (nb + 1)\n        a.copy_data (area, area_lower + start_index - 1, 0, nb)\n        a.extend ('%/000/')\n        create Result.make_from_area_and_bounds (a, 0, nb)\n      else\n        Result := empty_string\n      end\n    end\n\n  shared_substring (start_index, end_index: INTEGER_32): like Current\n      -- <Precursor>\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        create Result.make_from_area_and_bounds (area, area_lower + start_index - 1, end_index - start_index + 1)\n      else\n        Result := empty_string\n      end\n    end\n\n  is_empty: BOOLEAN\n      -- Is structure empty?\n    do\n      Result := count = 0\n    end\n\n  linear_representation: LINEAR [CHARACTER_8]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_8]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER_32): IMMUTABLE_STRING_8\n      -- <Precursor>\n    do\n      create Result.make (n)\n    end\n\n  empty_string: IMMUTABLE_STRING_8\n      -- Shared empty immutable string\n    once\n      create Result.make (0)\n    ensure\n      empty_string_not_void: Result /= Void\n      empty_string_empty: Result.is_empty\n    end\n\nfeature {READABLE_STRING_8, READABLE_STRING_32} -- Implementation\n\n  area_lower: INTEGER;\n      -- Index where current string starts in `area'\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"immutable_string_general.e","content":"note\n  description: \"Common ancestors to all immutable STRING classes.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  IMMUTABLE_STRING_GENERAL\n\ninherit\n  READABLE_STRING_GENERAL\n    redefine\n      is_immutable\n    end\n\nfeature -- Status report\n\n  is_immutable: BOOLEAN = True\n      -- <Precursor>\n\ninvariant\n  immutable: is_immutable\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"indexable.e","content":"note\n  description: \"Tables whose keys are integers in a contiguous interval\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: indexable, access;\n  access: index, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class INDEXABLE [G, H -> INTEGER] inherit\n\n  TABLE [G, INTEGER]\n    rename\n      valid_key as valid_index,\n      force as put\n    end\n\n  READABLE_INDEXABLE [G]\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n\n\n\n"});
__eiffel_builtin.push({"filename":"integer.e","content":"expanded class INTEGER_32 inherit\n\n  INTEGER_32_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      opposite,\n      identity,\n      asa_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real,\n      to_double,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\n-- convert\n--   make_from_reference ({INTEGER_32_REF}),\n--   to_real: {REAL_32},\n--   to_double: {REAL_64},\n--   to_integer_64: {INTEGER_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: INTEGER_32): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: INTEGER_32): INTEGER_32\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: INTEGER_32): INTEGER_32\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: INTEGER_32): INTEGER_32\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: INTEGER_32): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": INTEGER_32\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": INTEGER_32\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: INTEGER_32): INTEGER_32\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: INTEGER_32): INTEGER_32\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: INTEGER_32): INTEGER_32\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: INTEGER_32): INTEGER_32\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: INTEGER_32): INTEGER_32\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: INTEGER_32\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): INTEGER_32\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): INTEGER_32\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_16.e","content":"note\n  description: \"Integer values coded on 16 bits\"\n  external_name: \"System.Int16\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class INTEGER_16 inherit\n\n  INTEGER_16_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      opposite,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real,\n      to_double,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({INTEGER_16_REF}),\n  to_real: {REAL_32},\n  to_double: {REAL_64},\n  to_integer_32: {INTEGER_32},\n  to_integer_64: {INTEGER_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: INTEGER_16): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: INTEGER_16): INTEGER_16\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: INTEGER_16): INTEGER_16\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: INTEGER_16): INTEGER_16\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: INTEGER_16): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": INTEGER_16\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": INTEGER_16\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: INTEGER_16): INTEGER_16\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: INTEGER_16): INTEGER_16\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: INTEGER_16): INTEGER_16\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: INTEGER_16): INTEGER_16\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: INTEGER_16): INTEGER_16\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: INTEGER_16\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): INTEGER_16\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): INTEGER_16\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_16_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 16 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  INTEGER_16_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\"\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: INTEGER_16\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item.to_integer.hash_code\n    end\n\n  sign: INTEGER_16\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: INTEGER_16 = -32768\n  Max_value: INTEGER_16 = 32767\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: INTEGER_16)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item >= 0\n    ensure\n      in_bounds: Result = (item >= 0 and\n        item.to_natural_32 >= {CHARACTER_32}.Min_value and\n        item.to_natural_32 <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  abs: INTEGER_16\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: INTEGER_16_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: INTEGER_16_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_small: item >= {INTEGER_8}.Min_value\n      not_too_big: item <= {INTEGER_8}.Max_value\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer, frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Return `item'.\n    do\n      Result := item\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_double\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_16_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_16_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): INTEGER_16\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_16: n <= 16\n      n_greater_or_equal_to_minus_16: n >= -16\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_16: n <= 16\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_16: n <= 16\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_16: n < 16\n    do\n      Result := item & ((1).to_integer_16 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): INTEGER_16\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_16: n < 16\n    do\n      if b then\n        Result := item | ((1).to_integer_16 |<< n)\n      else\n        Result := item & ((1).to_integer_16 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: INTEGER_16): INTEGER_16\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (6)\n      Result.append_integer_16 (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item >= 0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n\n  sign_times_abs: sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_32_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 32 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  INTEGER_32_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\"\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: INTEGER_32\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Clear sign bit.\n      Result := item & 0x7FFFFFFF\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: INTEGER_32 = -2147483648\n  Max_value: INTEGER_32 = 2147483647\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: INTEGER_32)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item >= 0\n    ensure\n      in_bounds: Result = (item >= 0 and\n        item.to_natural_32 >= {CHARACTER_32}.Min_value and\n        item.to_natural_32 <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  abs: INTEGER_32\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: INTEGER_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: INTEGER_32_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_small: item >= {INTEGER_8}.Min_value\n      not_too_big: item <= {INTEGER_8}.Max_value\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_small: item >= {INTEGER_16}.Min_value\n      not_too_big: item <= {INTEGER_16}.Max_value\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer, frozen to_integer_32: INTEGER_32\n      -- Return `item'.\n    do\n      Result := item\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_double\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_32_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_32_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER_32): INTEGER\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_32: n <= 32\n      n_greater_or_equal_to_minus_32: n >= -32\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      Result := item & (1 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): INTEGER_32\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      if b then\n        Result := item | (1 |<< n)\n      else\n        Result := item & (1 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: INTEGER_32): INTEGER_32\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (11)\n      Result.append_integer (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item >= 0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n\n  sign_times_abs: sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_64.e","content":"note\n  description: \"Integer values coded on 64 bits\"\n  external_name: \"System.Int64\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class INTEGER_64\n\ninherit\n  INTEGER_64_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      opposite,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real,\n      to_double,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({INTEGER_64_REF}),\n  to_real: {REAL_32},\n  to_double: {REAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: INTEGER_64): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: INTEGER_64): INTEGER_64\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: INTEGER_64): INTEGER_64\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: INTEGER_64): INTEGER_64\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: INTEGER_64): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": INTEGER_64\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": INTEGER_64\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: INTEGER_64): INTEGER_64\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: INTEGER_64): INTEGER_64\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: INTEGER_64): INTEGER_64\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: INTEGER_64): INTEGER_64\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: INTEGER_64): INTEGER_64\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: INTEGER_64\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): INTEGER_64\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): INTEGER_64\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_64_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 64 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  INTEGER_64_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\"\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: INTEGER_64\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Get the positive value of `item' and then do\n        -- a modulo on the maximum INTEGER_32 value.\n      Result := (item & 0x000000007FFFFFFF).to_integer_32\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: INTEGER_64 = -9223372036854775808\n  Max_value: INTEGER_64 = 9223372036854775807\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: INTEGER_64)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item >= 0 and item.to_natural_64 <= {CHARACTER_32}.Max_value\n    ensure\n      in_bounds: Result = (item >= 0 and\n        item.to_natural_64 >= {CHARACTER_32}.Min_value and\n        item.to_natural_64 <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  abs: INTEGER_64\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: INTEGER_64_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: INTEGER_64_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      item_non_negative: item >= 0\n      not_too_big: item <= {NATURAL_32}.Max_value\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_small: item >= {INTEGER_8}.Min_value\n      not_too_big: item <= {INTEGER_8}.Max_value\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_small: item >= {INTEGER_16}.Min_value\n      not_too_big: item <= {INTEGER_16}.Max_value\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer, frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    require\n      not_too_small: item >= {INTEGER_32}.Min_value\n      not_too_big: item <= {INTEGER_32}.Max_value\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Return `item'.\n    do\n      Result := item\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_double\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i: INTEGER\n      val: INTEGER_64\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_64_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0x0F).to_integer\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_64_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item.to_integer\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): INTEGER_64\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_64: n <= 64\n      n_greater_or_equal_to_minus_64: n >= -64\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_64: n <= 64\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_64: n <= 64\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_64: n < 64\n    do\n      Result := item & ((1).to_integer_64 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): INTEGER_64\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_64: n < 64\n    do\n      if b then\n        Result := item | ((1).to_integer_64 |<< n)\n      else\n        Result := item & ((1).to_integer_64 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: INTEGER_64): INTEGER_64\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (20)\n      Result.append_integer_64 (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item >= 0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n\n  sign_times_abs: sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_8.e","content":"note\n  description: \"Integer values coded on 8 bits\"\n  external_name: \"System.SByte\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class INTEGER_8 inherit\n\n  INTEGER_8_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      opposite,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real,\n      to_double,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({INTEGER_8_REF}),\n  to_real: {REAL_32},\n  to_double: {REAL_64},\n  to_integer_16: {INTEGER_16},\n  to_integer_32: {INTEGER_32},\n  to_integer_64: {INTEGER_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: INTEGER_8): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: INTEGER_8): INTEGER_8\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: INTEGER_8): INTEGER_8\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: INTEGER_8): INTEGER_8\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: INTEGER_8): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": INTEGER_8\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": INTEGER_8\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: INTEGER_8): INTEGER_8\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: INTEGER_8): INTEGER_8\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: INTEGER_8): INTEGER_8\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: INTEGER_8): INTEGER_8\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: INTEGER_8): INTEGER_8\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: INTEGER_8\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): INTEGER_8\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): INTEGER_8\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"integer_8_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 8 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  INTEGER_8_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\"\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: INTEGER_8\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item.to_integer.hash_code\n    end\n\n  sign: INTEGER_8\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: INTEGER_8 = -128\n  Max_value: INTEGER_8 = 127\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: INTEGER_8)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item >= {CHARACTER_8}.Min_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item >= 0\n    ensure\n      in_bounds: Result = (item >= 0 and\n        item.to_natural_32 >= {CHARACTER_32}.Min_value and\n        item.to_natural_32 <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  abs: INTEGER_8\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: INTEGER_8_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: V /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: INTEGER_8_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    require\n      item_non_negative: item >= 0\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Return `item'.\n    do\n      Result := item\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer, frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real\n    end\n\n  to_double: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_double\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := 2\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 15)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      result_not_void: Result /= Void\n      result_valid_count: Result.count = 2\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      Result := tmp.to_hex_character\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): INTEGER_8\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_8: n <= 8\n      n_greater_or_equal_to_minus_8: n >= -8\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      Result := item & ((1).to_integer_8 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): INTEGER_8\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      if b then\n        Result := item | ((1).to_integer_8 |<< n)\n      else\n        Result := item & ((1).to_integer_8 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: INTEGER_8): INTEGER_8\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (4)\n      Result.append_integer_8 (item)\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item >= 0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n\n  sign_times_abs: sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"iterable.e","content":"note\n  description: \"Structure that can be iterated over using `across...loop...end'.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  ITERABLE [G]\n\nfeature -- Access\n\n  new_cursor: ITERATION_CURSOR [G]\n      -- Fresh cursor associated with current structure\n    deferred\n    ensure\n      result_attached: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"linear.e","content":"note\n  description: \"Structures whose items may be accessed sequentially, one-way\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: sequential, traversing;\n  access: membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class LINEAR [G] inherit\n\n  TRAVERSABLE [G]\n    redefine\n      do_all, do_if, there_exists, for_all\n    end\n\nfeature -- Access\n\n  has (v: like item): BOOLEAN\n      -- Does structure include an occurrence of `v'?\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    do\n      start\n      if not off then\n        search (v)\n      end\n      Result := not exhausted\n    end\n\n  index_of (v: like item; i: INTEGER): INTEGER\n      -- Index of `i'-th occurrence of `v'.\n      -- 0 if none.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    require\n      positive_occurrences: i > 0\n    local\n      occur, pos: INTEGER\n    do\n      if object_comparison and v /= Void then\n        from\n          start\n          pos := 1\n        until\n          exhausted or (occur = i)\n        loop\n          if item ~ v then\n            occur := occur + 1\n          end\n          forth\n          pos := pos + 1\n        end\n      else\n        from\n          start\n          pos := 1\n        until\n          exhausted or (occur = i)\n        loop\n          if item = v then\n            occur := occur + 1\n          end\n          forth\n          pos := pos + 1\n        end\n      end\n      if occur = i then\n        Result := pos - 1\n      end\n    ensure\n      non_negative_result: Result >= 0\n    end\n\n  search (v: like item)\n      -- Move to first position (at or after current\n      -- position) where `item' and `v' are equal.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n      -- If no such position ensure that `exhausted' will be true.\n    do\n      if object_comparison then\n        from\n        until\n          exhausted or else v ~ item\n        loop\n          forth\n        end\n      else\n        from\n        until\n          exhausted or else v = item\n        loop\n          forth\n        end\n      end\n    ensure\n      object_found: (not exhausted and object_comparison)\n         implies v ~ item\n      item_found: (not exhausted and not object_comparison)\n         implies v = item\n    end\n\n  index: INTEGER\n      -- Index of current position\n    deferred\n    end\n\n  occurrences (v: like item): INTEGER\n      -- Number of times `v' appears.\n      -- (Reference or object equality,\n      -- based on `object_comparison'.)\n    do\n      from\n        start\n        search (v)\n      until\n        exhausted\n      loop\n        Result := Result + 1\n        forth\n        search (v)\n      end\n    end\n\n  item_for_iteration: G\n      -- Item at current position\n    require\n      not_off: not off\n    do\n      Result := item\n    end\n\nfeature -- Status report\n\n  exhausted: BOOLEAN\n      -- Has structure been completely explored?\n    do\n      Result := off\n    ensure\n      exhausted_when_off: off implies Result\n    end\n\n  after: BOOLEAN\n      -- Is there no valid position to the right of current one?\n    deferred\n    end\n\n  off: BOOLEAN\n      -- Is there no current item?\n    do\n      Result := is_empty or after\n    end\n\nfeature -- Cursor movement\n\n  finish\n      -- Move to last position.\n    deferred\n    end\n\n  forth\n      -- Move to next position; if no next position,\n      -- ensure that `exhausted' will be true.\n    require\n      not_after: not after\n    deferred\n    ensure\n      -- moved_forth_before_end: (not after) implies index = old index + 1\n    end\n\nfeature -- Iteration\n\n  do_all (action: PROCEDURE [ANY, TUPLE [G]])\n      -- Apply `action' to every item.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      c: detachable CURSOR\n      cs: detachable CURSOR_STRUCTURE [G]\n    do\n      if attached {CURSOR_STRUCTURE [G]} Current as acs then\n        cs := acs\n        c := acs.cursor\n      end\n\n      from\n        start\n      until\n        after\n      loop\n        action.call ([item])\n        forth\n      end\n\n      if cs /= Void and c /= Void then\n        cs.go_to (c)\n      end\n    end\n\n  do_if (action: PROCEDURE [ANY, TUPLE [G]]; test: FUNCTION [ANY, TUPLE [G], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test'.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      c: detachable CURSOR\n      cs: detachable CURSOR_STRUCTURE [G]\n    do\n      if attached {CURSOR_STRUCTURE [G]} Current as acs then\n        cs := acs\n        c := acs.cursor\n      end\n\n      from\n        start\n      until\n        after\n      loop\n        if test.item ([item]) then\n          action.call ([item])\n        end\n        forth\n      end\n\n      if cs /= Void and c /= Void then\n        cs.go_to (c)\n      end\n    end\n\n  there_exists (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for at least one item?\n      -- Semantics not guaranteed if `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      c: detachable CURSOR\n      cs: detachable  CURSOR_STRUCTURE [G]\n    do\n      if attached {CURSOR_STRUCTURE [G]} Current as acs then\n        cs := acs\n        c := acs.cursor\n      end\n\n      from\n        start\n      until\n        after or Result\n      loop\n        Result := test.item ([item])\n        forth\n      end\n\n      if cs /= Void and c /=Void then\n        cs.go_to (c)\n      end\n    end\n\n  for_all (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for all items?\n      -- Semantics not guaranteed if `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    local\n      c: detachable CURSOR\n      cs: detachable  CURSOR_STRUCTURE [G]\n    do\n      if attached {CURSOR_STRUCTURE [G]} Current as acs then\n        cs := acs\n        c := acs.cursor\n      end\n\n      from\n        start\n        Result := True\n      until\n        after or not Result\n      loop\n        Result := test.item ([item])\n        forth\n      end\n\n      if cs /= Void and c /= Void then\n        cs.go_to (c)\n      end\n    ensure then\n      empty: is_empty implies Result\n    end\n\nfeature -- Conversion\n\n  linear_representation: LINEAR [G]\n      -- Representation as a linear structure\n    do\n      Result := Current\n    end\n\ninvariant\n\n  after_constraint: after implies off\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"list.e","content":"note\n  description: \"Sequential lists, without commitment to a particular representation\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: list, sequence;\n  access: index, cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class LIST [G] inherit\n\n  CHAIN [G]\n    export\n      {ANY} remove\n    redefine\n      forth, is_equal\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Does `other' contain the same elements?\n    do\n      if Current = other then\n        Result := True\n      else\n        Result := (is_empty = other.is_empty) and\n            (object_comparison = other.object_comparison) and\n            (count = other.count)\n        if Result and not is_empty then\n          if\n            attached {CURSOR} cursor as c1 and then\n            attached {CURSOR} other.cursor as c2\n          then\n            from\n              start\n              other.start\n            until\n              after or not Result\n            loop\n              if object_comparison then\n                Result := item ~ other.item\n              else\n                Result := item = other.item\n              end\n              forth\n              other.forth\n            end\n            go_to (c1)\n            other.go_to (c2)\n          else\n            check\n              cursors_exist: False\n                -- Because every list contains a cursor object\n            end\n          end\n        elseif is_empty and other.is_empty and\n          object_comparison = other.object_comparison then\n          Result := True\n        end\n      end\n    ensure then\n      indices_unchanged:\n        index = old index and other.index = old other.index\n      true_implies_same_size: Result implies count = other.count\n    end\n\nfeature -- Status report\n\n  after: BOOLEAN\n      -- Is there no valid cursor position to the right of cursor?\n    do\n      Result := (index = count + 1)\n    end\n\n  before: BOOLEAN\n      -- Is there no valid cursor position to the left of cursor?\n    do\n      Result := (index = 0)\n    end\n\nfeature -- Cursor movement\n\n  forth\n      -- Move to next position; if no next position,\n      -- ensure that `exhausted' will be true.\n    deferred\n    ensure then\n      moved_forth: index = old index + 1\n    end\n\ninvariant\n\n  before_definition: before = (index = 0)\n  after_definition: after = (index = count + 1)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"managed_pointer.e","content":"note\n  description: \"[\n    To easily manage allocation and release of allocated C memory, and\n    to perform insertion of basic elements. Byte order is by default\n    platform specific.\n    Although memory allocation routines do not accept a zero sized pointer\n    MANAGED_POINTER does by allocating in fact a 1 byte sized pointer for\n    this particular case.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-29 17:12:00 -0700 (Mon, 29 Oct 2012) $\"\n  revision: \"$Revision: 92015 $\"\n\nclass\n  MANAGED_POINTER\n\ninherit\n  DISPOSABLE\n    redefine\n      is_equal, copy\n    end\n\n  PLATFORM\n    redefine\n      is_equal, copy\n    end\n\ncreate\n  make, make_from_array, make_from_pointer, share_from_pointer, own_from_pointer\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate `item' with `n' bytes.\n    require\n      n_non_negative: n >= 0\n    do\n      increment_counter\n      item := item.memory_calloc (n.max (1), 1)\n      if item = default_pointer then\n        (create {EXCEPTIONS}).raise (\"No more memory\")\n      end\n      count := n\n      is_shared := False\n    ensure\n      item_set: item /= default_pointer\n      count_set: count = n\n      is_shared_set: not is_shared\n    end\n\n  make_from_array (data: ARRAY [NATURAL_8])\n      -- Allocate `item' with `data.count' bytes and copy\n      -- content of `data' into `item'.\n    require\n      data_not_void: data /= Void\n    do\n      increment_counter\n      count := data.count\n      item := item.memory_alloc (count.max (1))\n      if item = default_pointer then\n        (create {EXCEPTIONS}).raise (\"No more memory\")\n      end\n      put_array (data, 0)\n      is_shared := False\n    ensure\n      item_set: item /= default_pointer\n      count_set: count = data.count\n      is_shared_set: not is_shared\n    end\n\n  make_from_pointer (a_ptr: POINTER; n: INTEGER)\n      -- Copy `a_count' bytes from `a_ptr' into current.\n    require\n      a_ptr_not_null: a_ptr /= default_pointer\n      n_non_negative: n >= 0\n    do\n      increment_counter\n      item := item.memory_alloc (n.max (1))\n      if item = default_pointer then\n        (create {EXCEPTIONS}).raise (\"No more memory\")\n      end\n      item.memory_copy (a_ptr, n)\n      count := n\n      is_shared := False\n    ensure\n      item_set: item /= default_pointer\n      count_set: count = n\n      is_shared_set: not is_shared\n    end\n\n  share_from_pointer (a_ptr: POINTER; n: INTEGER)\n      -- Use directly `a_ptr' with count `n' to hold current data.\n    require\n      a_ptr_valid: a_ptr = default_pointer implies n = 0\n      n_non_negative: n >= 0\n    do\n      increment_counter\n      item := a_ptr\n      count := n\n      is_shared := True\n    ensure\n      item_set: item = a_ptr\n      count_set: count = n\n      is_shared_set: is_shared\n    end\n\n  own_from_pointer (a_ptr: POINTER; n: INTEGER)\n      -- Use directly `a_ptr' with count `n' to hold current data and free\n      -- its associated C memory when Current is collected.\n      -- It assumes that `a_ptr' was allocated using the C-`malloc' routine and thus\n      -- will be freed by calling the C-`free' routine.\n    require\n      a_ptr_valid: a_ptr /= default_pointer\n      n_non_negative: n >= 0\n    do\n      increment_counter\n      item := a_ptr\n      count := n\n      is_shared := False\n    ensure\n      item_set: item = a_ptr\n      count_set: count = n\n      is_shared_set: not is_shared\n    end\n\nfeature -- Settings\n\n  set_from_pointer (a_ptr: POINTER; n: INTEGER)\n      -- Use directly `a_ptr' with count `n' to hold current data.\n    require\n      is_shared: is_shared\n      a_ptr_not_null: a_ptr = default_pointer implies n = 0\n      n_non_negative: n >= 0\n    do\n      item := a_ptr\n      count := n\n    ensure\n      item_set: item = a_ptr\n      count_set: count = n\n      is_shared_unchanged: is_shared\n    end\n\nfeature -- Access\n\n  item: POINTER note option: transient attribute end\n      -- Access to allocated memory.\n\n  count: INTEGER\n      -- Number of elements that Current can hold.\n\n  is_shared: BOOLEAN\n      -- Is `item' shared with another memory area?\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object considered equal to current object?\n    do\n      if count = other.count then\n        Result := (item = other.item) or else item.memory_compare (other.item, count)\n      end\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Update current object using fields of object attached\n      -- to `other', so as to yield equal objects. If `is_shared'\n      -- and current is not large enough to hold `other' create\n      -- a new pointer area and `is_shared' is set to `False'.\n    do\n      if other /= Current then\n        if item = other.item or is_shared then\n            -- Copy was most likely called via `twin' but even\n            -- if it is not, it makes sense to duplicate the memory.\n            -- Or before `item' was shared, so we simply allocate\n            -- a new memory area from `other' and reset\n            -- the `is_shared' flag.\n          make_from_pointer (other.item, other.count)\n        else\n            -- Simply resize Current and copy data.\n          resize (other.count)\n          item.memory_copy (other.item, other.count)\n        end\n      end\n    ensure then\n      sharing_status_not_preserved: (other /= Current) implies (old is_shared implies not is_shared)\n      count_preserved: count = other.count\n    end\n\nfeature -- Access: Platform specific\n\n  read_natural_8 (pos: INTEGER): NATURAL_8\n      -- Read NATURAL_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_8_bytes)\n    end\n\n  read_natural_16 (pos: INTEGER): NATURAL_16\n      -- Read NATURAL_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_16_bytes)\n    end\n\n  read_natural_32 (pos: INTEGER): NATURAL_32\n      -- Read NATURAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_32_bytes)\n    end\n\n  read_natural_64 (pos: INTEGER): NATURAL_64\n      -- Read NATURAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_64_bytes)\n    end\n\n  read_integer_8 (pos: INTEGER): INTEGER_8\n      -- Read INTEGER_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      Result := read_natural_8 (pos).as_integer_8\n    end\n\n  read_integer_16 (pos: INTEGER): INTEGER_16\n      -- Read INTEGER_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      Result := read_natural_16 (pos).as_integer_16\n    end\n\n  read_integer_32 (pos: INTEGER): INTEGER\n      -- Read INTEGER at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      Result := read_natural_32 (pos).as_integer_32\n    end\n\n  read_integer_64 (pos: INTEGER): INTEGER_64\n      -- Read INTEGER_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      Result := read_natural_64 (pos).as_integer_64\n    end\n\n  read_pointer (pos: INTEGER): POINTER\n      -- Read POINTER at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Pointer_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Pointer_bytes)\n    end\n\n  read_boolean (pos: INTEGER): BOOLEAN\n      -- Read BOOLEAN at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Boolean_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Boolean_bytes)\n    end\n\n  read_character (pos: INTEGER): CHARACTER\n      -- Read CHARACTER at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Character_8_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Character_8_bytes)\n    end\n\n  read_real (pos: INTEGER): REAL\n      -- Read REAL_32 at position `pos'.\n    obsolete \"Use read_real_32 instead.\"\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_32_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Real_32_bytes)\n    end\n\n  read_real_32 (pos: INTEGER): REAL\n      -- Read REAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_32_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Real_32_bytes)\n    end\n\n  read_double (pos: INTEGER): DOUBLE\n      -- Read REAL_64 at position `pos'.\n    obsolete \"Use read_real_64 instead.\"\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_64_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Real_64_bytes)\n    end\n\n  read_real_64 (pos: INTEGER): DOUBLE\n      -- Read REAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_64_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, Real_64_bytes)\n    end\n\n  read_array (pos, a_count: INTEGER): ARRAY [NATURAL_8]\n      -- Read `count' bytes at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      count_positive: a_count > 0\n      valid_position: (pos + a_count) <= count\n    local\n      i: INTEGER\n      l_area: SPECIAL [NATURAL_8]\n    do\n      from\n        create l_area.make_empty (a_count)\n      until\n        i >= a_count\n      loop\n        l_area.extend (read_natural_8 (pos + i))\n        i := i + 1\n      end\n      create Result.make_from_special (l_area)\n    ensure\n      read_array_not_void: Result /= Void\n      read_array_valid_count: Result.count = a_count\n    end\n\nfeature -- Element change: Platform specific\n\n  put_natural_8 (i: NATURAL_8; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_8_bytes)\n    ensure\n      inserted: i = read_natural_8 (pos)\n    end\n\n  put_natural_16 (i: NATURAL_16; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_16_bytes)\n    ensure\n      inserted: i = read_natural_16 (pos)\n    end\n\n  put_natural_32 (i: NATURAL_32; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_32_bytes)\n    ensure\n      inserted: i = read_natural_32 (pos)\n    end\n\n  put_natural_64 (i: NATURAL_64; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_64_bytes)\n    ensure\n      inserted: i = read_natural_64 (pos)\n    end\n\n  put_integer_8 (i: INTEGER_8; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      put_natural_8 (i.as_natural_8, pos)\n    ensure\n      inserted: i = read_integer_8 (pos)\n    end\n\n  put_integer_16 (i: INTEGER_16; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      put_natural_16 (i.as_natural_16, pos)\n    ensure\n      inserted: i = read_integer_16 (pos)\n    end\n\n  put_integer_32 (i: INTEGER; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      put_natural_32 (i.as_natural_32, pos)\n    ensure\n      inserted: i = read_integer_32 (pos)\n    end\n\n  put_integer_64 (i: INTEGER_64; pos: INTEGER)\n      -- Insert `i' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      put_natural_64 (i.as_natural_64, pos)\n    ensure\n      inserted: i = read_integer_64 (pos)\n    end\n\n  put_pointer (p: POINTER; pos: INTEGER)\n      -- Insert `p' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Pointer_bytes) <= count\n    do\n      (item + pos).memory_copy ($p, Pointer_bytes)\n    ensure\n      inserted: p = read_pointer (pos)\n    end\n\n  put_boolean (b: BOOLEAN; pos: INTEGER)\n      -- Insert `b' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Boolean_bytes) <= count\n    do\n      (item + pos).memory_copy ($b, Boolean_bytes)\n    ensure\n      inserted: b = read_boolean (pos)\n    end\n\n  put_character (c: CHARACTER; pos: INTEGER)\n      -- Insert `c' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Character_8_bytes) <= count\n    do\n      (item + pos).memory_copy ($c, Character_8_bytes)\n    ensure\n      inserted: c = read_character (pos)\n    end\n\n  put_real (r: REAL; pos: INTEGER)\n      -- Insert `r' at position `pos'.\n    obsolete \"Use put_real_32 instead.\"\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_32_bytes) <= count\n    do\n      (item + pos).memory_copy ($r, Real_32_bytes)\n    ensure\n      inserted: r = read_real_32 (pos)\n    end\n\n  put_real_32 (r: REAL; pos: INTEGER)\n      -- Insert `r' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_32_bytes) <= count\n    do\n      (item + pos).memory_copy ($r, Real_32_bytes)\n    ensure\n      inserted: r = read_real_32 (pos)\n    end\n\n  put_double (d: DOUBLE; pos: INTEGER)\n      -- Insert `d' at position `pos'.\n    obsolete \"Use put_real_64 instead.\"\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_64_bytes) <= count\n    do\n      (item + pos).memory_copy ($d, Real_64_bytes)\n    ensure\n      inserted: d = read_real_64 (pos)\n    end\n\n  put_real_64 (d: DOUBLE; pos: INTEGER)\n      -- Insert `d' at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + Real_64_bytes) <= count\n    do\n      (item + pos).memory_copy ($d, Real_64_bytes)\n    ensure\n      inserted: d = read_real_64 (pos)\n    end\n\n  put_array (data: ARRAY [NATURAL_8]; pos: INTEGER)\n      -- Copy content of `data' into `item' at position `pos'.\n    require\n      data_not_void: data /= Void\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + data.count) <= count\n    local\n      l_sp: SPECIAL [NATURAL_8]\n    do\n      l_sp := data.area;\n      (item + pos).memory_copy ($l_sp, data.count)\n    ensure\n      inserted: read_array (pos, data.count) ~ data\n    end\n\nfeature -- Access: Little-endian format\n\n  read_natural_8_le (pos: INTEGER): NATURAL_8\n      -- Read NATURAL_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_8_bytes)\n    end\n\n  read_natural_16_le (pos: INTEGER): NATURAL_16\n      -- Read NATURAL_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    local\n      l_high, l_low: NATURAL_16\n    do\n      if is_little_endian then\n        Result := read_natural_16 (pos)\n      else\n        l_low := {NATURAL_16} 0x00FF & read_natural_8 (pos)\n        l_high := read_natural_8 (pos + natural_8_bytes)\n        Result := (l_high.to_natural_16 |<< 8) | l_low\n      end\n    end\n\n  read_natural_32_le (pos: INTEGER): NATURAL_32\n      -- Read NATURAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    local\n      l_high, l_low: NATURAL_32\n    do\n      if is_little_endian then\n        Result := read_natural_32 (pos)\n      else\n        l_low := {NATURAL_32} 0x0000FFFF & read_natural_16_le (pos)\n        l_high := read_natural_16_le (pos + natural_16_bytes)\n        Result := (l_high.to_natural_32 |<< 16) | l_low\n      end\n    end\n\n  read_natural_64_le (pos: INTEGER): NATURAL_64\n      -- Read NATURAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    local\n      l_high, l_low: NATURAL_64\n    do\n      if is_little_endian then\n        Result := read_natural_64 (pos)\n      else\n        l_low := {NATURAL_64} 0x00000000FFFFFFFF & read_natural_32_le (pos)\n        l_high := read_natural_32_le (pos + natural_32_bytes)\n        Result := (l_high.to_natural_64 |<< 32) | l_low\n      end\n    end\n\n  read_integer_8_le (pos: INTEGER): INTEGER_8\n      -- Read INTEGER_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      Result := read_natural_8_le (pos).as_integer_8\n    end\n\n  read_integer_16_le (pos: INTEGER): INTEGER_16\n      -- Read INTEGER_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      Result := read_natural_16_le (pos).as_integer_16\n    end\n\n  read_integer_32_le (pos: INTEGER): INTEGER\n      -- Read INTEGER at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      Result := read_natural_32_le (pos).as_integer_32\n    end\n\n  read_integer_64_le (pos: INTEGER): INTEGER_64\n      -- Read INTEGER_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      Result := read_natural_64_le (pos).as_integer_64\n    end\n\n  read_real_32_le (pos: INTEGER): REAL\n      -- Read REAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_32_bytes) <= count\n    local\n      l_nat32: NATURAL_32\n    do\n      check\n        correct_size: real_32_bytes = natural_32_bytes\n      end\n      l_nat32 := read_natural_32_le (pos)\n      ($Result).memory_copy ($l_nat32, natural_32_bytes)\n    end\n\n  read_real_64_le (pos: INTEGER): DOUBLE\n      -- Read REAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_64_bytes) <= count\n    local\n      l_nat64: NATURAL_64\n    do\n      check\n        correct_size: real_64_bytes = natural_64_bytes\n      end\n      l_nat64 := read_natural_64_le (pos)\n      ($Result).memory_copy ($l_nat64, natural_64_bytes)\n    end\n\nfeature -- Element change: Little-endian format\n\n  put_natural_8_le (i: NATURAL_8; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_8_bytes)\n    ensure\n      inserted: i = read_natural_8_le (pos)\n    end\n\n  put_natural_16_le (i: NATURAL_16; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_16 (i, pos)\n      else\n        put_natural_8 ((i & 0x00FF).to_natural_8, pos)\n        put_natural_8 ((((i & 0xFF00) |>> 8) & 0x00FF).to_natural_8, pos + natural_8_bytes)\n      end\n    ensure\n      inserted: i = read_natural_16_le (pos)\n    end\n\n  put_natural_32_le (i: NATURAL_32; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_32 (i, pos)\n      else\n        put_natural_16_le ((i & 0x0000FFFF).to_natural_16, pos)\n        put_natural_16_le ((((i & 0xFFFF0000) |>> 16) & 0x0000FFFF).to_natural_16, pos + natural_16_bytes)\n      end\n    ensure\n      inserted: i = read_natural_32_le (pos)\n    end\n\n  put_natural_64_le (i: NATURAL_64; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_64 (i, pos)\n      else\n        put_natural_32_le ((i & 0x00000000FFFFFFFF).to_natural_32, pos)\n        put_natural_32_le (\n          (((i & 0xFFFFFFFF00000000) |>> 32) & 0x00000000FFFFFFFF).to_natural_32,\n          pos+ natural_32_bytes)\n      end\n    ensure\n      inserted: i = read_natural_64_le (pos)\n    end\n\n  put_integer_8_le (i: INTEGER_8; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      put_natural_8_le (i.as_natural_8, pos)\n    ensure\n      inserted: i = read_integer_8_le (pos)\n    end\n\n  put_integer_16_le (i: INTEGER_16; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      put_natural_16_le (i.as_natural_16, pos)\n    ensure\n      inserted: i = read_integer_16_le (pos)\n    end\n\n  put_integer_32_le (i: INTEGER; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      put_natural_32_le (i.as_natural_32, pos)\n    ensure\n      inserted: i = read_integer_32_le (pos)\n    end\n\n  put_integer_64_le (i: INTEGER_64; pos: INTEGER)\n      -- Insert `i' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      put_natural_64_le (i.as_natural_64, pos)\n    ensure\n      inserted: i = read_integer_64_le (pos)\n    end\n\n  put_real_32_le (v: REAL; pos: INTEGER_32)\n      -- Insert `v' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_32_bytes) <= count\n    local\n      l_nat32: NATURAL_32\n    do\n      check\n        correct_size: real_32_bytes = natural_32_bytes\n      end\n      ($l_nat32).memory_copy ($v, natural_32_bytes)\n      put_natural_32_le (l_nat32, pos)\n    ensure\n      inserted: v = read_real_32_le (pos)\n    end\n\n  put_real_64_le (v: DOUBLE; pos: INTEGER_32)\n      -- Insert `v' at position `pos' in little-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_64_bytes) <= count\n    local\n      l_nat64: NATURAL_64\n    do\n      check\n        correct_size: real_64_bytes = natural_64_bytes\n      end\n      ($l_nat64).memory_copy ($v, natural_64_bytes)\n      put_natural_64_le (l_nat64, pos)\n    ensure\n      inserted: v = read_real_64_le (pos)\n    end\n\nfeature -- Access: Big-endian format\n\n  read_natural_8_be (pos: INTEGER): NATURAL_8\n      -- Read NATURAL_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      ($Result).memory_copy (item + pos, natural_8_bytes)\n    end\n\n  read_natural_16_be (pos: INTEGER): NATURAL_16\n      -- Read NATURAL_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    local\n      l_high, l_low: NATURAL_16\n    do\n      if is_little_endian then\n        l_high := read_natural_8 (pos)\n        l_low := (0x00FF).to_natural_16 & read_natural_8 (pos + natural_8_bytes)\n        Result := (l_high.to_natural_16 |<< 8) | l_low\n      else\n        Result := read_natural_16 (pos)\n      end\n    end\n\n  read_natural_32_be (pos: INTEGER): NATURAL_32\n      -- Read NATURAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    local\n      l_high, l_low: NATURAL_32\n    do\n      if is_little_endian then\n        l_high := read_natural_16_be (pos)\n        l_low := (0x0000FFFF).to_natural_32 & read_natural_16_be (pos + natural_16_bytes)\n        Result := (l_high.to_natural_32 |<< 16) | l_low\n      else\n        Result := read_natural_32 (pos)\n      end\n    end\n\n  read_natural_64_be (pos: INTEGER): NATURAL_64\n      -- Read NATURAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    local\n      l_high, l_low: NATURAL_64\n    do\n      if is_little_endian then\n        l_high := read_natural_32_be (pos)\n        l_low := {NATURAL_64} 0x00000000FFFFFFFF & read_natural_32_be (pos + natural_32_bytes)\n        Result := (l_high.to_natural_64 |<< 32) | l_low\n      else\n        Result := read_natural_64 (pos)\n      end\n    end\n\n  read_integer_8_be (pos: INTEGER): INTEGER_8\n      -- Read INTEGER_8 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      Result := read_natural_8_be (pos).as_integer_8\n    end\n\n  read_integer_16_be (pos: INTEGER): INTEGER_16\n      -- Read INTEGER_16 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      Result := read_natural_16_be (pos).as_integer_16\n    end\n\n  read_integer_32_be (pos: INTEGER): INTEGER\n      -- Read INTEGER at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      Result := read_natural_32_be (pos).as_integer_32\n    end\n\n  read_integer_64_be (pos: INTEGER): INTEGER_64\n      -- Read INTEGER_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      Result := read_natural_64_be (pos).as_integer_64\n    end\n\n  read_real_32_be (pos: INTEGER): REAL\n      -- Read REAL_32 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_32_bytes) <= count\n    local\n      l_nat32: NATURAL_32\n    do\n      check\n        correct_size: real_32_bytes = natural_32_bytes\n      end\n      l_nat32 := read_natural_32_be (pos)\n      ($Result).memory_copy ($l_nat32, natural_32_bytes)\n    end\n\n  read_real_64_be (pos: INTEGER): DOUBLE\n      -- Read REAL_64 at position `pos'.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_64_bytes) <= count\n    local\n      l_nat64: NATURAL_64\n    do\n      check\n        correct_size: real_64_bytes = natural_64_bytes\n      end\n      l_nat64 := read_natural_64_be (pos)\n      ($Result).memory_copy ($l_nat64, natural_64_bytes)\n    end\n\nfeature -- Element change: Big-endian format\n\n  put_natural_8_be (i: NATURAL_8; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_8_bytes) <= count\n    do\n      (item + pos).memory_copy ($i, natural_8_bytes)\n    ensure\n      inserted: i = read_natural_8_be (pos)\n    end\n\n  put_natural_16_be (i: NATURAL_16; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_16_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_8 ((((i & 0xFF00) |>> 8) & 0x00FF).to_natural_8, pos)\n        put_natural_8 ((i & 0x00FF).to_natural_8, pos + natural_8_bytes)\n      else\n        put_natural_16 (i, pos)\n      end\n    ensure\n      inserted: i = read_natural_16_be (pos)\n    end\n\n  put_natural_32_be (i: NATURAL_32; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_32_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_16_be ((((i & 0xFFFF0000) |>> 16) & 0x0000FFFF).to_natural_16, pos)\n        put_natural_16_be ((i & 0x0000FFFF).to_natural_16, pos + natural_16_bytes)\n      else\n        put_natural_32 (i, pos)\n      end\n    ensure\n      inserted: i = read_natural_32_be (pos)\n    end\n\n  put_natural_64_be (i: NATURAL_64; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + natural_64_bytes) <= count\n    do\n      if is_little_endian then\n        put_natural_32_be (\n          (((i & 0xFFFFFFFF00000000) |>> 32) & 0x00000000FFFFFFFF).to_natural_32, pos)\n        put_natural_32_be ((i & 0x00000000FFFFFFFF).to_natural_32,\n          pos + natural_32_bytes)\n      else\n        put_natural_64 (i, pos)\n      end\n    ensure\n      inserted: i = read_natural_64_be (pos)\n    end\n\n  put_integer_8_be (i: INTEGER_8; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_8_bytes) <= count\n    do\n      put_natural_8_be (i.as_natural_8, pos)\n    ensure\n      inserted: i = read_integer_8_be (pos)\n    end\n\n  put_integer_16_be (i: INTEGER_16; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_16_bytes) <= count\n    do\n      put_natural_16_be (i.as_natural_16, pos)\n    ensure\n      inserted: i = read_integer_16_be (pos)\n    end\n\n  put_integer_32_be (i: INTEGER; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_32_bytes) <= count\n    do\n      put_natural_32_be (i.as_natural_32, pos)\n    ensure\n      inserted: i = read_integer_32_be (pos)\n    end\n\n  put_integer_64_be (i: INTEGER_64; pos: INTEGER)\n      -- Insert `i' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + integer_64_bytes) <= count\n    do\n      put_natural_64_be (i.as_natural_64, pos)\n    ensure\n      inserted: i = read_integer_64_be (pos)\n    end\n\n  put_real_32_be (v: REAL; pos: INTEGER_32)\n      -- Insert `v' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_32_bytes) <= count\n    local\n      l_nat32: NATURAL_32\n    do\n      check\n        correct_size: real_32_bytes = natural_32_bytes\n      end\n      ($l_nat32).memory_copy ($v, natural_32_bytes)\n      put_natural_32_be (l_nat32, pos)\n    ensure\n      inserted: v = read_real_32_be (pos)\n    end\n\n  put_real_64_be (v: DOUBLE; pos: INTEGER_32)\n      -- Insert `v' at position `pos' in big-endian format.\n    require\n      pos_nonnegative: pos >= 0\n      valid_position: (pos + real_64_bytes) <= count\n    local\n      l_nat64: NATURAL_64\n    do\n      check\n        correct_size: real_64_bytes = natural_64_bytes\n      end\n      ($l_nat64).memory_copy ($v, natural_64_bytes)\n      put_natural_64_be (l_nat64, pos)\n    ensure\n      inserted: v = read_real_64_be (pos)\n    end\n\nfeature -- Concatenation\n\n  append (other: like Current)\n      -- Append `other' at the end of Current.\n    require\n      not_shared: not is_shared\n      other_not_void: other /= Void\n    local\n      new_count: INTEGER\n    do\n      new_count := count + other.count\n      item := item.memory_realloc (new_count.max (1))\n      if item = default_pointer then\n        (create {EXCEPTIONS}).raise (\"No more memory\")\n      end\n      (item + count).memory_copy (other.item, other.count)\n      count := new_count\n    end\n\nfeature -- Resizing\n\n  resize (n: INTEGER)\n      -- Reallocate `item' to hold `n' bytes.\n    require\n      n_non_negative: n >= 0\n      not_shared: not is_shared\n    do\n        -- Reallocate.\n      if n /= count then\n        item := item.memory_realloc (n.max (1))\n        if item = default_pointer then\n          (create {EXCEPTIONS}).raise (\"No more memory\")\n        end\n      end\n\n      if n > count then\n          -- Reset newly allocated memory to `0'.\n        (item + count).memory_set (0, n - count)\n      end\n      count := n\n    end\n\nfeature {NONE} -- Disposal\n\n  dispose\n      -- Release memory pointed by `item'.\n    local\n      null: POINTER\n    do\n      if not is_shared then\n        item.memory_free\n      end\n      item := null\n      is_shared := False\n    ensure then\n      shared_reset: not is_shared\n    end\n\nfeature {NONE} -- Debugging\n\n  allocation_counter: CELL [NATURAL_64]\n      -- Store current number of allocation being made.\n    once\n      create Result.put (0)\n    end\n\n  counter: NATURAL_64 note option: transient attribute end\n      -- Allocation number associated to Current.\n\n  increment_counter\n      -- Set `counter' with a new allocation number.\n    do\n      debug (\"MANAGED_POINTER_allocation\")\n        counter := allocation_counter.item + 1\n        allocation_counter.put (counter)\n      end\n    end\n\n\ninvariant\n  item_not_null: item = default_pointer implies (count = 0 and is_shared)\n  valid_count: count >= 0\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"mismatch_corrector.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  MISMATCH_CORRECTOR\n\nfeature -- Correction\n\n  correct_mismatch\n      -- Attempt to correct object mismatch using `mismatch_information'.\n    local\n      l_msg: STRING\n      l_exc: EXCEPTIONS\n    do\n        -- If it is not redefined then we raise an exception.\n      create l_msg.make_from_string (\"Mismatch: \")\n      create l_exc\n      l_msg.append (generating_type)\n      l_exc.raise_retrieval_exception (l_msg)\n    end\n\n  mismatch_information: MISMATCH_INFORMATION\n      -- Original attribute values of mismatched object\n    once\n      create Result\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"native_array.e","content":"note\n  description: \"Fake abstraction of a .NET NATIVE_ARRAY in a non-.NET system\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-04-23 14:49:02 -0700 (Tue, 23 Apr 2013) $\"\n  revision: \"$Revision: 92470 $\"\n\nfrozen class\n  NATIVE_ARRAY [G]\n\ninvariant\n  is_dotnet: {PLATFORM}.is_dotnet\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_16.e","content":"note\n  description: \"Unsigned integer values coded on 16 bits\"\n  external_name: \"System.UInt16\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class NATURAL_16\n\ninherit\n  NATURAL_16_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_16_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64},\n  to_integer_32: {INTEGER_32},\n  to_integer_64: {INTEGER_64},\n  to_natural_32: {NATURAL_32},\n  to_natural_64: {NATURAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_16): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_16): NATURAL_16\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_16): NATURAL_16\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_16): NATURAL_16\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_16): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_16\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_16): NATURAL_16\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_16): NATURAL_16\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_16): NATURAL_16\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_16): NATURAL_16\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_16): NATURAL_16\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_16\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_16\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_16\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_16_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 16 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_16_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_16\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_16 = 0\n  Max_value: NATURAL_16 = 65535\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_16)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item <= {CHARACTER_8}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: NATURAL_16_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_16_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_16\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_big: item <= {INTEGER_16}.Max_value.to_natural_16\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_16_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_16_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item.to_integer_32\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_16\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_16: n <= 16\n      n_greater_or_equal_to_minus_16: n >= -16\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_16: n <= 16\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_16: n <= 16\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_16: n < 16\n    do\n      Result := item & ((1).to_natural_16 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_16\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_16: n < 16\n    do\n      if b then\n        Result := item | ((1).to_natural_16 |<< n)\n      else\n        Result := item & ((1).to_natural_16 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_16): NATURAL_16\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (5)\n      Result.append_natural_16 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_32.e","content":"note\n  description: \"Unsigned integer values coded on 32 bits.\"\n  external_name: \"System.UInt32\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class NATURAL_32 inherit\n\n  NATURAL_32_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_32_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64},\n  to_integer_64: {INTEGER_64},\n  to_natural_64: {NATURAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_32): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_32): NATURAL_32\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_32): NATURAL_32\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_32): NATURAL_32\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_32): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_32\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_32): NATURAL_32\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_32): NATURAL_32\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Returns corresponding CHARACTER_32 to `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_32): NATURAL_32\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_32): NATURAL_32\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_32): NATURAL_32\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_32\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_32_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 32 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_32_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_32\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Clear sign bit.\n      Result := (item & 0x7FFFFFFF).to_integer_32\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_32 = 0\n  Max_value: NATURAL_32 = 4294967295\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_32)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item <= {CHARACTER_8}.Max_value.to_natural_32\n    ensure\n      in_bounds: Result = (\n        item >= {CHARACTER_8}.Min_value.to_natural_32 and\n        item <= {CHARACTER_8}.Max_value.to_natural_32)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: NATURAL_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_32_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_32\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_big: item <= {INTEGER_16}.Max_value.to_natural_32\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    require\n      not_too_big: item <= {INTEGER_32}.Max_value.to_natural_32\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i: INTEGER\n      a_digit, val: NATURAL_32\n    do\n      from\n        i := (create {PLATFORM}).Integer_32_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0xF)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_32_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item.to_integer_32\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Returns corresponding CHARACTER_32 to `item' value.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_32\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_32: n <= 32\n      n_greater_or_equal_to_minus_32: n >= -32\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_32: n <= 32\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      Result := item & ((1).to_natural_32 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_32\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_32: n < 32\n    do\n      if b then\n        Result := item | ((1).to_natural_32 |<< n)\n      else\n        Result := item & ((1).to_natural_32 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_32): NATURAL_32\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (20)\n      Result.append_natural_32 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_64.e","content":"note\n  description: \"Unsigned integer values coded on 64 bits\"\n  external_name: \"System.UInt64\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class NATURAL_64\n\ninherit\n  NATURAL_64_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_64_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_64): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_64): NATURAL_64\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_64): NATURAL_64\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_64): NATURAL_64\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_64): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_64\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_64): NATURAL_64\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_64): NATURAL_64\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_64): NATURAL_64\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_64): NATURAL_64\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_64): NATURAL_64\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_64\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_64\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_64\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_64_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 64 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_64_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_64\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n        -- Get the positive value of `item' and then do\n        -- a modulo on the maximum INTEGER_32 value.\n      Result := (item & 0x000000007FFFFFFF).to_integer_32\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_64 = 0\n  Max_value: NATURAL_64 = 18446744073709551615\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_64)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := item <= {CHARACTER_8}.Max_value.to_natural_64\n    ensure\n      in_bounds: Result = (\n        item >= {CHARACTER_8}.Min_value.to_natural_64 and\n        item <= {CHARACTER_8}.Max_value.to_natural_64)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := item <= {CHARACTER_32}.Max_value\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other + 0\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: NATURAL_64_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_64_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    require\n      not_too_big: item <= {NATURAL_8}.Max_value\n    do\n      Result := as_natural_8\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    require\n      not_too_big: item <= {NATURAL_16}.Max_value\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    require\n      not_too_big: item <= {NATURAL_32}.Max_value\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_64\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    require\n      not_too_big: item <= {INTEGER_16}.Max_value.to_natural_64\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    require\n      not_too_big: item <= {INTEGER_32}.Max_value.to_natural_64\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    require\n      not_too_big: item <= {INTEGER_64}.Max_value.to_natural_64\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i: INTEGER\n      val: NATURAL_64\n      a_digit: INTEGER\n    do\n      from\n        i := (create {PLATFORM}).Integer_64_bits // 4\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 0x0F).to_integer_32\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_valid_count: Result.count = (create {PLATFORM}).Integer_64_bits // 4\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item.to_integer_32\n      if tmp <= 9 then\n        Result := (tmp + ('0').code).to_character_8\n      else\n        Result := (('A').code + (tmp - 10)).to_character_8\n      end\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_64\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_64: n <= 64\n      n_greater_or_equal_to_minus_64: n >= -64\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_64: n <= 64\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_64: n <= 64\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_64: n < 64\n    do\n      Result := item & ((1).to_natural_64 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_64\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_64: n < 64\n    do\n      if b then\n        Result := item | ((1).to_natural_64 |<< n)\n      else\n        Result := item & ((1).to_natural_64 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_64): NATURAL_64\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (20)\n      Result.append_natural_64 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"natural_8.e","content":"note\n  description: \"Integer values coded on 8 bits\"\n  external_name: \"System.Byte\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-10-30 08:32:46 -0700 (Tue, 30 Oct 2012) $\"\n  revision: \"$Revision: 92022 $\"\n\nfrozen expanded class NATURAL_8 inherit\n\n  NATURAL_8_REF\n    redefine\n      is_less,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      integer_quotient,\n      integer_remainder,\n      identity,\n      as_natural_8,\n      as_natural_16,\n      as_natural_32,\n      as_natural_64,\n      as_integer_8,\n      as_integer_16,\n      as_integer_32,\n      as_integer_64,\n      to_real_32,\n      to_real_64,\n      to_character_8,\n      to_character_32,\n      bit_and,\n      bit_or,\n      bit_xor,\n      bit_not,\n      bit_shift_left,\n      bit_shift_right\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({NATURAL_8_REF}),\n  to_real_32: {REAL_32},\n  to_real_64: {REAL_64},\n  to_integer_16: {INTEGER_16},\n  to_integer_32: {INTEGER_32},\n  to_integer_64: {INTEGER_64},\n  to_natural_16: {NATURAL_16},\n  to_natural_32: {NATURAL_32},\n  to_natural_64: {NATURAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: NATURAL_8): BOOLEAN\n      -- Is current integer less than `other'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: NATURAL_8): NATURAL_8\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: NATURAL_8): NATURAL_8\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: NATURAL_8): NATURAL_8\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: NATURAL_8): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": NATURAL_8\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  integer_quotient alias \"//\" (other: NATURAL_8): NATURAL_8\n      -- Integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  integer_remainder alias \"\\\\\" (other: NATURAL_8): NATURAL_8\n      -- Remainder of the integer division of Current by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    external\n      \"built_in\"\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    external\n      \"built_in\"\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    external\n      \"built_in\"\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    external\n      \"built_in\"\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    external\n      \"built_in\"\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: NATURAL_8): NATURAL_8\n      -- Bitwise and between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_or alias \"|\" (i: NATURAL_8): NATURAL_8\n      -- Bitwise or between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_xor (i: NATURAL_8): NATURAL_8\n      -- Bitwise xor between Current' and `i'.\n    external\n      \"built_in\"\n    end\n\n  bit_not: NATURAL_8\n      -- One's complement of Current.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to left.\n    external\n      \"built_in\"\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to right.\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\nend\n"});
__eiffel_builtin.push({"filename":"natural_8_ref.e","content":"note\n  description: \"References to objects containing an integer value coded on 8 bits\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-19 14:26:14 -0700 (Mon, 19 May 2014) $\"\n  revision: \"$Revision: 95117 $\"\n\nclass\n  NATURAL_8_REF\n\ninherit\n  NUMERIC\n    rename\n      quotient as integer_quotient alias \"//\",\n      opposite as unapplicable_opposite\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: NATURAL_8\n      -- Integer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0 then\n        Result := 1\n      elseif item < 0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0)\n    end\n\n  ascii_char: CHARACTER_8\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use to_character_8 instead.\"\n    require\n      valid_character_code: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  Min_value: NATURAL_8 = 0\n  Max_value: NATURAL_8 = 255\n      -- Minimum and Maximum value hold in `item'.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current integer less than `other'?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (i: NATURAL_8)\n      -- Make `i' the `item' value.\n    external\n      \"built_in\"\n    ensure\n      item_set: item = i\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0\n    ensure then\n      value: Result = (other.item /= 0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0) or\n        (other.conforms_to (0.0) and item > 0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0\n    end\n\n  is_valid_character_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    obsolete\n      \"Use `is_valid_character_8_code' instead.\"\n    do\n      Result := is_valid_character_8_code\n    end\n\n  is_valid_character_8_code: BOOLEAN\n      -- Does current object represent a CHARACTER_8?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_8}.Min_value and item <= {CHARACTER_8}.Max_value)\n    end\n\n  is_valid_character_32_code: BOOLEAN\n      -- Does current object represent a CHARACTER_32?\n    do\n      Result := True\n    ensure\n      in_bounds: Result = (item >= {CHARACTER_32}.Min_value and item <= {CHARACTER_32}.Max_value)\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): REAL_64\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      Result := item / other.item\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  unapplicable_opposite: like Current\n      -- Unary minus\n    do\n      Result := Current\n    ensure then\n      not_applicable: False\n    end\n\n  integer_quotient alias \"//\" (other: like Current): like Current\n      -- Integer division of Current by `other'\n    do\n      create Result\n      Result.set_item (item // other.item)\n    end\n\n  integer_remainder alias \"\\\\\" (other: like Current): like Current\n      -- Remainder of the integer division of Current by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    do\n      create Result\n      Result.set_item (item \\\\ other.item)\n    ensure\n      result_exists: Result /= Void\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Integer power of Current by `other'\n    do\n      Result := item ^ other\n    end\n\n  interval alias \"|..|\" (other: INTEGER): INTEGER_INTERVAL\n      -- Interval from current element to `other'\n      -- (empty if `other' less than current integer)\n    do\n      create Result.make (item, other)\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: NATURAL_8_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: V /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: NATURAL_8_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  frozen to_boolean: BOOLEAN\n      -- True if not `zero'.\n    do\n      Result := item /= 0\n    end\n\n  as_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item.as_natural_8\n    end\n\n  as_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := item.as_natural_16\n    end\n\n  as_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := item.as_natural_32\n    end\n\n  as_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := item.as_natural_64\n    end\n\n  as_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    do\n      Result := item.as_integer_8\n    end\n\n  as_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := item.as_integer_16\n    end\n\n  as_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := item.as_integer_32\n    end\n\n  as_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := item.as_integer_64\n    end\n\n  frozen to_natural_8: NATURAL_8\n      -- Convert `item' into an NATURAL_8 value.\n    do\n      Result := item\n    end\n\n  frozen to_natural_16: NATURAL_16\n      -- Convert `item' into an NATURAL_16 value.\n    do\n      Result := as_natural_16\n    end\n\n  frozen to_natural_32: NATURAL_32\n      -- Convert `item' into an NATURAL_32 value.\n    do\n      Result := as_natural_32\n    end\n\n  frozen to_natural_64: NATURAL_64\n      -- Convert `item' into an NATURAL_64 value.\n    do\n      Result := as_natural_64\n    end\n\n  frozen to_integer_8: INTEGER_8\n      -- Convert `item' into an INTEGER_8 value.\n    require\n      not_too_big: item <= {INTEGER_8}.Max_value.to_natural_8\n    do\n      Result := as_integer_8\n    end\n\n  frozen to_integer_16: INTEGER_16\n      -- Convert `item' into an INTEGER_16 value.\n    do\n      Result := as_integer_16\n    end\n\n  frozen to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    do\n      Result := as_integer_32\n    end\n\n  frozen to_integer_64: INTEGER_64\n      -- Convert `item' into an INTEGER_64 value.\n    do\n      Result := as_integer_64\n    end\n\n  to_real_32: REAL_32\n      -- Convert `item' into a REAL_32\n    do\n      Result := item.to_real_32\n    end\n\n  to_real_64: REAL_64\n      -- Convert `item' into a REAL_64\n    do\n      Result := item.to_real_64\n    end\n\n  to_hex_string: STRING\n      -- Convert `item' into an hexadecimal string.\n    local\n      i, val: INTEGER\n      a_digit: INTEGER\n    do\n      from\n        i := 2\n        create Result.make (i)\n        Result.fill_blank\n        val := item\n      until\n        i = 0\n      loop\n        a_digit := (val & 15)\n        Result.put (a_digit.to_hex_character, i)\n        val := val |>> 4\n        i := i - 1\n      end\n    ensure\n      result_not_void: Result /= Void\n      result_valid_count: Result.count = 2\n    end\n\n  to_hex_character: CHARACTER\n      -- Convert `item' into an hexadecimal character.\n    require\n      in_bounds: 0 <= item and item <= 15\n    local\n      tmp: INTEGER\n    do\n      tmp := item\n      Result := tmp.to_hex_character\n    ensure\n      valid_character: (\"0123456789ABCDEF\").has (Result)\n    end\n\n  to_character: CHARACTER\n      -- Returns corresponding ASCII character to `item' value.\n    obsolete\n      \"Use `to_character_8' instead.\"\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_8: CHARACTER_8\n      -- Associated character in 8 bit version.\n    require\n      valid_character: is_valid_character_8_code\n    do\n      Result := item.to_character_8\n    end\n\n  to_character_32: CHARACTER_32\n      -- Associated character in 32 bit version.\n    require\n      valid_character: is_valid_character_32_code\n    do\n      Result := item.to_character_32\n    end\n\nfeature -- Bit operations\n\n  bit_and alias \"&\" (i: like Current): like Current\n      -- Bitwise and between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_and (i.item))\n    ensure\n      bitwise_and_not_void: Result /= Void\n    end\n\n  bit_or alias \"|\" (i: like Current): like Current\n      -- Bitwise or between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_or (i.item))\n    ensure\n      bitwise_or_not_void: Result /= Void\n    end\n\n  bit_xor (i: like Current): like Current\n      -- Bitwise xor between Current' and `i'.\n    require\n      i_not_void: i /= Void\n    do\n      create Result\n      Result.set_item (item.bit_xor (i.item))\n    ensure\n      bitwise_xor_not_void: Result /= Void\n    end\n\n  bit_not: like Current\n      -- One's complement of Current.\n    do\n      create Result\n      Result.set_item (item.bit_not)\n    ensure\n      bit_not_not_void: Result /= Void\n    end\n\n  frozen bit_shift (n: INTEGER): NATURAL_8\n      -- Shift Current from `n' position to right if `n' positive,\n      -- to left otherwise.\n    require\n      n_less_or_equal_to_8: n <= 8\n      n_greater_or_equal_to_minus_8: n >= -8\n    do\n      if n > 0 then\n        Result := bit_shift_right (n).item\n      else\n        Result := bit_shift_left (- n).item\n      end\n    end\n\n  bit_shift_left alias \"|<<\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to left.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_left (n))\n    ensure\n      bit_shift_left_not_void: Result /= Void\n    end\n\n  bit_shift_right alias \"|>>\" (n: INTEGER): like Current\n      -- Shift Current from `n' position to right.\n    require\n      n_nonnegative: n >= 0\n      n_less_or_equal_to_8: n <= 8\n    do\n      create Result\n      Result.set_item (item.bit_shift_right (n))\n    ensure\n      bit_shift_right_not_void: Result /= Void\n    end\n\n  frozen bit_test (n: INTEGER): BOOLEAN\n      -- Test `n'-th position of Current.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      Result := item & ((1).to_natural_8 |<< n) /= 0\n    end\n\n  frozen set_bit (b: BOOLEAN; n: INTEGER): NATURAL_8\n      -- Copy of current with `n'-th position\n      -- set to 1 if `b', 0 otherwise.\n    require\n      n_nonnegative: n >= 0\n      n_less_than_8: n < 8\n    do\n      if b then\n        Result := item | ((1).to_natural_8 |<< n)\n      else\n        Result := item & ((1).to_natural_8 |<< n).bit_not\n      end\n    end\n\n  frozen set_bit_with_mask (b: BOOLEAN; m: NATURAL_8): NATURAL_8\n      -- Copy of current with all 1 bits of m set to 1\n      -- if `b', 0 otherwise.\n    do\n      if b then\n        Result := item | m\n      else\n        Result := item & m.bit_not\n      end\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of integer value\n    do\n      create Result.make (3)\n      Result.append_natural_8 (item)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"numeric.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n\n  NUMERIC\n\ninherit\n  DEBUG_OUTPUT\n    rename\n      debug_output as out\n    end\n\nfeature -- Access\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\nfeature -- Status report\n\n  divisible (other: like Current): BOOLEAN\n      -- May current object be divided by `other'?\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    obsolete\n      \"[2008_04_01] Will be removed since not used.\"\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other' (commutative).\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n      commutative: Result ~ (other + Current)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    require\n      other_exists: other /= Void\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  quotient alias \"/\" (other: like Current): like Current\n      -- Division by `other'\n    require\n      other_exists: other /= Void\n      good_divisor: divisible (other)\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    deferred\n    ensure\n      result_exists: Result /= Void\n    end\n\ninvariant\n\n--  neutral_addition: equal (Current + zero, Current);\n--  self_subtraction: equal (Current - Current, zero);\n--  neutral_multiplication: equal (Current * one, Current);\n--  self_division: divisible (Current) implies equal (Current / Current, one)\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"part_comparable.e","content":"note\n  description: \"Objects that may be compared according to a partial order relation\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class\n  PART_COMPARABLE\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is current object less than `other'?\n    require\n      other_exists: other /= Void\n    deferred\n    end\n\n  is_less_equal alias \"<=\" (other: like Current): BOOLEAN\n      -- Is current object less than or equal to `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := (Current < other) or (Current ~ other)\n    end\n\n  is_greater alias \">\" (other: like Current): BOOLEAN\n      -- Is current object greater than `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := other < Current\n    end\n\n  is_greater_equal alias \">=\" (other: like Current): BOOLEAN\n      -- Is current object greater than or equal to `other'?\n    require\n      other_exists: other /= Void\n    do\n      Result := (other < Current) or (Current ~ other)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"platform.e","content":"note\n  description: \"Platform-dependent properties.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-06-15 12:34:32 -0700 (Fri, 15 Jun 2012) $\"\n  revision: \"$Revision: 91984 $\"\n\nclass PLATFORM\n\nfeature -- Platform\n\n  is_thread_capable: BOOLEAN\n      -- Is current platform capable of multi-threading?\n    external\n      \"built_in static\"\n    end\n\n  is_scoop_capable: BOOLEAN\n      -- Is current platform capable of SCOOP?\n    external\n      \"built_in static\"\n    end\n\n  is_dotnet: BOOLEAN\n      -- Are we targetting .NET?\n    external\n      \"built_in static\"\n    end\n\n  is_windows: BOOLEAN\n      -- Are we running on Windows platform?\n    external\n      \"built_in static\"\n    end\n\n  is_unix: BOOLEAN\n      -- Are we running on a Unix like platform?\n    external\n      \"built_in static\"\n    end\n\n  is_vms: BOOLEAN\n      -- Are we running on VMS?\n    external\n      \"built_in static\"\n    end\n\n  is_mac: BOOLEAN\n      -- Are we running on Mac OS?\n    external\n      \"built_in static\"\n    end\n\n  is_vxworks: BOOLEAN\n      -- Are we running on VxWorks?\n    external\n      \"built_in static\"\n    end\n\n  is_little_endian: BOOLEAN\n      -- Is current platform a little endian one?\n    local\n      l_nat16: NATURAL_16\n      l_nat8: NATURAL_8\n      l_first: NATURAL_8\n    once\n      l_nat16 := 0x4321\n      l_nat8 := 0x21\n      ($l_first).memory_copy ($l_nat16, 1)\n      Result := l_first = l_nat8\n    end\n\nfeature -- Access bytes size\n\n  boolean_bytes: INTEGER\n      -- Number of bytes in a value of type `BOOLEAN'\n    external\n      \"built_in static\"\n    end\n\n  character_8_bytes: INTEGER = 1\n      -- Number of bytes in a value of type `CHARACTER_8'\n\n  character_32_bytes: INTEGER = 4\n      -- Number of bytes in a value of type `CHARACTER_32'\n\n  natural_8_bytes: INTEGER = 1\n      -- Number of bytes in a value of type `NATURAL_8'\n\n  natural_16_bytes: INTEGER = 2\n      -- Number of bytes in a value of type `NATURAL_16'\n\n  natural_32_bytes: INTEGER = 4\n      -- Number of bytes in a value of type `NATURAL_32'\n\n  natural_64_bytes: INTEGER = 8\n      -- Number of bytes in a value of type `NATURAL_64'\n\n  integer_8_bytes: INTEGER = 1\n      -- Number of bytes in a value of type `INTEGER_8'\n\n  integer_16_bytes: INTEGER = 2\n      -- Number of bytes in a value of type `INTEGER_16'\n\n  integer_32_bytes: INTEGER = 4\n      -- Number of bytes in a value of type `INTEGER_32'\n\n  integer_64_bytes: INTEGER = 8\n      -- Number of bytes in a value of type `INTEGER_64'\n\n  real_32_bytes: INTEGER = 4\n      -- Number of bytes in a value of type `REAL_32'\n\n  real_64_bytes: INTEGER = 8\n      -- Number of bytes in a value of type `REAL_64'\n\n  pointer_bytes: INTEGER\n      -- Number of bytes in a value of type `POINTER'\n    external\n      \"built_in static\"\n    end\n\nfeature -- Access bits size\n\n  boolean_bits: INTEGER\n      -- Number of bits in a value of type `BOOLEAN'\n    do\n      Result := boolean_bytes * 8\n    end\n\n  character_8_bits: INTEGER = 8\n      -- Number of bits in a value of type `CHARACTER_8'\n\n  character_32_bits: INTEGER = 32\n      -- Number of bits in a value of type `CHARACTER_32'\n\n  natural_8_bits: INTEGER = 8\n      -- Number of bits in a value of type `NATURAL_8'\n\n  natural_16_bits: INTEGER = 16\n      -- Number of bits in a value of type `NATURAL_16'\n\n  natural_32_bits: INTEGER = 32\n      -- Number of bits in a value of type `NATURAL_32'\n\n  natural_64_bits: INTEGER = 64\n      -- Number of bits in a value of type `NATURAL_64'\n\n  integer_8_bits: INTEGER = 8\n      -- Number of bits in a value of type `INTEGER_8'\n\n  integer_16_bits: INTEGER = 16\n      -- Number of bits in a value of type `INTEGER_16'\n\n  integer_32_bits: INTEGER = 32\n      -- Number of bits in a value of type `INTEGER_32'\n\n  integer_64_bits: INTEGER = 64\n      -- Number of bits in a value of type `INTEGER_64'\n\n  real_32_bits: INTEGER = 32\n      -- Number of bits in a value of type `REAL_32'\n\n  real_64_bits: INTEGER = 64\n      -- Number of bits in a value of type `REAL_64'\n\n  pointer_bits: INTEGER\n      -- Number of bits in a value of type `POINTER'\n    do\n      Result := pointer_bytes * 8\n    end\n\nfeature -- Obsoletes\n\n  character_bytes: INTEGER\n      -- Number of bytes in a value of type `CHARACTER_8'\n    obsolete\n      \"Use `character_8_bytes' instead.\"\n    external\n      \"built_in static\"\n    end\n\n  wide_character_bytes: INTEGER\n      -- Number of bytes in a value of type `CHARACTER_32'\n    obsolete\n      \"Use `character_32_bytes' instead.\"\n    external\n      \"built_in static\"\n    end\n\n  integer_bytes: INTEGER\n      -- Number of bytes in a value of type `INTEGER_32'\n    obsolete\n      \"Use `integer_32_bytes' instead.\"\n    external\n      \"built_in static\"\n    end\n\n  real_bytes: INTEGER\n      -- Number of bytes in a value of type `REAL_32'\n    obsolete\n      \"Use `real_32_bytes' instead.\"\n    external\n      \"built_in static\"\n    end\n\n  double_bytes: INTEGER\n      -- Number of bytes in a value of type `REAL_64'\n    obsolete\n      \"Use `real_64_bytes' instead.\"\n    external\n      \"built_in static\"\n    end\n\n  character_bits: INTEGER\n      -- Number of bits in a value of type `CHARACTER_8'\n    obsolete\n      \"Use `character_8_bits' instead.\"\n    do\n      Result := 8\n    end\n\n  integer_bits: INTEGER\n      -- Number of bits in a value of type `INTEGER_32'\n    obsolete\n      \"Use `integer_32_bits' instead.\"\n    do\n      Result := 32\n    end\n\n  real_bits: INTEGER\n      -- Number of bits in a value of type `REAL_32'\n    obsolete\n      \"Use `real_32_bits' instead.\"\n    do\n      Result := 32\n    end\n\n  double_bits: INTEGER\n      -- Number of bits in a value of type `REAL_64'\n    obsolete\n      \"Use `real_64_bits' instead.\"\n    do\n      Result := 64\n    end\n\n  maximum_character_code: INTEGER\n      -- Largest supported code for CHARACTER_8 values\n    obsolete\n      \"Use `{CHARACTER}.max_value' instead.\"\n    do\n      Result := {CHARACTER}.max_value\n    ensure\n      meaningful: Result >= 127\n    end\n\n  maximum_integer: INTEGER\n      -- Largest supported value of type INTEGER_32\n    obsolete\n      \"Use `{INTEGER}.max_value' instead.\"\n    do\n      Result := {INTEGER}.max_value\n    ensure\n      meaningful: Result >= 0\n    end\n\n  minimum_character_code: INTEGER\n      -- Smallest supported code for CHARACTER_8 values\n    obsolete\n      \"Use `{CHARACTER}.min_value' instead.\"\n    do\n      Result := {CHARACTER}.min_value\n    ensure\n      meaningful: Result <= 0\n    end\n\n  minimum_integer: INTEGER\n      -- Smallest supported value of type INTEGER_32\n    obsolete\n      \"Use `{INTEGER}.min_value' instead.\"\n    do\n      Result := {INTEGER}.min_value\n    ensure\n      meaningful: Result <= 0\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"pointer.e","content":"note\n  description: \"References to objects meant to be exchanged with non-Eiffel software.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class POINTER inherit\n\n  POINTER_REF\n    redefine\n      hash_code,\n      plus,\n      to_integer_32,\n      is_default_pointer,\n      out\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({POINTER_REF})\n\nfeature -- Access\n\n  hash_code: INTEGER\n      -- Hash code value\n    external\n      \"built_in\"\n    end\n\nfeature -- Status report\n\n  is_default_pointer: BOOLEAN\n      -- <Precursor>\n    external\n      \"built_in\"\n    end\n\nfeature -- Operations\n\n  plus alias \"+\" (offset: INTEGER): POINTER\n      -- Pointer moved by an offset of `offset' bytes.\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of pointer value\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"pointer_ref.e","content":"note\n  description: \"[\n    References to objects containing reference to object\n    meant to be exchanged with non-Eiffel software.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass POINTER_REF\ninherit\n  HASHABLE\n    redefine\n      out, is_equal, is_hashable\n    end\n\n  REFACTORING_HELPER\n    redefine\n      out, is_equal\n    end\n\nfeature -- Access\n\n  item: POINTER\n      -- Pointer value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := item.hash_code\n    end\n\nfeature -- Element change\n\n  frozen set_item (p: POINTER)\n      -- Make `p' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Status report\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= default_pointer\n    end\n\n  is_default_pointer: BOOLEAN\n      -- Is current `default_pointer'?\n    do\n      Result := item = default_pointer\n    ensure\n      definition: Result = (item = default_pointer)\n    end\n\nfeature -- Operations\n\n  plus alias \"+\" (offset: INTEGER): POINTER\n      -- Pointer moved by an offset of `offset' bytes.\n    do\n      Result := item + offset\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: POINTER_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: POINTER_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  to_integer_32: INTEGER_32\n      -- Convert `item' into an INTEGER_32 value.\n    require\n--      not_too_small: item >= {INTEGER_32}.Min_value\n--      not_too_big: item <= {INTEGER_32}.Max_value\n    do\n      -- TODO: Fix ONCE arguments\n      --fixme (once \"Do not forget to add proper precondition to ensure we can convert pointer %\n      --  %value into an INTEGER_32\")\n      Result := item.to_integer_32\n    end\n\nfeature -- Memory copy\n\n  memory_copy (a_source: POINTER; a_size: INTEGER)\n      -- Copy `a_size' bytes from `a_source' to `Current'.\n      -- `a_source' and `Current' should not overlap.\n    require\n      valid_size: a_size >= 0\n      valid_source: a_source /= default_pointer\n    do\n      c_memcpy (item, a_source, a_size)\n    end\n\n  memory_move (a_source: POINTER; a_size: INTEGER)\n      -- Copy `a_size' bytes from `a_source' to `Current'.\n      -- `a_source' and `Current' can overlap.\n    require\n      valid_size: a_size >= 0\n      valid_source: a_source /= default_pointer\n    do\n      c_memmove (item, a_source, a_size)\n    end\n\n  memory_set (val, n: INTEGER)\n      -- Fill first `n' bytes of the memory pointed by `Current'\n      -- with constant `val'.\n    require\n      valid_val: val >= 0\n      valid_n: n >= 0\n    do\n      c_memset (item, val, n)\n    end\n\nfeature -- Allocation/free\n\n  memory_alloc (a_size: INTEGER): POINTER\n      -- Allocated `size' bytes using `malloc'.\n    require\n      valid_size: a_size > 0\n    do\n      Result := c_malloc (a_size)\n    end\n\n  memory_calloc (a_count, a_element_size: INTEGER): POINTER\n      -- Allocate `a_count' elements of size `a_element_size' bytes using `calloc.\n    require\n      valid_element_count: a_count > 0\n      valid_element_size: a_element_size > 0\n    do\n      Result := c_calloc (a_count, a_element_size)\n    end\n\n  memory_realloc (a_size: INTEGER): POINTER\n      -- Realloc `Current'.\n    require\n      valid_size: a_size >= 0\n    do\n      Result := c_realloc (item, a_size)\n    end\n\n  memory_free\n      -- Free allocated memory with `malloc'.\n    do\n      c_free (item)\n      set_item (default_pointer)\n    end\n\nfeature -- Comparison\n\n  memory_compare (other: POINTER; a_size: INTEGER): BOOLEAN\n      -- True if `Current' and `other' are identical on `a_size' bytes.\n    require\n      valid_size: a_size > 0\n      valid_other: other /= default_pointer\n    do\n      Result := c_memcmp (item, other, a_size) = 0\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of pointer value\n    do\n      Result := item.out\n    end\n\nfeature {NONE} -- Implementation\n\n  c_memcpy (destination, source: POINTER; count: INTEGER)\n      -- C memcpy\n    external\n      \"C signature (void *, const void *, size_t) use <string.h>\"\n    alias\n      \"memcpy\"\n    end\n\n  c_memmove (destination, source: POINTER; count: INTEGER)\n      -- C memmove\n    external\n      \"C signature (void *, const void *, size_t) use <string.h>\"\n    alias\n      \"memmove\"\n    end\n\n  c_memset (source: POINTER; val: INTEGER; count: INTEGER)\n      -- C memset\n    external\n      \"C signature (void *, int, size_t) use <string.h>\"\n    alias\n      \"memset\"\n    end\n\n  c_memcmp (source, other: POINTER; count: INTEGER): INTEGER\n      -- C memcmp\n    external\n      \"C signature (void *, void *, size_t): EIF_INTEGER use <string.h>\"\n    alias\n      \"memcmp\"\n    end\n\n  c_malloc (size: INTEGER): POINTER\n      -- C malloc\n    external\n      \"C signature (size_t): EIF_POINTER use <stdlib.h>\"\n    alias\n      \"malloc\"\n    end\n\n  c_calloc (nmemb, size: INTEGER): POINTER\n      -- C calloc\n    external\n      \"C signature (size_t, size_t): EIF_POINTER use <stdlib.h>\"\n    alias\n      \"calloc\"\n    end\n\n  c_realloc (source: POINTER; size: INTEGER): POINTER\n      -- C realloc\n    external\n      \"C signature (void *, size_t): EIF_POINTER use <stdlib.h>\"\n    alias\n      \"realloc\"\n    end\n\n  c_free (p: POINTER)\n      -- C free\n    external\n      \"C signature (void *) use <stdlib.h>\"\n    alias\n      \"free\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"procedure.e","content":"note\n  description: \"[\n    Objects representing delayed calls to a procedure.\n    with some operands possibly still open.\n\n    Note: Features are the same as those of ROUTINE,\n      with `apply' made effective, and no further\n      redefinition of `is_equal' and `copy'.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-01-28 14:35:23 -0800 (Tue, 28 Jan 2014) $\"\n  revision: \"$Revision: 94109 $\"\n\nclass\n  PROCEDURE [BASE_TYPE -> detachable ANY, OPEN_ARGS -> detachable TUPLE create default_create end]\n\ninherit\n  ROUTINE [BASE_TYPE, OPEN_ARGS]\n    rename\n      call as call alias \"()\"\n    end\n\ncreate {NONE}\n  set_rout_disp\n\nfeature -- Calls\n\n  apply\n      -- Call procedure with `args' as last set.\n    do\n      call (operands)\n    end\n\n  call alias \"()\" (args: detachable separate OPEN_ARGS)\n    local\n      c: like closed_operands\n      l_closed_count: INTEGER\n    do\n      c := closed_operands\n      if c /= Void then\n        l_closed_count :=  c.count\n      end\n      fast_call (encaps_rout_disp, calc_rout_addr, $closed_operands, $args, routine_id,\n               is_basic, written_type_id_inline_agent, l_closed_count, open_count, $open_map)\n    end\n\nfeature {NONE} -- Implementation\n\n  fast_call (a_rout_disp, a_calc_rout_addr: POINTER;\n           a_closed_operands: POINTER; a_operands: POINTER;\n         a_routine_id: INTEGER; a_is_basic: BOOLEAN; a_class_id_inline_agent: INTEGER;\n         a_closed_count, a_open_count: INTEGER; a_open_map: POINTER)\n    external\n      \"C inline use %\"eif_rout_obj.h%\"\"\n    alias\n      \"[\n      #ifdef WORKBENCH\n        if ($a_rout_disp != 0) {\n          (FUNCTION_CAST(void, (EIF_POINTER, EIF_REFERENCE, EIF_REFERENCE)) $a_rout_disp)(\n            $a_calc_rout_addr, $a_closed_operands, $a_operands);\n        } else {\n          rout_obj_call_procedure_dynamic (\n            $a_routine_id,\n            $a_is_basic,\n            $a_class_id_inline_agent,\n            $a_closed_operands,\n            $a_closed_count,\n            $a_operands,\n            $a_open_count,\n            $a_open_map);\n        }\n      #else\n        (FUNCTION_CAST(void, (EIF_POINTER, EIF_REFERENCE, EIF_REFERENCE)) $a_rout_disp)(\n          $a_calc_rout_addr, $a_closed_operands, $a_operands);\n      #endif\n      ]\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_indexable.e","content":"note\n  description: \"Tables whose keys are integers in a contiguous interval\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: indexable, access;\n  access: index, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class READABLE_INDEXABLE [G]\n\ninherit\n  ITERABLE [G]\n\nfeature -- Access\n\n  item alias \"[]\" (i: INTEGER): G\n      -- Entry at position `i'\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  new_cursor: INDEXABLE_ITERATION_CURSOR [G]\n      -- <Precursor>\n    do\n      create Result.make (Current)\n      Result.start\n    end\n\nfeature -- Measurement\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    deferred\n    ensure\n      not_void: Result /= Void\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' a valid index?\n    deferred\n    ensure\n      only_if_in_index_set:\n        Result implies ((i >= index_set.lower) and (i <= index_set.upper))\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n\n\n\n"});
__eiffel_builtin.push({"filename":"readable_string_32.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-14 22:21:19 -0700 (Wed, 14 May 2014) $\"\n  revision: \"$Revision: 95060 $\"\n\ndeferred class\n  READABLE_STRING_32\n\ninherit\n  READABLE_STRING_GENERAL\n    rename\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general\n    redefine\n      copy, is_equal, out, has, index_of, last_index_of, occurrences\n    end\n\n  READABLE_INDEXABLE [CHARACTER_32]\n    redefine\n      copy, is_equal, out\n    end\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  as_readable_string_8: {READABLE_STRING_8},\n  as_string_8: {STRING_8},\n  as_string_32: {STRING_32}\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    do\n      count := 0\n      internal_hash_code := 0\n      create area.make_filled ('%/000/', n + 1)\n    end\n\n  make_filled (c: CHARACTER_32; n: INTEGER)\n      -- Create string of length `n' filled with `c'.\n    require\n      valid_count: n >= 0\n    do\n      make (n)\n      fill_character (c)\n    ensure\n      count_set: count = n\n      area_allocated: capacity >= n\n      filled: occurrences (c) = count\n    end\n\n  make_from_string (s: READABLE_STRING_32)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    do\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n      if Current /= s then\n        create area.make_empty (count + 1)\n        area.copy_data (s.area, s.area_lower, 0, count + 1)\n      end\n    ensure\n      not_shared_implementation: Current /= s implies not shared_with (s)\n      initialized: same_string (s)\n    end\n\n  make_from_string_general (s: READABLE_STRING_GENERAL)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    deferred\n    ensure\n      not_shared_implementation: Current /= s\n      initialized: same_string_general (s)\n    end\n\n  make_from_c (c_string: POINTER)\n      -- Initialize from contents of `c_string',\n      -- a string created by some C function\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n      l_count := c_string_provider.count\n      create area.make_filled ('%/000/', l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into_character_32_area (area, 1, l_count)\n    end\n\n  make_from_c_pointer (c_string: POINTER)\n      -- Create new instance from contents of `c_string',\n      -- a string created by some C function\n    obsolete\n      \"Use `make_from_c'.\"\n    require\n      c_string_exists: c_string /= default_pointer\n    do\n      make_from_c (c_string)\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    deferred\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_32\n      -- Character at position `i'\n    deferred\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'\n    obsolete\n      \"Due to potential truncation it is recommended to use `code (i)' instead.\"\n    require\n      index_small_enough: i <= count\n      index_large_enough: i > 0\n    deferred\n    end\n\n  shared_with (other: READABLE_STRING_32): BOOLEAN\n      -- Does string share the text of `other'?\n    do\n      Result := (other /= Void) and then (area = other.area)\n    end\n\n  index_of (c: CHARACTER_32; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    local\n      a: like area\n      i, nb, l_lower_area: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          l_lower_area := area_lower\n          i := start_index - 1 + l_lower_area\n          nb := nb + l_lower_area\n          a := area\n        until\n          i = nb or else a.item (i) = c\n        loop\n          i := i + 1\n        end\n        if i < nb then\n            -- We add +1 due to the area starting at 0 and not at 1\n            -- and substract `area_lower'\n          Result := i + 1 - l_lower_area\n        end\n      end\n    end\n\n  last_index_of (c: CHARACTER_32; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c',\n      -- 0 if none.\n    local\n      a: like area\n      i, l_lower_area: INTEGER\n    do\n      from\n        l_lower_area := area_lower\n        i := start_index_from_end - 1 + l_lower_area\n        a := area\n      until\n        i < l_lower_area or else a.item (i) = c\n      loop\n        i := i - 1\n      end\n        -- We add +1 due to the area starting at 0 and not at 1.\n      Result := i + 1 - l_lower_area\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_pos, end_pos)\n    end\n\n  string: STRING_32\n      -- New STRING_32 having same character sequence as `Current'.\n    do\n      create Result.make_from_string (Current)\n    ensure\n      string_not_void: Result /= Void\n      string_type: Result.same_type (create {STRING_32}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  string_representation: STRING_32\n      -- Similar to `string' but only create a new object if `Current' is not of dynamic type {STRING_32}\n    do\n      if same_type (create {STRING_32}.make_empty) and then attached {STRING_32} Current as l_s32 then\n        Result := l_s32\n      else\n        Result := string\n      end\n    ensure\n      Result_not_void: Result /= Void\n      correct_type: Result.same_type (create {STRING_32}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_index, count)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.fuzzy_index (Current, other, start, count, fuzz)\n    end\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Allocated space\n    do\n      Result := area.count - 1\n    end\n\n  count: INTEGER\n      -- Actual number of characters making up the string\n\n  occurrences (c: CHARACTER_32): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n      a: SPECIAL [CHARACTER_32]\n    do\n      from\n        i := area_lower\n        nb := count + i\n        a := area\n      until\n        i = nb\n      loop\n        if a.item (i) = c then\n          Result := Result + 1\n        end\n        i := i + 1\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (1, count)\n    ensure then\n      index_set_not_void: Result /= Void\n      index_set_count: Result.count = count\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is string made of same character sequence as `other'\n      -- (possibly with a different capacity)?\n    local\n        nb: INTEGER\n      l_hash, l_other_hash: like internal_hash_code\n      do\n        if other = Current then\n          Result := True\n        else\n          nb := count\n          if nb = other.count then\n            -- Let's compare the content if and only if the hash_code are the same or not yet computed.\n          l_hash := internal_hash_code\n          l_other_hash := other.internal_hash_code\n          if l_hash = 0 or else l_other_hash = 0 or else l_hash = l_other_hash then\n            Result := area.same_items (other.area, other.area_lower, area_lower, nb)\n          end\n          end\n        end\n\n    end\n\n  is_case_insensitive_equal (other: READABLE_STRING_32): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_prop: like character_properties\n      l_area, l_other_area: like area\n      c1,c2: CHARACTER_32\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_prop := character_properties\n          l_area := area\n          l_other_area := other.area\n          Result := True\n          i := area_lower + index_pos - 1\n          j := other.area_lower + start_pos - 1\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := l_area.item (i)\n          c2 := l_other_area.item (j)\n          if c1 /= c2 and then l_prop.to_lower (c1) /= l_prop.to_lower (c2) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  same_string (other: READABLE_STRING_32): BOOLEAN\n      -- Do `Current' and `other' have same character sequence?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      definition: Result = (string ~ other.string)\n    end\n\n  same_characters (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        Result := area.same_items (other.area, other.area_lower + start_pos - 1, area_lower + index_pos - 1, nb)\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is string lexicographically lower than `other'?\n    local\n      other_count: INTEGER\n      current_count: INTEGER\n    do\n      if other /= Current then\n        other_count := other.count\n        current_count := count\n        if other_count = current_count then\n          Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n        else\n          if current_count < other_count then\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, current_count) >= 0\n          else\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n          end\n        end\n      end\n    end\n\nfeature -- Status report\n\n  is_string_8: BOOLEAN = False\n      -- <Precursor>\n\n  is_string_32: BOOLEAN = True\n      -- <Precursor>\n\n  is_valid_as_string_8: BOOLEAN\n      -- <Precursor>\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      from\n        Result := True\n        i := area_lower\n        nb := count + i\n        l_area := area\n      until\n        i = nb or not Result\n      loop\n        Result := l_area.item (i).code <= {CHARACTER_8}.max_value\n        i := i + 1\n      end\n    end\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- <Precursor>\n    local\n      i, n: INTEGER\n      l_prop: like character_properties\n      l_area: like area\n    do\n      from\n        l_area := area\n        i := area_lower + start_index - 1\n        n := area_lower + end_index - 1\n        l_prop := character_properties\n      until\n        i > n or not l_prop.is_space (l_area.item (i))\n      loop\n        i := i + 1\n      end\n      Result := i > n\n    end\n\n  has (c: CHARACTER_32): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := area_lower\n          l_area := area\n          nb := nb + i\n        until\n          i = nb or else (l_area.item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i < nb)\n      end\n    end\n\n  starts_with (s: READABLE_STRING_32): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_lower + i\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_32): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_upper + 1\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  valid_code (v: NATURAL_32): BOOLEAN\n      -- Is `v' a valid code for a CHARACTER_32?\n    do\n      Result := True\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    local\n      nb: INTEGER\n    do\n      nb := count\n      if nb = 4 then\n          -- Check if this is `true_constant'\n        Result := is_case_insensitive_equal_general (true_constant)\n      elseif nb = 5 then\n          -- Check if this is `false_constant'\n        Result := is_case_insensitive_equal_general (false_constant)\n      end\n    end\n\nfeature {READABLE_STRING_32} -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying the characters of `other'.\n      -- (This is also used by `twin'.)\n    local\n      old_area: like area\n    do\n      if other /= Current then\n        old_area := area\n        standard_copy (other)\n          -- Note: <= is needed as all Eiffel string should have an\n          -- extra character to insert null character at the end.\n        if old_area = Void or else old_area = other.area or else old_area.count <= count then\n            -- Prevent copying of large `area' if only a few characters are actually used.\n          area := area.resized_area (count + 1)\n        else\n          old_area.copy_data (area, 0, 0, count)\n          area := old_area\n        end\n        internal_hash_code := 0\n      end\n    ensure then\n      new_result_count: count = other.count\n      -- same_characters: For every `i' in 1..`count', `item' (`i') = `other'.`item' (`i')\n    end\n\nfeature {NONE} -- Element change\n\n  fill_character (c: CHARACTER_32)\n      -- Fill with `capacity' characters all equal to `c'.\n    local\n      l_cap: like capacity\n    do\n      l_cap := capacity\n      if l_cap /= 0 then\n        area.fill_with (c, 0, l_cap - 1)\n        count := l_cap\n        internal_hash_code := 0\n      end\n    ensure\n      filled: count = capacity\n      same_size: capacity = old capacity\n      -- all_char: For every `i' in 1..`capacity', `item' (`i') = `c'\n    end\n\nfeature -- Conversion\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    deferred\n    ensure\n      same_count: Result.count = count\n      -- reversed: For every `i' in 1..`count', `Result'.`item' (`i') = `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation\n    do\n      create Result.make (count)\n      Result.append (as_string_8)\n    ensure then\n      out_not_void: Result /= Void\n      same_items: same_type (\"\") implies same_string_general (Result)\n    end\n\nfeature {NONE} -- Implementation\n\n  string_searcher: STRING_32_SEARCHER\n      -- String searcher specialized for READABLE_STRING_32 instances\n    once\n      create Result.make\n    end\n\nfeature {NONE} -- Implementation\n\n  str_strict_cmp (this, other: like area; this_index, other_index, n: INTEGER): INTEGER\n      -- Compare `n' characters from `this' starting at `this_index' with\n      -- `n' characters from and `other' starting at `other_index'.\n      -- 0 if equal, < 0 if `this' < `other',\n      -- > 0 if `this' > `other'\n    require\n      this_not_void: this /= Void\n      other_not_void: other /= Void\n      n_non_negative: n >= 0\n      n_valid: n <= (this.upper - this_index + 1) and n <= (other.upper - other_index + 1)\n    local\n      i, j, nb, l_current_code, l_other_code: INTEGER\n    do\n      from\n        i := this_index\n        nb := i + n\n        j := other_index\n      until\n        i = nb\n      loop\n        l_current_code := this.item (i).code\n        l_other_code := other.item (j).code\n        if l_current_code /= l_other_code then\n          Result := l_current_code - l_other_code\n          i := nb - 1 -- Jump out of loop\n        end\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  to_lower_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their lower version when available.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n      c1, c2: CHARACTER_32\n      l_prop: like character_properties\n    do\n      from\n        i := start_index\n        l_prop := character_properties\n      until\n        i > end_index\n      loop\n        c1 := a.item (i)\n        c2 := l_prop.to_lower (c1)\n          -- Let's avoid a write access if not needed.\n        if c1 /= c2 then\n          a.put (c2, i)\n        end\n        i := i + 1\n      end\n    end\n\n  to_upper_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their upper version when available.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n      c1, c2: CHARACTER_32\n      l_prop: like character_properties\n    do\n      from\n        i := start_index\n        l_prop := character_properties\n      until\n        i > end_index\n      loop\n        c1 := a.item (i)\n        c2 := l_prop.to_upper (c1)\n          -- Let's avoid a write access if not needed.\n        if c1 /= c2 then\n          a.put (c2, i)\n        end\n        i := i + 1\n      end\n    end\n\n  mirror_area (a: like area; start_index, end_index: INTEGER)\n      -- Mirror all characters in `a' between `start_index' and `end_index'.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      c: CHARACTER_32\n      i, j: INTEGER\n    do\n      from\n        i := end_index\n      until\n        i <= j\n      loop\n        c := a.item (i)\n        a.put (a.item (j), i)\n        a.put (c, j)\n        i := i - 1\n        j := j + 1\n      end\n    end\n\nfeature\n  {READABLE_STRING_8, READABLE_STRING_32,\n  STRING_8_SEARCHER, STRING_32_SEARCHER,\n  HEXADECIMAL_STRING_TO_INTEGER_CONVERTER,\n  STRING_TO_INTEGER_CONVERTOR,\n  STRING_TO_REAL_CONVERTOR} -- Implementation\n\n  area: SPECIAL [CHARACTER_32]\n      -- Storage for characters\n\n  area_lower: INTEGER\n      -- Minimum index\n    do\n    ensure\n      area_lower_non_negative: Result >= 0\n      area_lower_valid: Result <= area.upper\n    end\n\n  area_upper: INTEGER\n      -- Maximum index\n    do\n      Result := area_lower + count - 1\n    ensure\n      area_upper_valid: Result <= area.upper\n      area_upper_in_bound: area_lower <= Result + 1\n    end\n\ninvariant\n  area_not_void: area /= Void\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_string_8.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-05-14 22:22:02 -0700 (Wed, 14 May 2014) $\"\n  revision: \"$Revision: 95061 $\"\n\ndeferred class\n  READABLE_STRING_8\n\ninherit\n  READABLE_STRING_GENERAL\n    rename\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general,\n      item as character_32_item,\n      has as character_32_has,\n      index_of as character_32_index_of,\n      last_index_of as character_32_last_index_of,\n      occurrences as character_32_occurrences\n    redefine\n      copy, is_equal, out\n    end\n\n  READABLE_INDEXABLE [CHARACTER_8]\n    redefine\n      copy, is_equal, out\n    end\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  as_string_8: {STRING_8},\n  as_readable_string_32: {READABLE_STRING_32},\n  as_string_32: {STRING_32}\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    do\n      count := 0\n      internal_hash_code := 0\n      create area.make_filled ('%/000/', n + 1)\n    end\n\n  make_filled (c: CHARACTER_8; n: INTEGER)\n      -- Create string of length `n' filled with `c'.\n    require\n      valid_count: n >= 0\n    do\n      make (n)\n      fill_character (c)\n    ensure\n      count_set: count = n\n      area_allocated: capacity >= n\n      filled: occurrences (c) = count\n    end\n\n  make_from_string (s: READABLE_STRING_8)\n      -- Initialize from the characters of `s'.\n    require\n      string_exists: s /= Void\n    do\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n      if Current /= s then\n        create area.make_empty (count + 1)\n        area.copy_data (s.area, s.area_lower, 0, count + 1)\n      end\n    ensure\n      not_shared_implementation: Current /= s implies not shared_with (s)\n      initialized: same_string (s)\n    end\n\n  make_from_c (c_string: POINTER)\n      -- Initialize from contents of `c_string',\n      -- a string created by some C function\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n      l_count := c_string_provider.count\n      create area.make_filled ('%/000/', l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into_character_8_area (area, 1, l_count)\n    end\n\n  make_from_c_pointer (c_string: POINTER)\n      -- Create new instance from contents of `c_string',\n      -- a string created by some C function\n    obsolete\n      \"Use `make_from_c' instead.\"\n    require\n      c_string_exists: c_string /= default_pointer\n    do\n      make_from_c (c_string)\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    deferred\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_8\n      -- Character at position `i'.\n    deferred\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'.\n    obsolete\n      \"For consistency with Unicode string handling, use `code (i)' instead.\"\n    require\n      index_small_enough: i <= count\n      index_large_enough: i > 0\n    deferred\n    end\n\n  shared_with (other: READABLE_STRING_8): BOOLEAN\n      -- Does string share the text of `other'?\n    do\n      Result := (other /= Void) and then (area = other.area)\n    end\n\n  index_of (c: CHARACTER_8; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      a: like area\n      i, nb, l_lower_area: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          l_lower_area := area_lower\n          i := start_index - 1 + l_lower_area\n          nb := nb + l_lower_area\n          a := area\n        until\n          i = nb or else a.item (i) = c\n        loop\n          i := i + 1\n        end\n        if i < nb then\n            -- We add +1 due to the area starting at 0 and not at 1\n            -- and substract `area_lower'\n          Result := i + 1 - l_lower_area\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has (c)\n      found_if_present: substring (start_index, count).has (c) implies item (Result) = c\n      none_before: substring (start_index, count).has (c) implies\n        not substring (start_index, Result - 1).has (c)\n    end\n\n  last_index_of (c: CHARACTER_8; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c',\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    local\n      a: like area\n      i, l_lower_area: INTEGER\n    do\n      from\n        l_lower_area := area_lower\n        i := start_index_from_end - 1 + l_lower_area\n        a := area\n      until\n        i < l_lower_area or else a.item (i) = c\n      loop\n        i := i - 1\n      end\n        -- We add +1 due to the area starting at 0 and not at 1.\n      Result := i + 1 - l_lower_area\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has (c)\n      found_if_present: substring (1, start_index_from_end).has (c) implies item (Result) = c\n      none_after: substring (1, start_index_from_end).has (c) implies\n        not substring (Result + 1, start_index_from_end).has (c)\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_pos, end_pos)\n    end\n\n  string: STRING_8\n      -- New STRING_8 having same character sequence as `Current'.\n    do\n      create Result.make_from_string (Current)\n    ensure\n      string_not_void: Result /= Void\n      string_type: Result.same_type (create {STRING_8}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  string_representation: STRING_8\n      -- Similar to `string' but only create a new object if `Current' is not of dynamic type {STRING_8}\n    do\n      if same_type (create {STRING_8}.make_empty) and then attached {STRING_8} Current as l_s8 then\n        Result := l_s8\n      else\n        Result := string\n      end\n    ensure\n      Result_not_void: Result /= Void\n      correct_type: Result.same_type (create {STRING_8}.make_empty)\n      first_item: count > 0 implies Result.item (1) = item (1)\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).string\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.substring_index (Current, other, start_index, count)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- <Precursor>\n    do\n      Result := string_searcher.fuzzy_index (Current, other, start, count, fuzz)\n    end\n\nfeature -- Measurement\n\n  capacity: INTEGER\n      -- Allocated space\n    do\n      Result := area.count - 1\n    end\n\n  count: INTEGER\n      -- Actual number of characters making up the string\n\n  occurrences (c: CHARACTER_8): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n      a: SPECIAL [CHARACTER_8]\n    do\n      from\n        i := area_lower\n        nb := count + i\n        a := area\n      until\n        i = nb\n      loop\n        if a.item (i) = c then\n          Result := Result + 1\n        end\n        i := i + 1\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (1, count)\n    ensure then\n      index_set_not_void: Result /= Void\n      index_set_count: Result.count = count\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is string made of same character sequence as `other'\n      -- (possibly with a different capacity)?\n    local\n      nb: INTEGER\n      l_hash, l_other_hash: like internal_hash_code\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n            -- Let's compare the content if and only if the hash_code are the same or not yet computed.\n          l_hash := internal_hash_code\n          l_other_hash := other.internal_hash_code\n          if l_hash = 0 or else l_other_hash = 0 or else l_hash = l_other_hash then\n            Result := area.same_items (other.area, other.area_lower, area_lower, nb)\n          end\n        end\n      end\n    end\n\n  is_case_insensitive_equal (other: READABLE_STRING_8): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_area, l_other_area: like area\n      c1,c2: CHARACTER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_area := area\n          l_other_area := other.area\n          Result := True\n          i := area_lower + index_pos - 1\n          j := other.area_lower + start_pos - 1\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := l_area.item (i)\n          c2 := l_other_area.item (j)\n          if c1 /= c2 and then c1.as_lower /= c2.as_lower then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: l_area.upper - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  same_string (other: READABLE_STRING_8): BOOLEAN\n      -- Do `Current' and `other' have same character sequence?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      definition: Result = (string ~ other.string)\n    end\n\n  same_characters (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        Result := area.same_items (other.area, other.area_lower + start_pos - 1, area_lower + index_pos - 1, nb)\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is string lexicographically lower than `other'?\n    local\n      other_count: INTEGER\n      current_count: INTEGER\n    do\n      if other /= Current then\n        other_count := other.count\n        current_count := count\n        if other_count = current_count then\n          Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n        else\n          if current_count < other_count then\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, current_count) >= 0\n          else\n            Result := str_strict_cmp (other.area, area, other.area_lower, area_lower, other_count) > 0\n          end\n        end\n      end\n    end\n\nfeature -- Status report\n\n  is_string_8: BOOLEAN = True\n      -- <Precursor>\n\n  is_string_32: BOOLEAN = False\n      -- <Precursor>\n\n  is_valid_as_string_8: BOOLEAN = True\n      -- <Precursor>\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- <Precursor>\n    local\n      i, n: INTEGER\n      l_area: like area\n    do\n      from\n        l_area := area\n        i := area_lower + start_index - 1\n        n := area_lower + end_index - 1\n      until\n        i > n or not l_area.item (i).is_space\n      loop\n        i := i + 1\n      end\n      Result := i > n\n    end\n\n  has (c: CHARACTER_8): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := area_lower\n          l_area := area\n          nb := nb + i\n        until\n          i = nb or else (l_area.item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i < nb)\n      end\n    ensure\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then item (1) = c implies Result\n      recurse: (count > 0 and then item (1) /= c) implies\n        (Result = substring (2, count).has (c))\n    end\n\n  starts_with (s: READABLE_STRING_8): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_lower + i\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_8): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j, nb: INTEGER\n      l_area, l_s_area: like area\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            l_area := area\n            l_s_area := s.area\n            j := area_upper + 1\n            i := s.area_upper + 1\n            nb := s.area_lower\n            Result := True\n          until\n            i = nb\n          loop\n            i := i - 1\n            j := j - 1\n            if l_area.item (j) /= l_s_area.item (i) then\n              Result := False\n              i := nb -- Jump out of loop\n            end\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  valid_code (v: NATURAL_32): BOOLEAN\n      -- Is `v' a valid code for a CHARACTER_32?\n    do\n      Result := v <= {CHARACTER_8}.max_value.to_natural_32\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    local\n      nb: INTEGER\n      l_area: like area\n      i: INTEGER\n    do\n      nb := count\n      if nb = 4 then\n          -- Check if this is `true_constant'\n        l_area := area\n        i := area_lower\n        Result := l_area.item (i).lower = 't' and then\n          l_area.item (i + 1).lower = 'r' and then\n          l_area.item (i + 2).lower = 'u' and then\n          l_area.item (i + 3).lower = 'e'\n      elseif nb = 5 then\n          -- Check if this is `false_constant'\n        l_area := area\n        i := area_lower\n        Result := l_area.item (i).lower = 'f' and then\n          l_area.item (i + 1).lower = 'a' and then\n          l_area.item (i + 2).lower = 'l' and then\n          l_area.item (i + 3).lower = 's' and then\n          l_area.item (i + 4).lower = 'e'\n      end\n    end\n\nfeature {READABLE_STRING_8} -- Duplication\n\n  copy (other: like Current)\n      -- Reinitialize by copying the characters of `other'.\n      -- (This is also used by `twin'.)\n    local\n      old_area: like area\n    do\n      if other /= Current then\n        old_area := area\n        standard_copy (other)\n          -- Note: <= is needed as all Eiffel string should have an\n          -- extra character to insert null character at the end.\n        if old_area = Void or else old_area = other.area or else old_area.count <= count then\n            -- Prevent copying of large `area' if only a few characters are actually used.\n          area := area.resized_area (count + 1)\n        else\n          old_area.copy_data (area, 0, 0, count)\n          area := old_area\n        end\n        internal_hash_code := 0\n      end\n    ensure then\n      new_result_count: count = other.count\n      -- same_characters: For every `i' in 1..`count', `item' (`i') = `other'.`item' (`i')\n    end\n\nfeature {NONE} -- Element change\n\n  fill_character (c: CHARACTER_8)\n      -- Fill with `capacity' characters all equal to `c'.\n    local\n      l_cap: like capacity\n    do\n      l_cap := capacity\n      if l_cap /= 0 then\n        area.fill_with (c, 0, l_cap - 1)\n        count := l_cap\n        internal_hash_code := 0\n      end\n    ensure\n      filled: count = capacity\n      same_size: capacity = old capacity\n      -- all_char: For every `i' in 1..`capacity', `item' (`i') = `c'\n    end\n\nfeature -- Conversion\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    deferred\n    ensure\n      same_count: Result.count = count\n      -- reversed: For every `i' in 1..`count', `Result'.`item' (`i') = `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation\n    do\n      create Result.make (count)\n      Result.append (Current)\n    ensure then\n      out_not_void: Result /= Void\n      same_items: same_type (\"\") implies Result.same_string (Current)\n    end\n\nfeature {NONE} -- Implementation\n\n  string_searcher: STRING_8_SEARCHER\n      -- String searcher specialized for READABLE_STRING_8 instances\n    once\n      create Result.make\n    end\n\n  str_strict_cmp (this, other: like area; this_index, other_index, n: INTEGER): INTEGER\n      -- Compare `n' characters from `this' starting at `this_index' with\n      -- `n' characters from and `other' starting at `other_index'.\n      -- 0 if equal, < 0 if `this' < `other',\n      -- > 0 if `this' > `other'\n    require\n      this_not_void: this /= Void\n      other_not_void: other /= Void\n      n_non_negative: n >= 0\n      n_valid: n <= (this.upper - this_index + 1) and n <= (other.upper - other_index + 1)\n    local\n      i, j, nb, l_current_code, l_other_code: INTEGER\n    do\n      from\n        i := this_index\n        nb := i + n\n        j := other_index\n      until\n        i = nb\n      loop\n        l_current_code := this.item (i).code\n        l_other_code := other.item (j).code\n        if l_current_code /= l_other_code then\n          Result := l_current_code - l_other_code\n          i := nb - 1 -- Jump out of loop\n        end\n        i := i + 1\n        j := j + 1\n      end\n    end\n\n  to_lower_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their lower version.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n    do\n      from\n        i := start_index\n      until\n        i > end_index\n      loop\n        a.put (a.item (i).lower, i)\n        i := i + 1\n      end\n    end\n\n  to_upper_area (a: like area; start_index, end_index: INTEGER)\n      -- Replace all characters in `a' between `start_index' and `end_index'\n      -- with their upper version.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      i: INTEGER\n    do\n      from\n        i := start_index\n      until\n        i > end_index\n      loop\n        a.put (a.item (i).upper, i)\n        i := i + 1\n      end\n    end\n\n  mirror_area (a: like area; start_index, end_index: INTEGER)\n      -- Mirror all characters in `a' between `start_index' and `end_index'.\n    require\n      a_not_void: a /= Void\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < a.count\n    local\n      c: CHARACTER_8\n      i, j: INTEGER\n    do\n      from\n        i := end_index\n      until\n        i <= j\n      loop\n        c := a.item (i)\n        a.put (a.item (j), i)\n        a.put (c, j)\n        i := i - 1\n        j := j + 1\n      end\n    end\n\nfeature\n  {READABLE_STRING_8, READABLE_STRING_32,\n  STRING_8_SEARCHER, STRING_32_SEARCHER,\n  HEXADECIMAL_STRING_TO_INTEGER_CONVERTER,\n  STRING_TO_INTEGER_CONVERTOR,\n  STRING_TO_REAL_CONVERTOR} -- Implementation\n\n  area: SPECIAL [CHARACTER_8]\n      -- Storage for characters\n\n  area_lower: INTEGER\n      -- Minimum index\n    do\n    ensure\n      area_lower_non_negative: Result >= 0\n      area_lower_valid: Result <= area.upper\n    end\n\n  area_upper: INTEGER\n      -- Maximum index\n    do\n      Result := area_lower + count - 1\n    ensure\n      area_upper_valid: Result <= area.upper\n      area_upper_in_bound: area_lower <= Result + 1\n    end\n\ninvariant\n  area_not_void: area /= Void\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"readable_string_general.e","content":"note\n  description: \"Common ancestors to all STRING classes. Read-only interface.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-19 06:27:01 -0700 (Wed, 19 Mar 2014) $\"\n  revision: \"$Revision: 94630 $\"\n\ndeferred class\n  READABLE_STRING_GENERAL\n\ninherit\n  COMPARABLE\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    end\n\n  HASHABLE\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    undefine\n      is_equal\n    end\n\n  STRING_HANDLER\n    export\n      {READABLE_STRING_GENERAL} copy, standard_copy, deep_copy\n    undefine\n      is_equal\n    end\n\nfeature {NONE} -- Initialization\n\n  make (n: INTEGER)\n    require\n      non_negative_size: n >= 0\n    deferred\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\n  make_empty\n      -- Create empty string.\n    do\n      make (0)\n    ensure\n      empty: count = 0\n      area_allocated: capacity >= 0\n    end\n\nfeature -- Access\n\n  code (i: INTEGER): NATURAL_32\n      -- Code at position `i'\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  item alias \"[]\" (i: INTEGER): CHARACTER_32\n      -- Character at position `i'.\n    require\n      valid_index: valid_index (i)\n    deferred\n    end\n\n  index_of (c: like item; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          i := start_index\n        until\n          i > nb or else item (i) = c\n        loop\n          i := i + 1\n        end\n        if i <= nb then\n          Result := i\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has (c)\n      found_if_present: substring (start_index, count).has (c) implies item (Result) = c\n      none_before: substring (start_index, count).has (c) implies\n        not substring (start_index, Result - 1).has (c)\n    end\n\n  last_index_of (c: like item; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c'.\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    do\n      from\n        Result := start_index_from_end\n      until\n        Result <= 0 or else item (Result) = c\n      loop\n        Result := Result - 1\n      end\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has (c)\n      found_if_present: substring (1, start_index_from_end).has (c) implies item (Result) = c\n      none_after: substring (1, start_index_from_end).has (c) implies\n        not substring (Result + 1, start_index_from_end).has (c)\n    end\n\n  index_of_code (c: like code; start_index: INTEGER): INTEGER\n      -- Position of first occurrence of `c' at or after `start_index';\n      -- 0 if none.\n    require\n      start_large_enough: start_index >= 1\n      start_small_enough: start_index <= count + 1\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if start_index <= nb then\n        from\n          i := start_index\n        until\n          i > nb or else code (i) = c\n        loop\n          i := i + 1\n        end\n        if i <= nb then\n          Result := i\n        end\n      end\n    ensure\n      valid_result: Result = 0 or (start_index <= Result and Result <= count)\n      zero_if_absent: (Result = 0) = not substring (start_index, count).has_code (c)\n      found_if_present: substring (start_index, count).has_code (c) implies code (Result) = c\n      none_before: substring (start_index, count).has_code (c) implies\n        not substring (start_index, Result - 1).has_code (c)\n    end\n\n  last_index_of_code (c: like code; start_index_from_end: INTEGER): INTEGER\n      -- Position of last occurrence of `c'.\n      -- 0 if none.\n    require\n      start_index_small_enough: start_index_from_end <= count\n      start_index_large_enough: start_index_from_end >= 1\n    do\n      from\n        Result := start_index_from_end\n      until\n        Result <= 0 or else code (Result) = c\n      loop\n        Result := Result - 1\n      end\n    ensure\n      valid_result: 0 <= Result and Result <= start_index_from_end\n      zero_if_absent: (Result = 0) = not substring (1, start_index_from_end).has_code (c)\n      found_if_present: substring (1, start_index_from_end).has_code (c) implies code (Result) = c\n      none_after: substring (1, start_index_from_end).has_code (c) implies\n        not substring (Result + 1, start_index_from_end).has_code (c)\n    end\n\n  false_constant: STRING_8 = \"false\"\n      -- Constant string \"false\"\n\n  true_constant: STRING_8 = \"true\"\n      -- Constant string \"true\"\n\n  hash_code: INTEGER\n      -- Hash code value\n    local\n      i, nb: INTEGER\n    do\n      Result := internal_hash_code\n      if Result = 0 then\n          -- The magic number `8388593' below is the greatest prime lower than\n          -- 2^23 so that this magic number shifted to the left does not exceed 2^31.\n        from\n          i := 1\n          nb := count\n        until\n          i > nb\n        loop\n          Result := ((Result \\\\ 8388593) |<< 8) + item (i).code\n          i := i + 1\n        end\n        internal_hash_code := Result\n      end\n    end\n\n  case_insensitive_hash_code: INTEGER\n      -- Hash code value of the lower case version of `Current'.\n    local\n      l_props: like character_properties\n      i, nb: INTEGER\n    do\n      Result := internal_case_insensitive_hash_code\n      if Result = 0 then\n          -- The magic number `8388593' below is the greatest prime lower than\n          -- 2^23 so that this magic number shifted to the left does not exceed 2^31.\n        from\n          i := 1\n          nb := count\n          l_props := character_properties\n        until\n          i > nb\n        loop\n          Result := ((Result \\\\ 8388593) |<< 8) + l_props.to_lower (item (i)).code\n          i := i + 1\n        end\n        internal_case_insensitive_hash_code := Result\n      end\n    ensure\n      consistent: Result = as_lower.hash_code\n    end\n\nfeature -- Status report\n\n  is_immutable: BOOLEAN\n      -- Can the character sequence of `Current' be not changed?\n    do\n      Result := False\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of the string?\n    do\n      Result := (i > 0) and (i <= count)\n    ensure\n      definition: Result = (1 <= i and i <= count)\n    end\n\n  valid_code (v: like code): BOOLEAN\n      -- Is `v' a valid code for Current?\n    deferred\n    end\n\n  is_string_8: BOOLEAN\n      -- Is `Current' a sequence of CHARACTER_8?\n    deferred\n    end\n\n  is_string_32: BOOLEAN\n      -- Is `Current' a sequence of CHARACTER_32?\n    deferred\n    end\n\n  is_valid_as_string_8: BOOLEAN\n      -- Is `Current' convertible to a sequence of CHARACTER_8 without information loss?\n    deferred\n    end\n\n  is_empty: BOOLEAN\n      -- Is structure empty?\n    deferred\n    end\n\n  is_whitespace: BOOLEAN\n      -- Is structure containing only whitespace characters?\n    do\n      Result := is_substring_whitespace (1, count)\n    end\n\n  is_substring_whitespace (start_index, end_index: INTEGER): BOOLEAN\n      -- Is substring between `start_index' and `end_index' containing only whitespace characters?\n    require\n      start_index_big_enough: 1 <= start_index\n      end_index_small_enough: end_index <= count\n      consistent_indexes: start_index - 1 <= end_index\n    deferred\n    end\n\n  has (c: like item): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb or else (item (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i <= nb)\n      end\n    ensure then\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then item (1) = c implies Result\n      recurse: (count > 0 and then item (1) /= c) implies\n        (Result = substring (2, count).has (c))\n    end\n\n  has_code (c: like code): BOOLEAN\n      -- Does string include `c'?\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb or else (code (i) = c)\n        loop\n          i := i + 1\n        end\n        Result := (i <= nb)\n      end\n    ensure then\n      false_if_empty: count = 0 implies not Result\n      true_if_first: count > 0 and then code (1) = c implies Result\n      recurse: (count > 0 and then code (1) /= c) implies\n        (Result = substring (2, count).has_code (c))\n    end\n\n  is_number_sequence: BOOLEAN\n      -- Does `Current' represent a number sequence?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_no_limitation)\n    ensure\n      syntax_and_range:\n        -- Result is true if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- In the following BNF grammar, the value of\n        --  Current can be produced by \"Integer_literal\":\n        --\n        -- Integer_literal = [Space] [Sign] Integer [Space]\n        -- Space  = \" \" | \" \" Space\n        -- Sign   = \"+\" | \"-\"\n        -- Integer  = Digit | Digit Integer\n        -- Digit  = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n    end\n\n  is_real_sequence: BOOLEAN\n      -- Does `Current' represent a real sequence?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.is_integral_double\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following condition is satisfied:\n        --\n        -- In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n    end\n\n  is_real, is_real_32: BOOLEAN\n      -- Does `Current' represent a REAL_32?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_real)\n      Result := l_convertor.is_integral_real\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- 1. In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n        -- 2. The numerical value represented by 'Current'\n        --  is within the range that can be represented\n        --  by an instance of type REAL.\n    end\n\n  is_double, is_real_64: BOOLEAN\n      -- Does `Current' represent a REAL_64?\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_double)\n      Result := l_convertor.is_integral_double\n    ensure\n      syntax_and_range:\n        -- 'Result' is True if and only if the following two\n        -- conditions are satisfied:\n        --\n        -- 1. In the following BNF grammar, the value of\n        --  'Current' can be produced by \"Real_literal\":\n        --\n        -- Real_literal = Mantissa [Exponent_part]\n        -- Exponent_part = \"E\" Exponent\n        --         | \"e\" Exponent\n        -- Exponent   = Integer_literal\n        -- Mantissa   = Decimal_literal\n        -- Decimal_literal = Integer_literal [\".\" [Integer]] | \".\" Integer\n        -- Integer_literal = [Sign] Integer\n        -- Sign     = \"+\" | \"-\"\n        -- Integer    = Digit | Digit Integer\n        -- Digit    = \"0\"|\"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n        --\n        -- 2. The numerical value represented by 'Current'\n        --  is within the range that can be represented\n        --  by an instance of type DOUBLE.\n    end\n\n  is_boolean: BOOLEAN\n      -- Does `Current' represent a BOOLEAN?\n    deferred\n    ensure\n      is_boolean: Result = (true_constant.same_string_general (as_lower) or\n        false_constant.same_string_general (as_lower))\n    end\n\n  is_integer_8: BOOLEAN\n      -- Does `Current' represent an INTEGER_8?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_8)\n    end\n\n  is_integer_16: BOOLEAN\n      -- Does `Current' represent an INTEGER_16?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_16)\n    end\n\n  is_integer, is_integer_32: BOOLEAN\n      -- Does `Current' represent an INTEGER_32?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_32)\n    end\n\n  is_integer_64: BOOLEAN\n      -- Does `Current' represent an INTEGER_64?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_integer_64)\n    end\n\n  is_natural_8: BOOLEAN\n      -- Does `Current' represent a NATURAL_8?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_8)\n    end\n\n  is_natural_16: BOOLEAN\n      -- Does `Current' represent a NATURAL_16?\n\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_16)\n    end\n\n  is_natural, is_natural_32: BOOLEAN\n      -- Does `Current' represent a NATURAL_32?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_32)\n    end\n\n  is_natural_64: BOOLEAN\n      -- Does `Current' represent a NATURAL_64?\n    do\n      Result := is_valid_integer_or_natural ({NUMERIC_INFORMATION}.type_natural_64)\n    end\n\nfeature -- Measurement\n\n  count: INTEGER\n      -- Number of characters in Current\n    deferred\n    ensure\n      count_non_negative: Result >= 0\n    end\n\n  capacity: INTEGER\n      -- Number of characters allocated in Current\n    deferred\n    ensure\n      capacity_non_negative: Result >= 0\n    end\n\n  occurrences (c: CHARACTER_32): INTEGER\n      -- Number of times `c' appears in the string\n    local\n      i, nb: INTEGER\n    do\n      nb := count\n      if nb > 0 then\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          if item (i) = c then\n            Result := Result + 1\n          end\n          i := i + 1\n        end\n      end\n    ensure then\n      zero_if_empty: count = 0 implies Result = 0\n      recurse_if_not_found_at_first_position:\n        (count > 0 and then item (1) /= c) implies\n          Result = substring (2, count).occurrences (c)\n      recurse_if_found_at_first_position:\n        (count > 0 and then item (1) = c) implies\n          Result = 1 + substring (2, count).occurrences (c)\n    end\n\nfeature -- Comparison\n\n  is_case_insensitive_equal (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Is string made of same character sequence as `other' regardless of casing\n      -- (possibly with a different capacity)?\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_caseless_characters (other, 1, nb, 1)\n        end\n      end\n    ensure\n      symmetric: Result implies other.is_case_insensitive_equal (Current)\n      consistent: attached {like Current} other as l_other implies (standard_is_equal (l_other) implies Result)\n      valid_result: as_lower ~ other.as_lower implies Result\n    end\n\n  same_caseless_characters (other: READABLE_STRING_GENERAL; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- caseless identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n      l_prop: like character_properties\n      c1,c2: like item\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          l_prop := character_properties\n          Result := True\n          i := index_pos\n          j := start_pos\n          nb := nb + i\n        until\n          i = nb\n        loop\n          c1 := item (i)\n          c2 := other.item (j)\n          if c1 /= c2 and then l_prop.to_lower (c1) /= l_prop.to_lower (c2) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).is_case_insensitive_equal (other.substring (start_pos, end_pos))\n    end\n\n  has_substring (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does `Current' contain `other'?\n    require\n      other_not_void: other /= Void\n    do\n      if other = Current then\n        Result := True\n      elseif other.count <= count then\n        Result := substring_index (other, 1) > 0\n      end\n    ensure\n      false_if_too_small: count < other.count implies not Result\n      true_if_initial: (count >= other.count and then\n        other.same_string (substring (1, other.count))) implies Result\n      recurse: (count >= other.count and then\n        not other.same_string (substring (1, other.count))) implies\n        (Result = substring (2, count).has_substring (other))\n    end\n\n  same_string (other: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does `other' represent the same string as `Current'?\n    require\n      other_not_void: other /= Void\n    local\n      nb: INTEGER\n    do\n      if other = Current then\n        Result := True\n      else\n        nb := count\n        if nb = other.count then\n          Result := nb = 0 or else same_characters (other, 1, nb, 1)\n        end\n      end\n    end\n\n  same_characters (other: READABLE_STRING_GENERAL; start_pos, end_pos, index_pos: INTEGER): BOOLEAN\n      -- Are characters of `other' within bounds `start_pos' and `end_pos'\n      -- identical to characters of current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n    local\n      i, j, nb: INTEGER\n    do\n      nb := end_pos - start_pos + 1\n      if nb <= count - index_pos + 1 then\n        from\n          Result := True\n          i := index_pos\n          j := start_pos\n          nb := nb + i\n        until\n          i = nb\n        loop\n          if item (i) /= other.item (j) then\n            Result := False\n            i := nb - 1 -- Jump out of the loop\n          end\n          i := i + 1\n          j := j + 1\n        variant\n          increasing_index: nb - i + 1\n        end\n      end\n    ensure\n      same_characters: Result = substring (index_pos, index_pos + end_pos - start_pos).same_string (other.substring (start_pos, end_pos))\n    end\n\n  starts_with (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does string begin with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i: INTEGER\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        if i <= count then\n          from\n            Result := True\n          until\n            i = 0\n          loop\n            if code (i) /= s.code (i) then\n              Result := False\n              i := 1 -- Jump out of loop\n            end\n            i := i - 1\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (1, s.count))\n    end\n\n  ends_with (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Does string finish with `s'?\n    require\n      argument_not_void: s /= Void\n    local\n      i, j: INTEGER\n    do\n      if Current = s then\n        Result := True\n      else\n        i := s.count\n        j := count\n        if i <= j then\n          from\n            Result := True\n          until\n            i = 0\n          loop\n            if code(j) /= s.code (i) then\n              Result := False\n              i := 1 -- Jump out of loop\n            end\n            i := i - 1\n            j := j - 1\n          end\n        end\n      end\n    ensure\n      definition: Result = s.same_string (substring (count - s.count + 1, count))\n    end\n\n  substring_index_in_bounds (other: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- Position of first occurrence of `other' at or after `start_pos'\n      -- and to or before `end_pos';\n      -- 0 if none.\n    require\n      other_nonvoid: other /= Void\n      other_notempty: not other.is_empty\n      start_pos_large_enough: start_pos >= 1\n      start_pos_small_enough: start_pos <= count\n      end_pos_large_enough: end_pos >= start_pos\n      end_pos_small_enough: end_pos <= count\n    deferred\n    ensure\n      correct_place: Result > 0 implies other.same_string (substring (Result, Result + other.count - 1))\n      -- forall x : start_pos..Result\n      --  not substring (x, x+other.count -1).is_equal (other)\n    end\n\n  substring_index (other: READABLE_STRING_GENERAL; start_index: INTEGER): INTEGER\n      -- Index of first occurrence of other at or after start_index;\n      -- 0 if none\n    require\n      other_not_void: other /= Void\n      valid_start_index: start_index >= 1 and start_index <= count + 1\n    deferred\n    ensure\n      valid_result: Result = 0 or else\n        (start_index <= Result and Result <= count - other.count + 1)\n      zero_if_absent: (Result = 0) =\n        not substring (start_index, count).has_substring (other)\n      at_this_index: Result >= start_index implies\n        other.same_string (substring (Result, Result + other.count - 1))\n      none_before: Result > start_index implies\n        not substring (start_index, Result + other.count - 2).has_substring (other)\n    end\n\n  fuzzy_index (other: READABLE_STRING_GENERAL; start: INTEGER; fuzz: INTEGER): INTEGER\n      -- Position of first occurrence of `other' at or after `start'\n      -- with 0..`fuzz' mismatches between the string and `other'.\n      -- 0 if there are no fuzzy matches\n    require\n      other_exists: other /= Void\n      other_not_empty: not other.is_empty\n      start_large_enough: start >= 1\n      start_small_enough: start <= count\n      acceptable_fuzzy: fuzz <= other.count\n    deferred\n    end\n\nfeature -- Conversion\n\n  frozen to_cil: SYSTEM_STRING\n      -- Create an instance of SYSTEM_STRING using characters\n      -- of Current between indices `1' and `count'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      Result := dotnet_convertor.from_string_to_system_string (Current)\n    ensure\n      to_cil_not_void: Result /= Void\n    end\n\n  to_string_8: STRING_8\n      -- Convert `Current' as a STRING_8.\n    require\n      is_valid_as_string_8: is_valid_as_string_8\n    do\n      Result := as_string_8\n    ensure\n      as_string_8_not_void: Result /= Void\n      identity: (conforms_to (\"\") and Result = Current) or (not conforms_to (\"\") and Result /= Current)\n    end\n\n  as_string_8_conversion: STRING_8\n      -- Equivalent to `as_string_8' with a different name.\n      -- To be used for migrating existing code to Unicode\n      -- when you get a compiler error but cannot or do not have\n      -- the time yet to address the target recipient of the string to be\n      -- a READABLE_STRING_32 or descendants.\n    obsolete\n      \"Update recipient of call to use READABLE_STRING_32 and descendants instead.\"\n    do\n      Result := as_string_8\n    end\n\n  as_readable_string_8: READABLE_STRING_8\n      --\n    obsolete\n      \"Use explicit conversion `to_string_8' instead.\"\n    do\n      Result := as_string_8\n    end\n\n  as_string_8: STRING_8\n      -- Convert `Current' as a STRING_8. If a code of `Current' is\n      -- not a valid code for a STRING_8 it is replaced with the null\n      -- character.\n    local\n      i, nb: INTEGER\n      l_code: like code\n    do\n      if attached {STRING_8} Current as l_result then\n        Result := l_result\n      else\n        nb := count\n        create Result.make (nb)\n        Result.set_count (nb)\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          l_code := code (i)\n          if Result.valid_code (l_code) then\n            Result.put_code (l_code, i)\n          else\n            Result.put_code (0, i)\n          end\n          i := i + 1\n        end\n      end\n    ensure\n      as_string_8_not_void: Result /= Void\n      identity: (conforms_to (\"\") and Result = Current) or (not conforms_to (\"\") and Result /= Current)\n    end\n\n  as_string_32_conversion: STRING_32\n      -- Equivalent to `as_string_32' with a different name.\n      -- To be used for migrating existing code to Unicode\n      -- when you get a compiler error but cannot or do not have\n      -- the time yet to address the source of the string to be\n      -- a READABLE_STRING_32 or descendants.\n    obsolete\n      \"Update target of call to use READABLE_STRING_32 and descendants instead.\"\n    do\n      Result := as_string_32\n    end\n\n  as_readable_string_32: READABLE_STRING_32\n      --\n    obsolete\n      \"Use explicit conversion `to_string_32' instead.\"\n    do\n      Result := as_string_32\n    end\n\n  as_string_32, to_string_32: STRING_32\n      -- Convert `Current' as a STRING_32.\n    local\n      i, nb: INTEGER\n    do\n      if attached {STRING_32} Current as l_result then\n        Result := l_result\n      else\n        nb := count\n        create Result.make (nb)\n        Result.set_count (nb)\n        from\n          i := 1\n        until\n          i > nb\n        loop\n          Result.put_code (code (i), i)\n          i := i + 1\n        end\n      end\n    ensure\n      as_string_32_not_void: Result /= Void\n      identity: (conforms_to (create {STRING_32}.make_empty) and Result = Current) or (not conforms_to (create {STRING_32}.make_empty) and Result /= Current)\n    end\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    deferred\n    ensure\n      as_lower_attached: Result /= Void\n      length: Result.count = count\n      anchor: count > 0 implies Result.item (1) = item (1).as_lower\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).as_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    deferred\n    ensure\n      as_upper_attached: Result /= Void\n      length: Result.count = count\n      anchor: count > 0 implies Result.item (1) = item (1).as_upper\n      recurse: count > 1 implies Result.substring (2, count) ~ substring (2, count).as_upper\n    end\n\n  to_integer_8: INTEGER_8\n      -- 8-bit integer value\n    require\n      is_integer_8: is_integer_8\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_8\n    end\n\n  to_integer_16: INTEGER_16\n      -- 16-bit integer value\n    require\n      is_integer_16: is_integer_16\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_16\n    end\n\n  to_integer, to_integer_32: INTEGER_32\n      -- 32-bit integer value\n    require\n      is_integer: is_integer_32\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer\n    end\n\n  to_integer_64: INTEGER_64\n      -- 64-bit integer value\n    require\n      is_integer_64: is_integer_64\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_integer_64\n    end\n\n  to_natural_8: NATURAL_8\n      -- 8-bit natural value\n    require\n      is_natural_8: is_natural_8\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_8\n    end\n\n  to_natural_16: NATURAL_16\n      -- 16-bit natural value\n    require\n      is_natural_16: is_natural_16\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_16\n    end\n\n  to_natural, to_natural_32: NATURAL_32\n      -- 32-bit natural value\n    require\n      is_natural: is_natural_32\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_32\n    end\n\n  to_natural_64: NATURAL_64\n      -- 64-bit natural value\n    require\n      is_natural_64: is_natural_64\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_64\n    end\n\n  to_real, to_real_32: REAL\n      -- Real value;\n      -- for example, when applied to \"123.0\", will yield 123.0\n    require\n      represents_a_real: is_real\n    do\n      Result := to_double.truncated_to_real\n    end\n\n  to_double, to_real_64: DOUBLE\n      -- \"Double\" value;\n      -- for example, when applied to \"123.0\", will yield 123.0 (double)\n    require\n      represents_a_double: is_double\n    local\n      l_convertor: like ctor_convertor\n    do\n      l_convertor := ctor_convertor\n      l_convertor.parse_string_with_type (Current, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_double\n    end\n\n  to_boolean: BOOLEAN\n      -- Boolean value;\n      -- \"True\" yields `True', \"False\" yields `False'\n      -- (case-insensitive)\n    require\n      is_boolean: is_boolean\n    do\n      check true_constant.count = 4 end\n      if count = 4 then\n        Result := True\n      end\n    ensure\n      to_boolean: (Result = as_lower.same_string (true_constant)) or\n        (not Result = as_lower.same_string (false_constant))\n    end\n\nfeature -- Conversion\n\n  split (a_separator: CHARACTER_32): LIST [like Current]\n      -- Split on `a_separator'.\n    local\n      l_list: ARRAYED_LIST [like Current]\n      part: like Current\n      i, j, c: INTEGER\n    do\n      c := count\n        -- Worse case allocation: every character is a separator\n      create l_list.make (c + 1)\n      if c > 0 then\n        from\n          i := 1\n        until\n          i > c\n        loop\n          j := index_of (a_separator, i)\n          if j = 0 then\n              -- No separator was found, we will\n              -- simply create a list with a copy of\n              -- Current in it.\n            j := c + 1\n          end\n          part := substring (i, j - 1)\n          l_list.extend (part)\n          i := j + 1\n        end\n        if j = c then\n          check\n            last_character_is_a_separator: item (j) = a_separator\n          end\n            -- A separator was found at the end of the string\n          l_list.extend (new_string (0))\n        end\n      else\n          -- Extend empty string, since Current is empty.\n        l_list.extend (new_string (0))\n      end\n      Result := l_list\n      check\n        l_list.count = occurrences (a_separator) + 1\n      end\n    ensure\n      Result /= Void\n    end\n\nfeature -- Element change\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    deferred\n    ensure\n      plus_not_void: Result /= Void\n      new_count: Result.count = count + s.count\n      initial: elks_checking implies Result.substring (1, count) ~ Current\n      final: elks_checking implies Result.substring (count + 1, count + s.count).same_string (s)\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    deferred\n    ensure\n      substring_not_void: Result /= Void\n      substring_count: Result.count = end_index - start_index + 1 or Result.count = 0\n      first_code: Result.count > 0 implies Result.item (1) = item (start_index)\n      recurse: Result.count > 0 implies\n        Result.substring (2, Result.count) ~ substring (start_index + 1, end_index)\n    end\n\n  head (n: INTEGER): like Current\n      -- Prefix, retaining first `n' characters (or as many as available).\n    require\n      non_negative_argument: n >= 0\n    do\n      if n > count then\n        Result := twin\n      else\n        Result := substring (1, n)\n      end\n    ensure\n      same_count: count = old (count)\n      new_count: Result.count = n.min (count)\n    end\n\n  tail (n: INTEGER): like Current\n      -- Suffix, retaining last `n' characters (or as many as available).\n    require\n      non_negative_argument: n >= 0\n    do\n      if n > count then\n        Result := twin\n      else\n        Result := substring (count - n + 1, count)\n      end\n    ensure\n      same_count: count = old (count)\n      new_count: Result.count = n.min (count)\n    end\n\nfeature {NONE} -- Assertion helper\n\n  elks_checking: BOOLEAN = False\n      -- Are ELKS checkings verified? Must be True when changing implementation of STRING_GENERAL or descendant.\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    require\n      n_non_negative: n >= 0\n    deferred\n    ensure\n      new_string_not_void: Result /= Void\n      new_string_empty: Result.is_empty\n      new_string_area_big_enough: Result.capacity >= n\n    end\n\n  is_valid_integer_or_natural (type: INTEGER) : BOOLEAN\n      -- Is `Current' a valid number according to given `type'?\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.reset (type)\n      l_convertor.parse_string_with_type (Current, type)\n      Result := l_convertor.is_integral_integer\n    end\n\n  string_searcher: STRING_SEARCHER\n      -- Facilities to search string in another string.\n    deferred\n    ensure\n      string_searcher_not_void: Result /= Void\n    end\n\n  c_string_provider: C_STRING\n      -- To create Eiffel strings from C string.\n    once\n      create Result.make_empty (0)\n    ensure\n      c_string_provider_not_void: Result /= Void\n    end\n\n  ctoi_convertor: STRING_TO_INTEGER_CONVERTOR\n      -- Convertor used to convert string to integer or natural\n    once\n      create Result.make\n      Result.set_leading_separators (\" \")\n      Result.set_trailing_separators (\" \")\n      Result.set_leading_separators_acceptable (True)\n      Result.set_trailing_separators_acceptable (True)\n    ensure\n      ctoi_convertor_not_void: Result /= Void\n    end\n\n  ctor_convertor: STRING_TO_REAL_CONVERTOR\n      -- Convertor used to convert string to real or double\n    once\n      create Result.make\n      Result.set_leading_separators (\" \")\n      Result.set_trailing_separators (\" \")\n      Result.set_leading_separators_acceptable (True)\n      Result.set_trailing_separators_acceptable (True)\n    ensure\n      ctor_convertor_not_void: Result /= Void\n    end\n\n  dotnet_convertor: SYSTEM_STRING_FACTORY\n      -- Convertor used to convert from and to SYSTEM_STRING.\n    once\n      create Result\n    ensure\n      dotnet_convertor_not_void: Result /= Void\n    end\n\n  character_properties: CHARACTER_PROPERTY\n      -- Access to Unicode character properties\n    once\n      create Result.make\n    end\n\nfeature {READABLE_STRING_GENERAL} -- Implementation\n\n  internal_hash_code: INTEGER\n      -- Cache for `hash_code'.\n\n  internal_case_insensitive_hash_code: INTEGER;\n      -- Cash for `case_insensitive_hash_code'.\n\n\nfeature -- Access: Cursor\n\n  new_character_32_cursor: STRING_ITERATION_CURSOR\n      -- Fresh cursor for this string that iterates over code points (see `code')\n      -- exposed as {CHARACTER_32}.\n    do\n      create Result.make (Current)\n      Result.start\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"real_32.e","content":"note\n  description: \"Real values, single precision\"\n  external_name: \"System.Single\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class REAL_32 inherit\n\n  REAL_32_REF\n    redefine\n      is_less,\n      is_nan,\n      is_negative_infinity,\n      is_positive_infinity,\n      truncated_to_integer,\n      truncated_to_integer_64,\n      to_double,\n      ceiling_real_32,\n      floor_real_32,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      opposite,\n      identity,\n      out\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({REAL_32_REF}),\n  to_double: {REAL_64}\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: REAL_32): BOOLEAN\n      -- Is `other' greater than current real?\n    external\n      \"built_in\"\n    end\n\nfeature -- Status Report\n\n  is_nan: BOOLEAN\n      -- Is current the representation of `nan'?\n    external\n      \"built_in\"\n    end\n\n  is_negative_infinity: BOOLEAN\n      -- Is current the representation of `negative_infinity'?\n    external\n      \"built_in\"\n    end\n\n  is_positive_infinity: BOOLEAN\n      -- Is current the representation of `positive_infinity'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  truncated_to_integer: INTEGER_32\n      -- Integer part (same sign, largest absolute\n      -- value no greater than current object's)\n    external\n      \"built_in\"\n    end\n\n  truncated_to_integer_64: INTEGER_64\n      -- Integer part (same sign, largest absolute\n      -- value no greater than current object's)\n    external\n      \"built_in\"\n    end\n\n  to_double: REAL_64\n      -- Current seen as a double\n    external\n      \"built_in\"\n    end\n\n  ceiling_real_32: REAL_32\n      -- Smallest integral value no smaller than current object\n    external\n      \"built_in\"\n    end\n\n  floor_real_32: REAL_32\n      -- Greatest integral value no greater than current object\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: REAL_32): REAL_32\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: REAL_32): REAL_32\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: REAL_32): REAL_32\n      -- Product by `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: REAL_32): REAL_32\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Current real to the power `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": REAL_32\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": REAL_32\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of real value\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"real_32_ref.e","content":"note\n  description: \"References to objects containing a real value\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-12-30 16:54:49 -0800 (Mon, 30 Dec 2013) $\"\n  revision: \"$Revision: 93855 $\"\n\nclass REAL_32_REF inherit\n\n  NUMERIC\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: REAL_32\n      -- Numeric real value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := truncated_to_integer.hash_code\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0.0 then\n        Result := 1\n      elseif item < 0.0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item ({REAL_32} 1.0)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item ({REAL_32} 0.0)\n    end\n\n  nan: REAL_32\n      -- Representation of not a number (NaN)\n    external\n      \"built_in static\"\n    end\n\n  negative_infinity: REAL_32\n      -- Representation of negative infinity\n    external\n      \"built_in static\"\n    end\n\n  positive_infinity: REAL_32\n      -- Representation of positive infinity\n    external\n      \"built_in static\"\n    end\n\n  min_value: REAL_32 = -3.4028234663852885981170e+038\n  max_value: REAL_32 = 3.4028234663852885981170e+038\n      -- Minimum and Maximum value hold in `item'.\n\n  machine_epsilon: REAL_32 = 1.1920928955078125000000e-007\n      -- The difference between 1 and the least value greater than\n      -- 1 that is representable in the given floating point type.\n\n  epsilon: REAL_32 = 1.1754943508222875079688e-038\n      -- Minimum normalized positive floating-point number.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current real?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (r: REAL_32)\n      -- Make `r' the value of `item'.\n    external\n      \"built_in\"\n    end\n\nfeature -- Status report\n\n  divisible (other: REAL_32_REF): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0.0\n    ensure then\n      ref_not_exact_zero: Result implies (other.item /= 0.0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0.0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0.0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0.0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0.0) or\n        (other.conforms_to (0.0) and item > 0.0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0.0\n    end\n\n  is_nan: BOOLEAN\n      -- Is current the representation of `nan'?\n    do\n      Result := item.is_nan\n    end\n\n  is_negative_infinity: BOOLEAN\n      -- Is current the representation of `negative_infinity'?\n    do\n      Result := item.is_negative_infinity\n    end\n\n  is_positive_infinity: BOOLEAN\n      -- Is current the representation of `positive_infinity'?\n    do\n      Result := item.is_positive_infinity\n    end\n\nfeature {NONE} -- Initialization\n\n  make_from_reference (v: REAL_32_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: REAL_32_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  truncated_to_integer: INTEGER_32\n      -- Integer part (same sign, largest absolute\n      -- value no greater than current object's)\n    do\n      Result := item.truncated_to_integer\n    end\n\n  truncated_to_integer_64: INTEGER_64\n      -- Integer part (same sign, largest absolute\n      -- value no greater than current object's)\n    do\n      Result := item.truncated_to_integer_64\n    end\n\n  to_double: REAL_64\n      -- Current seen as a double\n    do\n      Result := item.to_double\n    end\n\n  ceiling: INTEGER_32\n      -- Smallest integral value no smaller than current object\n    do\n      Result := ceiling_real_32.truncated_to_integer\n    ensure\n      result_no_smaller: Result >= item\n      close_enough: Result - item < item.one\n    end\n\n  floor: INTEGER_32\n      -- Greatest integral value no greater than current object\n    do\n      Result := floor_real_32.truncated_to_integer\n    ensure\n      result_no_greater: Result <= item\n      close_enough: item - Result < Result.one\n    end\n\n  rounded: INTEGER_32\n      -- Rounded integral value\n    do\n      Result := sign * ((abs + 0.5).floor)\n    ensure\n      definition: Result = sign * ((abs + 0.5).floor)\n    end\n\n  ceiling_real_32: REAL_32\n      -- Smallest integral value no smaller than current object\n    do\n      Result := item.ceiling_real_32\n    ensure\n      result_no_smaller: Result >= item\n      close_enough: Result - item < item.one\n    end\n\n  floor_real_32: REAL_32\n      -- Greatest integral value no greater than current object\n    do\n      Result := item.floor_real_32\n    ensure\n      result_no_greater: Result <= item\n      close_enough: item - Result < Result.one\n    end\n\n  rounded_real_32: REAL_32\n      -- Rounded integral value\n    do\n      Result := sign * ((abs + {REAL_32} 0.5).floor_real_32)\n    ensure\n      definition: Result = sign * ((abs + {REAL_32} 0.5).floor_real_32)\n    end\n\nfeature -- Basic operations\n\n  abs: REAL_32\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0.0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product by `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): like Current\n      -- Division by `other'\n    do\n      create Result\n      Result.set_item (item / other.item)\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Current real to the power `other'\n    do\n      Result := item ^ other\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of real value\n    do\n      Result := item.out\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item = 0.0 then\n          -- Special case when `item' is `-0'.\n        Result := zero\n      elseif item > 0.0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n  sign_times_abs: not item.is_nan implies sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"real_64.e","content":"note\n  description: \"Real values, double precision\"\n  external_name: \"System.Double\"\n  assembly: \"mscorlib\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nfrozen expanded class REAL_64 inherit\n\n  REAL_64_REF\n    redefine\n      is_less,\n      is_nan,\n      is_negative_infinity,\n      is_positive_infinity,\n      truncated_to_integer,\n      truncated_to_integer_64,\n      truncated_to_real,\n      ceiling_real_64,\n      floor_real_64,\n      plus,\n      minus,\n      product,\n      quotient,\n      power,\n      opposite,\n      identity,\n      out\n    end\n\ncreate\n  default_create,\n  make_from_reference\n\nconvert\n  make_from_reference ({REAL_64_REF})\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: REAL_64): BOOLEAN\n      -- Is `other' greater than current double?\n    external\n      \"built_in\"\n    end\n\nfeature -- Status Report\n\n  is_nan: BOOLEAN\n      -- Is current the representation of `nan'?\n    external\n      \"built_in\"\n    end\n\n  is_negative_infinity: BOOLEAN\n      -- Is current the representation of `negative_infinity'?\n    external\n      \"built_in\"\n    end\n\n  is_positive_infinity: BOOLEAN\n      -- Is current the representation of `positive_infinity'?\n    external\n      \"built_in\"\n    end\n\nfeature -- Conversion\n\n  truncated_to_integer: INTEGER_32\n      -- Integer part (Same sign, largest absolute\n      -- value no greater than current object's)\n    external\n      \"built_in\"\n    end\n\n  truncated_to_integer_64: INTEGER_64\n      -- Integer part (Same sign, largest absolute\n      -- value no greater than current object's)\n    external\n      \"built_in\"\n    end\n\n  truncated_to_real: REAL_32\n      -- Real part (Same sign, largest absolute\n      -- value no greater than current object's)\n    external\n      \"built_in\"\n    end\n\n  ceiling_real_64: REAL_64\n      -- Smallest integral value no smaller than current object\n    external\n      \"built_in\"\n    end\n\n  floor_real_64: REAL_64\n      -- Greatest integral value no greater than current object\n    external\n      \"built_in\"\n    end\n\nfeature -- Basic operations\n\n  plus alias \"+\" (other: REAL_64): REAL_64\n      -- Sum with `other'\n    external\n      \"built_in\"\n    end\n\n  minus alias \"-\" (other: REAL_64): REAL_64\n      -- Result of subtracting `other'\n    external\n      \"built_in\"\n    end\n\n  product alias \"*\" (other: REAL_64): REAL_64\n      -- Product with `other'\n    external\n      \"built_in\"\n    end\n\n  quotient alias \"/\" (other: REAL_64): REAL_64\n      -- Division by `other'\n    external\n      \"built_in\"\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Current double to the power `other'\n    external\n      \"built_in\"\n    end\n\n  identity alias \"+\": REAL_64\n      -- Unary plus\n    external\n      \"built_in\"\n    end\n\n  opposite alias \"-\": REAL_64\n      -- Unary minus\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of double value\n    external\n      \"built_in\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"real_64_ref.e","content":"note\n  description: \"References to objects containing a double-precision real number\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-12-30 16:49:34 -0800 (Mon, 30 Dec 2013) $\"\n  revision: \"$Revision: 93854 $\"\n\nclass REAL_64_REF inherit\n\n  NUMERIC\n    redefine\n      out, is_equal\n    end\n\n  COMPARABLE\n    redefine\n      out, is_equal\n    end\n\n  HASHABLE\n    redefine\n      is_hashable, out, is_equal\n    end\n\nfeature -- Access\n\n  item: REAL_64\n      -- Numeric double value\n    external\n      \"built_in\"\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := truncated_to_integer.hash_code\n    end\n\n  sign: INTEGER\n      -- Sign value (0, -1 or 1)\n    do\n      if item > 0.0 then\n        Result := 1\n      elseif item < 0.0 then\n        Result := -1\n      end\n    ensure\n      three_way: Result = three_way_comparison (zero)\n    end\n\n  one: like Current\n      -- Neutral element for \"*\" and \"/\"\n    do\n      create Result\n      Result.set_item (1.0)\n    end\n\n  zero: like Current\n      -- Neutral element for \"+\" and \"-\"\n    do\n      create Result\n      Result.set_item (0.0)\n    end\n\n  nan: REAL_64\n      -- Representation of not a number (NaN)\n    external\n      \"built_in static\"\n    end\n\n  negative_infinity: REAL_64\n      -- Representation of negative infinity\n    external\n      \"built_in static\"\n    end\n\n  positive_infinity: REAL_64\n      -- Representation of positive infinity\n    external\n      \"built_in static\"\n    end\n\n  min_value: REAL_64 = -1.7976931348623157081452e+308\n  max_value: REAL_64 = 1.7976931348623157081452e+308\n      -- Minimum and Maximum value hold in `item'.\n\n  machine_epsilon: REAL_64 = 2.2204460492503130808473e-016\n      -- The difference between 1 and the least value greater than\n      -- 1 that is representable in the given floating point type.\n\n  epsilon: REAL_64 = 2.2250738585072013830903e-308\n      -- Minimum normalized positive floating-point number.\n\nfeature -- Comparison\n\n  is_less alias \"<\" (other: like Current): BOOLEAN\n      -- Is `other' greater than current double?\n    do\n      Result := item < other.item\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object of the same type\n      -- as current object and identical to it?\n    do\n      Result := other.item = item\n    end\n\nfeature -- Element change\n\n  set_item (d: REAL_64)\n      -- Make `d' the `item' value.\n    external\n      \"built_in\"\n    end\n\nfeature -- Status report\n\n  divisible (other: REAL_64_REF): BOOLEAN\n      -- May current object be divided by `other'?\n    do\n      Result := other.item /= 0.0\n    ensure then\n      not_exact_zero: Result implies (other.item /= 0.0)\n    end\n\n  exponentiable (other: NUMERIC): BOOLEAN\n      -- May current object be elevated to the power `other'?\n    do\n      if attached {INTEGER_32_REF} other as integer_value then\n        Result := integer_value.item >= 0 or item /= 0.0\n      elseif attached {REAL_32_REF} other as real_value then\n        Result := real_value.item >= 0.0 or item /= 0.0\n      elseif attached {REAL_64_REF} other as double_value then\n        Result := double_value.item >= 0.0 or item /= 0.0\n      end\n    ensure then\n      safe_values: ((other.conforms_to (0) and item /= 0.0) or\n        (other.conforms_to (0.0) and item > 0.0)) implies Result\n    end\n\n  is_hashable: BOOLEAN\n      -- May current object be hashed?\n      -- (True if it is not its type's default.)\n    do\n      Result := item /= 0.0\n    end\n\n  is_nan: BOOLEAN\n      -- Is current the representation of `nan'?\n    do\n      Result := item.is_nan\n    end\n\n  is_negative_infinity: BOOLEAN\n      -- Is current the representation of `negative_infinity'?\n    do\n      Result := item.is_negative_infinity\n    end\n\n  is_positive_infinity: BOOLEAN\n      -- Is current the representation of `positive_infinity'?\n    do\n      Result := item.is_positive_infinity\n    end\n\nfeature {NONE} -- Conversion\n\n  make_from_reference (v: REAL_64_REF)\n      -- Initialize `Current' with `v.item'.\n    require\n      v_not_void: v /= Void\n    do\n      set_item (v.item)\n    ensure\n      item_set: item = v.item\n    end\n\nfeature -- Conversion\n\n  to_reference: REAL_64_REF\n      -- Associated reference of Current\n    do\n      create Result\n      Result.set_item (item)\n    ensure\n      to_reference_not_void: Result /= Void\n    end\n\n  truncated_to_integer: INTEGER_32\n      -- Integer part (Same sign, largest absolute\n      -- value no greater than current object's)\n    do\n      Result := item.truncated_to_integer\n    end\n\n  truncated_to_integer_64: INTEGER_64\n      -- Integer part (Same sign, largest absolute\n      -- value no greater than current object's)\n    do\n      Result := item.truncated_to_integer_64\n    end\n\n  truncated_to_real: REAL_32\n      -- Real part (Same sign, largest absolute\n      -- value no greater than current object's)\n    do\n      Result := item.truncated_to_real\n    end\n\n  ceiling: INTEGER_32\n      -- Smallest integral value no smaller than current object\n    do\n      Result := ceiling_real_64.truncated_to_integer\n    ensure\n      result_no_smaller: Result >= item\n      close_enough: Result - item < item.one\n    end\n\n  floor: INTEGER_32\n      -- Greatest integral value no greater than current object\n    do\n      Result := floor_real_64.truncated_to_integer\n    ensure\n      result_no_greater: Result <= item\n      close_enough: item - Result < Result.one\n    end\n\n  rounded: INTEGER_32\n      -- Rounded integral value\n    do\n      Result := sign * ((abs + 0.5).floor)\n    ensure\n      definition: Result = sign * ((abs + 0.5).floor)\n    end\n\n  ceiling_real_64: REAL_64\n      -- Smallest integral value no smaller than current object\n    do\n      Result := item.ceiling_real_64\n    ensure\n      result_no_smaller: Result >= item\n      close_enough: Result - item < item.one\n    end\n\n  floor_real_64: REAL_64\n      -- Greatest integral value no greater than current object\n    do\n      Result := item.floor_real_64\n    ensure\n      result_no_greater: Result <= item\n      close_enough: item - Result < Result.one\n    end\n\n  rounded_real_64: REAL_64\n      -- Rounded integral value\n    do\n      Result := sign * ((abs + 0.5).floor_real_64)\n    ensure\n      definition: Result = sign * ((abs + 0.5).floor_real_64)\n    end\n\nfeature -- Basic operations\n\n  abs: REAL_64\n      -- Absolute value\n    do\n      Result := abs_ref.item\n    ensure\n      non_negative: Result >= 0.0\n      same_absolute_value: (Result = item) or (Result = -item)\n    end\n\n  plus alias \"+\" (other: like Current): like Current\n      -- Sum with `other'\n    do\n      create Result\n      Result.set_item (item + other.item)\n    end\n\n  minus alias \"-\" (other: like Current): like Current\n      -- Result of subtracting `other'\n    do\n      create Result\n      Result.set_item (item - other.item)\n    end\n\n  product alias \"*\" (other: like Current): like Current\n      -- Product with `other'\n    do\n      create Result\n      Result.set_item (item * other.item)\n    end\n\n  quotient alias \"/\" (other: like Current): like Current\n      -- Division by `other'\n    do\n      create Result\n      Result.set_item (item / other.item)\n    end\n\n  power alias \"^\" (other: REAL_64): REAL_64\n      -- Current double to the power `other'\n    do\n      Result := item ^ other\n    end\n\n  identity alias \"+\": like Current\n      -- Unary plus\n    do\n      create Result\n      Result.set_item (+ item)\n    end\n\n  opposite alias \"-\": like Current\n      -- Unary minus\n    do\n      create Result\n      Result.set_item (- item)\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- Printable representation of double value\n    do\n      Result := item.out\n    end\n\nfeature {NONE} -- Implementation\n\n  abs_ref: like Current\n      -- Absolute value\n    do\n      if item = 0.0 then\n          -- Special case when `item' is `-0'.\n        Result := zero\n      elseif item > 0.0 then\n        Result := Current\n      else\n        Result := -Current\n      end\n    ensure\n      result_exists: Result /= Void\n      same_absolute_value: (Result ~ Current) or (Result ~ -Current)\n    end\n\ninvariant\n  sign_times_abs: not item.is_nan implies sign * abs = item\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"refactoring_helper.e","content":"note\n  description: \"[\n    Collection of features that are used to mark\n    places in code that needs refactoring.\n    ]\"\n\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass REFACTORING_HELPER\n\nfeature -- Markers\n\n  fixme (comment: STRING)\n      -- Mark code that has to be \"fixed\" with `comment'.\n    require\n      comment_not_void: comment /= Void\n    do\n      -- debug (\"refactor_fixme\")\n      --   io.error.put_string (\"FIXME: \")\n      --   io.error.put_string (comment)\n      --   io.error.put_new_line\n      -- end\n    end\n\n  to_implement (comment: STRING)\n      -- Mark code that has to be \"implemented\" with `comment'.\n    require\n      comment_not_void: comment /= Void\n    do\n      -- debug (\"refactor_fixme\")\n      --   io.error.put_string (\"TO_BE_IMPLEMENTED: \")\n      --   io.error.put_string (comment)\n      --   io.error.put_new_line\n      -- end\n    end\n\n  to_implement_assertion (comment: STRING): BOOLEAN\n      -- Mark assertion that has to be \"implemented\" with `comment'.\n    require\n      comment_not_void: comment /= Void\n    do\n      -- TODO implement debug statement\n      -- debug (\"refactor_fixme\")\n      --   io.error.put_string (\"ASSERTION_TO_BE_IMPLEMENTED: \")\n      --   io.error.put_string (comment)\n      --   io.error.put_new_line\n      -- end\n      Result := True\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"reflector.e","content":"note\n  description: \"[\n      Access to internal object properties.\n      This class may be used as ancestor by classes needing its facilities.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-09-06 21:45:47 -0700 (Fri, 06 Sep 2013) $\"\n  revision: \"$Revision: 92917 $\"\n\nclass\n  REFLECTOR\n\ninherit\n  REFLECTOR_HELPER\n\n  REFLECTOR_CONSTANTS\n\nfeature -- Conformance\n\n  type_conforms_to (type1, type2: INTEGER): BOOLEAN\n      -- Does `type1' conform to `type2'?\n    require\n      type1_nonnegative: type1 >= 0\n      type2_nonnegative: type2 >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.type_conforms_to (type1, type2)\n    end\n\n  field_conforms_to (a_source_type, a_field_type: INTEGER): BOOLEAN\n      -- Does `a_source_type' conform to `a_field_type'?\n      --| Different from `type_conforms_to' since possible attachment mark of `a_field_type'\n      --| is discarded.\n    require\n      a_source_type_non_negative: a_source_type >= 0\n      a_field_type_non_negative: a_field_type >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.type_conforms_to (a_source_type, {ISE_RUNTIME}.detachable_type (a_field_type))\n    end\n\nfeature -- Creation\n\n  dynamic_type_from_string (class_type: READABLE_STRING_GENERAL): INTEGER\n      -- Dynamic type corresponding to `class_type'.\n      -- If no dynamic type available, returns -1.\n    require\n      class_type_not_void: class_type /= Void\n      class_type_not_empty: not class_type.is_empty\n      is_valid_type_string: is_valid_type_string (class_type)\n    local\n      l_cstr: C_STRING\n      l_table: like internal_dynamic_type_string_table\n      l_pre_ecma_status: BOOLEAN\n    external\n      \"built_in\"\n      -- l_table := internal_dynamic_type_string_table\n      -- l_table.search (class_type)\n      -- if l_table.found then\n      --   Result := l_table.found_item\n      -- else\n      --   create l_cstr.make (class_type)\n      --     -- Take into consideration possible pre-ECMA mapping.\n      --   l_pre_ecma_status := {ISE_RUNTIME}.pre_ecma_mapping_status\n      --   {ISE_RUNTIME}.set_pre_ecma_mapping (not is_pre_ecma_mapping_disabled)\n      --   Result := {ISE_RUNTIME}.type_id_from_name (l_cstr.item)\n      --   {ISE_RUNTIME}.set_pre_ecma_mapping (l_pre_ecma_status)\n      --   l_table.put (Result, class_type)\n      -- end\n    ensure\n      dynamic_type_from_string_valid: Result = -1 or Result = none_type or Result >= 0\n    end\n\n  new_instance_of (type_id: INTEGER): ANY\n      -- New instance of dynamic `type_id'.\n      -- Note: returned object is not initialized and may\n      -- hence violate its invariant.\n      -- `type_id' cannot represent a SPECIAL type, use\n      -- `new_special_any_instance' instead.\n    require\n      type_id_nonnegative: type_id >= 0\n      not_special_type: not is_special_type (type_id)\n    do\n      Result := c_new_instance_of (type_id)\n    ensure\n      not_special_type: not attached {SPECIAL [detachable ANY]} Result\n      dynamic_type_set: Result.generating_type.type_id = type_id\n    end\n\n  new_special_any_instance (type_id, count: INTEGER): SPECIAL [detachable ANY]\n      -- New instance of dynamic `type_id' that represents\n      -- a SPECIAL with `count' element. To create a SPECIAL of\n      -- basic type, use `SPECIAL'.\n    require\n      count_valid: count >= 0\n      type_id_nonnegative: type_id >= 0\n      special_type: is_special_any_type (type_id)\n    do\n      create Result.make_empty (count)\n      c_set_dynamic_type (Result, type_id)\n    ensure\n      dynamic_type_set: Result.generating_type.type_id = type_id\n      count_set: Result.count = 0\n      capacity_set: Result.capacity = count\n    end\n\n  new_tuple_from_special (type_id: INTEGER; values: SPECIAL [detachable separate ANY]): detachable TUPLE\n      -- New instance of a tuple of type `type_id' filled with `values' if all types of items are suitable.\n      -- `Void' if some items from `values' are inappropriate for a tuple of type `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n      is_tuple_type: is_tuple_type (type_id)\n      -- sufficient_values_count: values.count >= tuple_type_count (type_id)\n      -- valid_value_types: across 1 |..| tuple_type_count (type_id) as i all valid_object_for_tuple_index (values [i - 1], i)\n    local\n      i: INTEGER\n      v: detachable separate ANY\n    do\n      Result := c_new_tuple_instance_of (type_id)\n      i := Result.count\n      if i <= values.count then\n        from\n        until\n          i <= 0 or else not attached Result\n        loop\n          v := values [i - 1]\n          if Result.valid_type_for_index (v, i) then\n              -- Value `v' is compatible with tuple item at index `i'.\n            Result [i] := v\n          else\n              -- Value `v' is not compatible with tuple item at index `i'.\n            Result := Void\n          end\n          i := i - 1\n        end\n      else\n          -- Insufficient number of values.\n        Result := Void\n      end\n    ensure\n      dynamic_type_set: attached Result implies Result.generating_type.type_id = type_id\n      values_set: attached Result implies across 1 |..| Result.count as k all Result.item (k.item) = values [k.item - 1] end\n    end\n\n  new_tuple_from_tuple (type_id: INTEGER; source: separate TUPLE): detachable TUPLE\n      -- New instance of a tuple of type `type_id' filled with values fom `source' if all value types are suitable.\n      -- `Void' if some values from `source' are inappropriate for a tuple of type `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n      is_tuple_type: is_tuple_type (type_id)\n      -- sufficient_values_count: source.count >= tuple_type_count (type_id)\n      -- valid_value_types: across 1 |..| tuple_type_count (type_id) as i all valid_object_for_tuple_index (values [i - 1], i)\n    local\n      i: INTEGER\n      v: detachable separate ANY\n    do\n      Result := c_new_tuple_instance_of (type_id)\n      i := Result.count\n      if i <= source.count then\n        if source.object_comparison then\n          Result.compare_objects\n        end\n        from\n        until\n          i <= 0 or else not attached Result\n        loop\n          v := source [i]\n          if Result.valid_type_for_index (v, i) then\n              -- Value `v' is compatible with tuple item at index `i'.\n            Result [i] := v\n          else\n              -- Value `v' is not compatible with tuple item at index `i'.\n            Result := Void\n          end\n          i := i - 1\n        end\n      else\n          -- Insufficient number of values.\n        Result := Void\n      end\n    ensure\n      dynamic_type_set: attached Result implies Result.generating_type.type_id = type_id\n      object_comparison_set: attached Result implies Result.object_comparison = source.object_comparison\n      values_set: attached Result implies across 1 |..| Result.count as k all Result.item (k.item) = source [k.item] end\n    end\n\n  type_of_type (type_id: INTEGER): TYPE [detachable ANY]\n      -- Associated TYPE instance for an object of type id `type_id'\n    require\n      type_id_nonnegative: type_id >= 0\n    do\n      Result := c_new_type_instance_of (type_id)\n    ensure\n      result_not_void: Result /= Void\n    end\n\nfeature -- Status report\n\n  is_special_any_type (type_id: INTEGER): BOOLEAN\n      -- Is type represented by `type_id' represent\n      -- a SPECIAL [XX] where XX is a reference type.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"C signature (EIF_INTEGER): EIF_BOOLEAN use %\"eif_internal.h%\"\"\n    alias\n      \"eif_special_any_type\"\n    end\n\n  is_special_type (type_id: INTEGER): BOOLEAN\n      -- Is type represented by `type_id' represent\n      -- a SPECIAL [XX] where XX is a reference type\n      -- or a basic type.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"C signature (EIF_INTEGER): BOOLEAN use %\"eif_internal.h%\"\"\n    alias\n      \"eif_is_special_type\"\n    end\n\n  is_tuple_type (type_id: INTEGER): BOOLEAN\n      -- Is type represented by `type_id' represent a TUPLE?\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"C signature (EIF_INTEGER): BOOLEAN use %\"eif_internal.h%\"\"\n    alias\n      \"eif_is_tuple_type\"\n    end\n\n  is_attached_type (a_type_id: INTEGER): BOOLEAN\n      -- Is `a_type_id' an attached type?\n    require\n      a_type_non_negative: a_type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.is_attached_type (a_type_id)\n    end\n\n  is_field_transient_of_type (i: INTEGER; a_type_id: INTEGER): BOOLEAN\n      -- Is `i'-th field of `object' a transient attribute?\n      -- I.e. an attribute that does not need to be stored?\n    require\n      a_type_non_negative: a_type_id >= 0\n      index_large_enough: i >= 1\n      index_small_enough: i <= field_count_of_type (a_type_id)\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.is_field_transient_of_type (i, a_type_id)\n    end\n\n  is_field_expanded_of_type (i: INTEGER; a_type_id: INTEGER): BOOLEAN\n      -- Is `i'-th field of type `a_type_id' a user-defined expanded attribute?\n    require\n      a_type_non_negative: a_type_id >= 0\n      index_large_enough: i >= 1\n      index_small_enough: i <= field_count_of_type (a_type_id)\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.is_field_expanded_of_type (i, a_type_id)\n    end\n\nfeature -- Access\n\n  class_name_of_type (type_id: INTEGER): STRING\n      -- Name of class associated with dynamic type `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.generator_of_type (type_id)\n    end\n\n  type_name_of_type (type_id: INTEGER): STRING\n      -- Name of `type_id''s generating type (type of which `type_id'\n      -- is a direct instance).\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.generating_type_of_type (type_id)\n    end\n\n  attached_type (type_id: INTEGER): INTEGER\n      -- Attached version of `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.attached_type (type_id)\n    ensure\n      unchanged_if_attached: is_attached_type (type_id) implies type_id = Result\n    end\n\n  detachable_type (type_id: INTEGER): INTEGER\n      -- Detachable version of `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.detachable_type (type_id)\n    ensure\n      unchanged_if_detachable: not is_attached_type (type_id) implies type_id = Result\n    end\n\n  generic_count_of_type (type_id: INTEGER): INTEGER\n      -- Number of generic parameter in `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.generic_parameter_count (type_id)\n    end\n\n  generic_dynamic_type_of_type (type_id: INTEGER; i: INTEGER): INTEGER\n      -- Dynamic type of generic parameter of `type_id' at position `i'.\n    require\n      type_id_nonnegative: type_id >= 0\n      type_id_generic: generic_count_of_type (type_id) > 0\n      i_valid: i > 0 and i <= generic_count_of_type (type_id)\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.eif_gen_param_id (type_id, i)\n    ensure\n      dynamic_type_nonnegative: Result >= 0\n    end\n\n  storable_version_of_type (a_type_id: INTEGER): detachable IMMUTABLE_STRING_8\n      -- Storable version if any specified.\n    require\n      a_type_id_nonnegative: a_type_id >= 0\n    local\n      l_result, l_null: POINTER\n    external\n      \"built_in\"\n      -- id_to_storable_version.search (a_type_id)\n      -- if id_to_storable_version.found then\n      --   Result := id_to_storable_version.found_item\n      -- else\n      --   l_result := {ISE_RUNTIME}.storable_version_of_type (a_type_id)\n      --   if l_result /= l_null then\n      --     create Result.make_from_c (l_result)\n      --     if Result.is_empty then\n      --       Result := Void\n      --     end\n      --   end\n      --   id_to_storable_version.put (Result, a_type_id)\n      -- end\n    end\n\n  field_name_of_type (i: INTEGER; type_id: INTEGER): STRING\n      -- Name of `i'-th field of dynamic type `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n      index_large_enough: i >= 1\n      index_small_enought: i <= field_count_of_type (type_id)\n    external\n      \"built_in\"\n      -- create Result.make_from_c ({ISE_RUNTIME}.field_name_of_type (i, type_id))\n    end\n\n  field_type_of_type (i: INTEGER; type_id: INTEGER): INTEGER\n      -- Abstract type of `i'-th field of dynamic type `type_id'\n    require\n      type_id_nonnegative: type_id >= 0\n      index_large_enough: i >= 1\n      index_small_enough: i <= field_count_of_type (type_id)\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.field_type_of_type (i, type_id)\n    ensure\n      field_type_nonnegative: Result >= 0\n    end\n\n  field_static_type_of_type (i: INTEGER; type_id: INTEGER): INTEGER\n      -- Static type of declared `i'-th field of dynamic type `type_id'\n    require\n      type_id_nonnegative: type_id >= 0\n      index_large_enough: i >= 1\n      index_small_enough: i <= field_count_of_type (type_id)\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.field_static_type_of_type (i, type_id)\n    ensure\n      field_type_nonnegative: Result >= 0\n    end\n\nfeature -- Version\n\n  compiler_version: INTEGER\n    do\n      Result := 0\n    end\n\nfeature -- Measurement\n\n  field_count_of_type (type_id: INTEGER): INTEGER\n      -- Number of logical fields in dynamic type `type_id'.\n    require\n      type_id_nonnegative: type_id >= 0\n    external\n      \"C macro signature (EIF_INTEGER): EIF_INTEGER use %\"eif_internal.h%\"\"\n    alias\n      \"ei_count_field_of_type\"\n    end\n\n  persistent_field_count_of_type (a_type_id: INTEGER): INTEGER\n      -- Number of logical fields in dynamic type `type_id' that are not transient.\n    require\n      a_type_non_negative: a_type_id >= 0\n    external\n      \"built_in\"\n      -- Result := {ISE_RUNTIME}.persistent_field_count_of_type (a_type_id)\n    end\n\nfeature {NONE} -- Implementation\n\n  internal_dynamic_type_string_table: STRING_TABLE [INTEGER]\n      -- Table of dynamic type indexed by type name\n    once\n      create Result.make (100)\n    ensure\n      internal_dynamic_type_string_table_not_void: Result /= Void\n    end\n\n  id_to_storable_version: HASH_TABLE [detachable IMMUTABLE_STRING_8, INTEGER]\n      -- Buffer for `storable_version_of_type' lookups index by type_id.\n    once\n      create Result.make (100)\n    ensure\n      id_to_storable_version_not_void: Result /= Void\n    end\n\n  c_new_instance_of (type_id: INTEGER): ANY\n      -- New instance of dynamic `type_id'.\n      -- Note: returned object is not initialized and may\n      -- hence violate its invariant.\n      -- `type_id' cannot represent a SPECIAL type, use\n      -- `new_special_any_instance' instead.\n    external\n      \"C macro use %\"eif_macros.h%\"\"\n    alias\n      \"RTLNSMART\"\n    end\n\n  c_new_tuple_instance_of (type_id: INTEGER): TUPLE\n      -- New instance of tuple of type `type_id'.\n      -- Note: returned object is not initialized and may\n      -- hence violate its invariant.\n    external\n      \"C macro use %\"eif_macros.h%\"\"\n    alias\n      \"RTLNT\"\n    end\n\n  c_new_type_instance_of (type_id: INTEGER): TYPE [detachable ANY]\n      -- New instance of TYPE for object of type `type_id'.\n    external\n      \"C macro use %\"eif_macros.h%\"\"\n    alias\n      \"RTLNTY\"\n    end\n\n  c_set_dynamic_type (obj: SPECIAL [detachable ANY]; dtype: INTEGER)\n      -- Set `obj' dynamic type to `dtype'.\n    external\n      \"built_in static\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"reflector_constants.e","content":"note\n  description: \"Constants to represent abstract types in {REFFLECTOR} and {OBJECT_PROXY}.\"\n  cecil: \"The values are in sync with CECIL constants EIF_*_TYPE.\"\n  runtime: \"The values represent abstract types used by run-time, e.g. {ISE_RUNTIME}.field_type_of_type.\"\n  date: \"$Date: 2013-05-20 16:15:17 -0700 (Mon, 20 May 2013) $\"\n  revision: \"$Revision: 92557 $\"\n\nclass\n  REFLECTOR_CONSTANTS\n\nfeature -- Access\n\n  none_type: INTEGER = -2\n      -- Type ID representation for NONE.\n\n  pointer_type: INTEGER = 0\n      -- Abstract type ID for predefined type {POINTER}.\n\n  reference_type: INTEGER = 1\n      -- Abstract type ID for a reference type.\n\n  character_8_type, character_type: INTEGER = 2\n      -- Abstract type ID for predefined type {CHARACTER_8}.\n\n  boolean_type: INTEGER = 3\n      -- Abstract type ID for predefined type {BOOLEAN}.\n\n  integer_32_type, integer_type: INTEGER = 4\n      -- Abstract type ID for predefined type {INTEGER_32}.\n\n  real_32_type, real_type: INTEGER = 5\n      -- Abstract type ID for predefined type {REAL_32}.\n\n  real_64_type, double_type: INTEGER = 6\n      -- Abstract type ID for predefined type {REAL_64}.\n\n  expanded_type: INTEGER = 7\n      -- Abstract type ID for a non-predefined expanded type.\n\n  bit_type: INTEGER = 8\n      -- This type is obsolete and is not used anymore.\n\n  integer_8_type: INTEGER = 9\n      -- Abstract type ID for predefined type {INTEGER_8}.\n\n  integer_16_type: INTEGER = 10\n      -- Abstract type ID for predefined type {INTEGER_16}.\n\n  integer_64_type: INTEGER = 11\n      -- Abstract type ID for predefined type {INTEGER_64}.\n\n  character_32_type, wide_character_type: INTEGER = 12\n      -- Abstract type ID for predefined type {CHARACTER_32}.\n\n  natural_8_type: INTEGER = 13\n      -- Abstract type ID for predefined type {NATURAL_8}.\n\n  natural_16_type: INTEGER = 14\n      -- Abstract type ID for predefined type {NATURAL_16}.\n\n  natural_32_type: INTEGER = 15\n      -- Abstract type ID for predefined type {NATURAL_32}.\n\n  natural_64_type: INTEGER = 16\n      -- Abstract type ID for predefined type {NATURAL_64}.\n\n  min_predefined_type: INTEGER = -2\n  max_predefined_type: INTEGER = 16\n\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license: \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\nend\n"});
__eiffel_builtin.push({"filename":"reflector_helper.e","content":"note\n  description: \"Helper for routines in INTERNAL class.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-03-04 15:01:25 -0800 (Mon, 04 Mar 2013) $\"\n  revision: \"$Revision: 92178 $\"\n\nclass\n  REFLECTOR_HELPER\n\nfeature -- Status report\n\n  is_pre_ecma_mapping_disabled: BOOLEAN\n      -- Are we mapping old names to new ECMA names?\n      -- False means mapping STRING to STRING_8, INTEGER to INTEGER_32,...\n      -- Redefine in descendants of REFLECTOR to modify the behavior of inspection queries of REFLECTOR.\n    do\n      Result := False\n    end\n\n  is_valid_type_string (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Is `s' a valid string representation for a TYPE.\n    local\n      l_type_name: STRING_32\n      l_start_pos, l_end_pos: INTEGER\n      l_class_type_name: STRING_32\n      l_parameters: like parameters_decomposition\n    do\n      if s /= Void and then not s.is_empty then\n        create l_class_type_name.make_from_string_general (s)\n        l_class_type_name.left_adjust\n        l_class_type_name.right_adjust\n\n          -- Let's see if it is a generic type.\n        l_start_pos := l_class_type_name.index_of ('[', 1)\n\n        if l_start_pos > 1 then\n            -- Looks like it is a generic class.\n          l_end_pos := l_class_type_name.count\n          if l_class_type_name.item (l_end_pos) /= ']' then\n            l_end_pos := 0\n          end\n          if\n            l_end_pos = l_class_type_name.count and l_start_pos < l_end_pos and\n            l_class_type_name.occurrences ('[') = l_class_type_name.occurrences (']')\n          then\n              -- A well formed generic class.\n            l_type_name := l_class_type_name.substring (1, l_start_pos - 1)\n            l_type_name.left_adjust\n            l_type_name.right_adjust\n\n            if is_valid_identifier (l_type_name) then\n              l_parameters := parameters_decomposition (\n                l_class_type_name.substring (l_start_pos + 1, l_end_pos - 1))\n              if l_parameters /= Void then\n                from\n                  Result := True\n                  l_parameters.start\n                until\n                  l_parameters.after or not Result\n                loop\n                  Result := is_valid_type_string (l_parameters.item)\n                  l_parameters.forth\n                end\n              end\n            end\n          end\n        else\n            -- Ensures that it is a valid type name.\n          Result := is_valid_identifier (l_class_type_name)\n        end\n      end\n    end\n\n  mapped_type (a_type: READABLE_STRING_GENERAL): READABLE_STRING_GENERAL\n      -- If `is_pre_ecma_mapping_disabled' `a_type', otherwise\n      -- the mapped typed.\n    require\n      a_type_not_void: a_type /= Void\n    local\n      l_table: like pre_ecma_type_mapping\n      r: detachable READABLE_STRING_GENERAL\n    do\n      if not is_pre_ecma_mapping_disabled then\n        l_table := pre_ecma_type_mapping\n        l_table.search (a_type)\n        if l_table.found then\n          r := l_table.found_item\n        end\n      end\n      if r = Void then\n        r := a_type\n      end\n      Result := r\n    ensure\n      mapped_type_not_void: Result /= Void\n    end\n\nfeature {NONE} -- Implementation: status report\n\n  is_valid_identifier (s: READABLE_STRING_GENERAL): BOOLEAN\n      -- Is `s' a valid Eiffel identifier?\n    require\n      name_not_void: s /= Void\n    local\n      i, nb: INTEGER\n      cc: CHARACTER_32\n    do\n      if not s.is_empty then\n        cc := s.item (1)\n        nb := s.count + 1\n        if cc = attached_mark or cc = detachable_mark then\n          i := 2\n        elseif s.substring_index (attached_keyword, 1) = 1 then\n          i := attached_keyword.count + 1\n        elseif s.substring_index (detachable_keyword, 1) = 1 then\n          i := detachable_keyword.count + 1\n        elseif s.substring_index (expanded_keyword, 1) = 1 then\n          i := expanded_keyword.count + 1\n        else\n          i := 1\n        end\n        if i > 1 then\n            -- Remove any whitespace between the attachment mark and the type name.\n          from\n          until\n            i = nb or not s.item (i).is_space\n          loop\n            i := i + 1\n          end\n        end\n        if s.item (i).is_alpha then\n          from\n            Result := True\n          until\n            i = nb\n          loop\n            cc := s.item (i)\n            if not (cc.is_alpha or cc.is_digit or cc = '_') then\n              Result := False\n              i := nb - 1\n            end\n            i := i + 1\n          end\n        end\n      end\n    end\n\nfeature {NONE} -- Decompose string type\n\n  parameters_decomposition (a_str: READABLE_STRING_32): detachable ARRAYED_LIST [READABLE_STRING_32]\n      -- Decompose `a_str' which should be of the form \"A, B, D [G], H [E ,F]\"\n      -- into a list of strings \"A\", \"B\", \"D [G]\", \"H [E, F]\"\n      -- If decomposition is not possible, Void.\n    require\n      a_str_not_void: a_str /= Void\n    local\n      i, nb: INTEGER\n      l_invalid: BOOLEAN\n      l_first_pos: INTEGER\n      l_nesting: INTEGER\n    do\n      from\n        create Result.make (5)\n        i := 1\n        l_first_pos := 1\n        nb := a_str.count\n      until\n        i > nb or l_invalid\n      loop\n        inspect\n          a_str.item (i)\n        when ',' then\n          if l_nesting = 0 then\n            Result.extend (a_str.substring (l_first_pos, i - 1))\n            l_first_pos := i + 1\n          end\n        when '[' then\n          l_nesting := l_nesting + 1\n        when ']' then\n          l_nesting := l_nesting - 1\n          l_invalid := l_nesting < 0\n        else\n          -- Do nothing\n        end\n        i := i + 1\n      end\n      if not l_invalid and then l_nesting = 0 then\n        Result.extend (a_str.substring (l_first_pos, i - 1))\n      else\n        Result := Void\n      end\n    end\n\nfeature {NONE} -- ECMA mapping helper\n\n  pre_ecma_type_mapping: STRING_TABLE [STRING]\n      -- Mapping between pre-ECMA type naming and new names.\n    once\n      create Result.make (12)\n      Result.put (\"STRING_8\", \"STRING\")\n      Result.put (\"INTEGER_32\", \"INTEGER\")\n      Result.put (\"INTEGER_32_REF\", \"INTEGER_REF\")\n      Result.put (\"CHARACTER_8\", \"CHARACTER\")\n      Result.put (\"CHARACTER_8_REF\", \"CHARACTER_REF\")\n      Result.put (\"CHARACTER_32\", \"WIDE_CHARACTER\")\n      Result.put (\"CHARACTER_32_REF\", \"WIDE_CHARACTER_REF\")\n      Result.put (\"REAL_32\", \"REAL\")\n      Result.put (\"REAL_32_REF\", \"REAL_REF\")\n      Result.put (\"REAL_64\", \"DOUBLE\")\n      Result.put (\"REAL_64_REF\", \"DOUBLE_REF\")\n    ensure\n      pre_ecma_type_mapping_not_void: Result /= Void\n    end\n\n  attached_mark: CHARACTER_32 = '!'\n  detachable_mark: CHARACTER_32 = '?'\n  attached_keyword: STRING = \"attached\"\n  detachable_keyword: STRING = \"detachable\"\n  expanded_keyword: STRING = \"expanded\"\n      -- Symbols use for attachment marks.\n\nfeature {NONE} -- Type creation\n\n  type_keyword: STRING = \"TYPE\";\n      -- Used for creating type objects.\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"resizable.e","content":"note\n  description: \"Finite structures whose item count is subject to change\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: storage;\n  size: resizable;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class RESIZABLE [G] inherit\n\n  BOUNDED [G]\n\nfeature -- Measurement\n\n  Growth_percentage: INTEGER = 50\n      -- Percentage by which structure will grow automatically\n\n  Minimal_increase: INTEGER = 5\n      -- Minimal number of additional items\n\n  additional_space: INTEGER\n      -- Proposed number of additional items\n      --| Result is a reasonable value, resulting from a space-time tradeoff.\n    do\n        -- To prevent overflow we do not use `growth_percentage' but its known value.\n      Result := (capacity // 2).max (Minimal_increase)\n    ensure\n      At_least_one: Result >= 1\n    end\n\nfeature -- Status report\n\n  resizable: BOOLEAN\n      -- May `capacity' be changed? (Answer: yes.)\n    do\n      Result := True\n    end\n\nfeature -- Resizing\n\n  automatic_grow\n      -- Change the capacity to accommodate at least\n      -- `Growth_percentage' more items.\n      --| Trades space for time:\n      --| allocates fairly large chunks of memory but not very often.\n    require\n      resizable: resizable\n    do\n      grow (capacity + additional_space)\n    ensure\n      increased_capacity: capacity >= old capacity + old additional_space\n    end\n\n  grow (i: INTEGER)\n      -- Ensure that capacity is at least `i'.\n    require\n      resizable: resizable\n    deferred\n    ensure\n      new_capacity: capacity >= i\n    end\n\n  trim\n      -- Decrease `capacity' to the minimum value.\n      -- Apply to reduce allocated storage.\n    deferred\n    ensure\n      same_count: count = old count\n      minimal_capacity: capacity = count\n    end\n\ninvariant\n\n  increase_by_at_least_one: Minimal_increase >= 1\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"routine.e","content":"note\n  description: \"[\n    Objects representing delayed calls to a routine,\n    with some operands possibly still open\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-01-28 14:35:23 -0800 (Tue, 28 Jan 2014) $\"\n  revision: \"$Revision: 94109 $\"\n\ndeferred class\n  ROUTINE [BASE_TYPE -> detachable ANY, OPEN_ARGS -> detachable TUPLE create default_create end]\n\ninherit\n  HASHABLE\n    redefine\n      copy,\n      is_equal\n    end\n\n  REFLECTOR\n    export\n      {NONE} all\n    redefine\n      copy,\n      is_equal\n    end\n\nfeature -- Initialization\n\n  adapt (other: like Current)\n      -- Initialize from `other'.\n      -- Useful in descendants.\n    require\n      other_exists: other /= Void\n      conforming: conforms_to (other)\n    do\n      rout_disp := other.rout_disp\n      encaps_rout_disp := other.encaps_rout_disp\n      calc_rout_addr := other.calc_rout_addr\n      closed_operands := other.closed_operands\n      operands := other.operands\n      routine_id := other.routine_id\n      is_basic := other.is_basic\n      is_target_closed := other.is_target_closed\n      written_type_id_inline_agent := other.written_type_id_inline_agent\n      open_count := other.open_count\n    end\n\nfeature -- Access\n\n  frozen operands: detachable OPEN_ARGS\n\n  target: detachable ANY\n      -- Target of call\n    local\n      c: like closed_operands\n    do\n        -- Because a target object is never separate relative to the routine object,\n        -- the first argument is checked against {ANY} rather than {separate ANY}.\n      if is_target_closed then\n        c := closed_operands\n        if c /= Void and then c.count > 0 and then attached {ANY} c.item (1) as r then\n          Result := r\n        end\n      elseif attached {TUPLE} operands as o and then o.count > 0 and then attached {ANY} o.item (1) as r then\n        Result := r\n      end\n    end\n\n  hash_code: INTEGER\n      -- Hash code value.\n    do\n      Result := rout_disp.hash_code.bit_xor (routine_id.hash_code)\n    end\n\n  precondition (args: like operands): BOOLEAN\n      -- Do `args' satisfy routine's precondition\n      -- in current state?\n    do\n      Result := True\n      --| FIXME compiler support needed!\n    end\n\n  postcondition (args: like operands): BOOLEAN\n      -- Does current state satisfy routine's\n      -- postcondition for `args'?\n    do\n      Result := True\n      --| FIXME compiler support needed!\n    end\n\n  empty_operands: attached OPEN_ARGS\n      -- Empty tuple matching open operands.\n    obsolete \"This function will be removed as non-void-safe. [22.07.2013]\"\n    do\n      create Result\n    ensure\n      empty_operands_not_void: Result /= Void\n    end\n\nfeature -- Status report\n\n  callable: BOOLEAN = True\n      -- Can routine be called on current object?\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is associated routine the same as the one\n      -- associated with `other'.\n    do\n      --| Do not compare implementation data\n      Result := closed_operands ~ other.closed_operands\n        and then operands ~ other.operands\n        and then open_map ~ other.open_map\n        and then (rout_disp = other.rout_disp)\n        and then (routine_id = other.routine_id)\n        and then (written_type_id_inline_agent = other.written_type_id_inline_agent)\n        and then (encaps_rout_disp = other.encaps_rout_disp)\n        and then (calc_rout_addr = other.calc_rout_addr)\n    end\n\n  valid_operands (args: detachable separate TUPLE): BOOLEAN\n      -- Are `args' valid operands for this routine?\n    local\n      i, arg_type_code: INTEGER\n      arg: like {TUPLE}.item\n      open_type_codes: STRING\n      l_type: INTEGER\n    do\n      if args = Void then\n          -- Void operands are only allowed\n          -- if object has no open operands.\n        Result := (open_count = 0)\n      elseif args.count >= open_count then\n        from\n          Result := True\n          open_type_codes := eif_gen_typecode_str ($Current)\n          i := 1\n        until\n          i > open_count or not Result\n        loop\n          arg_type_code := args.item_code (i)\n          Result := arg_type_code = open_type_codes.item (i + 1).code\n          if Result and then arg_type_code = {TUPLE}.reference_code then\n            arg := args.item (i)\n            l_type := open_operand_type (i)\n              -- If expected type is attached, then we need to verify that the actual\n              -- is indeed attached.\n            if is_attached_type (l_type) then\n              Result := arg /= Void and then\n                field_conforms_to (type_id_of (arg), l_type)\n            else\n              Result := arg = Void or else\n                field_conforms_to (type_id_of (arg), l_type)\n            end\n          end\n          i := i + 1\n        end\n      end\n      if Result and then not is_target_closed and then args /= Void then\n        Result := args.item (1) /= Void\n      end\n    end\n\n  valid_target (args: detachable TUPLE): BOOLEAN\n      -- Is the first element of tuple `args' a valid target\n    do\n      if args /= Void and then args.count > 0 then\n        if args.is_reference_item (1) then\n          Result := args.reference_item (1) /= Void\n        else\n          Result := True\n        end\n      end\n    end\n\n  is_target_closed: BOOLEAN\n      -- Is target for current agent closed, i.e. specified at creation time?\n\nfeature -- Measurement\n\n  open_count: INTEGER\n      -- Number of open operands.\n\nfeature -- Settings\n\n  frozen set_operands (args: detachable OPEN_ARGS)\n      -- Use `args' as operands for next call.\n    require\n      valid_operands: valid_operands (args)\n    do\n      operands := args\n    ensure\n      operands_set: (operands /= Void implies (operands ~ args)) or\n        (operands = Void implies (args = Void or else args.is_empty))\n    end\n\n  set_target (a_target: like target)\n      -- Set `a_target' as the next `target' for remaining calls to Current.\n    require\n      a_target_not_void: a_target /= Void\n      is_target_closed: is_target_closed\n      target_not_void: target /= Void\n      same_target_type: attached target as t and then t.same_type (a_target)\n    local\n      c: like closed_operands\n    do\n      c := closed_operands\n      if c /= Void then\n        c.put (a_target, 1)\n      end\n    ensure\n      target_set: target = a_target\n    end\n\nfeature -- Duplication\n\n  copy (other: like Current)\n      -- Use same routine as `other'.\n    do\n      if other /= Current then\n        standard_copy (other)\n        if attached operands as l_operands then\n          operands := l_operands.twin\n        end\n      end\n    ensure then\n      same_call_status: other.callable implies callable\n    end\n\nfeature -- Basic operations\n\n  call (args: detachable separate OPEN_ARGS)\n      -- Call routine with `args'.\n    require\n      valid_operands: valid_operands (args)\n    deferred\n    end\n\n  apply\n      -- Call routine with `operands' as last set.\n    require\n      valid_operands: valid_operands (operands)\n    deferred\n    end\n\nfeature -- Extended operations\n\n  flexible_call (a: detachable separate TUPLE)\n      -- Call routine with arguments `a'.\n      -- Compared to `call' the type of `a' may be different from `{OPEN_ARGS}'.\n    require\n      valid_operands: valid_operands (a)\n    local\n      default_arguments: detachable OPEN_ARGS\n    do\n      if not attached a then\n        call (default_arguments)\n      else\n        -- TODO implement in javascript\n        -- check\n        --   from_precondition: attached {OPEN_ARGS} new_tuple_from_tuple (({OPEN_ARGS}).type_id, a) as x\n        -- then\n        --   call (x)\n        -- end\n      end\n    end\n\nfeature -- Obsolete\n\n  adapt_from (other: like Current)\n      -- Adapt from `other'. Useful in descendants.\n    obsolete\n      \"Please use `adapt' instead (it's also a creation procedure)\"\n    require\n      other_exists: other /= Void\n      conforming: conforms_to (other)\n    do\n      adapt (other)\n    end\n\nfeature {ROUTINE} -- Implementation\n\n  frozen closed_operands: detachable TUPLE\n      -- All closed arguments provided at creation time\n\n  closed_count: INTEGER\n      -- The number of closed operands (including the target if it is closed)\n    local\n      c: detachable TUPLE\n    do\n      c := closed_operands\n      if c /= Void then\n        Result := c.count\n      end\n    end\n\n  frozen rout_disp: POINTER\n      -- Routine dispatcher\n\n  frozen calc_rout_addr: POINTER\n      -- Address of the final routine\n\n  frozen open_map: detachable ARRAY [INTEGER]\n      -- Index map for open arguments\n\n  frozen encaps_rout_disp: POINTER\n      -- Eiffel routine dispatcher\n\n  frozen routine_id: INTEGER\n\n  frozen is_basic: BOOLEAN\n\n  frozen written_type_id_inline_agent: INTEGER\n\n  frozen set_rout_disp (a_rout_disp, a_encaps_rout_disp, a_calc_rout_addr: POINTER;\n              a_routine_id: INTEGER; a_open_map: like open_map;\n              a_is_basic, a_is_target_closed: BOOLEAN; a_written_type_id_inline_agent: INTEGER;\n              a_closed_operands: TUPLE; a_open_count: INTEGER)\n      -- Initialize object.\n    require\n      target_valid: a_is_target_closed implies valid_target (a_closed_operands)\n    do\n      set_rout_disp_int (a_rout_disp, a_encaps_rout_disp, a_calc_rout_addr, a_routine_id,\n                 a_open_map, a_is_basic, a_is_target_closed,\n                 a_written_type_id_inline_agent, a_closed_operands, a_open_count)\n    end\n\n  frozen set_rout_disp_final (a_rout_disp, a_encaps_rout_disp, a_calc_rout_addr: POINTER\n                  a_closed_operands: TUPLE; a_is_target_closed: BOOLEAN; a_open_count: INTEGER)\n      -- Initialize object.\n    do\n      rout_disp := a_rout_disp\n      encaps_rout_disp := a_encaps_rout_disp\n      calc_rout_addr := a_calc_rout_addr\n      closed_operands := a_closed_operands\n      is_target_closed := a_is_target_closed\n      open_count := a_open_count\n    end\n\n  frozen set_rout_disp_int (a_rout_disp, a_encaps_rout_disp, a_calc_rout_addr: POINTER;\n                  a_routine_id: INTEGER; a_open_map: like open_map;\n                a_is_basic, a_is_target_closed: BOOLEAN; a_written_type_id_inline_agent: INTEGER;\n                a_closed_operands: TUPLE; a_open_count: INTEGER)\n      -- Initialize object.\n    require\n      a_routine_id_valid: a_routine_id > -1\n    do\n      rout_disp := a_rout_disp\n      encaps_rout_disp := a_encaps_rout_disp\n      calc_rout_addr := a_calc_rout_addr\n      routine_id := a_routine_id\n      open_map := a_open_map\n      is_basic := a_is_basic\n      is_target_closed := a_is_target_closed\n      written_type_id_inline_agent := a_written_type_id_inline_agent\n      closed_operands := a_closed_operands\n      open_count := a_open_count\n    ensure\n      rout_disp_set: rout_disp = a_rout_disp\n      encaps_rout_disp_set: encaps_rout_disp = a_encaps_rout_disp\n      calc_rout_addr_set: calc_rout_addr = a_calc_rout_addr\n      routine_id_set: routine_id = a_routine_id\n      open_map_set: open_map = a_open_map\n      is_target_closed_set: is_target_closed = a_is_target_closed\n      is_basic_set: is_basic = a_is_basic\n      written_type_id_inline_agent_set: written_type_id_inline_agent = a_written_type_id_inline_agent\n      closed_operands_set: closed_operands = a_closed_operands\n      open_count_set: open_count = a_open_count\n    end\n\nfeature {NONE} -- Implementation\n\n  frozen open_types: detachable ARRAY [INTEGER]\n      -- Types of open operands\n\n  open_operand_type (i: INTEGER): INTEGER\n      -- Type of `i'th open operand.\n    require\n      positive: i >= 1\n      within_bounds: i <= open_count\n    local\n      o: like open_types\n    do\n      o := open_types\n      if o = Void then\n        create o.make_filled (-1, 1, open_count)\n        open_types := o\n      end\n      Result := o.item (i)\n      if Result = -1 then\n        Result := ({OPEN_ARGS}).generic_parameter_type (i).type_id\n        o.put (Result, i)\n      end\n    end\n\n  type_id_of (a: separate ANY): INTEGER\n      -- Type ID of an object `a'.\n    do\n      Result := a.generating_type.type_id\n    end\n\nfeature {NONE} -- Externals\n\n  eif_gen_typecode_str (obj: POINTER): STRING\n      -- Code name for generic parameter `pos' in `obj'.\n    external\n      \"C signature (EIF_REFERENCE): EIF_REFERENCE use %\"eif_gen_conf.h%\"\"\n    end\n\nfeature -- Obsolete\n\n  arguments: detachable OPEN_ARGS\n    obsolete\n      \"use operands\"\n    do\n      Result := operands\n    end\n\n  set_arguments (args: detachable OPEN_ARGS)\n    obsolete\n      \"use set_operands\"\n    do\n      set_operands (args)\n    end\n\n  valid_arguments (args: detachable OPEN_ARGS): BOOLEAN\n    obsolete\n      \"use valid_operands\"\n    do\n      Result := valid_operands (args)\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"sequence.e","content":"note\n  description: \"[\n    Finite sequences: structures where existing items are arranged\n    and accessed sequentially, and new ones can be added at the end.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: sequence;\n  access: cursor, membership;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class SEQUENCE [G] inherit\n\n  ACTIVE [G]\n    redefine\n      prune_all\n    end\n\n  BILINEAR [G]\n\n  FINITE [G]\n\nfeature -- Status report\n\n  readable: BOOLEAN\n      -- Is there a current item that may be read?\n    do\n      Result := not off\n    end\n\n\n  writable: BOOLEAN\n      -- Is there a current item that may be modified?\n    do\n      Result := not off\n    end\n\nfeature -- Element change\n\n  force (v: like item)\n      -- Add `v' to end.\n    require\n      extendible: extendible\n    do\n      extend (v)\n    ensure then\n      new_count: count = old count + 1\n      item_inserted: has (v)\n    end\n\n  append (s: SEQUENCE [G])\n      -- Append a copy of `s'.\n    require\n      argument_not_void: s /= Void\n    local\n      l: like s\n    do\n      l := s\n      if s = Current then\n        l := twin\n      end\n      from\n        l.start\n      until\n        l.exhausted\n      loop\n        extend (l.item)\n        l.forth\n      end\n    ensure\n      new_count: count >= old count\n    end\n\n  put (v: like item)\n      -- Add `v' to end.\n    do\n      extend (v)\n    ensure then\n      new_count: count = old count + 1\n    end\n\nfeature -- Removal\n\n  prune (v: like item)\n      -- Remove the first occurrence of `v' if any.\n      -- If no such occurrence go `off'.\n    do\n      start\n      search (v)\n      if not exhausted then\n        remove\n      end\n    end\n\n  prune_all (v: like item)\n      -- Remove all occurrences of `v'; go `off'.\n    do\n      from\n        start\n      until\n        exhausted\n      loop\n        search (v)\n        if not exhausted then\n          remove\n        end\n      end\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"special.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-03-04 15:01:25 -0800 (Mon, 04 Mar 2013) $\"\n  revision: \"$Revision: 92178 $\"\n\nfrozen class\n  SPECIAL [T]\n\ninherit\n  ABSTRACT_SPECIAL\n    redefine\n      debug_output\n    end\n\n  READABLE_INDEXABLE [T]\n\ncreate\n  make_empty,\n  make_filled,\n  make_from_native_array\n\nfeature {NONE} -- Initialization\n\n  make_empty (n: INTEGER)\n      -- Create a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    external\n      \"built_in\"\n    ensure\n      capacity_set: capacity = n\n      count_set: count = 0\n    end\n\n  make_filled (v: T; n: INTEGER)\n      -- Create a special object for `n' entries initialized with `v'.\n    require\n      non_negative_argument: n >= 0\n    do\n      make_empty (n)\n      fill_with (v, 0, n - 1)\n    ensure\n      capacity_set: capacity = n\n      count_set: count = n\n      filled: filled_with (v, 0, n - 1)\n    end\n\n  make_from_native_array (an_array: like native_array)\n      -- Create a special object from `an_array'.\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n      an_array_not_void: an_array /= Void\n    do\n    end\n\nfeature -- Access\n\n  item alias \"[]\" (i: INTEGER): T assign put\n      -- Item at `i'-th position\n      -- (indices begin at 0)\n    external\n      \"built_in\"\n    end\n\n  at alias \"@\" (i: INTEGER): T\n      -- Item at `i'-th position\n      -- (indices begin at 0)\n    require\n      valid_index: valid_index (i)\n    do\n      Result := item (i)\n    end\n\n  index_of (v: T; start_position: INTEGER): INTEGER\n      -- Index of first occurrence of item identical to `v'.\n      -- -1 if none.\n      -- (Use object equality for comparison.)\n    require\n      valid_start_position: start_position >= 0\n    local\n      nb: INTEGER\n    do\n      from\n        Result := start_position\n        nb := count\n      until\n        Result >= nb or else item (Result) ~ v\n      loop\n        Result := Result + 1\n      end\n      if Result >= nb then\n        Result := -1\n      end\n    ensure\n      found_or_not_found: Result = -1 or else (Result >= 0 and then Result < count)\n    end\n\n  item_address (i: INTEGER): POINTER\n      -- Address of element at position `i'.\n      -- Use only when interfacing with C externals when Current is guaranteed to not move in memory.\n    require\n      not_dotnet: not {PLATFORM}.is_dotnet\n      index_large_enough: i >= 0\n      index_small_enough: i < count\n    do\n      Result := base_address + i * element_size\n    ensure\n      element_address_not_null: Result /= default_pointer\n    end\n\n  base_address: POINTER\n      -- Address of element at position `0'.\n      -- Use only when interfacing with C externals when Current is guaranteed to not move in memory.\n    require\n      not_dotnet: not {PLATFORM}.is_dotnet\n    external\n      \"built_in\"\n    ensure\n      base_address_not_null: Result /= default_pointer\n    end\n\n  native_array: NATIVE_ARRAY [T]\n      -- Only for compatibility with .NET\n    require\n      is_dotnet: {PLATFORM}.is_dotnet\n    do\n      create Result\n    end\n\n  to_array: ARRAY [T]\n      -- Build an array representation of Current from `1' to `count'.\n    do\n      create Result.make_from_special (Current)\n    ensure\n      to_array_attached: Result /= Void\n      to_array_lower_set: Result.lower = 1\n      to_array_upper_set: Result.upper = count\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- <Precursor>\n    do\n      create Result.make (lower, upper)\n    end\n\nfeature -- Measurement\n\n  lower: INTEGER = 0\n      -- Minimum index of Current\n\n  upper: INTEGER\n      -- Maximum index of Current\n    do\n      Result := count - 1\n    ensure\n      definition: lower <= Result + 1\n    end\n\n  count: INTEGER\n      -- Count of special area\n    external\n      \"built_in\"\n    end\n\n  capacity: INTEGER\n      -- Capacity of special area\n    external\n      \"built_in\"\n    end\n\nfeature -- Status report\n\n  filled_with (v: T; start_index, end_index: INTEGER): BOOLEAN\n      -- Are all items between index `start_index' and `end_index'\n      -- set to `v'?\n      -- (Use reference equality for comparison.)\n    require\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < count\n    local\n      i: INTEGER\n    do\n      from\n        Result := True\n        i := start_index\n      until\n        i > end_index or else not Result\n      loop\n        Result := item (i) = v\n        i := i + 1\n      end\n    end\n\n  same_items (other: like Current; source_index, destination_index, n: INTEGER): BOOLEAN\n      -- Are the `n' elements of `other' from `source_index' position the same as\n      -- the `n' elements of `Current' from `destination_index'?\n      -- (Use reference equality for comparison.)\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: destination_index + n <= count\n    local\n      i, j, nb: INTEGER\n    do\n      Result := True\n      if other /= Current then\n        from\n          i := source_index\n          j := destination_index\n          nb := source_index + n\n        until\n          i = nb\n        loop\n          if other.item (i) /= item (j) then\n            Result := False\n            i := nb - 1\n          end\n          i := i + 1\n          j := j + 1\n        end\n      end\n    ensure\n      valid_on_empty_area: (n = 0) implies Result\n    end\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    do\n      Result := (0 <= i) and (i < count)\n    end\n\nfeature -- Element change\n\n  put (v: T; i: INTEGER)\n      -- Replace `i'-th item by `v'.\n      -- (Indices begin at 0.)\n    require\n      index_large_enough: i >= 0\n      index_small_enough: i < count\n    external\n      \"built_in\"\n    ensure\n      inserted: item (i) = v\n      same_count: count = old count\n      same_capacity: capacity = old capacity\n    end\n\n  force (v: T; i: INTEGER)\n      -- If `i' is equal to `count' increase `count' by one and insert `v' at index `count',\n      -- otherwise replace `i'-th item by `v'.\n      -- (Indices begin at 0.)\n    require\n      index_large_enough: i >= 0\n      index_small_enough: i <= count\n      not_full: i = count implies count < capacity\n    do\n      if i < count then\n        put (v, i)\n      else\n        extend (v)\n      end\n    ensure\n      count_updated: count = (i + 1).max (old count)\n      same_capacity: capacity = old capacity\n      inserted: item (i) = v\n    end\n\n  extend (v: T)\n      -- Add `v' at index `count'.\n    require\n      count_small_enough: count < capacity\n    external\n      \"built_in\"\n    ensure\n      count_increased: count = old count + 1\n      same_capacity: capacity = old capacity\n      inserted: item (count - 1) = v\n    end\n\n  extend_filled (v: T)\n      -- Set items between `count' and `capacity - 1' with `v'.\n    do\n      fill_with (v, count, capacity - 1)\n    ensure\n      same_capacity: capacity = old capacity\n      count_increased: count = capacity\n      filled: filled_with (v, old count, capacity - 1)\n    end\n\n  fill_with (v: T; start_index, end_index: INTEGER)\n      -- Set items between `start_index' and `end_index' with `v'.\n    require\n      start_index_non_negative: start_index >= 0\n      start_index_in_bound: start_index <= count\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < capacity\n    local\n      i, nb: INTEGER\n      l_count: like count\n    do\n      from\n        i := start_index\n        l_count := count.min (end_index + 1)\n        nb := l_count\n      until\n        i = nb\n      loop\n        put (v, i)\n        i := i + 1\n      end\n      from\n        i := l_count\n        nb := end_index + 1\n      until\n        i = nb\n      loop\n        extend (v)\n        i := i + 1\n      end\n    ensure\n      same_capacity: capacity = old capacity\n      count_definition: count = (old count).max (end_index + 1)\n      filled: filled_with (v, start_index, end_index)\n    end\n\n  fill_with_default (start_index, end_index: INTEGER)\n      -- Clear items between `start_index' and `end_index'.\n    require\n      is_self_initializing: ({T}).has_default\n      start_index_non_negative: start_index >= 0\n      start_index_not_too_big: start_index <= end_index + 1\n      end_index_valid: end_index < count\n    do\n      fill_with (({T}).default, start_index, end_index)\n    ensure\n      filled: filled_with (({T}).default, start_index, end_index)\n    end\n\n  insert_data (other: SPECIAL [T]; source_index, destination_index, n: INTEGER)\n      -- Insert `n' elements of `other' from `source_index' position to Current at\n      -- `destination_index' and shift elements between `destination_index' and `count'\n      -- to the right. Other elements of Current remain unchanged.\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: count + n <= capacity\n      same_type: other.conforms_to (Current)\n    local\n      l_remaining_items, l_offset, l_nb_items_left: INTEGER\n      l_source_index, l_end_index, l_destination_index: INTEGER\n    do\n      l_remaining_items := count - destination_index\n      if l_remaining_items = 0 then\n          -- It is being added at the end of Current, therefore we can simply extend.\n        copy_data (other, source_index, destination_index, n)\n      elseif n <= l_remaining_items then\n          -- Simple case where we can perform a move of the existing items to the end\n          -- and then copy the elements of `other'.\n        move_data (destination_index, destination_index + n, l_remaining_items)\n        copy_data (other, source_index, destination_index, n)\n      else\n          -- Because we cannot have uninitialized items, we cannot move all the remaining items beyond count\n          -- instead we copy by chunks of `l_remaining_items'.\n        from\n          l_source_index := source_index\n          l_destination_index := destination_index\n          l_end_index := source_index + n\n          l_nb_items_left := n\n          l_offset := l_remaining_items\n        until\n          l_source_index >= l_end_index\n        loop\n          move_data (l_destination_index, l_destination_index + l_offset, l_remaining_items)\n          copy_data (other, l_source_index, l_destination_index, l_offset)\n          l_destination_index := l_destination_index + l_offset\n          l_source_index := l_source_index + l_offset\n            -- Compute how many more items we have to copy.\n          l_nb_items_left := l_nb_items_left - l_remaining_items\n          l_offset := l_offset.min (l_nb_items_left)\n        end\n      end\n    ensure\n      copied: same_items (other, source_index, destination_index, n)\n      count_updated: count = old count + n\n    end\n\n  copy_data (other: SPECIAL [T]; source_index, destination_index, n: INTEGER)\n      -- Copy `n' elements of `other' from `source_index' position to Current at\n      -- `destination_index'. Other elements of Current remain unchanged.\n    require\n      other_not_void: other /= Void\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= other.count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n      same_type: other.conforms_to (Current)\n    local\n      i, j, nb: INTEGER\n    do\n      if other = Current then\n        move_data (source_index, destination_index, n)\n      else\n        from\n          i := source_index\n          j := destination_index\n          nb := source_index + n\n        until\n          i = nb\n        loop\n          force (other.item (i), j)\n          i := i + 1\n          j := j + 1\n        end\n      end\n    ensure\n      copied: same_items (other, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  move_data (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    do\n      if source_index = destination_index then\n      elseif source_index > destination_index then\n        if destination_index + n < source_index then\n          non_overlapping_move (source_index, destination_index, n)\n        else\n          overlapping_move (source_index, destination_index, n)\n        end\n      else\n        if source_index + n < destination_index then\n          non_overlapping_move (source_index, destination_index, n)\n        else\n          overlapping_move (source_index, destination_index, n)\n        end\n      end\n    ensure\n      moved: same_items (old twin, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  overlapping_move (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      different_source_and_target: source_index /= destination_index\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    local\n      i, nb: INTEGER\n      l_offset: INTEGER\n    do\n      if source_index < destination_index then\n          -- We shift from left to right starting from the end\n          -- due to possible overlapping.\n        from\n          i := source_index + n - 1\n          nb := source_index - 1\n          l_offset := destination_index - source_index\n          if (destination_index + n >= count) then\n              -- Initialize elements above `count' to a dummy item.\n            fill_with (item (source_index), count, destination_index + n - 1)\n          end\n          check\n            l_offset_positive: l_offset > 0\n          end\n        until\n          i = nb\n        loop\n          put (item (i), i + l_offset)\n          i := i - 1\n        end\n      else\n          -- We shift from right to left.\n        from\n          i := source_index\n          nb := source_index + n\n          l_offset := source_index - destination_index\n          check\n            l_offset_positive: l_offset > 0\n          end\n        until\n          i = nb\n        loop\n          force (item (i), i - l_offset)\n          i := i + 1\n        end\n      end\n    ensure\n      moved: same_items (old twin, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\n  non_overlapping_move (source_index, destination_index, n: INTEGER)\n      -- Move `n' elements of Current from `source_start' position to `destination_index'.\n      -- Other elements remain unchanged.\n    require\n      source_index_non_negative: source_index >= 0\n      destination_index_non_negative: destination_index >= 0\n      destination_index_in_bound: destination_index <= count\n      n_non_negative: n >= 0\n      different_source_and_target: source_index /= destination_index\n      non_overlapping:\n        (source_index < destination_index implies source_index + n < destination_index) or\n        (source_index > destination_index implies destination_index + n < source_index)\n      n_is_small_enough_for_source: source_index + n <= count\n      n_is_small_enough_for_destination: destination_index + n <= capacity\n    local\n      i, nb: INTEGER\n      l_offset: INTEGER\n    do\n      from\n        i := source_index\n        nb := source_index + n\n        l_offset := destination_index - source_index\n      until\n        i = nb\n      loop\n        force (item (i), i + l_offset)\n        i := i + 1\n      end\n    ensure\n      moved: same_items (Current, source_index, destination_index, n)\n      count_updated: count = (old count).max (destination_index + n)\n    end\n\nfeature -- Resizing\n\n  keep_head (n: INTEGER)\n      -- Keep the first `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      set_count (n)\n    ensure\n      count_updated: count = n\n      kept: same_items (old twin, 0, 0, n)\n    end\n\n  keep_tail (n: INTEGER)\n      -- Keep the last `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      overlapping_move (count - n, 0, n)\n      set_count (n)\n    ensure\n      count_updated: count = n\n      kept: same_items (old twin, n, 0, n)\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove the first `n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      keep_tail (count - n)\n    ensure\n      count_updated: count = old count - n\n      kept: same_items (old twin, n, 0, count)\n    end\n\n  remove_tail (n: INTEGER)\n      -- Keep the first  `count - n' entries.\n    require\n      non_negative_argument: n >= 0\n      less_than_count: n <= count\n    do\n      keep_head (count - n)\n    ensure\n      count_updated: count = old count - n\n      kept: same_items (old twin, 0, 0, count)\n    end\n\n  resized_area (n: INTEGER): like Current\n      -- Create a copy of Current with a count of `n'\n    require\n      n_non_negative: n >= 0\n    do\n      create Result.make_empty (n)\n      Result.copy_data (Current, 0, 0, n.min (count))\n    ensure\n      Result_not_void: Result /= Void\n      Result_different_from_current: Result /= Current\n      new_count: Result.count = n.min (old count)\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (Current, 0, 0, n.min (old count))\n    end\n\n  resized_area_with_default (a_default_value: T; n: INTEGER): like Current\n      -- Create a copy of Current with a count of `n' where not yet initialized\n      -- entries are set to `a_default_value'.\n    require\n      n_non_negative: n >= 0\n    do\n      create Result.make_empty (n)\n      if n > count then\n        Result.copy_data (Current, 0, 0, count)\n        Result.fill_with (a_default_value, count, n - 1)\n      else\n        Result.copy_data (Current, 0, 0, n)\n      end\n    ensure\n      Result_not_void: Result /= Void\n      Result_different_from_current: Result /= Current\n      new_count: Result.count = n\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (Current, 0, 0, n.min (old count))\n    end\n\n  aliased_resized_area (n: INTEGER): like Current\n      -- Try to resize `Current' with a count of `n', if not\n      -- possible a new copy\n    require\n      n_non_negative: n >= 0\n    external\n      \"built_in\"\n    ensure\n      Result_not_void: Result /= Void\n      new_count: Result.count = n.min (old count)\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (old twin, 0, 0, n.min (old count))\n    end\n\n  aliased_resized_area_with_default (a_default_value: T; n: INTEGER): like Current\n      -- Try to resize `Current' with a count of `n', if not\n      -- possible a new copy. Non yet initialized entries are set to `a_default_value'.\n    require\n      n_non_negative: n >= 0\n    do\n      Result := aliased_resized_area (n)\n      Result.fill_with (a_default_value, Result.count, n - 1)\n    ensure\n      Result_not_void: Result /= Void\n      new_count: Result.count = n\n      new_capacity: Result.capacity = n\n      preserved: Result.same_items (old twin, 0, 0, n.min (old count))\n    end\n\nfeature -- Removal\n\n  replace_all (v: T)\n      -- Replace all items with `v'.\n    local\n      i: INTEGER\n    do\n      from\n        i := count - 1\n      until\n        i < 0\n      loop\n        put (v, i)\n        i := i - 1\n      end\n    ensure\n      cleared: filled_with (v, 0, upper)\n    end\n\n  wipe_out\n      -- Reset count to zero.\n    do\n      set_count (0)\n    ensure\n      same_capacity: capacity = old capacity\n      count_reset: count = 0\n    end\n\n  clear_all\n      -- Reset all items to default values.\n    obsolete\n      \"Because of the new precondition, it is recommended to use `fill_with' instead.\"\n    require\n      has_default: ({T}).has_default\n    do\n      fill_with_default (0, upper)\n    ensure\n      same_capacity: capacity = old capacity\n      count_reset: count = old count\n    end\n\nfeature -- Iteration\n\n  do_all_in_bounds (action: PROCEDURE [ANY, TUPLE [T]]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item, from first to last.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb\n      loop\n        action.call ([item (i)])\n        i := i + 1\n      end\n    end\n\n  do_if_in_bounds (action: PROCEDURE [ANY, TUPLE [T]]; test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb\n      loop\n        if test.item ([item (i)]) then\n          action.call ([item (i)])\n        end\n        i := i + 1\n      end\n    end\n\n  there_exists_in_bounds (test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER): BOOLEAN\n      -- Is `test' true for at least one item?\n    require\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n      until\n        i > nb or Result\n      loop\n        Result := test.item ([item (i)])\n        i := i + 1\n      end\n    end\n\n  for_all_in_bounds (test: FUNCTION [ANY, TUPLE [T], BOOLEAN]; start_index, end_index: INTEGER): BOOLEAN\n      -- Is `test' true for all items?\n    require\n      test_not_void: test /= Void\n    local\n      i, nb: INTEGER\n    do\n      from\n        i := start_index\n        nb := end_index\n        Result := True\n      until\n        i > nb or not Result\n      loop\n        Result := test.item ([item (i)])\n        i := i + 1\n      end\n    end\n\n  do_all_with_index_in_bounds (action: PROCEDURE [ANY, TUPLE [T, INTEGER]]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item, from first to last.\n      -- `action' receives item and its index.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n    local\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_index\n        j := lower\n        nb := end_index\n      until\n        i > nb\n      loop\n        action.call ([item (i), j])\n        j := j + 1\n        i := i + 1\n      end\n    end\n\n  do_if_with_index_in_bounds (action: PROCEDURE [ANY, TUPLE [T, INTEGER]]; test: FUNCTION [ANY, TUPLE [T, INTEGER], BOOLEAN]; start_index, end_index: INTEGER)\n      -- Apply `action' to every item that satisfies `test', from first to last.\n      -- `action' and `test' receive the item and its index.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_not_void: action /= Void\n      test_not_void: test /= Void\n    local\n      i, j, nb: INTEGER\n    do\n      from\n        i := start_index\n        j := lower\n        nb := end_index\n      until\n        i > nb\n      loop\n        if test.item ([item (i), j]) then\n          action.call ([item (i), j])\n        end\n        j := j + 1\n        i := i + 1\n      end\n    end\n\nfeature -- Output\n\n  debug_output: STRING\n      -- String that should be displayed in debugger to represent `Current'.\n    do\n      Result := Precursor\n      Result.append_string (\", capacity=\")\n      Result.append_integer (capacity)\n    end\n\nfeature {NONE} -- Implementation\n\n  element_size: INTEGER\n      -- Size of elements\n    external\n      \"built_in\"\n    ensure\n      element_size_non_negative: Result >= 0\n    end\n\n  set_count (n: INTEGER)\n      -- Set `count' with `n'.\n    require\n      n_non_negative: n >= 0\n      valid_new_count: n <= count\n    external\n      \"built_in\"\n    ensure\n      count_set: count = n\n      capacity_preserved: capacity = old capacity\n    end\n\ninvariant\n  count_less_than_capacity: count <= capacity\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string.e","content":"class\n  STRING\n\ninherit\n  READABLE_STRING_32\n    redefine\n      area\n    export\n      {ANY} make, make_empty, make_filled, make_from_c, make_from_string, fill_character\n    end\n\n  STRING_GENERAL\n    undefine\n      copy, is_equal, out, has, index_of, last_index_of, occurrences\n    redefine\n      append_string_general,\n      prepend_string_general\n    rename\n      append as append_string_general,\n      append_substring as append_substring_general,\n      prepend as prepend_string_general,\n      prepend_substring as prepend_substring_general,\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general\n    end\n\n  INDEXABLE [CHARACTER_32, INTEGER]\n    undefine\n      copy, is_equal, out\n    redefine\n      prune_all,\n      changeable_comparison_criterion\n    end\n\n  RESIZABLE [CHARACTER_32]\n    undefine\n      copy, is_equal, out\n    redefine\n      changeable_comparison_criterion\n    end\n\n  TO_SPECIAL [CHARACTER_32]\n    undefine\n      copy, is_equal, out, item, at, put, valid_index\n    redefine\n      area\n    end\n\n  MISMATCH_CORRECTOR\n    undefine\n      copy, is_equal, out\n    redefine\n      correct_mismatch\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_string_general,\n  make_from_c,\n  make_from_c_pointer,\n  make_from_cil\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  make_from_cil ({SYSTEM_STRING}),\n  as_string_8: {READABLE_STRING_8, STRING_8}\n\nfeature -- Initialization\n\n  make_from_string_general (s: READABLE_STRING_GENERAL)\n      -- Initialize from the characters of `s'.\n    do\n      if attached {READABLE_STRING_32} s as s32 then\n        make_from_string (s32)\n      else\n        make (s.count)\n        append_string_general (s)\n      end\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 and then a_system_string /= Void then\n        set_count (l_count)\n        dotnet_convertor.read_system_string_into (a_system_string, Current)\n      end\n    end\n\n  from_c (c_string: POINTER)\n      -- Reset contents of string from contents of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n        -- Resize string in case it is not big enough\n      l_count := c_string_provider.count\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_string_into (Current)\n    ensure\n      no_zero_byte: not has ('%/0/')\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n      -- correct_count: the ASCII character at address c_string + count\n      --       is NULL\n    end\n\n  from_c_substring (c_string: POINTER; start_pos, end_pos: INTEGER)\n      -- Reset contents of string from substring of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      c_string_provider.set_shared_from_pointer_and_count (c_string + (start_pos - 1), l_count)\n        -- Resize string in case it is not big enough\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into (Current, 1, l_count)\n    ensure\n      valid_count: count = end_pos - start_pos + 1\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n    end\n\n  adapt (s: STRING_32): like Current\n      -- Object of a type conforming to the type of `s',\n      -- initialized with attributes from `s'\n    do\n      Result := new_string (0)\n      Result.share (s)\n    ensure\n      adapt_not_void: Result /= Void\n      shared_implementation: Result.shared_with (s)\n    end\n\n  remake (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    obsolete\n      \"Use `make' instead\"\n    require\n      non_negative_size: n >= 0\n    do\n      make (n)\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_32 assign put\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1)\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1).code.to_natural_32\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Character at position `i'\n    obsolete\n      \"Due to potential truncation it is recommended to use `code (i)' instead.\"\n    do\n      Result := area.item (i - 1).natural_32_code.as_integer_32\n    end\n\n  area: SPECIAL [CHARACTER_32]\n      -- Storage for characters\n\nfeature -- Status report\n\n  extendible: BOOLEAN = True\n      -- May new items be added? (Answer: yes.)\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  changeable_comparison_criterion: BOOLEAN = False\n\nfeature -- Element change\n\n  set (t: READABLE_STRING_32; n1, n2: INTEGER)\n      -- Set current string to substring of `t' from indices `n1'\n      -- to `n2', or to empty string if no such substring.\n    require\n      argument_not_void: t /= Void\n    local\n      s: READABLE_STRING_32\n    do\n      s := t.substring (n1, n2)\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n    ensure\n      is_substring: same_string (t.substring (n1, n2))\n    end\n\n  subcopy (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy characters of `other' within bounds `start_pos' and\n      -- `end_pos' to current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n      enough_space: (count - index_pos) >= (end_pos - start_pos)\n    local\n      l_other_area, l_area: like area\n    do\n      if end_pos >= start_pos then\n        l_other_area := other.area\n        l_area := area\n        if l_area /= l_other_area then\n          l_area.copy_data (l_other_area, start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        else\n          l_area.overlapping_move (start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      copied: elks_checking implies\n        (Current ~ (old substring (1, index_pos - 1) +\n        old other.substring (start_pos, end_pos) +\n        old substring (index_pos + (end_pos - start_pos + 1), count)))\n    end\n\n  replace_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Replace characters from `start_index' to `end_index' with `s'.\n    require\n      string_not_void: s /= Void\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningfull_interval: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      diff: INTEGER\n      l_area: like area\n      s_count: INTEGER\n      old_count: INTEGER\n    do\n      s_count := s.count\n      old_count := count\n      diff := s_count - (end_index - start_index + 1)\n      new_size := diff + old_count\n      if diff > 0 then\n          -- We need to resize the string.\n        grow (new_size)\n      end\n\n      l_area := area\n        --| We move the end of the string forward (if diff is > 0), backward (if diff < 0),\n        --| and nothing otherwise.\n      if diff /= 0 then\n        l_area.overlapping_move (end_index, end_index + diff, old_count - end_index)\n      end\n        --| Set new count\n      set_count (new_size)\n        --| We copy the substring.\n      l_area.copy_data (s.area, s.area_lower, start_index - 1, s_count)\n    ensure\n      new_count: count = old count + old s.count - end_index + start_index - 1\n      replaced: elks_checking implies\n        (Current ~ (old (substring (1, start_index - 1) +\n          s + substring (end_index + 1, count))))\n    end\n\n  replace_substring_all (original, new: READABLE_STRING_32)\n      -- Replace every occurrence of `original' with `new'.\n    require\n      original_exists: original /= Void\n      new_exists: new /= Void\n      original_not_empty: not original.is_empty\n    extern\n      \"built_in\"\n    end\n\n  replace_blank\n      -- Replace all current characters with blanks.\n    do\n      fill_with (' ')\n    ensure\n      same_size: (count = old count) and (capacity = old capacity)\n      all_blank: elks_checking implies occurrences (' ') = count\n    end\n\n  fill_blank\n      -- Fill with `capacity' blank characters.\n    do\n      fill_character (' ')\n    ensure\n      filled: full\n      same_size: (count = capacity) and (capacity = old capacity)\n      -- all_blank: For every `i' in `count'..`capacity', `item' (`i') = `Blank'\n    end\n\n  fill_with (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if l_count /= 0 then\n        area.fill_with (c, 0, l_count - 1)\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  replace_character (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    obsolete\n      \"ELKS 2001: use `fill_with' instead'\"\n    do\n      fill_with (c)\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    do\n      if n < count then\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    local\n      nb: like count\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    local\n      nb, nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count - 1\n        l_area := area\n      until\n        nb_space > nb or else not l_prop.is_space (l_area.item (nb_space))\n      loop\n        nb_space := nb_space + 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count value.\n        nb := nb + 1 - nb_space\n          -- Shift characters to the left.\n        l_area.overlapping_move (nb_space, 0, nb)\n          -- Set new count.\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n      c: CHARACTER_32\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n        -- Compute number of spaces at the right of current string.\n      from\n        nb := count - 1\n        i := nb\n        l_area := area\n      until\n        i < 0\n      loop\n        c := l_area.item (i)\n        if not l_prop.is_space (c) then\n            -- We are done.\n          i := -1\n        else\n          nb_space := nb_space + 1\n          i := i - 1\n        end\n      end\n\n      if nb_space > 0 then\n          -- Set new count.\n        count := nb + 1 - nb_space\n        internal_hash_code := 0\n      end\n    end\n\n  share (other: STRING_32)\n      -- Make current string share the text of `other'.\n      -- Subsequent changes to the characters of current string\n      -- will also affect `other', and conversely.\n    require\n      argument_not_void: other /= Void\n    do\n      area := other.area\n      count := other.count\n      internal_hash_code := 0\n    ensure\n      shared_count: other.count = count\n      shared_area: other.area = area\n    end\n\n  put (c: CHARACTER_32; i: INTEGER)\n      -- Replace character at position `i' by `c'.\n    do\n      area.put (c, i - 1)\n      internal_hash_code := 0\n    ensure then\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\n  put_code (v: NATURAL_32; i: INTEGER)\n      -- Replace character at position `i' by character of code `v'.\n    do\n      area.put (v.to_character_32, i - 1)\n      internal_hash_code := 0\n    end\n\n  prepend_string_general (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        prepend (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  precede, prepend_character (c: CHARACTER_32)\n      -- Add `c' at front.\n    local\n      l_area: like area\n    do\n      if count = capacity then\n        resize (count + additional_space)\n      end\n      l_area := area\n      l_area.overlapping_move (0, 1, count)\n      l_area.put (c, 0)\n      count := count + 1\n      internal_hash_code := 0\n    ensure\n      new_count: count = old count + 1\n    end\n\n  prepend (s: READABLE_STRING_32)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n    do\n      insert_string (s, 1)\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n\n          -- First shift from `s.count' position all characters of current.\n        l_area.overlapping_move (0, l_s_count, count)\n\n          -- Copy string `s' at beginning.\n        l_area.copy_data (s.area, s.area_lower + start_index - 1, 0, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index) + Current))\n    end\n\n  prepend_boolean (b: BOOLEAN)\n      -- Prepend the string representation of `b' at front.\n    do\n      prepend_string_general (b.out)\n    end\n\n  prepend_double (d: DOUBLE)\n      -- Prepend the string representation of `d' at front.\n    do\n      prepend_string_general (d.out)\n    end\n\n  prepend_integer (i: INTEGER)\n      -- Prepend the string representation of `i' at front.\n    do\n      prepend_string_general (i.out)\n    end\n\n  prepend_real (r: REAL)\n      -- Prepend the string representation of `r' at front.\n    do\n      prepend_string_general (r.out)\n    end\n\n  prepend_string (s: detachable READABLE_STRING_32)\n      -- Prepend characters of `s', if not void, at front.\n    do\n      if s /= Void then\n        prepend (s)\n      end\n    end\n\n  append_string_general (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        append (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  append (s: READABLE_STRING_32)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (Current + s))\n    end\n\n  append_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower + start_index - 1, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + (end_index - start_index + 1)\n      appended: elks_checking implies same_string (old (Current + s.substring (start_index, end_index)))\n    end\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    do\n      Result := new_string (count + s.count)\n      Result.append (Current)\n      Result.append_string_general (s)\n    end\n\n  append_string (s: detachable READABLE_STRING_32)\n      -- Append a copy of `s', if not void, at end.\n    do\n      if s /= Void then\n        append (s)\n      end\n    ensure\n      appended: s /= Void implies\n        (elks_checking implies Current ~ (old twin + old s.twin))\n    end\n\n  append_integer (i: INTEGER)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_8 (i: INTEGER_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_8}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_16 (i: INTEGER_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_16}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_64 (i: INTEGER_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_64}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_8 (i: NATURAL_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_16 (i: NATURAL_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_32 (i: NATURAL_32)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_32\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_64 (i: NATURAL_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_real (r: REAL)\n      -- Append the string representation of `r' at end.\n    do\n      append_string_general (r.out)\n    end\n\n  append_double (d: DOUBLE)\n      -- Append the string representation of `d' at end.\n    do\n      append_string_general (d.out)\n    end\n\n  append_character, extend (c: CHARACTER_32)\n      -- Append `c' at end.\n    local\n      current_count: INTEGER\n    do\n      current_count := count\n      if current_count = capacity then\n        resize (current_count + additional_space)\n      end\n      area.put (c, current_count)\n      count := current_count + 1\n      internal_hash_code := 0\n    ensure then\n      item_inserted: item (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append_boolean (b: BOOLEAN)\n      -- Append the string representation of `b' at end.\n    do\n      append_string_general (b.out)\n    end\n\n  insert (s: READABLE_STRING_32; i: INTEGER)\n      -- Add `s' to left of position `i' in current string.\n    obsolete\n      \"ELKS 2001: use `insert_string' instead\"\n    require\n      string_exists: s /= Void\n      index_small_enough: i <= count + 1\n      index_large_enough: i > 0\n    do\n      insert_string (s, i)\n    ensure\n      inserted: elks_checking implies\n        (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_string (s: READABLE_STRING_32; i: INTEGER)\n      -- Insert `s' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      string_exists: s /= Void\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := s.count\n      if l_s_count /= 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n        pos := i - 1\n\n          -- First shift from `s.count' position all characters starting at index `pos'.\n        l_area.overlapping_move (pos, pos + l_s_count, count - pos)\n\n          -- Copy string `s' at index `pos'.\n        l_area.copy_data (s.area, s.area_lower, pos, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      inserted: elks_checking implies (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_character (c: CHARACTER_32; i: INTEGER)\n      -- Insert `c' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_area: like area\n    do\n        -- Resize Current if necessary.\n      new_size := 1 + count\n      if new_size > capacity then\n        resize (new_size + additional_space)\n      end\n\n        -- Perform all operations using a zero based arrays.\n      pos := i - 1\n      l_area := area\n\n        -- First shift from `s.count' position all characters starting at index `pos'.\n      l_area.overlapping_move (pos, pos + 1, count - pos)\n\n        -- Insert new character\n      l_area.put (c, pos)\n\n      count := new_size\n      internal_hash_code := 0\n    ensure\n      one_more_character: count = old count + 1\n      inserted: item (i) = c\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i, count))\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n        -- Shift characters to the left.\n      area.overlapping_move (i, i - 1, l_count - i)\n        -- Update content.\n      count := l_count - 1\n      internal_hash_code := 0\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (n.min (count) + 1, count))\n    end\n\n  remove_substring (start_index, end_index: INTEGER)\n      -- Remove all characters from `start_index'\n      -- to `end_index' inclusive.\n    require\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningful_interval: start_index <= end_index + 1\n    local\n      l_count, nb_removed: INTEGER\n    do\n      nb_removed := end_index - start_index + 1\n      if nb_removed > 0 then\n        l_count := count\n        area.overlapping_move (start_index + nb_removed - 1, start_index - 1, l_count - end_index)\n        count := l_count - nb_removed\n        internal_hash_code := 0\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, start_index - 1) + old substring (end_index + 1, count))\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if n > l_count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_head (l_count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, count - n.min (count)))\n    end\n\n  prune (c: CHARACTER_32)\n      -- Remove first occurrence of `c', if any.\n    require else\n      True\n    local\n      counter: INTEGER\n    do\n      from\n        counter := 1\n      until\n        counter > count or else (item (counter) = c)\n      loop\n        counter := counter + 1\n      end\n      if counter <= count then\n        remove (counter)\n      end\n    end\n\n  prune_all (c: CHARACTER_32)\n      -- Remove all occurrences of `c'.\n    require else\n      True\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n      l_char: CHARACTER_32\n    do\n        -- Traverse string and shift characters to the left\n        -- each time we find an occurrence of `c'.\n      from\n        l_area := area\n        nb := count\n      until\n        i = nb\n      loop\n        l_char := l_area.item (i)\n        if l_char /= c then\n          l_area.put (l_char, j)\n          j := j + 1\n        end\n        i := i + 1\n      end\n      count := j\n      internal_hash_code := 0\n    ensure then\n      changed_count: count = (old count) - (old occurrences (c))\n      -- removed: For every `i' in 1..`count', `item' (`i') /= `c'\n    end\n\n  prune_all_leading (c: CHARACTER_32)\n      -- Remove all leading occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (1) /= c\n      loop\n        remove (1)\n      end\n    end\n\n  prune_all_trailing (c: CHARACTER_32)\n      -- Remove all trailing occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (count) /= c\n      loop\n        remove (count)\n      end\n    end\n\n  wipe_out\n      -- Remove all characters.\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure then\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\n  clear_all\n      -- Reset all characters.\n    obsolete\n      \"Use `wipe_out' instead.\"\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\nfeature -- Resizing\n\n  adapt_size\n      -- Adapt the size to accommodate `count' characters.\n    do\n      resize (count)\n    end\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n      -- Do not lose any previously entered character.\n    do\n      area := area.aliased_resized_area_with_default ('%/000/', newsize + 1)\n    end\n\n  grow (newsize: INTEGER)\n      -- Ensure that the capacity is at least `newsize'.\n    do\n      if newsize > capacity then\n        resize (newsize)\n      end\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_string: same_string (old twin)\n    end\n\nfeature -- Conversion\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    do\n      Result := twin\n      Result.to_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    do\n      Result := twin\n      Result.to_upper\n    end\n\n  left_justify\n      -- Left justify Current using `count' as witdth.\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n        -- Remove leading white spaces.\n      nb := count\n      left_adjust\n\n        -- Get new count\n      i := count\n      if i < nb then\n          -- `left_adjust' did remove some characters, so we need to add\n          -- some white spaces at the end of the string.\n        from\n          l_area := area\n        until\n          i = nb\n        loop\n          l_area.put (' ', i)\n          i := i + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  center_justify\n      -- Center justify Current using `count' as width.\n    local\n      i, nb, l_offset: INTEGER\n      left_nb_space, right_nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count\n        l_area := area\n      until\n        left_nb_space = nb or else not l_prop.is_space (l_area.item (left_nb_space))\n      loop\n        left_nb_space := left_nb_space + 1\n      end\n\n        -- Compute number of spaces at the right of current string.\n      from\n        i := nb - 1\n        l_area := area\n      until\n        i = -1 or else not l_prop.is_space (l_area.item (i))\n      loop\n        right_nb_space := right_nb_space + 1\n        i := i - 1\n      end\n\n        -- We encourage that more spaces will be put to the left, when\n        -- number of spaces is not even.\n      l_offset := left_nb_space + right_nb_space\n      if l_offset \\\\ 2 = 0 then\n        l_offset := left_nb_space - l_offset // 2\n      else\n        l_offset := left_nb_space - l_offset // 2 - 1\n      end\n      if l_offset /= 0 then\n          -- Shift characters to the right or left (depending on sign of\n          -- `l_offset' by `l_offset' position.\n        l_area.move_data (left_nb_space, left_nb_space - l_offset,\n          nb - left_nb_space - right_nb_space)\n\n        if l_offset < 0 then\n            -- Fill left part with spaces.\n          l_area.fill_with (' ', left_nb_space, left_nb_space - l_offset - 1)\n        else\n            -- Fill right part with spaces.\n          l_area.fill_with (' ', nb - right_nb_space - l_offset, nb - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  right_justify\n      -- Right justify Current using `count' as width.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n      nb := count\n      right_adjust\n      i := count\n      nb_space := nb - i\n      if nb_space > 0 then\n          -- Shift characters to the right.\n        from\n          l_area := area\n        until\n          i = 0\n        loop\n          i := i - 1\n          l_area.put (l_area.item (i), i + nb_space)\n        variant\n          i + 1\n        end\n\n          -- Fill left part with spaces.\n        from\n        until\n          nb_space = 0\n        loop\n          nb_space := nb_space - 1\n          l_area.put (' ', nb_space)\n        variant\n          nb_space + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n    end\n\n  character_justify (pivot: CHARACTER_32; position: INTEGER)\n      -- Justify a string based on a `pivot'\n      -- and the `position' it needs to be in\n      -- the final string.\n      -- This will grow the string if necessary\n      -- to get the pivot in the correct place.\n    require\n      valid_position: position <= capacity\n      positive_position: position >= 1\n      pivot_not_space: pivot /= ' '\n      not_empty: not is_empty\n    local\n      l_index_of_pivot, l_new_size: INTEGER\n      l_area: like area\n    do\n      l_index_of_pivot := index_of (pivot, 1)\n      if l_index_of_pivot /= 0 then\n        if l_index_of_pivot < position then\n            -- We need to resize Current so that we can shift Current by\n            -- `l_index_of_pivot - position'.\n          l_new_size := count + position - l_index_of_pivot\n          grow (l_new_size)\n          l_area := area\n          l_area.move_data (0, position - l_index_of_pivot, count)\n          l_area.fill_with (' ', 0, position - l_index_of_pivot - 1)\n          count := l_new_size\n        else\n            -- Simply shift content to the left and reset trailing with spaces.\n          l_area := area\n          l_area.move_data (l_index_of_pivot - position, 0, count - l_index_of_pivot + position)\n          l_area.fill_with (' ', count - l_index_of_pivot + position, count - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  to_lower\n      -- Convert to lower case.\n    do\n      to_lower_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_lower)\n    end\n\n  to_upper\n      -- Convert to upper case.\n    do\n      to_upper_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_upper)\n    end\n\n  linear_representation: LINEAR [CHARACTER_32]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_32]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\n  frozen to_c: ANY\n      -- A reference to a C form of current string.\n      -- Useful only for interfacing with C software.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    local\n      l_area: like area\n    do\n      l_area := area\n      l_area.put ('%U', count)\n      Result := l_area\n    end\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    do\n      Result := twin\n      if count > 0 then\n        Result.mirror\n      end\n    end\n\n  mirror\n      -- Reverse the order of characters.\n      -- \"Hello world\" -> \"dlrow olleH\".\n    local\n      a: like area\n      c: CHARACTER_32\n      i, j: INTEGER\n    do\n      if count > 0 then\n        from\n          i := count - 1\n          a := area\n        until\n          i <= j\n        loop\n          c := a.item (i)\n          a.put (a.item (j), i)\n          a.put (c, j)\n          i := i - 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      -- reversed: For every `i' in 1..`count', `item' (`i') = old `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        Result := new_string (end_index - start_index + 1)\n        Result.area.copy_data (area, start_index - 1, 0, end_index - start_index + 1)\n        Result.set_count (end_index - start_index + 1)\n      else\n        Result := new_string (0)\n      end\n    end\n\n  multiply (n: INTEGER)\n      -- Duplicate a string within itself\n      -- (\"hello\").multiply(3) => \"hellohellohello\"\n    require\n      meaningful_multiplier: n >= 1\n    local\n      s: like Current\n      i: INTEGER\n    do\n      s := twin\n      grow (n * count)\n      from\n        i := n\n      until\n        i = 1\n      loop\n        append (s)\n        i := i - 1\n      end\n    end\n\nfeature {STRING_HANDLER} -- Implementation\n\n  frozen set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    do\n      count := number\n      internal_hash_code := 0\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    do\n      create Result.make (n)\n    end\n\nfeature -- Transformation\n\n  correct_mismatch\n      -- Attempt to correct object mismatch during retrieve using `mismatch_information'.\n    do\n        -- Nothing to be done because we only added `internal_hash_code' that will\n        -- be recomputed next time we query `hash_code'.\n\n        -- In .NET, we have a mismatch that is triggered due to the implementation of\n        -- SPECIAL [CHARACTER_32] as a .NET array of UInt16.\n      if area = Void and then attached {like area} mismatch_information.item (\"area\") as l_area then\n        area := l_area\n      end\n    end\n\ninvariant\n  extendible: extendible\n  compare_character: not object_comparison\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_32.e","content":"note\n  description: \"[\n    Sequences of 32-bit characters, accessible through integer indices\n    in a contiguous range.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-25 20:46:54 -0700 (Tue, 25 Mar 2014) $\"\n  revision: \"$Revision: 94717 $\"\n\nclass\n  STRING_32\n\ninherit\n  READABLE_STRING_32\n    export\n      {ANY} make, make_empty, make_filled, make_from_c, make_from_string, fill_character\n    redefine\n      area\n    end\n\n  STRING_GENERAL\n    rename\n      append as append_string_general,\n      append_substring as append_substring_general,\n      prepend as prepend_string_general,\n      prepend_substring as prepend_substring_general,\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general\n    undefine\n      copy, is_equal, out, has, index_of, last_index_of, occurrences\n    redefine\n      append_string_general,\n      prepend_string_general\n    end\n\n  INDEXABLE [CHARACTER_32, INTEGER]\n    undefine\n      copy, is_equal, out\n    redefine\n      prune_all,\n      changeable_comparison_criterion\n    end\n\n  RESIZABLE [CHARACTER_32]\n    undefine\n      copy, is_equal, out\n    redefine\n      changeable_comparison_criterion\n    end\n\n  TO_SPECIAL [CHARACTER_32]\n    undefine\n      copy, is_equal, out, item, at, put, valid_index\n    redefine\n      area\n    end\n\n  MISMATCH_CORRECTOR\n    undefine\n      copy, is_equal, out\n    redefine\n      correct_mismatch\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_string_general,\n  make_from_c,\n  make_from_c_pointer,\n  make_from_cil,\n  make_from_separate\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  make_from_cil ({SYSTEM_STRING}),\n  as_string_8: {READABLE_STRING_8, STRING_8}\n\nfeature -- Initialization\n\n  make_from_string_general (s: READABLE_STRING_GENERAL)\n      -- Initialize from the characters of `s'.\n    do\n      if attached {READABLE_STRING_32} s as s32 then\n        make_from_string (s32)\n      else\n        make (s.count)\n        append_string_general (s)\n      end\n    end\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 and then a_system_string /= Void then\n        set_count (l_count)\n        dotnet_convertor.read_system_string_into (a_system_string, Current)\n      end\n    end\n\n  from_c (c_string: POINTER)\n      -- Reset contents of string from contents of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n        -- Resize string in case it is not big enough\n      l_count := c_string_provider.count\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_string_into (Current)\n    ensure\n      no_zero_byte: not has ('%/0/')\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n      -- correct_count: the ASCII character at address c_string + count\n      --       is NULL\n    end\n\n  from_c_substring (c_string: POINTER; start_pos, end_pos: INTEGER)\n      -- Reset contents of string from substring of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      c_string_provider.set_shared_from_pointer_and_count (c_string + (start_pos - 1), l_count)\n        -- Resize string in case it is not big enough\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into (Current, 1, l_count)\n    ensure\n      valid_count: count = end_pos - start_pos + 1\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n    end\n\n  adapt (s: STRING_32): like Current\n      -- Object of a type conforming to the type of `s',\n      -- initialized with attributes from `s'\n    do\n      Result := new_string (0)\n      Result.share (s)\n    ensure\n      adapt_not_void: Result /= Void\n      shared_implementation: Result.shared_with (s)\n    end\n\n  remake (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    obsolete\n      \"Use `make' instead\"\n    require\n      non_negative_size: n >= 0\n    do\n      make (n)\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_32 assign put\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1)\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Character at position `i'\n    do\n      Result := area.item (i - 1).code.to_natural_32\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Character at position `i'\n    obsolete\n      \"Due to potential truncation it is recommended to use `code (i)' instead.\"\n    do\n      Result := area.item (i - 1).natural_32_code.as_integer_32\n    end\n\n  area: SPECIAL [CHARACTER_32]\n      -- Storage for characters\n\nfeature -- Status report\n\n  extendible: BOOLEAN = True\n      -- May new items be added? (Answer: yes.)\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  changeable_comparison_criterion: BOOLEAN = False\n\nfeature -- Element change\n\n  set (t: READABLE_STRING_32; n1, n2: INTEGER)\n      -- Set current string to substring of `t' from indices `n1'\n      -- to `n2', or to empty string if no such substring.\n    require\n      argument_not_void: t /= Void\n    local\n      s: READABLE_STRING_32\n    do\n      s := t.substring (n1, n2)\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n    ensure\n      is_substring: same_string (t.substring (n1, n2))\n    end\n\n  subcopy (other: READABLE_STRING_32; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy characters of `other' within bounds `start_pos' and\n      -- `end_pos' to current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n      enough_space: (count - index_pos) >= (end_pos - start_pos)\n    local\n      l_other_area, l_area: like area\n    do\n      if end_pos >= start_pos then\n        l_other_area := other.area\n        l_area := area\n        if l_area /= l_other_area then\n          l_area.copy_data (l_other_area, start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        else\n          l_area.overlapping_move (start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      copied: elks_checking implies\n        (Current ~ (old substring (1, index_pos - 1) +\n        old other.substring (start_pos, end_pos) +\n        old substring (index_pos + (end_pos - start_pos + 1), count)))\n    end\n\n  replace_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Replace characters from `start_index' to `end_index' with `s'.\n    require\n      string_not_void: s /= Void\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningfull_interval: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      diff: INTEGER\n      l_area: like area\n      s_count: INTEGER\n      old_count: INTEGER\n    do\n      s_count := s.count\n      old_count := count\n      diff := s_count - (end_index - start_index + 1)\n      new_size := diff + old_count\n      if diff > 0 then\n          -- We need to resize the string.\n        grow (new_size)\n      end\n\n      l_area := area\n        --| We move the end of the string forward (if diff is > 0), backward (if diff < 0),\n        --| and nothing otherwise.\n      if diff /= 0 then\n        l_area.overlapping_move (end_index, end_index + diff, old_count - end_index)\n      end\n        --| Set new count\n      set_count (new_size)\n        --| We copy the substring.\n      l_area.copy_data (s.area, s.area_lower, start_index - 1, s_count)\n    ensure\n      new_count: count = old count + old s.count - end_index + start_index - 1\n      replaced: elks_checking implies\n        (Current ~ (old (substring (1, start_index - 1) +\n          s + substring (end_index + 1, count))))\n    end\n\n  replace_substring_all (original, new: READABLE_STRING_32)\n      -- Replace every occurrence of `original' with `new'.\n    require\n      original_exists: original /= Void\n      new_exists: new /= Void\n      original_not_empty: not original.is_empty\n    local\n      l_first_pos, l_next_pos: INTEGER\n      l_orig_count, l_new_count, l_new_lower, l_count, i, l_index_count: INTEGER\n      l_src_index, l_dest_index, l_prev_index, l_copy_delta: INTEGER\n      l_area, l_new_area: like area\n      l_offset: INTEGER\n      l_string_searcher: like string_searcher\n      l_index_list: SPECIAL [INTEGER]\n    do\n      if not is_empty then\n        l_count := count\n        l_string_searcher := string_searcher\n        l_string_searcher.initialize_deltas (original)\n        l_orig_count := original.count\n        l_new_count := new.count\n        if l_orig_count >= l_new_count then\n          l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, 1, l_count)\n          if l_first_pos > 0 then\n            if l_orig_count = l_new_count then\n                -- String will not be resized, simply perform character substitution\n              from\n                l_area := area\n                l_new_area := new.area\n                l_new_lower := new.area_lower\n              until\n                l_first_pos = 0\n              loop\n                l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1, l_new_count)\n                if l_first_pos + l_new_count <= l_count then\n                  l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_new_count, l_count)\n                else\n                  l_first_pos := 0\n              end\n            end\n          elseif l_orig_count > l_new_count then\n              -- New string is smaller than previous string, we can optimize\n              -- substitution by only moving block between two occurrences of `orginal'.\n            from\n              l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n              l_area := area\n              l_new_area := new.area\n              l_new_lower := new.area_lower\n            until\n              l_next_pos = 0\n            loop\n                -- Copy new string into Current\n              l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n                -- Shift characters between `l_first_pos' and `l_next_pos'\n              l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n                l_first_pos + l_new_count - 1 - l_offset, l_next_pos - l_first_pos - l_orig_count)\n              l_first_pos := l_next_pos\n              l_offset := l_offset + (l_orig_count - l_new_count)\n              if l_first_pos + l_new_count <= l_count then\n                l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n              else\n                l_next_pos := 0\n              end\n            end\n              -- Perform final substitution:\n              -- Copy new string into Current\n            l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n              -- Shift characters between `l_first_pos' and the end of the string\n            l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n              l_first_pos + l_new_count - 1 - l_offset, l_count + 1 - l_first_pos - l_orig_count)\n                -- Perform last substitution\n            l_offset := l_offset + (l_orig_count - l_new_count)\n\n              -- Update `count'\n            set_count (l_count - l_offset)\n            end\n              -- String was modified we need to recompute the `hash_code'.\n            internal_hash_code := 0\n          end\n        elseif attached l_string_searcher.substring_index_list_with_deltas (Current, original, 1, l_count) as l_list then\n            -- Get the number of substitution to be performed by getting a list\n            -- of location where `original' appears.\n          l_index_list := l_list.area\n          l_index_count := l_index_list.count\n            -- Store the index of the last character up to which we need to move\n            -- characters in the reallocated string.\n          l_prev_index := l_count\n            -- Resize Current with the appropriate number of characters\n          l_copy_delta := l_new_count - l_orig_count\n          l_count := l_count + (l_index_count * l_copy_delta)\n          l_area := area.resized_area_with_default ('%U', l_count + 1)\n          area := l_area\n            -- Perform the substitution starting from the end.\n          from\n            i := l_index_count\n            l_new_lower := new.area_lower\n            l_new_area := new.area\n          until\n            i = 0\n          loop\n            i := i - 1\n            l_src_index := l_index_list.item (i)\n            l_dest_index := l_src_index + i * l_copy_delta\n              -- Shift non-matching characters to the right of the newly replaced string.\n            l_area.overlapping_move (l_src_index + l_orig_count - 1, l_dest_index + l_new_count - 1, l_prev_index - l_src_index - l_orig_count + 1)\n              -- Store new end of string where characters will be moved.\n            l_prev_index := l_src_index - 1\n\n              -- Copy `new' to its appropriate position\n            l_area.copy_data (l_new_area, l_new_lower, l_dest_index - 1, l_new_count)\n          end\n            -- Update the new `count' which also resets the `hash_code'.\n          set_count (l_count)\n        end\n      end\n    end\n\n  replace_blank\n      -- Replace all current characters with blanks.\n    do\n      fill_with (' ')\n    ensure\n      same_size: (count = old count) and (capacity = old capacity)\n      all_blank: elks_checking implies occurrences (' ') = count\n    end\n\n  fill_blank\n      -- Fill with `capacity' blank characters.\n    do\n      fill_character (' ')\n    ensure\n      filled: full\n      same_size: (count = capacity) and (capacity = old capacity)\n      -- all_blank: For every `i' in `count'..`capacity', `item' (`i') = `Blank'\n    end\n\n  fill_with (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if l_count /= 0 then\n        area.fill_with (c, 0, l_count - 1)\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  replace_character (c: CHARACTER_32)\n      -- Replace every character with `c'.\n    obsolete\n      \"ELKS 2001: use `fill_with' instead'\"\n    do\n      fill_with (c)\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    do\n      if n < count then\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    local\n      nb: like count\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    local\n      nb, nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count - 1\n        l_area := area\n      until\n        nb_space > nb or else not l_prop.is_space (l_area.item (nb_space))\n      loop\n        nb_space := nb_space + 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count value.\n        nb := nb + 1 - nb_space\n          -- Shift characters to the left.\n        l_area.overlapping_move (nb_space, 0, nb)\n          -- Set new count.\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n      c: CHARACTER_32\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n        -- Compute number of spaces at the right of current string.\n      from\n        nb := count - 1\n        i := nb\n        l_area := area\n      until\n        i < 0\n      loop\n        c := l_area.item (i)\n        if not l_prop.is_space (c) then\n            -- We are done.\n          i := -1\n        else\n          nb_space := nb_space + 1\n          i := i - 1\n        end\n      end\n\n      if nb_space > 0 then\n          -- Set new count.\n        count := nb + 1 - nb_space\n        internal_hash_code := 0\n      end\n    end\n\n  share (other: STRING_32)\n      -- Make current string share the text of `other'.\n      -- Subsequent changes to the characters of current string\n      -- will also affect `other', and conversely.\n    require\n      argument_not_void: other /= Void\n    do\n      area := other.area\n      count := other.count\n      internal_hash_code := 0\n    ensure\n      shared_count: other.count = count\n      shared_area: other.area = area\n    end\n\n  put (c: CHARACTER_32; i: INTEGER)\n      -- Replace character at position `i' by `c'.\n    do\n      area.put (c, i - 1)\n      internal_hash_code := 0\n    ensure then\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\n  put_code (v: NATURAL_32; i: INTEGER)\n      -- Replace character at position `i' by character of code `v'.\n    do\n      area.put (v.to_character_32, i - 1)\n      internal_hash_code := 0\n    end\n\n  prepend_string_general (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        prepend (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  precede, prepend_character (c: CHARACTER_32)\n      -- Add `c' at front.\n    local\n      l_area: like area\n    do\n      if count = capacity then\n        resize (count + additional_space)\n      end\n      l_area := area\n      l_area.overlapping_move (0, 1, count)\n      l_area.put (c, 0)\n      count := count + 1\n      internal_hash_code := 0\n    ensure\n      new_count: count = old count + 1\n    end\n\n  prepend (s: READABLE_STRING_32)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n    do\n      insert_string (s, 1)\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n\n          -- First shift from `s.count' position all characters of current.\n        l_area.overlapping_move (0, l_s_count, count)\n\n          -- Copy string `s' at beginning.\n        l_area.copy_data (s.area, s.area_lower + start_index - 1, 0, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index) + Current))\n    end\n\n  prepend_boolean (b: BOOLEAN)\n      -- Prepend the string representation of `b' at front.\n    do\n      prepend_string_general (b.out)\n    end\n\n  prepend_double (d: DOUBLE)\n      -- Prepend the string representation of `d' at front.\n    do\n      prepend_string_general (d.out)\n    end\n\n  prepend_integer (i: INTEGER)\n      -- Prepend the string representation of `i' at front.\n    do\n      prepend_string_general (i.out)\n    end\n\n  prepend_real (r: REAL)\n      -- Prepend the string representation of `r' at front.\n    do\n      prepend_string_general (r.out)\n    end\n\n  prepend_string (s: detachable READABLE_STRING_32)\n      -- Prepend characters of `s', if not void, at front.\n    do\n      if s /= Void then\n        prepend (s)\n      end\n    end\n\n  append_string_general (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    do\n      if attached {READABLE_STRING_32} s as l_s32 then\n        append (l_s32)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  append (s: READABLE_STRING_32)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (Current + s))\n    end\n\n  append_substring (s: READABLE_STRING_32; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower + start_index - 1, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + (end_index - start_index + 1)\n      appended: elks_checking implies same_string (old (Current + s.substring (start_index, end_index)))\n    end\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    do\n      Result := new_string (count + s.count)\n      Result.append (Current)\n      Result.append_string_general (s)\n    end\n\n  append_string (s: detachable READABLE_STRING_32)\n      -- Append a copy of `s', if not void, at end.\n    do\n      if s /= Void then\n        append (s)\n      end\n    ensure\n      appended: s /= Void implies\n        (elks_checking implies Current ~ (old twin + old s.twin))\n    end\n\n  append_integer (i: INTEGER)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_8 (i: INTEGER_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_8}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_16 (i: INTEGER_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_16}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_64 (i: INTEGER_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_64}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_8 (i: NATURAL_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_16 (i: NATURAL_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_32 (i: NATURAL_32)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_32\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_64 (i: NATURAL_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_32\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_32)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_real (r: REAL)\n      -- Append the string representation of `r' at end.\n    do\n      append_string_general (r.out)\n    end\n\n  append_double (d: DOUBLE)\n      -- Append the string representation of `d' at end.\n    do\n      append_string_general (d.out)\n    end\n\n  append_character, extend (c: CHARACTER_32)\n      -- Append `c' at end.\n    local\n      current_count: INTEGER\n    do\n      current_count := count\n      if current_count = capacity then\n        resize (current_count + additional_space)\n      end\n      area.put (c, current_count)\n      count := current_count + 1\n      internal_hash_code := 0\n    ensure then\n      item_inserted: item (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append_boolean (b: BOOLEAN)\n      -- Append the string representation of `b' at end.\n    do\n      append_string_general (b.out)\n    end\n\n  insert (s: READABLE_STRING_32; i: INTEGER)\n      -- Add `s' to left of position `i' in current string.\n    obsolete\n      \"ELKS 2001: use `insert_string' instead\"\n    require\n      string_exists: s /= Void\n      index_small_enough: i <= count + 1\n      index_large_enough: i > 0\n    do\n      insert_string (s, i)\n    ensure\n      inserted: elks_checking implies\n        (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_string (s: READABLE_STRING_32; i: INTEGER)\n      -- Insert `s' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      string_exists: s /= Void\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := s.count\n      if l_s_count /= 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n        pos := i - 1\n\n          -- First shift from `s.count' position all characters starting at index `pos'.\n        l_area.overlapping_move (pos, pos + l_s_count, count - pos)\n\n          -- Copy string `s' at index `pos'.\n        l_area.copy_data (s.area, s.area_lower, pos, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      inserted: elks_checking implies (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_character (c: CHARACTER_32; i: INTEGER)\n      -- Insert `c' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_area: like area\n    do\n        -- Resize Current if necessary.\n      new_size := 1 + count\n      if new_size > capacity then\n        resize (new_size + additional_space)\n      end\n\n        -- Perform all operations using a zero based arrays.\n      pos := i - 1\n      l_area := area\n\n        -- First shift from `s.count' position all characters starting at index `pos'.\n      l_area.overlapping_move (pos, pos + 1, count - pos)\n\n        -- Insert new character\n      l_area.put (c, pos)\n\n      count := new_size\n      internal_hash_code := 0\n    ensure\n      one_more_character: count = old count + 1\n      inserted: item (i) = c\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i, count))\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n        -- Shift characters to the left.\n      area.overlapping_move (i, i - 1, l_count - i)\n        -- Update content.\n      count := l_count - 1\n      internal_hash_code := 0\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (n.min (count) + 1, count))\n    end\n\n  remove_substring (start_index, end_index: INTEGER)\n      -- Remove all characters from `start_index'\n      -- to `end_index' inclusive.\n    require\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningful_interval: start_index <= end_index + 1\n    local\n      l_count, nb_removed: INTEGER\n    do\n      nb_removed := end_index - start_index + 1\n      if nb_removed > 0 then\n        l_count := count\n        area.overlapping_move (start_index + nb_removed - 1, start_index - 1, l_count - end_index)\n        count := l_count - nb_removed\n        internal_hash_code := 0\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, start_index - 1) + old substring (end_index + 1, count))\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if n > l_count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_head (l_count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, count - n.min (count)))\n    end\n\n  prune (c: CHARACTER_32)\n      -- Remove first occurrence of `c', if any.\n    require else\n      True\n    local\n      counter: INTEGER\n    do\n      from\n        counter := 1\n      until\n        counter > count or else (item (counter) = c)\n      loop\n        counter := counter + 1\n      end\n      if counter <= count then\n        remove (counter)\n      end\n    end\n\n  prune_all (c: CHARACTER_32)\n      -- Remove all occurrences of `c'.\n    require else\n      True\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n      l_char: CHARACTER_32\n    do\n        -- Traverse string and shift characters to the left\n        -- each time we find an occurrence of `c'.\n      from\n        l_area := area\n        nb := count\n      until\n        i = nb\n      loop\n        l_char := l_area.item (i)\n        if l_char /= c then\n          l_area.put (l_char, j)\n          j := j + 1\n        end\n        i := i + 1\n      end\n      count := j\n      internal_hash_code := 0\n    ensure then\n      changed_count: count = (old count) - (old occurrences (c))\n      -- removed: For every `i' in 1..`count', `item' (`i') /= `c'\n    end\n\n  prune_all_leading (c: CHARACTER_32)\n      -- Remove all leading occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (1) /= c\n      loop\n        remove (1)\n      end\n    end\n\n  prune_all_trailing (c: CHARACTER_32)\n      -- Remove all trailing occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (count) /= c\n      loop\n        remove (count)\n      end\n    end\n\n  wipe_out\n      -- Remove all characters.\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure then\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\n  clear_all\n      -- Reset all characters.\n    obsolete\n      \"Use `wipe_out' instead.\"\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\nfeature -- Resizing\n\n  adapt_size\n      -- Adapt the size to accommodate `count' characters.\n    do\n      resize (count)\n    end\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n      -- Do not lose any previously entered character.\n    do\n      area := area.aliased_resized_area_with_default ('%/000/', newsize + 1)\n    end\n\n  grow (newsize: INTEGER)\n      -- Ensure that the capacity is at least `newsize'.\n    do\n      if newsize > capacity then\n        resize (newsize)\n      end\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_string: same_string (old twin)\n    end\n\nfeature -- Conversion\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    do\n      Result := twin\n      Result.to_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    do\n      Result := twin\n      Result.to_upper\n    end\n\n  left_justify\n      -- Left justify Current using `count' as witdth.\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n        -- Remove leading white spaces.\n      nb := count\n      left_adjust\n\n        -- Get new count\n      i := count\n      if i < nb then\n          -- `left_adjust' did remove some characters, so we need to add\n          -- some white spaces at the end of the string.\n        from\n          l_area := area\n        until\n          i = nb\n        loop\n          l_area.put (' ', i)\n          i := i + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  center_justify\n      -- Center justify Current using `count' as width.\n    local\n      i, nb, l_offset: INTEGER\n      left_nb_space, right_nb_space: INTEGER\n      l_area: like area\n      l_prop: like character_properties\n    do\n      l_prop := character_properties\n\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count\n        l_area := area\n      until\n        left_nb_space = nb or else not l_prop.is_space (l_area.item (left_nb_space))\n      loop\n        left_nb_space := left_nb_space + 1\n      end\n\n        -- Compute number of spaces at the right of current string.\n      from\n        i := nb - 1\n        l_area := area\n      until\n        i = -1 or else not l_prop.is_space (l_area.item (i))\n      loop\n        right_nb_space := right_nb_space + 1\n        i := i - 1\n      end\n\n        -- We encourage that more spaces will be put to the left, when\n        -- number of spaces is not even.\n      l_offset := left_nb_space + right_nb_space\n      if l_offset \\\\ 2 = 0 then\n        l_offset := left_nb_space - l_offset // 2\n      else\n        l_offset := left_nb_space - l_offset // 2 - 1\n      end\n      if l_offset /= 0 then\n          -- Shift characters to the right or left (depending on sign of\n          -- `l_offset' by `l_offset' position.\n        l_area.move_data (left_nb_space, left_nb_space - l_offset,\n          nb - left_nb_space - right_nb_space)\n\n        if l_offset < 0 then\n            -- Fill left part with spaces.\n          l_area.fill_with (' ', left_nb_space, left_nb_space - l_offset - 1)\n        else\n            -- Fill right part with spaces.\n          l_area.fill_with (' ', nb - right_nb_space - l_offset, nb - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  right_justify\n      -- Right justify Current using `count' as width.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n      nb := count\n      right_adjust\n      i := count\n      nb_space := nb - i\n      if nb_space > 0 then\n          -- Shift characters to the right.\n        from\n          l_area := area\n        until\n          i = 0\n        loop\n          i := i - 1\n          l_area.put (l_area.item (i), i + nb_space)\n        variant\n          i + 1\n        end\n\n          -- Fill left part with spaces.\n        from\n        until\n          nb_space = 0\n        loop\n          nb_space := nb_space - 1\n          l_area.put (' ', nb_space)\n        variant\n          nb_space + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n    end\n\n  character_justify (pivot: CHARACTER_32; position: INTEGER)\n      -- Justify a string based on a `pivot'\n      -- and the `position' it needs to be in\n      -- the final string.\n      -- This will grow the string if necessary\n      -- to get the pivot in the correct place.\n    require\n      valid_position: position <= capacity\n      positive_position: position >= 1\n      pivot_not_space: pivot /= ' '\n      not_empty: not is_empty\n    local\n      l_index_of_pivot, l_new_size: INTEGER\n      l_area: like area\n    do\n      l_index_of_pivot := index_of (pivot, 1)\n      if l_index_of_pivot /= 0 then\n        if l_index_of_pivot < position then\n            -- We need to resize Current so that we can shift Current by\n            -- `l_index_of_pivot - position'.\n          l_new_size := count + position - l_index_of_pivot\n          grow (l_new_size)\n          l_area := area\n          l_area.move_data (0, position - l_index_of_pivot, count)\n          l_area.fill_with (' ', 0, position - l_index_of_pivot - 1)\n          count := l_new_size\n        else\n            -- Simply shift content to the left and reset trailing with spaces.\n          l_area := area\n          l_area.move_data (l_index_of_pivot - position, 0, count - l_index_of_pivot + position)\n          l_area.fill_with (' ', count - l_index_of_pivot + position, count - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  to_lower\n      -- Convert to lower case.\n    do\n      to_lower_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_lower)\n    end\n\n  to_upper\n      -- Convert to upper case.\n    do\n      to_upper_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_upper)\n    end\n\n  linear_representation: LINEAR [CHARACTER_32]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_32]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\n  frozen to_c: ANY\n      -- A reference to a C form of current string.\n      -- Useful only for interfacing with C software.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    local\n      l_area: like area\n    do\n      l_area := area\n      l_area.put ('%U', count)\n      Result := l_area\n    end\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    do\n      Result := twin\n      if count > 0 then\n        Result.mirror\n      end\n    end\n\n  mirror\n      -- Reverse the order of characters.\n      -- \"Hello world\" -> \"dlrow olleH\".\n    local\n      a: like area\n      c: CHARACTER_32\n      i, j: INTEGER\n    do\n      if count > 0 then\n        from\n          i := count - 1\n          a := area\n        until\n          i <= j\n        loop\n          c := a.item (i)\n          a.put (a.item (j), i)\n          a.put (c, j)\n          i := i - 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      -- reversed: For every `i' in 1..`count', `item' (`i') = old `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        Result := new_string (end_index - start_index + 1)\n        Result.area.copy_data (area, start_index - 1, 0, end_index - start_index + 1)\n        Result.set_count (end_index - start_index + 1)\n      else\n        Result := new_string (0)\n      end\n    end\n\n  multiply (n: INTEGER)\n      -- Duplicate a string within itself\n      -- (\"hello\").multiply(3) => \"hellohellohello\"\n    require\n      meaningful_multiplier: n >= 1\n    local\n      s: like Current\n      i: INTEGER\n    do\n      s := twin\n      grow (n * count)\n      from\n        i := n\n      until\n        i = 1\n      loop\n        append (s)\n        i := i - 1\n      end\n    end\n\nfeature {STRING_HANDLER} -- Implementation\n\n  frozen set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    do\n      count := number\n      internal_hash_code := 0\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    do\n      create Result.make (n)\n    end\n\nfeature -- Transformation\n\n  correct_mismatch\n      -- Attempt to correct object mismatch during retrieve using `mismatch_information'.\n    do\n        -- Nothing to be done because we only added `internal_hash_code' that will\n        -- be recomputed next time we query `hash_code'.\n\n        -- In .NET, we have a mismatch that is triggered due to the implementation of\n        -- SPECIAL [CHARACTER_32] as a .NET array of UInt16.\n      if area = Void and then attached {like area} mismatch_information.item (\"area\") as l_area then\n        area := l_area\n      end\n    end\n\ninvariant\n  extendible: extendible\n  compare_character: not object_comparison\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_8.e","content":"note\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-26 14:49:40 -0700 (Wed, 26 Mar 2014) $\"\n  revision: \"$Revision: 94721 $\"\n\nclass\n  STRING_8\n\ninherit\n  READABLE_STRING_8\n    export\n      {ANY} make, make_empty, make_filled, make_from_c, make_from_string, fill_character\n    redefine\n      area\n    end\n\n  STRING_GENERAL\n    rename\n      append as append_string_general,\n      append_substring as append_substring_general,\n      prepend as prepend_string_general,\n      prepend_substring as prepend_substring_general,\n      same_string as same_string_general,\n      same_characters as same_characters_general,\n      same_caseless_characters as same_caseless_characters_general,\n      starts_with as starts_with_general,\n      ends_with as ends_with_general,\n      is_case_insensitive_equal as is_case_insensitive_equal_general,\n      item as character_32_item,\n      has as character_32_has,\n      index_of as character_32_index_of,\n      last_index_of as character_32_last_index_of,\n      occurrences as character_32_occurrences\n    undefine\n      copy, is_equal, out\n    redefine\n      append_string_general,\n      prepend_string_general\n    end\n\n  INDEXABLE [CHARACTER_8, INTEGER]\n    undefine\n      copy, is_equal, out\n    redefine\n      prune_all,\n      changeable_comparison_criterion\n    end\n\n  RESIZABLE [CHARACTER_8]\n    undefine\n      copy, is_equal, out\n    redefine\n      changeable_comparison_criterion\n    end\n\n  TO_SPECIAL [CHARACTER_8]\n    undefine\n      copy, is_equal, out, item, at, put, valid_index\n    redefine\n      area\n    end\n\n  MISMATCH_CORRECTOR\n    undefine\n      copy, is_equal, out\n    redefine\n      correct_mismatch\n    end\n\ncreate\n  make,\n  make_empty,\n  make_filled,\n  make_from_string,\n  make_from_c,\n  make_from_c_pointer,\n  make_from_cil\n\nconvert\n  to_cil: {SYSTEM_STRING},\n  make_from_cil ({SYSTEM_STRING}),\n  as_string_32: {READABLE_STRING_32, STRING_32}\n\nfeature -- Initialization\n\n  make_from_cil (a_system_string: detachable SYSTEM_STRING)\n      -- Initialize Current with `a_system_string'.\n    local\n      l_count: INTEGER\n    do\n      if a_system_string /= Void then\n        l_count := a_system_string.length + dotnet_convertor.escape_count (a_system_string)\n      end\n      make (l_count)\n      if l_count > 0 and then a_system_string /= Void then\n        set_count (l_count)\n        dotnet_convertor.read_system_string_into (a_system_string, Current)\n      end\n    end\n\n  from_c (c_string: POINTER)\n      -- Reset contents of string from contents of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n    local\n      l_count: INTEGER\n    do\n      c_string_provider.set_shared_from_pointer (c_string)\n        -- Resize string in case it is not big enough\n      l_count := c_string_provider.count\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_string_into (Current)\n    ensure\n      no_zero_byte: not has ('%/0/')\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n      -- correct_count: the ASCII character at address c_string + count\n      --       is NULL\n    end\n\n  from_c_substring (c_string: POINTER; start_pos, end_pos: INTEGER)\n      -- Reset contents of string from substring of `c_string',\n      -- a string created by some C function.\n    require\n      c_string_exists: c_string /= default_pointer\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n    local\n      l_count: INTEGER\n    do\n      l_count := end_pos - start_pos + 1\n      c_string_provider.set_shared_from_pointer_and_count (c_string + (start_pos - 1), l_count)\n        -- Resize string in case it is not big enough\n      grow (l_count + 1)\n      count := l_count\n      internal_hash_code := 0\n      c_string_provider.read_substring_into (Current, 1, l_count)\n    ensure\n      valid_count: count = end_pos - start_pos + 1\n      -- characters: for all i in 1..count, item (i) equals\n      --       ASCII character at address c_string + (i - 1)\n    end\n\n  adapt (s: STRING_8): like Current\n      -- Object of a type conforming to the type of `s',\n      -- initialized with attributes from `s'\n    do\n      Result := new_string (0)\n      Result.share (s)\n    ensure\n      adapt_not_void: Result /= Void\n      shared_implementation: Result.shared_with (s)\n    end\n\n  remake (n: INTEGER)\n      -- Allocate space for at least `n' characters.\n    obsolete\n      \"Use `make' instead\"\n    require\n      non_negative_size: n >= 0\n    do\n      make (n)\n    ensure\n      empty_string: count = 0\n      area_allocated: capacity >= n\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): CHARACTER_8 assign put\n      -- Character at position `i'.\n    do\n      Result := area.item (i - 1)\n    end\n\n  character_32_item (i: INTEGER): CHARACTER_32\n      -- Character at position `i'.\n    do\n        -- We should be using `area.item (i - 1).to_character_32'\n        -- but some descendants of STRING that have their content encoded\n        -- in UTF-8 for example relies on `code' to get the corresponding\n        -- CHARACTER_32 by reading more than one byte. Once they have\n        -- been updated to use `character_32_item' we can revert the code\n        -- back to using `area' directly.\n      Result := code (i).to_character_32\n    end\n\n  code (i: INTEGER): NATURAL_32\n      -- Numeric code of character at position `i'.\n    do\n      Result := area.item (i - 1).code.to_natural_32\n    end\n\n  item_code (i: INTEGER): INTEGER\n      -- Numeric code of character at position `i'.\n      -- Use `code' instead for consistency with Unicode handling.\n      --| Not obsolete because old code using just ASCII is safe.\n    do\n      Result := area.item (i - 1).code\n    end\n\n  area: SPECIAL [CHARACTER_8]\n      -- Storage for characters.\n\nfeature -- Status report\n\n  extendible: BOOLEAN = True\n      -- May new items be added? (Answer: yes.)\n\n  prunable: BOOLEAN\n      -- May items be removed? (Answer: yes.)\n    do\n      Result := True\n    end\n\n  changeable_comparison_criterion: BOOLEAN = False\n\nfeature -- Element change\n\n  set (t: READABLE_STRING_8; n1, n2: INTEGER)\n      -- Set current string to substring of `t' from indices `n1'\n      -- to `n2', or to empty string if no such substring.\n    require\n      argument_not_void: t /= Void\n    local\n      s: READABLE_STRING_8\n    do\n      s := t.substring (n1, n2)\n      area := s.area\n      count := s.count\n      internal_hash_code := 0\n    ensure\n      is_substring: same_string (t.substring (n1, n2))\n    end\n\n  subcopy (other: READABLE_STRING_8; start_pos, end_pos, index_pos: INTEGER)\n      -- Copy characters of `other' within bounds `start_pos' and\n      -- `end_pos' to current string starting at index `index_pos'.\n    require\n      other_not_void: other /= Void\n      valid_start_pos: other.valid_index (start_pos)\n      valid_end_pos: other.valid_index (end_pos)\n      valid_bounds: (start_pos <= end_pos) or (start_pos = end_pos + 1)\n      valid_index_pos: valid_index (index_pos)\n      enough_space: (count - index_pos) >= (end_pos - start_pos)\n    local\n      l_other_area, l_area: like area\n    do\n      if end_pos >= start_pos then\n        l_other_area := other.area\n        l_area := area\n        if l_area /= l_other_area then\n          l_area.copy_data (l_other_area, start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        else\n          l_area.overlapping_move (start_pos - 1, index_pos - 1,\n            end_pos - start_pos + 1)\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      copied: elks_checking implies\n        (Current ~ (old substring (1, index_pos - 1) +\n        old other.substring (start_pos, end_pos) +\n        old substring (index_pos + (end_pos - start_pos + 1), count)))\n    end\n\n  replace_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Replace characters from `start_index' to `end_index' with `s'.\n    require\n      string_not_void: s /= Void\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningfull_interval: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      diff: INTEGER\n      l_area: like area\n      s_count: INTEGER\n      old_count: INTEGER\n    do\n      s_count := s.count\n      old_count := count\n      diff := s_count - (end_index - start_index + 1)\n      new_size := diff + old_count\n      if diff > 0 then\n          -- We need to resize the string.\n        grow (new_size)\n      end\n\n      l_area := area\n        --| We move the end of the string forward (if diff is > 0), backward (if diff < 0),\n        --| and nothing otherwise.\n      if diff /= 0 then\n        l_area.overlapping_move (end_index, end_index + diff, old_count - end_index)\n      end\n        --| Set new count\n      set_count (new_size)\n        --| We copy the substring.\n      l_area.copy_data (s.area, s.area_lower, start_index - 1, s_count)\n    ensure\n      new_count: count = old count + old s.count - end_index + start_index - 1\n      replaced: elks_checking implies\n        (Current ~ (old (substring (1, start_index - 1) +\n          s + substring (end_index + 1, count))))\n    end\n\n  replace_substring_all (original, new: READABLE_STRING_8)\n      -- Replace every occurrence of `original' with `new'.\n    require\n      original_exists: original /= Void\n      new_exists: new /= Void\n      original_not_empty: not original.is_empty\n    local\n      l_first_pos, l_next_pos: INTEGER\n      l_orig_count, l_new_count, l_new_lower, l_count, i, l_index_count: INTEGER\n      l_src_index, l_dest_index, l_prev_index, l_copy_delta: INTEGER\n      l_area, l_new_area: like area\n      l_offset: INTEGER\n      l_string_searcher: like string_searcher\n      l_index_list: SPECIAL [INTEGER]\n    do\n      if not is_empty then\n        l_count := count\n        l_string_searcher := string_searcher\n        l_string_searcher.initialize_deltas (original)\n        l_orig_count := original.count\n        l_new_count := new.count\n        if l_orig_count >= l_new_count then\n          l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, 1, l_count)\n          if l_first_pos > 0 then\n            if l_orig_count = l_new_count then\n                -- String will not be resized, simply perform character substitution\n              from\n                l_area := area\n                l_new_area := new.area\n                l_new_lower := new.area_lower\n              until\n                l_first_pos = 0\n              loop\n                l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1, l_new_count)\n                if l_first_pos + l_new_count <= l_count then\n                  l_first_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_new_count, l_count)\n                else\n                  l_first_pos := 0\n                end\n              end\n            elseif l_orig_count > l_new_count then\n                -- New string is smaller than previous string, we can optimize\n                -- substitution by only moving block between two occurrences of `orginal'.\n              from\n                l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n                l_area := area\n                l_new_area := new.area\n                l_new_lower := new.area_lower\n              until\n                l_next_pos = 0\n              loop\n                  -- Copy new string into Current\n                l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n                  -- Shift characters between `l_first_pos' and `l_next_pos'\n                l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n                  l_first_pos + l_new_count - 1 - l_offset, l_next_pos - l_first_pos - l_orig_count)\n                l_first_pos := l_next_pos\n                l_offset := l_offset + (l_orig_count - l_new_count)\n                if l_first_pos + l_new_count <= l_count then\n                  l_next_pos := l_string_searcher.substring_index_with_deltas (Current, original, l_first_pos + l_orig_count, l_count)\n                else\n                  l_next_pos := 0\n                end\n              end\n                -- Perform final substitution:\n                -- Copy new string into Current\n              l_area.copy_data (l_new_area, l_new_lower, l_first_pos - 1 - l_offset, l_new_count)\n                -- Shift characters between `l_first_pos' and the end of the string\n              l_area.overlapping_move (l_first_pos + l_orig_count - 1,\n                l_first_pos + l_new_count - 1 - l_offset, l_count + 1 - l_first_pos - l_orig_count)\n                  -- Perform last substitution\n              l_offset := l_offset + (l_orig_count - l_new_count)\n\n                -- Update `count'\n              set_count (l_count - l_offset)\n            end\n              -- String was modified we need to recompute the `hash_code'.\n            internal_hash_code := 0\n          end\n        elseif attached l_string_searcher.substring_index_list_with_deltas (Current, original, 1, l_count) as l_list then\n            -- Get the number of substitution to be performed by getting a list\n            -- of location where `original' appears.\n          l_index_list := l_list.area\n          l_index_count := l_index_list.count\n            -- Store the index of the last character up to which we need to move\n            -- characters in the reallocated string.\n          l_prev_index := l_count\n            -- Resize Current with the appropriate number of characters\n          l_copy_delta := l_new_count - l_orig_count\n          l_count := l_count + (l_index_count * l_copy_delta)\n          l_area := area.resized_area_with_default ('%U', l_count + 1)\n          area := l_area\n            -- Perform the substitution starting from the end.\n          from\n            i := l_index_count\n            l_new_lower := new.area_lower\n            l_new_area := new.area\n          until\n            i = 0\n          loop\n            i := i - 1\n            l_src_index := l_index_list.item (i)\n            l_dest_index := l_src_index + i * l_copy_delta\n              -- Shift non-matching characters to the right of the newly replaced string.\n            l_area.overlapping_move (l_src_index + l_orig_count - 1, l_dest_index + l_new_count - 1, l_prev_index - l_src_index - l_orig_count + 1)\n              -- Store new end of string where characters will be moved.\n            l_prev_index := l_src_index - 1\n\n              -- Copy `new' to its appropriate position\n            l_area.copy_data (l_new_area, l_new_lower, l_dest_index - 1, l_new_count)\n          end\n            -- Update the new `count' which also resets the `hash_code'.\n          set_count (l_count)\n        end\n      end\n    end\n\n  replace_blank\n      -- Replace all current characters with blanks.\n    do\n      fill_with (' ')\n    ensure\n      same_size: (count = old count) and (capacity = old capacity)\n      all_blank: elks_checking implies occurrences (' ') = count\n    end\n\n  fill_blank\n      -- Fill with `capacity' blank characters.\n    do\n      fill_character (' ')\n    ensure\n      filled: full\n      same_size: (count = capacity) and (capacity = old capacity)\n      -- all_blank: For every `i' in `count'..`capacity', `item' (`i') = `Blank'\n    end\n\n  fill_with (c: CHARACTER_8)\n      -- Replace every character with `c'.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if l_count /= 0 then\n        area.fill_with (c, 0, l_count - 1)\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  replace_character (c: CHARACTER_8)\n      -- Replace every character with `c'.\n    obsolete\n      \"ELKS 2001: use `fill_with' instead'\"\n    do\n      fill_with (c)\n    ensure\n      same_count: (count = old count) and (capacity = old capacity)\n      filled: elks_checking implies occurrences (c) = count\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    do\n      if n < count then\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    local\n      nb: like count\n    do\n      nb := count\n      if n < nb then\n        area.overlapping_move (nb - n, 0, n)\n        count := n\n        internal_hash_code := 0\n      end\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    local\n      nb, nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count - 1\n        l_area := area\n      until\n        nb_space > nb or else not l_area.item (nb_space).is_space\n      loop\n        nb_space := nb_space + 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count value.\n        nb := nb + 1 - nb_space\n          -- Shift characters to the left.\n        l_area.overlapping_move (nb_space, 0, nb)\n          -- Set new count.\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the right of current string.\n      from\n        nb := count - 1\n        i := nb\n        l_area := area\n      until\n        i < 0 or else not l_area.item (i).is_space\n      loop\n        nb_space := nb_space + 1\n        i := i - 1\n      end\n\n      if nb_space > 0 then\n          -- Set new count.\n        count := nb + 1 - nb_space\n        internal_hash_code := 0\n      end\n    end\n\n  share (other: STRING_8)\n      -- Make current string share the text of `other'.\n      -- Subsequent changes to the characters of current string\n      -- will also affect `other', and conversely.\n    require\n      argument_not_void: other /= Void\n    do\n      area := other.area\n      count := other.count\n      internal_hash_code := 0\n    ensure\n      shared_count: other.count = count\n      shared_area: other.area = area\n    end\n\n  put (c: CHARACTER_8; i: INTEGER)\n      -- Replace character at position `i' by `c'.\n    do\n      area.put (c, i - 1)\n      internal_hash_code := 0\n    ensure then\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\n  put_code (v: NATURAL_32; i: INTEGER)\n      -- Replace character at position `i' by character of code `v'.\n    do\n      area.put (v.to_character_8, i - 1)\n      internal_hash_code := 0\n    end\n\n  precede, prepend_character (c: CHARACTER_8)\n      -- Add `c' at front.\n    local\n      l_area: like area\n    do\n      if count = capacity then\n        resize (count + additional_space)\n      end\n      l_area := area\n      l_area.overlapping_move (0, 1, count)\n      l_area.put (c, 0)\n      count := count + 1\n      internal_hash_code := 0\n    ensure\n      new_count: count = old count + 1\n    end\n\n  prepend_string_general (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    do\n      if attached {READABLE_STRING_8} s as l_s8 then\n        prepend (l_s8)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  prepend (s: READABLE_STRING_8)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n    do\n      insert_string (s, 1)\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n\n          -- First shift from `s.count' position all characters of current.\n        l_area.overlapping_move (0, l_s_count, count)\n\n          -- Copy string `s' at beginning.\n        l_area.copy_data (s.area, s.area_lower + start_index - 1, 0, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index) + Current))\n    end\n\n  prepend_boolean (b: BOOLEAN)\n      -- Prepend the string representation of `b' at front.\n    do\n      prepend (b.out)\n    end\n\n  prepend_double (d: DOUBLE)\n      -- Prepend the string representation of `d' at front.\n    do\n      prepend (d.out)\n    end\n\n  prepend_integer (i: INTEGER)\n      -- Prepend the string representation of `i' at front.\n    do\n      prepend (i.out)\n    end\n\n  prepend_real (r: REAL)\n      -- Prepend the string representation of `r' at front.\n    do\n      prepend (r.out)\n    end\n\n  prepend_string (s: detachable READABLE_STRING_8)\n      -- Prepend characters of `s', if not void, at front.\n    do\n      if s /= Void then\n        prepend (s)\n      end\n    end\n\n  append_string_general (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    do\n      if attached {READABLE_STRING_8} s as l_s8 then\n        append (l_s8)\n      else\n        Precursor {STRING_GENERAL} (s)\n      end\n    end\n\n  append (s: READABLE_STRING_8)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (Current + s))\n    end\n\n  append_substring (s: READABLE_STRING_8; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size + additional_space)\n        end\n        area.copy_data (s.area, s.area_lower + start_index - 1, l_count, l_s_count)\n        count := l_new_size\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + (end_index - start_index + 1)\n      appended: elks_checking implies same_string (old (Current + s.substring (start_index, end_index)))\n    end\n\n  plus alias \"+\" (s: READABLE_STRING_GENERAL): like Current\n      -- <Precursor>\n    do\n      Result := new_string (count + s.count)\n      Result.append (Current)\n      Result.append_string_general (s)\n    end\n\n  append_string (s: detachable READABLE_STRING_8)\n      -- Append a copy of `s', if not void, at end.\n    do\n      if s /= Void then\n        append (s)\n      end\n    ensure\n      appended: s /= Void implies\n        (elks_checking implies Current ~ (old twin + old s.twin))\n    end\n\n  append_integer (i: INTEGER)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_8 (i: INTEGER_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_8}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_16 (i: INTEGER_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_16}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_integer_64 (i: INTEGER_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: INTEGER_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          if i < 0 then\n            append_character ('-')\n            l_starting_index := l_starting_index + 1\n              -- Special case for minimum integer value as negating it\n              -- as no effect.\n            if i = {INTEGER_64}.Min_value then\n              append_character ('8')\n              l_value := -(i // 10)\n            else\n              l_value := -i\n            end\n          else\n            l_value := i\n          end\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_8 (i: NATURAL_8)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_8\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_16 (i: NATURAL_16)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_16\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_32 (i: NATURAL_32)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_32\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_natural_64 (i: NATURAL_64)\n      -- Append the string representation of `i' at end.\n    local\n      l_value: NATURAL_64\n      l_starting_index, l_ending_index: INTEGER\n      l_temp: CHARACTER_8\n      l_area: like area\n    do\n      if i = 0 then\n        append_character ('0')\n      else\n          -- Extract integer value digit by digit from right to left.\n        from\n          l_starting_index := count\n          l_value := i\n        until\n          l_value = 0\n        loop\n          append_character (((l_value \\\\ 10)+ 48).to_character_8)\n          l_value := l_value // 10\n        end\n\n          -- Now put digits in correct order from left to right.\n        from\n          l_ending_index := count - 1\n          l_area := area\n        until\n          l_starting_index >= l_ending_index\n        loop\n          l_temp := l_area.item (l_starting_index)\n          l_area.put (l_area.item (l_ending_index), l_starting_index)\n          l_area.put (l_temp, l_ending_index)\n          l_ending_index := l_ending_index - 1\n          l_starting_index := l_starting_index + 1\n        end\n      end\n    end\n\n  append_real (r: REAL)\n      -- Append the string representation of `r' at end.\n    do\n      append (r.out)\n    end\n\n  append_double (d: DOUBLE)\n      -- Append the string representation of `d' at end.\n    do\n      append (d.out)\n    end\n\n  append_character, extend (c: CHARACTER_8)\n      -- Append `c' at end.\n    local\n      current_count: INTEGER\n    do\n      current_count := count\n      if current_count = capacity then\n        resize (current_count + additional_space)\n      end\n      area.put (c, current_count)\n      count := current_count + 1\n      internal_hash_code := 0\n    ensure then\n      item_inserted: item (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append_boolean (b: BOOLEAN)\n      -- Append the string representation of `b' at end.\n    do\n      append (b.out)\n    end\n\n  insert (s: READABLE_STRING_8; i: INTEGER)\n      -- Add `s' to left of position `i' in current string.\n    obsolete\n      \"ELKS 2001: use `insert_string' instead\"\n    require\n      string_exists: s /= Void\n      index_small_enough: i <= count + 1\n      index_large_enough: i > 0\n    do\n      insert_string (s, i)\n    ensure\n      inserted: elks_checking implies\n        (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_string (s: READABLE_STRING_8; i: INTEGER)\n      -- Insert `s' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      string_exists: s /= Void\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_s_count: INTEGER\n      l_area: like area\n    do\n        -- Insert `s' if `s' is not empty, otherwise is useless.\n      l_s_count := s.count\n      if l_s_count /= 0 then\n          -- Resize Current if necessary.\n        new_size := l_s_count + count\n        if new_size > capacity then\n          resize (new_size + additional_space)\n        end\n\n          -- Perform all operations using a zero based arrays.\n        l_area := area\n        pos := i - 1\n\n          -- First shift from `s.count' position all characters starting at index `pos'.\n        l_area.overlapping_move (pos, pos + l_s_count, count - pos)\n\n          -- Copy string `s' at index `pos'.\n        l_area.copy_data (s.area, s.area_lower, pos, l_s_count)\n\n        count := new_size\n        internal_hash_code := 0\n      end\n    ensure\n      inserted: elks_checking implies (Current ~ (old substring (1, i - 1) + old (s.twin) + old substring (i, count)))\n    end\n\n  insert_character (c: CHARACTER_8; i: INTEGER)\n      -- Insert `c' at index `i', shifting characters between ranks\n      -- `i' and `count' rightwards.\n    require\n      valid_insertion_index: 1 <= i and i <= count + 1\n    local\n      pos, new_size: INTEGER\n      l_area: like area\n    do\n        -- Resize Current if necessary.\n      new_size := 1 + count\n      if new_size > capacity then\n        resize (new_size + additional_space)\n      end\n\n        -- Perform all operations using a zero based arrays.\n      pos := i - 1\n      l_area := area\n\n        -- First shift from `s.count' position all characters starting at index `pos'.\n      l_area.overlapping_move (pos, pos + 1, count - pos)\n\n        -- Insert new character\n      l_area.put (c, pos)\n\n      count := new_size\n      internal_hash_code := 0\n    ensure\n      one_more_character: count = old count + 1\n      inserted: item (i) = c\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i, count))\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n        -- Shift characters to the left.\n      area.overlapping_move (i, i - 1, l_count - i)\n        -- Update content.\n      count := l_count - 1\n      internal_hash_code := 0\n    end\n\n  remove_head (n: INTEGER)\n      -- Remove first `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    do\n      if n > count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_tail (count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (n.min (count) + 1, count))\n    end\n\n  remove_substring (start_index, end_index: INTEGER)\n      -- Remove all characters from `start_index'\n      -- to `end_index' inclusive.\n    require\n      valid_start_index: 1 <= start_index\n      valid_end_index: end_index <= count\n      meaningful_interval: start_index <= end_index + 1\n    local\n      l_count, nb_removed: INTEGER\n    do\n      nb_removed := end_index - start_index + 1\n      if nb_removed > 0 then\n        l_count := count\n        area.overlapping_move (start_index + nb_removed - 1, start_index - 1, l_count - end_index)\n        count := l_count - nb_removed\n        internal_hash_code := 0\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, start_index - 1) + old substring (end_index + 1, count))\n    end\n\n  remove_tail (n: INTEGER)\n      -- Remove last `n' characters;\n      -- if `n' > `count', remove all.\n    require\n      n_non_negative: n >= 0\n    local\n      l_count: INTEGER\n    do\n      l_count := count\n      if n > l_count then\n        count := 0\n        internal_hash_code := 0\n      else\n        keep_head (l_count - n)\n      end\n    ensure\n      removed: elks_checking implies Current ~ (old substring (1, count - n.min (count)))\n    end\n\n  prune (c: CHARACTER_8)\n      -- Remove first occurrence of `c', if any.\n    require else\n      True\n    local\n      counter: INTEGER\n    do\n      from\n        counter := 1\n      until\n        counter > count or else (item (counter) = c)\n      loop\n        counter := counter + 1\n      end\n      if counter <= count then\n        remove (counter)\n      end\n    end\n\n  prune_all (c: CHARACTER_8)\n      -- Remove all occurrences of `c'.\n    require else\n      True\n    local\n      i, j, nb: INTEGER\n      l_area: like area\n      l_char: CHARACTER_8\n    do\n        -- Traverse string and shift characters to the left\n        -- each time we find an occurrence of `c'.\n      from\n        l_area := area\n        nb := count\n      until\n        i = nb\n      loop\n        l_char := l_area.item (i)\n        if l_char /= c then\n          l_area.put (l_char, j)\n          j := j + 1\n        end\n        i := i + 1\n      end\n      count := j\n      internal_hash_code := 0\n    ensure then\n      changed_count: count = (old count) - (old occurrences (c))\n      -- removed: For every `i' in 1..`count', `item' (`i') /= `c'\n    end\n\n  prune_all_leading (c: CHARACTER_8)\n      -- Remove all leading occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (1) /= c\n      loop\n        remove (1)\n      end\n    end\n\n  prune_all_trailing (c: CHARACTER_8)\n      -- Remove all trailing occurrences of `c'.\n    do\n      from\n      until\n        is_empty or else item (count) /= c\n      loop\n        remove (count)\n      end\n    end\n\n  wipe_out\n      -- Remove all characters.\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure then\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\n  clear_all\n      -- Reset all characters.\n    obsolete\n      \"Use `wipe_out' instead.\"\n    do\n      count := 0\n      internal_hash_code := 0\n    ensure\n      is_empty: count = 0\n      same_capacity: capacity = old capacity\n    end\n\nfeature -- Resizing\n\n  adapt_size\n      -- Adapt the size to accommodate `count' characters.\n    do\n      resize (count)\n    end\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n    do\n      area := area.aliased_resized_area_with_default ('%/000/', newsize + 1)\n    end\n\n  grow (newsize: INTEGER)\n      -- Ensure that the capacity is at least `newsize'.\n    do\n      if newsize > capacity then\n        resize (newsize)\n      end\n    end\n\n  trim\n      -- <Precursor>\n    local\n      n: like count\n    do\n      n := count\n      if n < capacity then\n        area := area.aliased_resized_area (n)\n      end\n    ensure then\n      same_string: same_string (old twin)\n    end\n\nfeature -- Conversion\n\n  as_lower: like Current\n      -- New object with all letters in lower case.\n    do\n      Result := twin\n      Result.to_lower\n    end\n\n  as_upper: like Current\n      -- New object with all letters in upper case\n    do\n      Result := twin\n      Result.to_upper\n    end\n\n  left_justify\n      -- Left justify Current using `count' as witdth.\n    local\n      i, nb: INTEGER\n      l_area: like area\n    do\n        -- Remove leading white spaces.\n      nb := count\n      left_adjust\n\n        -- Get new count\n      i := count\n      if i < nb then\n          -- `left_adjust' did remove some characters, so we need to add\n          -- some white spaces at the end of the string.\n        from\n          l_area := area\n        until\n          i = nb\n        loop\n          l_area.put (' ', i)\n          i := i + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    end\n\n  center_justify\n      -- Center justify Current using `count' as width.\n    local\n      i, nb, l_offset: INTEGER\n      left_nb_space, right_nb_space: INTEGER\n      l_area: like area\n    do\n        -- Compute number of spaces at the left of current string.\n      from\n        nb := count\n        l_area := area\n      until\n        left_nb_space = nb or else not l_area.item (left_nb_space).is_space\n      loop\n        left_nb_space := left_nb_space + 1\n      end\n\n        -- Compute number of spaces at the right of current string.\n      from\n        i := nb - 1\n        l_area := area\n      until\n        i = -1 or else not l_area.item (i).is_space\n      loop\n        right_nb_space := right_nb_space + 1\n        i := i - 1\n      end\n\n        -- We encourage that more spaces will be put to the left, when\n        -- number of spaces is not even.\n      l_offset := left_nb_space + right_nb_space\n      if l_offset \\\\ 2 = 0 then\n        l_offset := left_nb_space - l_offset // 2\n      else\n        l_offset := left_nb_space - l_offset // 2 - 1\n      end\n      if l_offset /= 0 then\n          -- Shift characters to the right or left (depending on sign of\n          -- `l_offset' by `l_offset' position.\n        l_area.move_data (left_nb_space, left_nb_space - l_offset,\n          nb - left_nb_space - right_nb_space)\n\n        if l_offset < 0 then\n            -- Fill left part with spaces.\n          l_area.fill_with (' ', left_nb_space, left_nb_space - l_offset - 1)\n        else\n            -- Fill right part with spaces.\n          l_area.fill_with (' ', nb - right_nb_space - l_offset, nb - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  right_justify\n      -- Right justify Current using `count' as width.\n    local\n      i, nb: INTEGER\n      nb_space: INTEGER\n      l_area: like area\n    do\n      nb := count\n      right_adjust\n      i := count\n      nb_space := nb - i\n      if nb_space > 0 then\n          -- Shift characters to the right.\n        from\n          l_area := area\n        until\n          i = 0\n        loop\n          i := i - 1\n          l_area.put (l_area.item (i), i + nb_space)\n        variant\n          i + 1\n        end\n\n          -- Fill left part with spaces.\n        from\n        until\n          nb_space = 0\n        loop\n          nb_space := nb_space - 1\n          l_area.put (' ', nb_space)\n        variant\n          nb_space + 1\n        end\n          -- Restore `count'\n        count := nb\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n    end\n\n  character_justify (pivot: CHARACTER_8; position: INTEGER)\n      -- Justify a string based on a `pivot'\n      -- and the `position' it needs to be in\n      -- the final string.\n      -- This will grow the string if necessary\n      -- to get the pivot in the correct place.\n    require\n      valid_position: position <= capacity\n      positive_position: position >= 1\n      pivot_not_space: pivot /= ' '\n      not_empty: not is_empty\n    local\n      l_index_of_pivot, l_new_size: INTEGER\n      l_area: like area\n    do\n      l_index_of_pivot := index_of (pivot, 1)\n      if l_index_of_pivot /= 0 then\n        if l_index_of_pivot < position then\n            -- We need to resize Current so that we can shift Current by\n            -- `l_index_of_pivot - position'.\n          l_new_size := count + position - l_index_of_pivot\n          grow (l_new_size)\n          l_area := area\n          l_area.move_data (0, position - l_index_of_pivot, count)\n          l_area.fill_with (' ', 0, position - l_index_of_pivot - 1)\n          count := l_new_size\n        else\n            -- Simply shift content to the left and reset trailing with spaces.\n          l_area := area\n          l_area.move_data (l_index_of_pivot - position, 0, count - l_index_of_pivot + position)\n          l_area.fill_with (' ', count - l_index_of_pivot + position, count - 1)\n        end\n        internal_hash_code := 0\n      end\n    end\n\n  to_lower\n      -- Convert to lower case.\n    do\n      to_lower_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_lower)\n    end\n\n  to_upper\n      -- Convert to upper case.\n    do\n      to_upper_area (area, 0, count - 1)\n      internal_hash_code := 0\n    ensure\n      length_and_content: elks_checking implies Current ~ (old as_upper)\n    end\n\n  linear_representation: LINEAR [CHARACTER_8]\n      -- Representation as a linear structure\n    local\n      temp: ARRAYED_LIST [CHARACTER_8]\n      i: INTEGER\n    do\n      create temp.make (capacity)\n      from\n        i := 1\n      until\n        i > count\n      loop\n        temp.extend (item (i))\n        i := i + 1\n      end\n      Result := temp\n    end\n\n  frozen to_c: ANY\n      -- A reference to a C form of current string.\n      -- Useful only for interfacing with C software.\n    require\n      not_is_dotnet: not {PLATFORM}.is_dotnet\n    local\n      l_area: like area\n    do\n      l_area := area\n      l_area.put ('%U', count)\n      Result := l_area\n    end\n\n  mirrored: like Current\n      -- Mirror image of string;\n      -- Result for \"Hello world\" is \"dlrow olleH\".\n    do\n      Result := twin\n      if count > 0 then\n        Result.mirror\n      end\n    end\n\n  mirror\n      -- Reverse the order of characters.\n      -- \"Hello world\" -> \"dlrow olleH\".\n    local\n      a: like area\n      c: CHARACTER_8\n      i, j: INTEGER\n    do\n      if count > 0 then\n        from\n          i := count - 1\n          a := area\n        until\n          i <= j\n        loop\n          c := a.item (i)\n          a.put (a.item (j), i)\n          a.put (c, j)\n          i := i - 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      same_count: count = old count\n      -- reversed: For every `i' in 1..`count', `item' (`i') = old `item' (`count'+1-`i')\n    end\n\nfeature -- Duplication\n\n  substring (start_index, end_index: INTEGER): like Current\n      -- Copy of substring containing all characters at indices\n      -- between `start_index' and `end_index'\n    do\n      if (1 <= start_index) and (start_index <= end_index) and (end_index <= count) then\n        Result := new_string (end_index - start_index + 1)\n        Result.area.copy_data (area, start_index - 1, 0, end_index - start_index + 1)\n        Result.set_count (end_index - start_index + 1)\n      else\n        Result := new_string (0)\n      end\n    end\n\n  multiply (n: INTEGER)\n      -- Duplicate a string within itself\n      -- (\"hello\").multiply(3) => \"hellohellohello\"\n    require\n      meaningful_multiplier: n >= 1\n    local\n      s: like Current\n      i: INTEGER\n    do\n      s := twin\n      grow (n * count)\n      from\n        i := n\n      until\n        i = 1\n      loop\n        append (s)\n        i := i - 1\n      end\n    end\n\nfeature {STRING_HANDLER} -- Implementation\n\n  frozen set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    do\n      count := number\n      internal_hash_code := 0\n    end\n\nfeature {NONE} -- Implementation\n\n  new_string (n: INTEGER): like Current\n      -- New instance of current with space for at least `n' characters.\n    do\n      create Result.make (n)\n    end\n\nfeature -- Transformation\n\n  correct_mismatch\n      -- Attempt to correct object mismatch during retrieve using `mismatch_information'.\n    do\n      -- Nothing to be done because we only added `internal_hash_code' that will\n      -- be recomputed next time we query `hash_code'.\n    end\n\nfeature {NONE} -- Implementation\n\n  empty_area: SPECIAL [CHARACTER_8]\n      -- Empty `area' to avoid useless creation of empty areas when wiping out a STRING.\n    obsolete\n      \"Simply create `area' directly.\"\n    do\n      create Result.make_empty (1)\n      Result.extend ('%U')\n    ensure\n      empty_area_not_void: Result /= Void\n    end\n\ninvariant\n  extendible: extendible\n  compare_character: not object_comparison\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_general.e","content":"note\n  description: \"Common ancestors to all STRING classes.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-03-19 07:36:10 -0700 (Wed, 19 Mar 2014) $\"\n  revision: \"$Revision: 94633 $\"\n\ndeferred class\n  STRING_GENERAL\n\ninherit\n  READABLE_STRING_GENERAL\n    export\n      {ANY} copy, standard_copy, deep_copy\n    end\n\nconvert\n  as_string_32: {READABLE_STRING_32, STRING_32},\n  to_cil: {SYSTEM_STRING}\n\nfeature -- Settings\n\n  put_code (v: like code; i: INTEGER)\n      -- Put code `v' at position `i'.\n    require\n      valid_code: valid_code (v)\n      valid_index: valid_index (i)\n    deferred\n    ensure\n      inserted: code (i) = v\n      stable_count: count = old count\n      stable_before_i: elks_checking implies substring (1, i - 1) ~ (old substring (1, i - 1))\n      stable_after_i: elks_checking implies substring (i + 1, count) ~ (old substring (i + 1, count))\n    end\n\nfeature {STRING_HANDLER} -- Settings\n\n  set_count (number: INTEGER)\n      -- Set `count' to `number' of characters.\n    require\n      valid_count: 0 <= number and number <= capacity\n    deferred\n    ensure\n      new_count: count = number\n    end\n\n  set_internal_hash_code (v: like internal_hash_code)\n      -- Set `internal_hash_code' with `v'.\n    require\n      v_nonnegative: v >= 0\n    do\n      internal_hash_code := v\n    ensure\n      internal_hash_code_set: internal_hash_code = v\n    end\n\nfeature -- Element change\n\n  append_code (c: like code)\n      -- Append `c' at end.\n    require\n      valid_code: valid_code (c)\n    local\n      current_count: INTEGER\n    do\n      current_count := count + 1\n      if current_count > capacity then\n        resize (current_count)\n      end\n      set_count (current_count)\n      put_code (c, current_count)\n    ensure then\n      item_inserted: code (count) = c\n      new_count: count = old count + 1\n      stable_before: elks_checking implies substring (1, count - 1) ~ (old twin)\n    end\n\n  append (s: READABLE_STRING_GENERAL)\n      -- Append characters of `s' at end.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n        from\n          i := 1\n        until\n          i > l_s_count\n        loop\n          append_code (s.code (i))\n          i := i + 1\n        end\n        set_count (l_new_size)\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + old s.count\n      appended: elks_checking implies same_string (old (to_string_32 + s))\n    end\n\n  append_substring (s: READABLE_STRING_GENERAL; start_index, end_index: INTEGER)\n      -- Append characters of `s.substring (start_index, end_index)' at end.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n        from\n          i := start_index\n        until\n          i > end_index\n        loop\n          append_code (s.code (i))\n          i := i + 1\n        end\n        set_count (l_new_size)\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      appended: elks_checking implies same_string (old (to_string_32 + s.substring (start_index, end_index)))\n    end\n\n  prepend (s: READABLE_STRING_GENERAL)\n      -- Prepend characters of `s' at front.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i: INTEGER\n    do\n      l_s_count := s.count\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n          -- Copy `Current' at the end starting from the end since it will probably overlap.\n        set_count (l_new_size)\n        from\n          i := l_count\n        until\n          i = 0\n        loop\n          put_code (code (i), i + l_s_count)\n          i := i - 1\n        end\n          -- Copy `s' at the beginning of Current.\n        from\n          i := 1\n        until\n          i > l_s_count\n        loop\n          put_code (s.code (i), i)\n          i := i + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old (count + s.count)\n      inserted: elks_checking implies same_string (old (s.to_string_32 + Current))\n    end\n\n  prepend_substring (s: READABLE_STRING_GENERAL; start_index, end_index: INTEGER)\n      -- Prepend characters of `s.substring (start_index, end_index)' at front.\n    require\n      argument_not_void: s /= Void\n      compatible_strings: is_string_8 implies s.is_valid_as_string_8\n      start_index_valid: start_index >= 1\n      end_index_valid: end_index <= s.count\n      valid_bounds: start_index <= end_index + 1\n    local\n      l_count, l_s_count, l_new_size: INTEGER\n      i, j: INTEGER\n    do\n      l_s_count := end_index - start_index + 1\n      if l_s_count > 0 then\n        l_count := count\n        l_new_size := l_s_count + l_count\n        if l_new_size > capacity then\n          resize (l_new_size)\n        end\n          -- Copy `Current' at the end starting from the end since it will probably overlap.\n        set_count (l_new_size)\n        from\n          i := l_count\n        until\n          i = 0\n        loop\n          put_code (code (i), i + l_s_count)\n          i := i - 1\n        end\n          -- Copy `s' at the beginning of Current.\n        from\n          i := start_index\n          j := 1\n        until\n          i > end_index\n        loop\n          put_code (s.code (i), j)\n          i := i + 1\n          j := j + 1\n        end\n        internal_hash_code := 0\n      end\n    ensure\n      new_count: count = old count + end_index - start_index + 1\n      inserted: elks_checking implies same_string (old (s.substring (start_index, end_index).to_string_32 + Current))\n    end\n\n  keep_head (n: INTEGER)\n      -- Remove all characters except for the first `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    deferred\n    ensure\n      new_count: count = n.min (old count)\n      kept: elks_checking implies Current ~ (old substring (1, n.min (count)))\n    end\n\n  keep_tail (n: INTEGER)\n      -- Remove all characters except for the last `n';\n      -- do nothing if `n' >= `count'.\n    require\n      non_negative_argument: n >= 0\n    deferred\n    ensure\n      new_count: count = n.min (old count)\n      kept: elks_checking implies Current ~ (old substring (count - n.min(count) + 1, count))\n    end\n\n  left_adjust\n      -- Remove leading whitespace.\n    deferred\n    ensure\n      valid_count: count <= old count\n      new_count: not is_empty implies not item (1).is_space\n      kept: elks_checking implies Current ~ ((old twin).substring (old count - count + 1, old count))\n      only_spaces_removed_before: elks_checking implies (old twin).is_substring_whitespace (1, (old twin).substring_index (Current, 1) - 1)\n    end\n\n  right_adjust\n      -- Remove trailing whitespace.\n    deferred\n    ensure\n      valid_count: count <= old count\n      new_count: not is_empty implies not item (count).is_space\n      kept: elks_checking implies Current ~ ((old twin).substring (1, count))\n      only_spaces_removed_after: elks_checking implies (old twin).is_substring_whitespace ((old twin).substring_index (Current, 1) + count, old count)\n    end\n\n  adjust\n      -- Remove leading and/or trailing whitespace.\n    do\n      left_adjust\n      right_adjust\n    ensure\n      valid_count: count <= old count\n      new_count_left: not is_empty implies not item (1).is_space\n      new_count_right: not is_empty implies not item (count).is_space\n      kept: elks_checking implies (old twin).has_substring (Current)\n      only_spaces_removed_before: elks_checking implies (old twin).is_substring_whitespace (1, (old twin).substring_index (Current, 1) - 1)\n      only_spaces_removed_after: elks_checking implies (old twin).is_substring_whitespace ((old twin).substring_index (Current, 1) + count, old count)\n    end\n\nfeature -- Removal\n\n  remove (i: INTEGER)\n      -- Remove `i'-th character.\n    require\n      valid_index: valid_index (i)\n    deferred\n    ensure\n      new_count: count = old count - 1\n      removed: elks_checking implies\n        to_string_32 ~ (old substring (1, i - 1).to_string_32 + old substring (i + 1, count).to_string_32)\n    end\n\nfeature -- Resizing\n\n  resize (newsize: INTEGER)\n      -- Rearrange string so that it can accommodate\n      -- at least `newsize' characters.\n      -- Do not lose any previously entered character.\n    require\n      new_size_large_enough: newsize >= count\n    deferred\n    ensure\n      same_count: count = old count\n      capacity_large_enough: capacity >= newsize\n      same_content: elks_checking implies same_string (old twin)\n    end\n\ninvariant\n  mutable: not is_immutable\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"string_handler.e","content":"note\n  description: \"Objects that can access `set_count' from STRING\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  STRING_HANDLER\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"system_string.e","content":"note\n  description: \"Fake abstraction of a .NET SYSTEM_STRING in a non-.NET system\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass\n  SYSTEM_STRING\n\nfeature -- Access\n\n  length: INTEGER do end\n\ninvariant\n  is_dotnet: {PLATFORM}.is_dotnet\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"table.e","content":"note\n  description: \"Containers whose items are accessible through keys\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: table, access;\n  access: key, membership;\n  contents: generic;\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\ndeferred class TABLE [G, H] inherit\n\n  BAG [G]\n    rename\n      put as bag_put\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (k: H): G assign force\n      -- Entry of key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    end\n\nfeature -- Status report\n\n  valid_key (k: H): BOOLEAN\n      -- Is `k' a valid key?\n    deferred\n    end\n\nfeature -- Element change\n\n  put (v: G; k: H)\n      -- Associate value `v' with key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    end\n\n  force (v: G; k: H)\n      -- Associate value `v' with key `k'.\n    require\n      valid_key: valid_key (k)\n    deferred\n    ensure\n      inserted: item (k) = v\n    end\n\nfeature {NONE} -- Inapplicable\n\n  bag_put (v: G)\n    do\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"to_special.e","content":"note\n  description: \"References to special objects, for direct access to arrays and strings\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2012-05-23 21:13:10 -0700 (Wed, 23 May 2012) $\"\n  revision: \"$Revision: 91981 $\"\n\nclass TO_SPECIAL [T]\n\ncreate\n  make_empty_area,\n  make_filled_area\n\nfeature -- Access\n\n  area: SPECIAL [T]\n      -- Special data zone\n\nfeature {NONE} -- Initialization\n\n  make_empty_area (n: INTEGER)\n      -- Creates a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    do\n      create area.make_empty (n)\n    ensure\n      area_allocated: area /= Void\n      capacity_set: area.capacity = n\n      count_set: area.count = 0\n    end\n\n  make_filled_area (a_default_value: T; n: INTEGER)\n      -- Creates a special object for `n' entries.\n    require\n      non_negative_argument: n >= 0\n    do\n      create area.make_filled (a_default_value, n)\n    ensure\n      area_allocated: area /= Void\n      capacity_set: area.capacity = n\n      count_set: area.count = n\n      area_filled: area.filled_with (a_default_value, 0, n - 1)\n    end\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (i: INTEGER): T assign put\n      -- Entry at index `i', if in index interval\n    require\n      valid_index: valid_index (i)\n    do\n      Result := area.item (i)\n    end\n\nfeature -- Status report\n\n  valid_index (i: INTEGER): BOOLEAN\n      -- Is `i' within the bounds of Current?\n    do\n      Result := area.valid_index (i)\n    end\n\nfeature -- Element change\n\n  put (v: T; i: INTEGER)\n      -- Replace `i'-th entry, if in index interval, by `v'.\n    require\n      valid_index: valid_index (i)\n    do\n      area.put (v, i)\n    ensure\n      inserted: item (i) = v\n    end\n\nfeature {NONE} -- Element change\n\n  set_area (other: like area)\n      -- Make `other' the new `area'\n    do\n      area := other\n    ensure\n      area_set: area = other\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n\nend\n"});
__eiffel_builtin.push({"filename":"traversable.e","content":"note\n  description: \"[\n    Structures for which there exists a traversal policy\n    that will visit every element exactly once.\n    ]\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: traversable, traversing;\n  access: cursor;\n  contents: generic;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class\n  TRAVERSABLE [G]\n\ninherit\n\n  CONTAINER [G]\n\nfeature -- Access\n\n  item: G\n      -- Item at current position\n    require\n      not_off: not off\n    deferred\n    end\n\nfeature -- Status report\n\n  off: BOOLEAN\n      -- Is there no current item?\n    deferred\n    end\n\nfeature -- Cursor movement\n\n  start\n      -- Move to first position if any.\n    deferred\n    end\n\nfeature -- Iteration\n\n\n  do_all (action: PROCEDURE [ANY, TUPLE [G]])\n      -- Apply `action' to every item.\n      -- Semantics not guaranteed if `action' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_exists: action /= Void\n    do\n      linear_representation.do_all (action)\n    end\n\n  do_if (action: PROCEDURE [ANY, TUPLE [G]];\n   test: FUNCTION [ANY, TUPLE [G], BOOLEAN])\n      -- Apply `action' to every item that satisfies `test'.\n      -- Semantics not guaranteed if `action' or `test' changes the structure;\n      -- in such a case, apply iterator to clone of structure instead.\n    require\n      action_exists: action /= Void\n      test_exists: test /= Void\n      -- test.is_pure\n    do\n      linear_representation.do_if (action, test)\n    end\n\n  there_exists (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for at least one item?\n    require\n      test_exists: test /= Void\n      -- test.is_pure\n    do\n      Result := linear_representation.there_exists (test)\n    end\n\n  for_all (test: FUNCTION [ANY, TUPLE [G], BOOLEAN]): BOOLEAN\n      -- Is `test' true for all items?\n    require\n      test_exists: test /= Void\n      -- test.is_pure\n    do\n      Result := linear_representation.for_all (test)\n    end\n\ninvariant\n\n  empty_constraint: is_empty implies off\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"tuple.e","content":"note\n  description: \"Implementation of TUPLE\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2014-01-01 04:33:47 -0800 (Wed, 01 Jan 2014) $\"\n  revision: \"$Revision: 93865 $\"\n\nclass\n  TUPLE\n\ninherit\n  HASHABLE\n    redefine\n      is_equal\n    end\n\n  MISMATCH_CORRECTOR\n    redefine\n      correct_mismatch, is_equal\n    end\n\n  READABLE_INDEXABLE [detachable separate ANY]\n    redefine\n      is_equal\n    end\n\ncreate\n  default_create\n\nfeature -- Access\n\n  item alias \"[]\", at alias \"@\" (index: INTEGER): detachable separate ANY assign put\n      -- Entry of key `index'.\n    do\n      inspect eif_item_type ($Current, index)\n      when boolean_code then Result := eif_boolean_item ($Current, index)\n      when character_8_code then Result := eif_character_8_item ($Current, index)\n      when character_32_code then Result := eif_character_32_item ($Current, index)\n      when real_64_code then Result := eif_real_64_item ($Current, index)\n      when real_32_code then Result := eif_real_32_item ($Current, index)\n      when pointer_code then Result := eif_pointer_item ($Current, index)\n      when natural_8_code then Result := eif_natural_8_item ($Current, index)\n      when natural_16_code then Result := eif_natural_16_item ($Current, index)\n      when natural_32_code then Result := eif_natural_32_item ($Current, index)\n      when natural_64_code then Result := eif_natural_64_item ($Current, index)\n      when integer_8_code then Result := eif_integer_8_item ($Current, index)\n      when integer_16_code then Result := eif_integer_16_item ($Current, index)\n      when integer_32_code then Result := eif_integer_32_item ($Current, index)\n      when integer_64_code then Result := eif_integer_64_item ($Current, index)\n      when Reference_code then Result := eif_reference_item ($Current, index)\n      end\n    end\n\n  reference_item (index: INTEGER): detachable separate ANY\n      -- Reference item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_reference: is_reference_item (index)\n    do\n      Result := eif_reference_item ($Current, index)\n    end\n\n  boolean_item (index: INTEGER): BOOLEAN\n      -- Boolean item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_boolean: is_boolean_item (index)\n    do\n      Result := eif_boolean_item ($Current, index)\n    end\n\n  character_8_item, character_item (index: INTEGER): CHARACTER_8\n      -- Character item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_character_8: is_character_8_item (index)\n    do\n      Result := eif_character_8_item ($Current, index)\n    end\n\n  character_32_item, wide_character_item (index: INTEGER): CHARACTER_32\n      -- Character item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_character_32: is_character_32_item (index)\n    do\n      Result := eif_character_32_item ($Current, index)\n    end\n\n  real_64_item, double_item (index: INTEGER): REAL_64\n      -- Double item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_numeric: is_double_item (index)\n    do\n      Result := eif_real_64_item ($Current, index)\n    end\n\n  natural_8_item (index: INTEGER): NATURAL_8\n      -- NATURAL_8 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_natural_8_item (index)\n    do\n      Result := eif_natural_8_item ($Current, index)\n    end\n\n  natural_16_item (index: INTEGER): NATURAL_16\n      -- NATURAL_16 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_natural_16_item (index)\n    do\n      Result := eif_natural_16_item ($Current, index)\n    end\n\n  natural_32_item (index: INTEGER): NATURAL_32\n      -- NATURAL_32 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_natural_32_item (index)\n    do\n      Result := eif_natural_32_item ($Current, index)\n    end\n\n  natural_64_item (index: INTEGER): NATURAL_64\n      -- NATURAL_64 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_natural_64_item (index)\n    do\n      Result := eif_natural_64_item ($Current, index)\n    end\n\n  integer_8_item (index: INTEGER): INTEGER_8\n      -- INTEGER_8 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_integer_8_item (index)\n    do\n      Result := eif_integer_8_item ($Current, index)\n    end\n\n  integer_16_item (index: INTEGER): INTEGER_16\n      -- INTEGER_16 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_integer_16_item (index)\n    do\n      Result := eif_integer_16_item ($Current, index)\n    end\n\n  integer_item, integer_32_item (index: INTEGER): INTEGER_32\n      -- INTEGER_32 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_integer_32_item (index)\n    do\n      Result := eif_integer_32_item ($Current, index)\n    end\n\n  integer_64_item (index: INTEGER): INTEGER_64\n      -- INTEGER_64 item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_integer: is_integer_64_item (index)\n    do\n      Result := eif_integer_64_item ($Current, index)\n    end\n\n  pointer_item (index: INTEGER): POINTER\n      -- Pointer item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_pointer: is_pointer_item (index)\n    do\n      Result := eif_pointer_item ($Current, index)\n    end\n\n  real_32_item, real_item (index: INTEGER): REAL_32\n      -- real item at `index'.\n    require\n      valid_index: valid_index (index)\n      is_real_or_integer: is_real_item (index)\n    do\n      Result := eif_real_32_item ($Current, index)\n    end\nfeature -- Comparison\n\n  object_comparison: BOOLEAN\n      -- Must search operations use `equal' rather than `='\n      -- for comparing references? (Default: no, use `='.)\n    do\n      Result := eif_boolean_item ($Current, 0)\n    end\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object considered\n      -- equal to current object?\n    local\n      i, nb: INTEGER\n      l_object_compare: BOOLEAN\n    do\n      l_object_compare := object_comparison\n      if l_object_compare = other.object_comparison then\n        if l_object_compare then\n          nb := count\n          if nb = other.count then\n            from\n              Result := True\n              i := 1\n            until\n              i > nb or not Result\n            loop\n              Result := item (i) ~ other.item (i)\n              i := i + 1\n            end\n          end\n        else\n          Result := Precursor {HASHABLE} (other)\n        end\n      end\n    end\n\nfeature -- Status setting\n\n  compare_objects\n      -- Ensure that future search operations will use `equal'\n      -- rather than `=' for comparing references.\n    do\n      eif_put_boolean_item ($Current, 0, True)\n    ensure\n      object_comparison: object_comparison\n    end\n\n  compare_references\n      -- Ensure that future search operations will use `='\n      -- rather than `equal' for comparing references.\n    do\n      eif_put_boolean_item ($Current, 0, False)\n    ensure\n      reference_comparison: not object_comparison\n    end\n\nfeature -- Status report\n\n  hash_code: INTEGER\n      -- Hash code value\n    local\n      i, nb, l_hash: INTEGER\n    do\n      from\n        i := 1\n        nb := count\n      until\n        i > nb\n      loop\n        inspect eif_item_type($Current, i)\n        when boolean_code then l_hash := eif_boolean_item ($Current, i).hash_code\n        when character_8_code then l_hash := eif_character_8_item ($Current, i).hash_code\n        when character_32_code then l_hash := eif_character_32_item ($Current, i).hash_code\n        when real_64_code then l_hash := eif_real_64_item ($Current, i).hash_code\n        when real_32_code then l_hash := eif_real_32_item ($Current, i).hash_code\n        when pointer_code then l_hash := eif_pointer_item ($Current, i).hash_code\n        when natural_8_code then l_hash := eif_natural_8_item ($Current, i).hash_code\n        when natural_16_code then l_hash := eif_natural_16_item ($Current, i).hash_code\n        when natural_32_code then l_hash := eif_natural_32_item ($Current, i).hash_code\n        when natural_64_code then l_hash := eif_natural_64_item ($Current, i).hash_code\n        when integer_8_code then l_hash := eif_integer_8_item ($Current, i).hash_code\n        when integer_16_code then l_hash := eif_integer_16_item ($Current, i).hash_code\n        when integer_32_code then l_hash := eif_integer_32_item ($Current, i).hash_code\n        when integer_64_code then l_hash := eif_integer_64_item ($Current, i).hash_code\n        when reference_code then\n          if attached {HASHABLE} eif_reference_item ($Current, i) as l_key then\n            l_hash := l_key.hash_code\n          else\n            l_hash := 0\n          end\n        end\n        Result := Result + l_hash * internal_primes.i_th (i)\n        i := i + 1\n      end\n        -- Ensure it is a positive value.\n      Result := Result.hash_code\n    end\n\n  valid_index (k: INTEGER): BOOLEAN\n      -- Is `k' a valid key?\n    do\n      Result := k >= 1 and then k <= count\n    end\n\n  valid_type_for_index (v: detachable separate ANY; index: INTEGER): BOOLEAN\n      -- Is object `v' a valid target for element at position `index'?\n    require\n      valid_index: valid_index (index)\n    local\n      l_reflector: REFLECTOR\n    do\n      if v = Void then\n          -- A Void entry is valid only for references and as long as the expected type\n          -- is detachable.\n        if eif_item_type ($Current, index) = reference_code then\n          Result := not generating_type.generic_parameter_type (index).is_attached\n        end\n      else\n        inspect eif_item_type ($Current, index)\n        when boolean_code then Result := attached {BOOLEAN_REF} v as l_b\n        when character_8_code then Result := attached {CHARACTER_8_REF} v as l_c\n        when character_32_code then Result := attached {CHARACTER_32_REF} v as l_wc\n        when real_64_code then Result := attached {REAL_64_REF} v as l_d\n        when real_32_code then Result := attached {REAL_32_REF} v as l_r\n        when pointer_code then Result := attached {POINTER_REF} v as l_p\n        when natural_8_code then Result := attached {NATURAL_8_REF} v as l_ui8\n        when natural_16_code then Result := attached {NATURAL_16_REF} v as l_ui16\n        when natural_32_code then Result := attached {NATURAL_32_REF} v as l_ui32\n        when natural_64_code then Result := attached {NATURAL_64_REF} v as l_ui64\n        when integer_8_code then Result := attached {INTEGER_8_REF} v as l_i8\n        when integer_16_code then Result := attached {INTEGER_16_REF} v as l_i16\n        when integer_32_code then Result := attached {INTEGER_32_REF} v as l_i32\n        when integer_64_code then Result := attached {INTEGER_64_REF} v as l_i64\n        when Reference_code then\n            -- Let's check that type of `v' conforms to specified type of `index'-th\n            -- arguments of current TUPLE.\n          create l_reflector\n          Result := l_reflector.field_conforms_to (v.generating_type.type_id, generating_type.generic_parameter_type (index).type_id)\n        end\n      end\n    end\n\n  count: INTEGER\n      -- Number of element in Current.\n    external\n      \"built_in\"\n    end\n\n  lower: INTEGER = 1\n      -- Lower bound of TUPLE.\n\n  upper: INTEGER\n      -- Upper bound of TUPLE.\n    do\n      Result := count\n    end\n\n  is_empty: BOOLEAN\n      -- Is Current empty?\n    do\n      Result := count = 0\n    end\n\n  index_set: INTEGER_INTERVAL\n      -- Range of acceptable indexes\n    do\n      create Result.make (lower, upper)\n    end\n\nfeature -- Element change\n\n  put (v: detachable separate ANY; index: INTEGER)\n      -- Insert `v' at position `index'.\n    require\n      valid_index: valid_index (index)\n      valid_type_for_index: valid_type_for_index (v, index)\n    do\n      inspect eif_item_type ($Current, index)\n      when boolean_code then eif_put_boolean_item_with_object ($Current, index, $v)\n      when character_8_code then eif_put_character_8_item_with_object ($Current, index, $v)\n      when character_32_code then eif_put_character_32_item_with_object ($Current, index, $v)\n      when real_64_code then eif_put_real_64_item_with_object ($Current, index, $v)\n      when real_32_code then eif_put_real_32_item_with_object ($Current, index, $v)\n      when pointer_code then eif_put_pointer_item_with_object ($Current, index, $v)\n      when natural_8_code then eif_put_natural_8_item_with_object ($Current, index, $v)\n      when natural_16_code then eif_put_natural_16_item_with_object ($Current, index, $v)\n      when natural_32_code then eif_put_natural_32_item_with_object ($Current, index, $v)\n      when natural_64_code then eif_put_natural_64_item_with_object ($Current, index, $v)\n      when integer_8_code then eif_put_integer_8_item_with_object ($Current, index, $v)\n      when integer_16_code then eif_put_integer_16_item_with_object ($Current, index, $v)\n      when integer_32_code then eif_put_integer_32_item_with_object ($Current, index, $v)\n      when integer_64_code then eif_put_integer_64_item_with_object ($Current, index, $v)\n      when Reference_code then eif_put_reference_item_with_object ($Current, index, $v)\n      end\n    end\n\n  put_reference (v: detachable separate ANY; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type_for_index: valid_type_for_index (v, index)\n      valid_type: is_reference_item (index)\n    do\n      eif_put_reference_item_with_object ($Current, index, $v)\n    end\n\n  put_boolean (v: BOOLEAN; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_boolean_item (index)\n    do\n      eif_put_boolean_item ($Current, index, v)\n    end\n\n  put_character_8, put_character (v: CHARACTER_8; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_character_8_item (index)\n    do\n      eif_put_character_8_item ($Current, index, v)\n    end\n\n  put_character_32, put_wide_character (v: CHARACTER_32; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_character_32_item (index)\n    do\n      eif_put_character_32_item ($Current, index, v)\n    end\n\n  put_real_64, put_double (v: REAL_64; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_double_item (index)\n    do\n      eif_put_real_64_item ($Current, index, v)\n    end\n\n  put_real_32, put_real (v: REAL_32; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_real_item (index)\n    do\n      eif_put_real_32_item ($Current, index, v)\n    end\n\n  put_pointer (v: POINTER; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_pointer_item (index)\n    do\n      eif_put_pointer_item ($Current, index, v)\n    end\n\n  put_natural_8 (v: NATURAL_8; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_natural_8_item (index)\n    do\n      eif_put_natural_8_item ($Current, index, v)\n    end\n\n  put_natural_16 (v: NATURAL_16; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_natural_16_item (index)\n    do\n      eif_put_natural_16_item ($Current, index, v)\n    end\n\n  put_natural_32 (v: NATURAL_32; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_natural_32_item (index)\n    do\n      eif_put_natural_32_item ($Current, index, v)\n    end\n\n  put_natural_64 (v: NATURAL_64; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_natural_64_item (index)\n    do\n      eif_put_natural_64_item ($Current, index, v)\n    end\n\n  put_integer, put_integer_32 (v: INTEGER_32; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_integer_32_item (index)\n    do\n      eif_put_integer_32_item ($Current, index, v)\n    end\n\n  put_integer_8 (v: INTEGER_8; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_integer_8_item (index)\n    do\n      eif_put_integer_8_item ($Current, index, v)\n    end\n\n  put_integer_16 (v: INTEGER_16; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_integer_16_item (index)\n    do\n      eif_put_integer_16_item ($Current, index, v)\n    end\n\n  put_integer_64 (v: INTEGER_64; index: INTEGER)\n      -- Put `v' at position `index' in Current.\n    require\n      valid_index: valid_index (index)\n      valid_type: is_integer_64_item (index)\n    do\n      eif_put_integer_64_item ($Current, index, v)\n    end\n\nfeature -- Type queries\n\n  is_boolean_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a BOOLEAN?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = boolean_code)\n    end\n\n  is_character_8_item, is_character_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a CHARACTER_8?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = character_8_code)\n    end\n\n  is_character_32_item, is_wide_character_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a CHARACTER_32?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = character_32_code)\n    end\n\n  is_double_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a REAL_64?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = real_64_code)\n    end\n\n  is_natural_8_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an NATURAL_8?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = natural_8_code)\n    end\n\n  is_natural_16_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an NATURAL_16?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = natural_16_code)\n    end\n\n  is_natural_32_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an NATURAL_32?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = natural_32_code)\n    end\n\n  is_natural_64_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an NATURAL_64?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = natural_64_code)\n    end\n\n  is_integer_8_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an INTEGER_8?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = integer_8_code)\n    end\n\n  is_integer_16_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an INTEGER_16?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = integer_16_code)\n    end\n\n  is_integer_item, is_integer_32_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an INTEGER_32?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = integer_32_code)\n    end\n\n  is_integer_64_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' an INTEGER_64?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = integer_64_code)\n    end\n\n  is_pointer_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a POINTER?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = pointer_code)\n    end\n\n  is_real_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a REAL_32?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = real_32_code)\n    end\n\n  is_reference_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a REFERENCE?\n    require\n      valid_index: valid_index (index)\n    do\n      Result := (eif_item_type ($Current, index) = reference_code)\n    end\n\n  is_numeric_item (index: INTEGER): BOOLEAN\n      -- Is item at `index' a number?\n    obsolete\n      \"Use the precise type query instead.\"\n    require\n      valid_index: valid_index (index)\n    local\n      tcode: like item_code\n    do\n      tcode := eif_item_type ($Current, index)\n      inspect tcode\n      when\n        integer_8_code, integer_16_code, integer_32_code,\n        integer_64_code, real_32_code, real_64_code\n      then\n        Result := True\n      else\n        -- Nothing to do here since Result already initialized to False.\n      end\n    end\n\n  is_uniform: BOOLEAN\n      -- Are all items of the same basic type or all of reference type?\n    do\n      Result := is_tuple_uniform (any_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_boolean: BOOLEAN\n      -- Are all items of type BOOLEAN?\n    do\n      Result := is_tuple_uniform (boolean_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_character_8, is_uniform_character: BOOLEAN\n      -- Are all items of type CHARACTER_8?\n    do\n      Result := is_tuple_uniform (character_8_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_character_32, is_uniform_wide_character: BOOLEAN\n      -- Are all items of type CHARACTER_32?\n    do\n      Result := is_tuple_uniform (character_32_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_double: BOOLEAN\n      -- Are all items of type REAL_64?\n    do\n      Result := is_tuple_uniform (real_64_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_natural_8: BOOLEAN\n      -- Are all items of type NATURAL_8?\n    do\n      Result := is_tuple_uniform (natural_8_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_natural_16: BOOLEAN\n      -- Are all items of type NATURAL_16?\n    do\n      Result := is_tuple_uniform (natural_16_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_natural_32: BOOLEAN\n      -- Are all items of type NATURAL_32?\n    do\n      Result := is_tuple_uniform (natural_32_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_natural_64: BOOLEAN\n      -- Are all items of type NATURAL_64?\n    do\n      Result := is_tuple_uniform (natural_64_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_integer_8: BOOLEAN\n      -- Are all items of type INTEGER_8?\n    do\n      Result := is_tuple_uniform (integer_8_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_integer_16: BOOLEAN\n      -- Are all items of type INTEGER_16?\n    do\n      Result := is_tuple_uniform (integer_16_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_integer, is_uniform_integer_32: BOOLEAN\n      -- Are all items of type INTEGER?\n    do\n      Result := is_tuple_uniform (integer_32_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_integer_64: BOOLEAN\n      -- Are all items of type INTEGER_64?\n    do\n      Result := is_tuple_uniform (integer_64_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_pointer: BOOLEAN\n      -- Are all items of type POINTER?\n    do\n      Result := is_tuple_uniform (pointer_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_real: BOOLEAN\n      -- Are all items of type REAL_32?\n    do\n      Result := is_tuple_uniform (real_32_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  is_uniform_reference: BOOLEAN\n      -- Are all items of reference type?\n    do\n      Result := is_tuple_uniform (reference_code)\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\nfeature -- Access\n\n  plus alias \"+\" (a_other: TUPLE): detachable like Current\n      -- Concatenation of `Current' with `a_other'\n      --| note: it may be Void if the result exceeds the allowed capacity for a tuple.\n      --| warning: this function has poor performance, use it with parsimony.\n    local\n      l_reflector: REFLECTOR\n      i, n1,n2: INTEGER\n      t1, t2: TYPE [detachable TUPLE]\n      l_type_id: INTEGER\n      l_items: SPECIAL [detachable separate ANY]\n      l_type_string: STRING\n    do\n      n1 := count\n      n2 := a_other.count\n\n      if n1 = 0 then\n        Result := a_other.twin\n      elseif n2 = 0 then\n        Result := twin\n      else\n        create l_type_string.make_from_string (\"TUPLE [\")\n\n        create l_items.make_empty (n1 + n2)\n        from\n          t1 := generating_type\n          check same_count: t1.generic_parameter_count = n1 end\n          i := 1\n        until\n          i > n1\n        loop\n          if i > 1 then\n            l_type_string.append_character (',')\n          end\n          l_type_string.append (t1.generic_parameter_type (i).name)\n          l_items.force (item (i), i - 1)\n          i := i + 1\n        end\n        from\n          t2 := a_other.generating_type\n          check same_count: t2.generic_parameter_count = n2 end\n        until\n          i > n1 + n2\n        loop\n          l_type_string.append_character (',')\n          l_type_string.append (t2.generic_parameter_type (i - n1).name)\n          l_items.force (a_other.item (i - n1), i - 1)\n          i := i + 1\n        end\n\n        l_type_string.append_character (']')\n        create l_reflector\n        l_type_id := l_reflector.dynamic_type_from_string (l_type_string)\n        if l_type_id >= 0 then\n          if attached {like plus} l_reflector.new_tuple_from_special (l_type_id, l_items) as res then\n            Result := res\n          end\n        else\n            --| It may be that the maximum tuple capacity was reached.\n            --| better return Void than a truncated tuple.\n        end\n      end\n    ensure\n      has_expected_count: Result /= Void implies Result.count = count + a_other.count\n      has_expected_items: Result /= Void implies (\n            (across 1 |..| count as ic_1 all Result[ic_1.item] = item (ic_1.item) end) and\n            (across 1 |..| a_other.count as ic_2 all Result[count + ic_2.item] = a_other [ic_2.item] end)\n          )\n    end\n\nfeature -- Type conversion queries\n\n  convertible_to_double: BOOLEAN\n      -- Is current convertible to an array of doubles?\n    obsolete\n      \"Will be removed in future releases\"\n    local\n      i, cnt: INTEGER\n      tcode: like item_code\n    do\n      Result := True\n      from\n        i := 1\n        cnt := count\n      until\n        i > cnt or else not Result\n      loop\n        tcode := eif_item_type ($Current, i)\n        inspect tcode\n        when\n          integer_8_code, integer_16_code, integer_32_code,\n          integer_64_code, real_32_code, real_64_code\n        then\n          Result := True\n        else\n          Result := False\n        end\n        i := i + 1\n      end\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\n  convertible_to_real: BOOLEAN\n      -- Is current convertible to an array of reals?\n    obsolete\n      \"Will be removed in future releases\"\n    local\n      i, cnt: INTEGER\n      tcode: like item_code\n    do\n      Result := True\n      from\n        i := 1\n        cnt := count\n      until\n        i > cnt or else not Result\n      loop\n        tcode := eif_item_type ($Current, i)\n        inspect tcode\n        when\n          integer_8_code, integer_16_code, integer_32_code,\n          integer_64_code, real_32_code\n        then\n          Result := True\n        else\n          Result := False\n        end\n        i := i + 1\n      end\n    ensure\n      yes_if_empty: (count = 0) implies Result\n    end\n\nfeature -- Conversion\n\n  arrayed: ARRAY [detachable separate ANY]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled (Void, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  boolean_arrayed: ARRAY [BOOLEAN]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      is_uniform_boolean: is_uniform_boolean\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled (False, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (boolean_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  character_8_arrayed, character_arrayed: ARRAY [CHARACTER_8]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      is_uniform_character: is_uniform_character\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled (' ', 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (character_8_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  double_arrayed: ARRAY [REAL_64]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      convertible: convertible_to_double\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled ({REAL_64} 0.0, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (double_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  integer_arrayed: ARRAY [INTEGER]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      is_uniform_integer: is_uniform_integer\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled ({INTEGER} 0, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (integer_32_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  pointer_arrayed: ARRAY [POINTER]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      is_uniform_pointer: is_uniform_pointer\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled (Default_pointer, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (pointer_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  real_arrayed: ARRAY [REAL_32]\n      -- Items of Current as array\n    obsolete\n      \"Will be removed in future releases\"\n    require\n      convertible: convertible_to_real\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled ({REAL_32} 0.0, 1, cnt)\n      until\n        i > cnt\n      loop\n        Result.put (real_item (i), i)\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n      same_items: -- Items are the same in same order\n    end\n\n  string_arrayed: ARRAY [detachable STRING]\n      -- Items of Current as array\n      -- NOTE: Items with a type not cconforming to\n      --       type STRING are set to Void.\n    obsolete\n      \"Will be removed in future releases\"\n    local\n      i, cnt: INTEGER\n    do\n      from\n        i := 1\n        cnt := count\n        create Result.make_filled (Void, 1, cnt)\n      until\n        i > cnt\n      loop\n        if attached {STRING} item (i) as s then\n          Result.put (s, i)\n        end\n        i := i + 1\n      end\n    ensure\n      exists: Result /= Void\n      same_count: Result.count = count\n    end\n\nfeature -- Retrieval\n\n  correct_mismatch\n      -- Attempt to correct object mismatch using `mismatch_information'.\n    local\n      i, nb: INTEGER\n      l_any: ANY\n    do\n        -- Old version of TUPLE had a SPECIAL [ANY] to store all values.\n        -- If we can get access to it, then most likely we can recover this\n        -- old TUPLE implementation.\n      if attached {SPECIAL [ANY]} Mismatch_information.item (area_name) as l_area then\n        from\n          i := 1\n          nb := l_area.count\n        until\n          i > nb\n        loop\n          l_any := l_area.item (i - 1)\n          if valid_type_for_index (l_any, i) then\n            put (l_any, i)\n          else\n              -- We found an unexpected type in old special. We cannot go on.\n            Precursor {MISMATCH_CORRECTOR}\n          end\n          i := i + 1\n        end\n      else\n        Precursor {MISMATCH_CORRECTOR}\n      end\n    end\n\nfeature -- Access\n\n  item_code (index: INTEGER): NATURAL_8\n      -- Type code of item at `index'. Used for\n      -- argument processing in ROUTINE\n    require\n      valid_index: valid_index (index)\n    do\n      Result := eif_item_type ($Current, index)\n    end\n\n  reference_code: NATURAL_8 = 0x00\n  boolean_code: NATURAL_8 = 0x01\n  character_8_code, character_code: NATURAL_8 = 0x02\n  real_64_code: NATURAL_8 = 0x03\n  real_32_code: NATURAL_8 = 0x04\n  pointer_code: NATURAL_8 = 0x05\n  integer_8_code: NATURAL_8 = 0x06\n  integer_16_code: NATURAL_8 = 0x07\n  integer_32_code: NATURAL_8 = 0x08\n  integer_64_code: NATURAL_8 = 0x09\n  natural_8_code: NATURAL_8 = 0x0A\n  natural_16_code: NATURAL_8 = 0x0B\n  natural_32_code: NATURAL_8 = 0x0C\n  natural_64_code: NATURAL_8 = 0x0D\n  character_32_code, wide_character_code: NATURAL_8 = 0x0E\n  any_code: NATURAL_8 = 0xFF\n      -- Code used to identify type in TUPLE.\n\nfeature {NONE} -- Implementation\n\n  area_name: STRING = \"area\"\n      -- Name of attributes where TUPLE elements were stored.\n\n  is_tuple_uniform (code: like item_code): BOOLEAN\n      -- Are all items of type `code'?\n    local\n      i, nb: INTEGER\n      l_code: like item_code\n    do\n      Result := True\n      if count > 0 then\n        from\n          nb := count\n          if code = any_code then\n              -- We take first type code and compare all the remaining ones\n              -- against it.\n            i := 2\n            l_code := eif_item_type ($Current, 1)\n          else\n            i := 1\n            l_code := code\n          end\n        until\n          i > nb or not Result\n        loop\n          Result := l_code = eif_item_type ($Current, i)\n          i := i + 1\n        end\n      end\n    end\n\n  internal_primes: PRIMES\n      -- For quick access to prime numbers.\n    once\n      create Result\n    end\n\nfeature {NONE} -- Externals: Access\n\n  eif_item_type (obj: POINTER; pos: INTEGER): NATURAL_8\n      -- Code for generic parameter `pos' in `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    alias\n      \"eif_item_type\"\n    end\n\n  eif_boolean_item (obj: POINTER; pos: INTEGER): BOOLEAN\n      -- Boolean item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_character_8_item (obj: POINTER; pos: INTEGER): CHARACTER_8\n      -- Character item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_character_32_item (obj: POINTER; pos: INTEGER): CHARACTER_32\n      -- Wide character item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_real_64_item (obj: POINTER; pos: INTEGER): REAL_64\n      -- Double item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_real_32_item (obj: POINTER; pos: INTEGER): REAL_32\n      -- Real item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_pointer_item (obj: POINTER; pos: INTEGER): POINTER\n      -- Pointer item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_natural_8_item (obj: POINTER; pos: INTEGER): NATURAL_8\n      -- NATURAL_8 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_natural_16_item (obj: POINTER; pos: INTEGER):  NATURAL_16\n      -- NATURAL_16 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_natural_32_item (obj: POINTER; pos: INTEGER):  NATURAL_32\n      -- NATURAL_32 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_natural_64_item (obj: POINTER; pos: INTEGER):  NATURAL_64\n      -- NATURAL_64 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_integer_8_item (obj: POINTER; pos: INTEGER): INTEGER_8\n      -- INTEGER_8 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_integer_16_item (obj: POINTER; pos: INTEGER): INTEGER_16\n      -- INTEGER_16 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_integer_32_item (obj: POINTER; pos: INTEGER): INTEGER_32\n      -- INTEGER_32 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_integer_64_item (obj: POINTER; pos: INTEGER): INTEGER_64\n      -- INTEGER_64 item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_reference_item (obj: POINTER; pos: INTEGER): detachable ANY\n      -- Reference item at position `pos' in tuple `obj'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\nfeature {NONE} -- Externals: Setting\n\n  eif_put_boolean_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set boolean item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_character_8_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set character item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_character_32_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set wide character item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_real_64_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set double item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_real_32_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set real item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_pointer_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set pointer item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_8_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set NATURAL_8 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_16_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set NATURAL_16 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_32_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set NATURAL_32 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_64_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set NATURAL_64 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_8_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set integer_8 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_16_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set integer_16 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_32_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set integer_32 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_64_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set integer_64 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_reference_item_with_object (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set reference item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_boolean_item (obj: POINTER; pos: INTEGER; v: BOOLEAN)\n      -- Set boolean item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_character_8_item (obj: POINTER; pos: INTEGER; v: CHARACTER_8)\n      -- Set character_8 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_character_32_item (obj: POINTER; pos: INTEGER; v: CHARACTER_32)\n      -- Set character_32 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_real_64_item (obj: POINTER; pos: INTEGER; v: REAL_64)\n      -- Set double item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_real_32_item (obj: POINTER; pos: INTEGER; v: REAL_32)\n      -- Set real item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_pointer_item (obj: POINTER; pos: INTEGER; v: POINTER)\n      -- Set pointer item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_8_item (obj: POINTER; pos: INTEGER; v: NATURAL_8)\n      -- Set NATURAL_8 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_16_item (obj: POINTER; pos: INTEGER; v: NATURAL_16)\n      -- Set NATURAL_16 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_32_item (obj: POINTER; pos: INTEGER; v: NATURAL_32)\n      -- Set NATURAL_32 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_natural_64_item (obj: POINTER; pos: INTEGER; v: NATURAL_64)\n      -- Set NATURAL_64 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_8_item (obj: POINTER; pos: INTEGER; v: INTEGER_8)\n      -- Set integer_8 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_16_item (obj: POINTER; pos: INTEGER; v: INTEGER_16)\n      -- Set integer_16 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_32_item (obj: POINTER; pos: INTEGER; v: INTEGER_32)\n      -- Set integer_32 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\n  eif_put_integer_64_item (obj: POINTER; pos: INTEGER; v: INTEGER_64)\n      -- Set integer_64 item at position `pos' in tuple `obj' with `v'.\n    external\n      \"C macro use %\"eif_rout_obj.h%\"\"\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"type.e","content":"note\n  description: \"Representation of an Eiffel type.\"\n  library: \"Free implementation of ELKS library\"\n  status: \"See notice at end of class.\"\n  legal: \"See notice at end of class.\"\n  date: \"$Date: 2013-09-05 03:29:24 -0700 (Thu, 05 Sep 2013) $\"\n  revision: \"$Revision: 92913 $\"\n\nclass\n  TYPE [G]\n\ninherit\n  HASHABLE\n    rename\n      default as any_default\n    redefine\n      is_equal, out\n    end\n\n  PART_COMPARABLE\n    rename\n      default as any_default,\n      is_less as is_strictly_conforming_to alias \"<\",\n      is_less_equal as is_conforming_to alias \"<=\"\n    redefine\n      is_conforming_to, is_equal, out\n    end\n\n  DEBUG_OUTPUT\n    rename\n      default as any_default\n    redefine\n      is_equal, out\n    end\n\ncreate {NONE}\n  -- Creation is done either by using manifest types\n  -- or by calling ANY.generating_type.\n\nconvert\n    -- Conversion useful for the transition period because of the\n    -- modification in ANY:\n    --    generating_type: STRING\n    -- becomes:\n    --    generating_type: TYPE [like Current]\n  to_string_8: {STRING_8, STRING_GENERAL, READABLE_STRING_GENERAL, READABLE_STRING_8},\n  to_string_32: {STRING_32, READABLE_STRING_32}\n\nfeature -- Access\n\n  name: IMMUTABLE_STRING_8\n      -- Name of Eiffel type represented by `Current', using Eiffel style guidelines\n      -- as specified in OOSC2 (e.g. COMPARABLE, HASH_TABLE [FOO, BAR], ...)\n    do\n      if attached internal_name as l_name then\n        Result := l_name\n      else\n        create Result.make_from_string (runtime_name)\n        internal_name := Result\n      end\n    ensure\n      name_not_void: Result /= Void\n    end\n\n  generic_parameter_type (i: INTEGER): TYPE [detachable ANY]\n      -- `i'-th generic parameter of Eiffel type represented by `Current'\n    require\n      i_large_enough: i >= 1\n      i_small_enough: i <= generic_parameter_count\n    external\n      \"built_in\"\n    ensure\n      generic_parameter_not_void: Result /= Void\n    end\n\n  type_id: INTEGER\n      -- Id of the Eiffel type represented by `Current'\n    external\n      \"built_in\"\n    ensure\n      type_id_not_negative: Result >= 0\n    end\n\n  hash_code: INTEGER\n      -- Hash code value\n    do\n      Result := type_id\n    end\n\nfeature -- Measurement\n\n  generic_parameter_count: INTEGER\n      -- Number of generic parameters in Eiffel type represented by `Current'\n    external\n      \"built_in\"\n    ensure\n      generic_parameter_count_not_negative: Result >= 0\n    end\n\nfeature -- Status report\n\n  has_default: BOOLEAN\n      -- Is current type a type that has a default value?\n      -- I.e. a detachable type or an expanded type.\n    external\n      \"built_in\"\n    end\n\n  is_expanded: BOOLEAN\n      -- Is current type an expanded type?\n    external\n      \"built_in\"\n    end\n\n  is_attached: BOOLEAN\n      -- Is current type attached?\n    external\n      \"built_in\"\n    end\n\nfeature -- Comparison\n\n  is_equal (other: like Current): BOOLEAN\n      -- Is `other' attached to an object considered\n      -- equal to current object?\n    do\n      Result := type_id = other.type_id\n    end\n\n  is_strictly_conforming_to alias \"<\" (other: like Current): BOOLEAN\n      -- Does type represented by `Current' conform to type represented by `other' and differ from it?\n    do\n      Result := type_id /= other.type_id and then is_conforming_to (other)\n    end\n\n  is_conforming_to alias \"<=\" (other: like Current): BOOLEAN\n      -- Does type represented by `Current' conform to type represented by `other'?\n    external\n      \"magic\"\n      -- Result := {ISE_RUNTIME}.type_conforms_to (type_id, other.type_id)\n    end\n\nfeature -- Conversion\n\n  adapt alias \"[]\" (g: detachable G): detachable G\n      -- Adapts `g' or calls necessary conversion routine to adapt `g'\n    do\n      Result := g\n    ensure\n      adapted: Result ~ g\n    end\n\n  attempt alias \"#?\" (obj: detachable separate ANY): detachable G\n      -- Result of assignment attempt of `obj' to entity of type G\n    do\n      if attached {G} obj as l_g then\n        Result := l_g\n      end\n    ensure\n      assigned_or_void: Result = obj or Result = default_detachable_value\n    end\n\n  default_detachable_value: detachable G\n    do\n    end\n\n  default: G\n    require\n      has_default: has_default\n    external\n      \"built_in\"\n    end\n\nfeature -- Output\n\n  out: STRING\n      -- <Precursor>\n    do\n      create Result.make_from_string (name)\n    end\n\n  debug_output: STRING\n      -- <Precursor>\n    do\n      create Result.make_from_string (name)\n    end\n\nfeature -- Features from STRING needed here for the transition period (see convert clause)\n\n  plus alias \"+\" (other: STRING): STRING\n      -- Append a copy of 's' at the end of a copy of the name of the\n      -- Eiffel type represented by `Current', then return the Result.\n      -- This feature from STRING is needed here for the\n      -- transition period (see convert clause).\n    obsolete\n      \"[070813] Use 'name + other' instead (or 'out + other' during the transition period).\"\n    require\n      argument_not_void: other /= Void\n    do\n      create Result.make (name.count + other.count)\n      Result.append (name)\n      Result.append (other)\n    ensure\n      result_exists: Result /= Void\n      definition: Result.same_string (name + other)\n    end\n\n  same_string (other: STRING): BOOLEAN\n      -- Do the name of the Eiffel type represented by `Current'\n      -- and `other' have same character sequence?\n      -- This feature from STRING is needed here for the\n      -- transition period (see convert clause).\n    obsolete\n      \"[070813] Use 'name.same_string (other)' instead (or 'out.same_string (other)' during the transition period).\"\n    require\n      other_not_void: other /= Void\n    do\n      Result := name.same_string (other)\n    ensure\n      definition: Result = name.same_string (other)\n    end\n\n  is_case_insensitive_equal (other: STRING): BOOLEAN\n      -- Is the name of the Eiffel type represented by `Current'\n      -- made of same character sequence as `other' regardless\n      -- of casing (possibly with a different capacity)?\n      -- This feature from STRING is needed here for the\n      -- transition period (see convert clause).\n    obsolete\n      \"[070813] Use 'name.is_case_insensitive_equal (other)' instead (or 'out.is_case_insensitive_equal (other)' during the transition period).\"\n    require\n      other_not_void: other /= Void\n    do\n      Result := name.is_case_insensitive_equal (other)\n    ensure\n      definition: Result = name.is_case_insensitive_equal (other)\n    end\n\n  as_lower: STRING\n      -- New object with all letters of the name of the Eiffel type\n      -- represented by `Current' in lower case.\n      -- This feature from STRING is needed here for the\n      -- transition period (see convert clause).\n    obsolete\n      \"[070813] Use 'name.as_lower' instead (or 'out.as_lower' during the transition period).\"\n    do\n      create Result.make_from_string (name)\n      Result.to_lower\n    ensure\n      as_lower_not_void: Result /= Void\n      definition: Result.same_string (name.as_lower)\n    end\n\n  as_upper: STRING\n      -- New object with all letters of the name of the Eiffel type\n      -- represented by `Current' in upper case.\n      -- This feature from STRING is needed here for the\n      -- transition period (see convert clause).\n    obsolete\n      \"[070813] Use 'name.as_upper' instead (or 'out.as_upper' during the transition period).\"\n    do\n      create Result.make_from_string (name)\n      Result.to_upper\n    ensure\n      as_upper_not_void: Result /= Void\n      definition: Result.same_string (name.as_upper)\n    end\n\n  to_string_8: STRING_8\n    obsolete\n      \"Use `name' instead (or `out' during the transition period).\"\n    do\n      create Result.make_from_string (name)\n    ensure\n      to_string_8_not_void: Result /= Void\n    end\n\n  to_string_32: STRING_32\n      -- Name of type\n    obsolete\n      \"[080717] Use 'name' instead (or 'out' during the transition period).\"\n    do\n      create Result.make_from_string_general (name)\n    ensure\n      to_string_32_not_void: Result /= Void\n    end\n\nfeature {NONE} -- Implementation: Access\n\n  internal_name: detachable IMMUTABLE_STRING_8\n      -- Storage for once per object `name'\n\nfeature {NONE} -- Implementation\n\n  runtime_name: STRING\n      -- Name of Eiffel type represented by `Current', using Eiffel style guidelines\n      -- as specified in OOSC2 (e.g. COMPARABLE, HASH_TABLE [FOO, BAR], ...)\n    external\n      \"built_in\"\n    ensure\n      name_not_void: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2013, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"unbounded.e","content":"note\n  description: \"Finite structures whose item count is not bounded\"\n  library: \"Free implementation of ELKS library\"\n  legal: \"See notice at end of class.\"\n  status: \"See notice at end of class.\"\n  names: unbounded, storage;\n  date: \"$Date: 2012-07-23 14:02:19 -0700 (Mon, 23 Jul 2012) $\"\n  revision: \"$Revision: 91989 $\"\n\ndeferred class UNBOUNDED [G] inherit\n\n  FINITE [G]\n\nfeature -- Status report\n\n  --extendible: BOOLEAN is true;\n    -- Can new items be added? (Answer: yes)\n\n-- invariant\n\n  -- extendible: extendible\n\nnote\n  copyright: \"Copyright (c) 1984-2012, Eiffel Software and others\"\n  license:   \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
__eiffel_builtin.push({"filename":"utf_converter.e","content":"note\n  description: \"[\n      Converter from/to UTF-8, UTF-16 and UTF-32 encodings.\n\n      Handling of invalid encodings\n      =============================\n\n      Whenever a UTF-8 or UTF-16 sequence is decoded, the decoding routines also check\n      that the sequence is valid. If it is not, it will replace the invalid unit (e.g. a byte\n      for UTF-8 and a 2-byte for UTF-16 by the replacement character U+FFFD as described by\n      variant #3 of the recommended practice for replacement character in Unicode (see\n      http://www.unicode.org/review/pr-121.html for more details).\n\n      However it means that you cannot roundtrip incorrectly encoded sequence back and forth\n      between the encoded version and the decoded STRING_32 version. To allow roundtrip, an\n      escaped representation of a bad encoded sequence has been introduced. It is adding a\n      a fourth variant (which is a slight modification of variant #3) to the recommended\n      practice where the replacement character is followed by the printed hexadecimal value\n      of the invalid byte or the invalid 2-byte sequence.\n\n      To provide an example (assuming that the Unicode character U+FFFD is represented as\n      ? textually):\n      1 - on UNIX, any invalid UTF-8 byte sequence such as 0x8F 0x8F is encoded as the\n      following Unicode sequence: U+FFFD U+0038 U+0046 U+FFFF U+0038 U+0046, and textually\n      it looks like \"?8F?8F\".\n      2 - on Windows, any invalid UTF-16 2-byte sequence such as 0xD800 0x0054 is encoded as the\n      following Unicode sequence: U+FFFD U+0075 U+0044 U+0038 U+0030 U+0030 U+FFFD U+0035 U+0033,\n      and textually it looks like \"?uD800?54\". The rule is that if the 2-byte sequence does not fit\n      into 1 byte, it uses the letter `u' followed by the hexadecimal value of the 2-byte sequence,\n      otherwise it simply uses the 1-byte hexadecimal representation.\n    ]\"\n  date: \"$Date: 2014-04-29 14:26:38 -0700 (Tue, 29 Apr 2014) $\"\n  revision: \"$Revision: 94920 $\"\n\nexpanded class\n  UTF_CONVERTER\n\nfeature -- Access\n\n  escape_character: CHARACTER_32 = '%/0xFFFD/'\n      -- Unicode replacement character to escape invalid UTF-8 or UTF-16 encoding.\n      -- UTF-8 encoding: 0xEF 0xBF 0xBD\n      -- Binary UTF-8 encoding: 11101111 10111111 10111101\n      -- UTF-16 encoding: 0xFFFD\n\nfeature -- Status report\n\n  is_valid_utf_8_string_8 (s: READABLE_STRING_8): BOOLEAN\n      -- Is `s' a valid UTF-8 Unicode sequence?\n    local\n      c: NATURAL_32\n      i, nb: INTEGER\n    do\n      from\n        nb := s.count\n        Result := True\n      until\n        i >= nb or not Result\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 127 then\n            -- Form 0xxxxxxx.\n        elseif (c & 0xE0) = 0xC0 and i < nb then\n            -- Form 110xxxxx 10xxxxxx.\n          i := i + 1\n          Result := (s.code (i) & 0xC0) = 0x80\n        elseif (c & 0xF0) = 0xE0 and i + 1 < nb then\n          -- Form 1110xxxx 10xxxxxx 10xxxxxx.\n          i := i + 2\n          Result := (s.code (i - 1) & 0xC0) = 0x80 and\n            (s.code (i) & 0xC0) = 0x80\n        elseif (c & 0xF8) = 0xF0 and i + 2 < nb then\n          -- Form 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx.\n          i := i + 3\n          Result := (s.code (i - 2) & 0xC0) = 0x80 and\n            (s.code (i - 1) & 0xC0) = 0x80 and\n            (s.code (i) & 0xC0) = 0x80\n        else\n            -- Anything else is not a valid UTF-8 sequence that would yield a valid Unicode character.\n          Result := False\n        end\n      end\n    end\n\n  is_valid_utf_16le_string_8 (s: READABLE_STRING_8): BOOLEAN\n      -- Is `s' a valid UTF-16LE Unicode sequence?\n    local\n      c1, c2: NATURAL_32\n      i, nb: INTEGER\n    do\n      nb := s.count\n        -- If `nb' is not even, then clearly not a valid UTF-16 string.\n      if (nb \\\\ 2) = 0 then\n        from\n          Result := True\n        until\n          i >= nb or not Result\n        loop\n          i := i + 2\n          c1 := s.code (i - 1) | (s.code (i) |<< 8)\n          if c1 < 0xD800 or c1 >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit, this is valid Unicode.\n          elseif c1 <= 0xDBFF then\n            i := i + 2\n            if i <= nb then\n              c2 := s.code (i - 1) | (s.code (i) |<< 8)\n              Result := 0xDC00 <= c2 and c2 <= 0xDFF\n            else\n                -- Surrogate pair is incomplete, clearly not a valid UTF-16 sequence.\n              Result := False\n            end\n          else\n              -- Invalid starting surrogate pair which should be between 0xD800 and 0xDBFF.\n            Result := False\n          end\n        end\n      end\n    end\n\n  is_valid_utf_16_subpointer (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN): BOOLEAN\n      -- Is `p' a valid UTF-16 Unicode sequence between code unit `start_pos' and `end_pos'?\n      -- If `a_stop_at_null' we stop checking after finding a null character.\n    local\n      i, n: INTEGER\n      c1, c2: NATURAL_32\n    do\n      if p.count >= 2 and start_pos >= 0 and start_pos <= end_pos + 1 and end_pos < (p.count // 2) then\n        from\n          i := start_pos * 2\n          n := end_pos * 2\n          Result := True\n        until\n          i > n or not Result\n        loop\n          c1 := p.read_natural_16 (i)\n          if c1 = 0 and a_stop_at_null then\n              -- We hit our null terminating character, we can stop\n            i := n + 1\n          else\n            if c1 < 0xD800 or c1 >= 0xE000 then\n              -- Codepoint from Basic Multilingual Plane: one 16-bit code unit, this is valid Unicode.\n              i := i + 1\n            elseif c1 <= 0xDBFF then\n              i := i + 2\n              if i <= n then\n                c2 := p.read_natural_16 (i)\n                Result := 0xDC00 <= c2 and c2 <= 0xDFF\n              else\n                  -- Surrogate pair is incomplete, clearly not a valid UTF-16 sequence.\n                Result := False\n              end\n            else\n                -- Invalid starting surrogate pair which should be between 0xD800 and 0xDBFF.\n              Result := False\n            end\n          end\n        end\n      end\n    end\n\n  is_valid_utf_16 (s: SPECIAL [NATURAL_16]): BOOLEAN\n      -- Is `s' a valid UTF-16 Unicode sequence?\n    local\n      i, n: INTEGER\n      c1, c2: NATURAL_32\n    do\n      from\n        i := 0\n        n := s.count\n        Result := True\n      until\n        i > n or not Result\n      loop\n        c1 := s.item (i)\n        if c1 = 0 then\n            -- We hit our null terminating character, we can stop\n          i := n + 1\n        else\n          if c1 < 0xD800 or c1 >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit, this is valid Unicode.\n          elseif c1 <= 0xDBFF then\n            i := i + 1\n            if i <= n then\n              c2 := s.item (i)\n              Result := 0xDC00 <= c2 and c2 <= 0xDFF\n            else\n                -- Surrogate pair is incomplete, clearly not a valid UTF-16 sequence.\n              Result := False\n            end\n          else\n              -- Invalid starting surrogate pair which should be between 0xD800 and 0xDBFF.\n            Result := False\n          end\n        end\n      end\n    end\n\nfeature -- Measurement\n\n  utf_8_bytes_count (s: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- Number of bytes necessary to encode in UTF-8 `s.substring (start_pos, end_pos)'.\n      -- Note that this feature can be used for both escaped and non-escaped string.\n      -- In the case of escaped strings, the result will be possibly higher than really needed.\n      -- It does not include the terminating null character.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n    local\n      i: INTEGER\n      c: NATURAL_32\n    do\n      from\n        i := start_pos\n      until\n        i > end_pos\n      loop\n        c := s.code (i)\n        if c <= 0x7F then\n            -- 0xxxxxxx.\n          Result := Result + 1\n        elseif c <= 0x7FF then\n            -- 110xxxxx 10xxxxxx\n          Result := Result + 2\n        elseif c <= 0xFFFF then\n            -- 1110xxxx 10xxxxxx 10xxxxxx\n          Result := Result + 3\n        else\n            -- c <= 1FFFFF - there are no higher code points\n            -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n          Result := Result + 4\n        end\n        i := i + 1\n      end\n    end\n\n  utf_16_characters_count_form_pointer (m: MANAGED_POINTER; start_pos, end_pos: INTEGER): INTEGER\n      -- Number of characters of the UTF-16 encoded `m' starting at `start_pos' in `m' up to `end_pos - 1'.\n      -- It does not include the terminating null character.\n    require\n      start_position_big_enough: start_pos >= 0\n      end_position: start_pos <= end_pos + 2\n      end_pos_small_enought: end_pos < m.count\n      even_start_position: start_pos \\\\ 2 = 0\n      even_end_position: end_pos \\\\ 2 = 0\n    local\n      i, n: INTEGER\n      c: NATURAL_32\n    do\n      from\n        i := start_pos\n        n := end_pos\n      until\n        i >= end_pos\n      loop\n        c := m.read_natural_16 (i)\n        if c < 0xD800 or c >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          i := i + 2\n        elseif i <= n then\n            -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n          i := i + 4\n        end\n        Result := Result + 1\n      end\n    end\n\n  utf_16_bytes_count (s: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER): INTEGER\n      -- Number of bytes necessary at the very least to encode in UTF-16 `s.substring (start_pos, end_pos)'.\n      -- Note that this feature can be used for both escaped and non-escaped string.\n      -- In the case of escaped strings, the result will be possibly higher than really needed.\n      -- It does not include the terminating null character.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n    local\n      i: INTEGER\n      c: NATURAL_32\n    do\n      from\n        i := start_pos\n      until\n        i > end_pos\n      loop\n        c := s.code (i)\n        if c <= 0xFFFF then\n            -- Code point from Basic Multilingual Plane: one 16-bit code unit.\n          Result := Result + 2\n        else\n          Result := Result + 4\n        end\n        i := i + 1\n      end\n    end\n\n  utf_8_to_string_32_count (s: SPECIAL [CHARACTER]; start_pos, end_pos: INTEGER): INTEGER\n      -- Count of characters corresponding to UTF-8 sequence `s'.\n    require\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < s.count\n    local\n      i: INTEGER\n      n: INTEGER\n      c: INTEGER\n    do\n      from\n        i := start_pos\n        n := end_pos\n      until\n        i > n\n      loop\n        c := s [i].code\n        if c <= 0x7F then\n            -- 0xxxxxxx\n          i := i + 1\n          Result := Result + 1\n        elseif c <= 0xDF then\n            -- 110xxxxx 10xxxxxx\n          i := i + 2\n          if i <= n then\n            Result := Result + 1\n          end\n        elseif c <= 0xEF then\n            -- 1110xxxx 10xxxxxx 10xxxxxx\n          i := i + 3\n          if i <= n then\n            Result := Result + 1\n          end\n        elseif c <= 0xF7 then\n            -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n          i := i + 4\n          if i <= n then\n            Result := Result + 1\n          end\n        end\n      end\n    end\n\nfeature -- UTF-32 to UTF-8\n\n  string_32_to_utf_8_string_8 (s: READABLE_STRING_32): STRING_8\n      -- UTF-8 sequence corresponding to `s'.\n    do\n      Result := utf_32_string_to_utf_8_string_8 (s)\n    ensure\n      roundtrip: utf_8_string_8_to_string_32 (Result).same_string (s)\n    end\n\n  string_32_into_utf_8_string_8 (s: READABLE_STRING_32; a_result: STRING_8)\n      -- Copy the UTF-8 sequence corresponding to `s' appended into `a_result'.\n    do\n      utf_32_string_into_utf_8_string_8 (s, a_result)\n    ensure\n      roundtrip: utf_8_string_8_to_string_32 (a_result.substring (old a_result.count + 1, a_result.count)).same_string (s)\n    end\n\n  utf_32_string_to_utf_8_string_8 (s: READABLE_STRING_GENERAL): STRING_8\n      -- UTF-8 sequence corresponding to `s' interpreted as a UTF-32 sequence.\n    do\n      create Result.make (s.count)\n      utf_32_string_into_utf_8_string_8 (s, Result)\n    ensure\n      roundtrip: utf_8_string_8_to_string_32 (Result).same_string_general (s)\n    end\n\n  utf_32_string_into_utf_8_string_8 (s: READABLE_STRING_GENERAL; a_result: STRING_8)\n      -- Copy the UTF-8 sequence corresponding to `s' interpreted as a UTF-32 sequence\n      -- appended into `a_result'.\n    local\n      i: like {STRING_32}.count\n      n: like {STRING_32}.count\n      c: NATURAL_32\n    do\n      from\n        n := s.count\n        a_result.grow (a_result.count + n)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0x7F then\n            -- 0xxxxxxx\n          a_result.extend (c.to_character_8)\n        elseif c <= 0x7FF then\n            -- 110xxxxx 10xxxxxx\n          a_result.extend (((c |>> 6) | 0xC0).to_character_8)\n          a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n        elseif c <= 0xFFFF then\n            -- 1110xxxx 10xxxxxx 10xxxxxx\n          a_result.extend (((c |>> 12) | 0xE0).to_character_8)\n          a_result.extend ((((c |>> 6) & 0x3F) | 0x80).to_character_8)\n          a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n        else\n            -- c <= 1FFFFF - there are no higher code points\n            -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n          a_result.extend (((c |>> 18) | 0xF0).to_character_8)\n          a_result.extend ((((c |>> 12) & 0x3F) | 0x80).to_character_8)\n          a_result.extend ((((c |>> 6) & 0x3F) | 0x80).to_character_8)\n          a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n        end\n      end\n    ensure\n      roundtrip: utf_8_string_8_to_string_32 (a_result.substring (old a_result.count + 1, a_result.count)).same_string_general (s)\n    end\n\n  escaped_utf_32_substring_into_utf_8_0_pointer (\n        s: READABLE_STRING_GENERAL; start_pos, end_pos: INTEGER; p: MANAGED_POINTER;\n        p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER]\n    )\n      -- Write UTF-8 sequence corresponding to `s', interpreted as a UTF-32 sequence that could\n      -- be escaped, with terminating zero to address `p + p_offset' and update the size of `p' to the\n      -- number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is zero-terminated.\n      -- If `s' contains the `escape_character' followed by either \"HH\" or \"uHHHH\" where H stands\n      -- for an hexadecimal digit, then `s' has been escaped and will be converted to what is\n      -- expected by the current platform.\n      -- Otherwise it will be ignored and it will be left as is.\n      -- See the note clause for the class for more details on the encoding.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n      p_offset_non_negative: p_offset >= 0\n    local\n      i, n, m, l_count: INTEGER\n      c: NATURAL_32\n      l_encoded_value: READABLE_STRING_GENERAL\n      l_decoded, l_resized: BOOLEAN\n    do\n        -- Basic assumptions that there will be only one-byte code units.\n      n := end_pos - start_pos + 1\n      l_count := p.count\n        -- Check that there is at least `n' bytes available plus the terminating null character.\n      if l_count - p_offset < (n + 1) then\n          -- Optimize resizing, once we have to resize, we actually perform the resizing\n          -- only once.\n        l_count := p_offset + utf_8_bytes_count (s, start_pos, end_pos) + 1\n        p.resize (l_count)\n        l_resized := True\n      end\n\n      from\n        m := p_offset\n        i := start_pos - 1\n      until\n        i >= end_pos\n      loop\n        i := i + 1\n        c := s.code (i)\n\n        if c = escape_character.natural_32_code then\n            -- We might be facing a character that was escaped.\n            -- In the Unix case, we only accept the 1-byte encoded format.\n          if i < n and then s.item (i + 1) = escape_character then\n              -- The `escape_character' was escaped, it meant they really wanted an `escape_character'.\n            i := i + 1\n          elseif i + 1 < n then\n              -- We have at least 2 characters to read, make sure they represent an hexadecimal\n              -- value.\n            l_encoded_value := s.substring (i + 1, i + 2)\n            if is_hexa_decimal (l_encoded_value) then\n              c := to_natural_32 (l_encoded_value)\n              if c <= 0x7F then\n                  -- Value was encoded when it should not have been\n                  -- do nothing, we leave the original content as is.\n                c := escape_character.natural_32_code\n              else\n                l_decoded := True\n                i := i + 2\n              end\n            else\n              -- Not an hexadecimal value, it was not escaped.\n            end\n          else\n            -- Not enough to read to make it valid, it was not escaped.\n          end\n        end\n\n        if not l_decoded then\n          if c <= 0x7F then\n              -- 0xxxxxxx\n            p.put_natural_8 (c.to_natural_8, m)\n            m := m + 1\n          else\n              -- Make sure there is sufficient room for all the remaining characters and\n              -- at least 5 bytes, i.e. 4 bytes for the maximum UTF-8 encoding,\n              -- and one byte for the terminating null character. Note that we do not\n              -- take into account `p_offset' because `m' already includes it.\n              -- Note that `end_pos - i' represents the number of remaining characters\n              -- to process in the current string.\n            if not l_resized and then (m + 5 + (end_pos - i) > l_count) then\n                -- Optimize resizing, once we have to resize, we actually perform the resizing\n                -- only once.\n              l_count := m + utf_8_bytes_count (s, i, end_pos) + 1\n              p.resize (l_count)\n              l_resized := True\n            end\n            if c <= 0x7FF then\n                -- 110xxxxx 10xxxxxx\n              p.put_natural_8 (((c |>> 6) | 0xC0).to_natural_8, m)\n              p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 1)\n              m := m + 2\n            elseif c <= 0xFFFF then\n                -- 1110xxxx 10xxxxxx 10xxxxxx\n              p.put_natural_8 (((c |>> 12) | 0xE0).to_natural_8, m)\n              p.put_natural_8 ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 1)\n              p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 2)\n              m := m + 3\n            else\n                -- c <= 1FFFFF - there are no higher code points\n                -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n              p.put_natural_8 (((c |>> 18) | 0xF0).to_natural_8, m)\n              p.put_natural_8 ((((c |>> 12) & 0x3F) | 0x80).to_natural_8, m + 1)\n              p.put_natural_8 ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 2)\n              p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 3)\n              m := m + 4\n            end\n          end\n        else\n          l_decoded := False\n            -- Simply put decoded value directly in stream.\n          p.put_natural_8 (c.to_natural_8, m)\n          m := m + 1\n        end\n      end\n      if l_resized then\n          -- `p' was resized so we adjust it to accommodate up to the terminating null character.\n        p.resize (m + 1)\n      end\n      p.put_natural_8 (0, m)\n      if a_new_upper /= Void then\n        a_new_upper.put (m)\n      end\n    ensure\n      roundtrip: a_new_upper /= Void implies utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, a_new_upper.item - 1, False).same_string_general (s.substring (start_pos, end_pos))\n      roundtrip: (a_new_upper = Void and then not s.substring (start_pos, end_pos).has ('%U')) implies\n         utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, p.count, True).same_string_general (s.substring (start_pos, end_pos))\n    end\n\n  escaped_utf_32_string_to_utf_8_string_8 (s: READABLE_STRING_GENERAL): STRING_8\n      -- UTF-8 sequence corresponding to `s' interpreted as a UTF-32 sequence that could be escaped.\n      -- If `s' contains the `escape_character' followed by either \"HH\" or \"uHHHH\" where H stands\n      -- for an hexadecimal digit, then `s' has been escaped and will be converted to what is\n      -- expected by the current platform.\n      -- Otherwise it will be ignored and it will be left as is.\n      -- See the note clause for the class for more details on the encoding.\n    do\n      create Result.make (s.count)\n      escaped_utf_32_string_into_utf_8_string_8 (s, Result)\n    ensure\n      roundtrip: utf_8_string_8_to_escaped_string_32 (Result).same_string_general (s)\n    end\n\n  escaped_utf_32_string_into_utf_8_string_8 (s: READABLE_STRING_GENERAL; a_result: STRING_8)\n      -- Copy the UTF-8 sequence corresponding to `s' interpreted as a UTF-32 sequence that could\n      -- be escaped appended into `a_result'.\n      -- If `s' contains the `escape_character' followed by either \"HH\" or \"uHHHH\" where H stands\n      -- for an hexadecimal digit, then `s' has been escaped and will be converted to what is\n      -- expected by the current platform.\n      -- Otherwise it will be ignored and it will be left as is.\n      -- See the note clause for the class for more details on the encoding.\n    local\n      i: like {STRING_32}.count\n      n: like {STRING_32}.count\n      c: NATURAL_32\n      l_encoded_value: READABLE_STRING_GENERAL\n      l_decoded: BOOLEAN\n    do\n      from\n        n := s.count\n        a_result.grow (a_result.count + n)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n\n        if c = escape_character.natural_32_code then\n            -- We might be facing a character that was escaped.\n            -- In the Unix case, we only accept the 1-byte encoded format.\n          if i < n and then s.item (i + 1) = escape_character then\n              -- The `escape_character' was escaped, it meant they really wanted an `escape_character'.\n            i := i + 1\n          elseif i + 1 < n then\n              -- We have at least 2 characters to read, make sure they represent an hexadecimal\n              -- value.\n            l_encoded_value := s.substring (i + 1, i + 2)\n            if is_hexa_decimal (l_encoded_value) then\n              c := to_natural_32 (l_encoded_value)\n              if c <= 0x7F then\n                  -- Value was encoded when it should not have been\n                  -- do nothing, we leave the original content as is.\n                c := escape_character.natural_32_code\n              else\n                l_decoded := True\n                i := i + 2\n              end\n            else\n              -- Not an hexadecimal value, it was not escaped.\n            end\n          else\n            -- Not enough to read to make it valid, it was not escaped.\n          end\n        end\n\n        if not l_decoded then\n          if c <= 0x7F then\n              -- 0xxxxxxx\n            a_result.extend (c.to_character_8)\n          elseif c <= 0x7FF then\n              -- 110xxxxx 10xxxxxx\n            a_result.extend (((c |>> 6) | 0xC0).to_character_8)\n            a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n          elseif c <= 0xFFFF then\n              -- 1110xxxx 10xxxxxx 10xxxxxx\n            a_result.extend (((c |>> 12) | 0xE0).to_character_8)\n            a_result.extend ((((c |>> 6) & 0x3F) | 0x80).to_character_8)\n            a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n          else\n              -- c <= 1FFFFF - there are no higher code points\n              -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            a_result.extend (((c |>> 18) | 0xF0).to_character_8)\n            a_result.extend ((((c |>> 12) & 0x3F) | 0x80).to_character_8)\n            a_result.extend ((((c |>> 6) & 0x3F) | 0x80).to_character_8)\n            a_result.extend (((c & 0x3F) | 0x80).to_character_8)\n          end\n        else\n          l_decoded := False\n            -- Simply put decoded value directly in stream.\n          a_result.extend (c.to_character_8)\n        end\n      end\n    ensure\n      roundtrip: utf_8_string_8_to_escaped_string_32 (a_result.substring (old a_result.count + 1, a_result.count)).same_string_general (s)\n    end\n\n  string_32_into_utf_8_0_pointer (s: READABLE_STRING_32; p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-8 sequence corresponding to `s' with terminating zero\n      -- to address `p + p_offset' and update the size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is zero-terminated.\n    require\n      p_offset_non_negative: p_offset >= 0\n    do\n      utf_32_string_into_utf_8_0_pointer (s, p, p_offset, a_new_upper)\n    ensure\n      roundtrip: a_new_upper /= Void implies utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, a_new_upper.item - 1, False).same_string (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies\n         utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, p.count, True).same_string_general (s)\n    end\n\n  utf_32_string_into_utf_8_0_pointer (s: READABLE_STRING_GENERAL; p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-8 sequence corresponding to `s', interpreted as a UTF-32 sequence,\n      -- with terminating zero to address `p + p_offset' and update the size of `p' to the\n      -- number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is zero-terminated.\n    require\n      p_offset_non_negative: p_offset >= 0\n    local\n      m: INTEGER\n      i, n, l_count: INTEGER\n      c: NATURAL_32\n      l_resized: BOOLEAN\n    do\n        -- Basic assumptions that there will be only one-byte code units.\n      n := s.count\n      l_count := p.count\n        -- Check that there is at least `n' bytes available plus the terminating null character.\n      if l_count - p_offset < (n + 1) then\n          -- Optimize resizing, once we have to resize, we actually perform the resizing\n          -- only once.\n        l_count := p_offset + utf_8_bytes_count (s, 1, n) + 1\n        p.resize (l_count)\n        l_resized := True\n      end\n\n        -- Fill `p' with the converted data.\n      from\n        i := 0\n        m := p_offset\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0x7F then\n            -- 0xxxxxxx.\n          p.put_natural_8 (c.to_natural_8, m)\n          m := m + 1\n        else\n            -- Make sure there is sufficient room for all the remaining characters and\n            -- at least 5 bytes, i.e. 4 bytes for the maximum UTF-8 encoding,\n            -- and one byte for the terminating null character. Note that we do not\n            -- take into account `p_offset' because `m' already includes it.\n            -- Note that `n - i' represents the number of remaining characters\n            -- to process in the current string.\n          if not l_resized and then (m + 5 + (n - i) > l_count) then\n              -- Optimize resizing, once we have to resize, we actually perform the resizing\n              -- only once.\n            l_count := m + utf_8_bytes_count (s, i, n) + 1\n            p.resize (l_count)\n            l_resized := True\n          end\n\n          if c <= 0x7FF then\n              -- 110xxxxx 10xxxxxx.\n            p.put_natural_8 (((c |>> 6) | 0xC0).to_natural_8, m)\n            p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 1)\n            m := m + 2\n          elseif c <= 0xFFFF then\n              -- 1110xxxx 10xxxxxx 10xxxxxx\n            p.put_natural_8 (((c |>> 12) | 0xE0).to_natural_8, m)\n            p.put_natural_8 ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 1)\n            p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 2)\n            m := m + 3\n          else\n              -- c <= 1FFFFF - there are no higher code points\n              -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            p.put_natural_8 (((c |>> 18) | 0xF0).to_natural_8, m)\n            p.put_natural_8 ((((c |>> 12) & 0x3F) | 0x80).to_natural_8, m + 1)\n            p.put_natural_8 ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 2)\n            p.put_natural_8 (((c & 0x3F) | 0x80).to_natural_8, m + 3)\n            m := m + 4\n          end\n        end\n      end\n      if l_resized then\n          -- `p' was resized so we adjust it to accommodate up to the terminating null character.\n        p.resize (m + 1)\n      end\n      p.put_natural_8 (0, m)\n      if a_new_upper /= Void then\n        a_new_upper.put (m)\n      end\n    ensure\n      roundtrip: a_new_upper /= Void implies utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, a_new_upper.item - 1, False).same_string_general (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies\n         utf_8_0_subpointer_to_escaped_string_32 (p, p_offset, p.count, True).same_string_general (s)\n    end\n\n  utf_32_string_to_utf_8 (s: READABLE_STRING_GENERAL): SPECIAL [NATURAL_8]\n      -- UTF-8 sequence corresponding to `s', interpreted as a UTF-32 sequence.\n      -- The sequence is not zero-terminated.\n    do\n      Result := utf_32_string_to_utf_8_0 (s)\n      Result := Result.aliased_resized_area_with_default (0, Result.count - 1)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_8_string_8 (s) as l_ref and then\n        across Result as l_spec all l_spec.item = l_ref.code (l_spec.cursor_index) end\n    end\n\n  utf_32_string_to_utf_8_0 (s: READABLE_STRING_GENERAL): SPECIAL [NATURAL_8]\n      -- UTF-8 sequence corresponding to `s', interpreted as a UTF-32 sequence.\n      -- The sequence is zero-terminated.\n    local\n      m: INTEGER\n      i, n: like {STRING_32}.count\n      c: NATURAL_32\n    do\n      n := s.count\n\n        -- First compute how many bytes we need to convert `s' to UTF-8.\n      m := utf_8_bytes_count (s, 1, n)\n\n        -- Fill `Result' with the converted data.\n      from\n        create Result.make_filled (0, m + 1)\n        i := 0\n        m := 0\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0x7F then\n            -- 0xxxxxxx.\n          Result.put (c.to_natural_8, m)\n          m := m + 1\n        elseif c <= 0x7FF then\n            -- 110xxxxx 10xxxxxx.\n          Result.put (((c |>> 6) | 0xC0).to_natural_8, m)\n          Result.put (((c & 0x3F) | 0x80).to_natural_8, m + 1)\n          m := m + 2\n        elseif c <= 0xFFFF then\n            -- 1110xxxx 10xxxxxx 10xxxxxx\n          Result.put (((c |>> 12) | 0xE0).to_natural_8, m)\n          Result.put ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 1)\n          Result.put (((c & 0x3F) | 0x80).to_natural_8, m + 2)\n          m := m + 3\n        else\n            -- c <= 1FFFFF - there are no higher code points\n            -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n          Result.put (((c |>> 18) | 0xF0).to_natural_8, m)\n          Result.put ((((c |>> 12) & 0x3F) | 0x80).to_natural_8, m + 1)\n          Result.put ((((c |>> 6) & 0x3F) | 0x80).to_natural_8, m + 2)\n          Result.put (((c & 0x3F) | 0x80).to_natural_8, m + 3)\n          m := m + 4\n        end\n      end\n      Result.put (0, m)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_8_string_8 (s) as l_ref and then\n        across Result as l_spec all l_spec.item = l_ref.code (l_spec.cursor_index) end\n    end\n\nfeature -- UTF-8 to UTF-32\n\n  utf_8_0_pointer_to_escaped_string_32 (p: MANAGED_POINTER): STRING_32\n      -- {STRING_32} object corresponding to UTF-8 sequence `p' which is zero-terminated,\n      -- where invalid UTF-8 sequences are escaped.\n    do\n        -- Allocate Result with the same number of bytes as `p'.\n      create Result.make (p.count)\n      utf_8_0_pointer_into_escaped_string_32 (p, Result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_8_string_8 (Result) as l_str and then\n        across l_str as l_char all l_char.item = p.read_natural_8 (l_char.cursor_index - 1).to_character_8 end\n    end\n\n  utf_8_0_pointer_into_escaped_string_32 (p: MANAGED_POINTER; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-8 sequence `p' which is zero-terminated,\n      -- where invalid UTF-8 sequences are escaped, appended into `a_result'.\n    do\n      utf_8_0_subpointer_into_escaped_string_32 (p, 0, p.count - 1, True, a_result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_8_string_8 (a_result.substring (old a_result.count + 1, a_result.count)) as l_str and then\n        across l_str as l_char all l_char.item = p.read_natural_8 (l_char.cursor_index - 1).to_character_8 end\n    end\n\n  utf_8_0_subpointer_to_escaped_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN): STRING_32\n      -- {STRING_32} object corresponding to UTF-8 sequence `p' between indexes `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null', where invalid\n      -- UTF-8 sequences are escaped.\n    require\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count\n    do\n        -- Allocate Result with the same number of bytes as `p'.\n      create Result.make (p.count)\n      utf_8_0_subpointer_into_escaped_string_32 (p, start_pos, end_pos, a_stop_at_null, Result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_8_string_8 (Result) as l_str and then\n        across l_str as l_char all l_char.item = p.read_natural_8 (start_pos + l_char.cursor_index - 1).to_character_8 end\n    end\n\n  utf_8_0_subpointer_into_escaped_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-8 sequence `p' between indexes `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null', where invalid\n      -- UTF-8 sequences are escaped, appended into `a_result'.\n    require\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count\n    local\n      i: like {STRING_8}.count\n      c1, c2, c3, c4: NATURAL_8\n      l_last_char: CHARACTER_32\n    do\n      from\n        a_result.grow (a_result.count + end_pos - start_pos + 1)\n        i := start_pos\n      until\n        i > end_pos\n      loop\n        c1 := p.read_natural_8 (i)\n        if c1 = 0 and a_stop_at_null then\n            -- We hit our null terminating character, we can stop\n          i := end_pos + 1\n        elseif c1 <= 0x7F then\n            -- 0xxxxxxx\n          a_result.extend (c1.to_character_32)\n          i := i + 1\n        elseif (c1 & 0xE0) = 0xC0 then\n          if i < end_pos then\n            c2 := p.read_natural_8 (i + 1)\n            if (c2 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 110xxxxx 10xxxxxx\n              a_result.extend ((\n                ((c1.as_natural_32 & 0x1F) |<< 6) |\n                (c2.as_natural_32 & 0x3F)\n                ).to_character_32)\n              i := i + 2\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n              i := i + 1\n            end\n          else\n              -- Invalid UTF-8 sequence, we escape the first byte.\n            escape_code_into (a_result, c1)\n            i := i + 1\n          end\n        elseif (c1 & 0xF0) = 0xE0 then\n          if i + 1 < end_pos then\n            c2 := p.read_natural_8 (i + 1)\n            c3 := p.read_natural_8 (i + 2)\n            if (c2 & 0xC0) = 0x80 and (c3 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 1110xxxx 10xxxxxx 10xxxxxx\n              l_last_char := (((c1.as_natural_32 & 0xF) |<< 12) |\n                ((c2.as_natural_32 & 0x3F) |<< 6) |\n                (c3.as_natural_32 & 0x3F)\n                ).to_character_32\n              a_result.extend (l_last_char)\n              i := i + 3\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n              i := i + 1\n            end\n          else\n              -- Invalid UTF-8 sequence.\n            escape_code_into (a_result, c1)\n            i := i + 1\n          end\n        elseif (c1 & 0xF8) = 0xF0 then\n          if i + 2 < end_pos then\n            c2 := p.read_natural_8 (i + 1)\n            c3 := p.read_natural_8 (i + 2)\n            c4 := p.read_natural_8 (i + 3)\n            if (c2 & 0xC0) = 0x80 and (c3 & 0xC0) = 0x80 and (c4 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n              a_result.extend ((\n                ((c1.as_natural_32 & 0x7) |<< 18) |\n                ((c2.as_natural_32 & 0x3F) |<< 12) |\n                ((c3.as_natural_32 & 0x3F) |<< 6) |\n                (c4.as_natural_32 & 0x3F)\n                ).to_character_32)\n              i := i + 4\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n              i := i + 1\n            end\n          else\n              -- Invalid UTF-8 sequence.\n            escape_code_into (a_result, c1)\n            i := i + 1\n          end\n\n        else\n            -- Clearly invalid UTF-8\n          escape_code_into (a_result, c1)\n          i := i + 1\n        end\n      end\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_8_string_8 (a_result.substring (old a_result.count + 1, a_result.count)) as l_str and then\n        across l_str as l_char all l_char.item = p.read_natural_8 (start_pos + l_char.cursor_index - 1).to_character_8 end\n    end\n\n  utf_8_string_8_to_string_32 (s: READABLE_STRING_8): STRING_32\n      -- STRING_32 corresponding to UTF-8 sequence `s'.\n    do\n      create Result.make (s.count)\n      utf_8_string_8_into_string_32 (s, Result)\n    ensure\n      roundtrip: is_valid_utf_8_string_8 (s) implies utf_32_string_to_utf_8_string_8 (Result).same_string (s)\n    end\n\n  utf_8_string_8_into_string_32 (s: READABLE_STRING_8; a_result: STRING_32)\n      -- Copy STRING_32 corresponding to UTF-8 sequence `s' appended into `a_result'.\n    local\n      i: like {STRING_8}.count\n      n: like {STRING_8}.count\n      c: NATURAL_32\n    do\n      from\n        n := s.count\n        a_result.grow (a_result.count + n)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0x7F then\n            -- 0xxxxxxx\n          a_result.extend (c.to_character_32)\n        elseif c <= 0xDF then\n            -- 110xxxxx 10xxxxxx\n          i := i + 1\n          if i <= n then\n            a_result.extend ((\n              ((c & 0x1F) |<< 6) |\n              (s.code (i) & 0x3F)\n            ).to_character_32)\n          end\n        elseif c <= 0xEF then\n            -- 1110xxxx 10xxxxxx 10xxxxxx\n          i := i + 2\n          if i <= n then\n            a_result.extend ((\n              ((c & 0xF) |<< 12) |\n              ((s.code (i - 1) & 0x3F) |<< 6) |\n              (s.code (i) & 0x3F)\n            ).to_character_32)\n          end\n        elseif c <= 0xF7 then\n            -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n          i := i + 3\n          if i <= n then\n            a_result.extend ((\n              ((c & 0x7) |<< 18) |\n              ((s.code (i - 2) & 0x3F) |<< 12) |\n              ((s.code (i - 1) & 0x3F) |<< 6) |\n              (s.code (i) & 0x3F)\n            ).to_character_32)\n          end\n        end\n      end\n    ensure\n      roundtrip: is_valid_utf_8_string_8 (s) implies utf_32_string_to_utf_8_string_8 (a_result.substring (old a_result.count + 1, a_result.count)).same_string (s)\n    end\n\n  utf_8_string_8_to_escaped_string_32 (s: READABLE_STRING_8): STRING_32\n      -- STRING_32 corresponding to UTF-8 sequence `s', where invalid UTF-8 sequences are escaped.\n    do\n      create Result.make (s.count)\n      utf_8_string_8_into_escaped_string_32 (s, Result)\n    ensure\n      roundtrip: escaped_utf_32_string_to_utf_8_string_8 (Result).same_string (s)\n    end\n\n  utf_8_string_8_into_escaped_string_32 (s: READABLE_STRING_8; a_result: STRING_32)\n      -- Copy STRING_32 corresponding to UTF-8 sequence `s', where invalid UTF-8 sequences are escaped,\n      -- appended into `a_result'.\n    local\n      i: like {STRING_8}.count\n      n: like {STRING_8}.count\n      c1, c2, c3, c4: NATURAL_8\n      l_last_char: CHARACTER_32\n    do\n      from\n        n := s.count\n        a_result.grow (a_result.count + n)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c1 := s.code (i).as_natural_8\n        if c1 <= 0x7F then\n            -- 0xxxxxxx\n          a_result.extend (c1.to_character_32)\n        elseif (c1 & 0xE0) = 0xC0 then\n          if i < n then\n            c2 := s.code (i + 1).as_natural_8\n            if (c2 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 110xxxxx 10xxxxxx\n              a_result.extend ((\n                ((c1.as_natural_32 & 0x1F) |<< 6) |\n                (c2.as_natural_32 & 0x3F)\n                ).to_character_32)\n              i := i + 1\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n            end\n          else\n              -- Invalid UTF-8 sequence, we escape the first byte.\n            escape_code_into (a_result, c1)\n          end\n        elseif (c1 & 0xF0) = 0xE0 then\n          if i + 1 < n then\n            c2 := s.code (i + 1).as_natural_8\n            c3 := s.code (i + 2).as_natural_8\n            if (c2 & 0xC0) = 0x80 and (c3 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 1110xxxx 10xxxxxx 10xxxxxx\n              l_last_char := (((c1.as_natural_32 & 0xF) |<< 12) |\n                ((c2.as_natural_32 & 0x3F) |<< 6) |\n                (c3.as_natural_32 & 0x3F)\n                ).to_character_32\n              a_result.extend (l_last_char)\n              i := i + 2\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n            end\n          else\n              -- Invalid UTF-8 sequence.\n            escape_code_into (a_result, c1)\n          end\n        elseif (c1 & 0xF8) = 0xF0 then\n          if i + 2 < n then\n            c2 := s.code (i + 1).as_natural_8\n            c3 := s.code (i + 2).as_natural_8\n            c4 := s.code (i + 3).as_natural_8\n            if (c2 & 0xC0) = 0x80 and (c3 & 0xC0) = 0x80 and (c4 & 0xC0) = 0x80 then\n                -- Valid UTF-8 sequence:\n                -- 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n              a_result.extend ((\n                ((c1.as_natural_32 & 0x7) |<< 18) |\n                ((c2.as_natural_32 & 0x3F) |<< 12) |\n                ((c3.as_natural_32 & 0x3F) |<< 6) |\n                (c4.as_natural_32 & 0x3F)\n                ).to_character_32)\n              i := i + 3\n            else\n                -- Invalid UTF-8 sequence, we escape the first byte\n                -- and try with the next one to see if it is the starting\n                -- byte of a valid UTF-8 sequence.\n              escape_code_into (a_result, c1)\n            end\n          else\n              -- Invalid UTF-8 sequence.\n            escape_code_into (a_result, c1)\n          end\n\n        else\n            -- Clearly invalid UTF-8\n          escape_code_into (a_result, c1)\n        end\n      end\n    ensure\n      roundtrip: escaped_utf_32_string_to_utf_8_string_8 (a_result.substring (old a_result.count + 1, a_result.count)).same_string (s)\n    end\n\nfeature -- UTF-32 to UTF-16\n\n  string_32_to_utf_16 (s: READABLE_STRING_32): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to `s'.\n      -- The sequence is not zero-terminated.\n    do\n      Result := utf_32_string_to_utf_16 (s)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_16le_string_8 (s) as l_ref and then\n        across Result as l_spec all l_spec.item = (l_ref.code (l_spec.cursor_index * 2 - 1) | (l_ref.code (l_spec.cursor_index * 2) |<< 16)) end\n    end\n\n  utf_32_string_to_utf_16 (s: READABLE_STRING_GENERAL): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to `s' interpreted as a UTF-32 sequence.\n      -- The sequence is not zero-terminated.\n    do\n      Result := utf_32_string_to_utf_16_0 (s)\n      Result := Result.aliased_resized_area_with_default (0, Result.count - 1)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_16le_string_8 (s) as l_ref and then\n        across Result as l_spec all l_spec.item = (l_ref.code (l_spec.cursor_index * 2 - 1) | (l_ref.code (l_spec.cursor_index * 2) |<< 8)) end\n    end\n\n  string_32_to_utf_16_0 (s: READABLE_STRING_32): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to `s' with terminating zero.\n    do\n      Result := utf_32_string_to_utf_16_0 (s)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_16le_string_8 (s) as l_ref and then\n        across Result.resized_area_with_default (0, Result.count - 1) as l_spec all\n          l_spec.item = (l_ref.code (l_spec.cursor_index * 2 - 1) | (l_ref.code (l_spec.cursor_index * 2) |<< 8))\n        end\n    end\n\n  utf_32_string_to_utf_16_0 (s: READABLE_STRING_GENERAL): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to `s', interpreted as a UTF-32 sequence,\n      -- with terminating zero.\n    local\n      i: like {STRING_32}.count\n      n: like {STRING_32}.count\n      m: like {STRING_32}.count\n      p: like {STRING_32}.count\n      c: NATURAL_32\n    do\n      from\n        m := 0\n        n := s.count\n        p := n\n        create Result.make_empty (p + 1)\n      invariant\n        m = Result.count\n        p + 1 = Result.capacity\n      until\n        i >= n\n      loop\n        i := i + 1\n          -- Make sure there is sufficient room for at least 2 code units.\n        if p < m + 2 then\n          p := m + (n - i) + 2\n          Result := Result.aliased_resized_area (p + 1)\n        end\n        c := s.code (i)\n        if c <= 0xFFFF then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          Result.extend (c.to_natural_16)\n          m := m + 1\n        else\n            -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n          Result.extend ((0xD7C0 + (c |>> 10)).to_natural_16)\n          Result.extend ((0xDC00 + (c & 0x3FF)).to_natural_16)\n          m := m + 2\n        end\n      end\n      Result.extend (0)\n    ensure\n      roundtrip: attached utf_32_string_to_utf_16le_string_8 (s) as l_ref and then\n        across Result.resized_area_with_default (0, Result.count - 1) as l_spec all\n          l_spec.item = (l_ref.code (l_spec.cursor_index * 2 - 1) | (l_ref.code (l_spec.cursor_index * 2) |<< 8))\n        end\n    end\n\n  string_32_into_utf_16_pointer (s: READABLE_STRING_32; p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-16 sequence corresponding to `s' to address `p + p_offset'\n      -- and update the size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is not zero-terminated.\n    require\n      even_p_offset: (p_offset \\\\ 2) = 0\n      p_offset_non_negative: p_offset >= 0\n    do\n      utf_32_substring_into_utf_16_pointer (s, 1, s.count, p, p_offset, a_new_upper)\n    ensure\n      roundtrip: a_new_upper /= Void implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (a_new_upper.item // 2) - 1, False).same_string (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (p.count // 2) - 1, True).same_string (s)\n    end\n\n  string_32_into_utf_16_0_pointer (s: READABLE_STRING_32; p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-16 sequence corresponding to `s' with terminating zero\n      -- to address `p + p_offset' and update the size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is zero-terminated.\n    require\n      even_p_offset: (p_offset \\\\ 2) = 0\n      p_offset_non_negative: p_offset >= 0\n    do\n      utf_32_substring_into_utf_16_0_pointer (s, 1, s.count, p, p_offset, a_new_upper)\n    ensure\n      roundtrip: a_new_upper /= Void implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (a_new_upper.item // 2) - 1, False).same_string (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (p.count // 2) - 1, True).same_string (s)\n    end\n\n  utf_32_substring_into_utf_16_pointer\n      (s: READABLE_STRING_GENERAL;\n      start_pos, end_pos: like {READABLE_STRING_32}.count;\n      p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-16 sequence corresponding to the substring of `s',\n      -- interpreted as a UTF-32 sequence, starting at index `start_pos'\n      -- and ending at index `end_pos' to address `p + p_offset' and update the\n      -- size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is not zero-terminated.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n      even_p_offset: (p_offset \\\\ 2) = 0\n      p_offset_non_negative: p_offset >= 0\n    local\n      m: INTEGER\n    do\n      m := p.count\n      utf_32_substring_into_utf_16_0_pointer (s, start_pos, end_pos, p, p_offset, a_new_upper)\n      if m < p.count then\n          -- Remove the null terminating character.\n        p.resize (p.count - 2)\n        if a_new_upper /= Void then\n          a_new_upper.put (p.count - 2)\n        end\n      end\n    ensure\n      p_count_may_increase: p.count >= old p.count\n      roundtrip: a_new_upper /= Void implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (a_new_upper.item // 2) - 1, False).same_string_general (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (p.count // 2) - 1, True).same_string_general (s)\n    end\n\n  utf_32_substring_into_utf_16_0_pointer\n      (s: READABLE_STRING_GENERAL;\n      start_pos, end_pos: like {READABLE_STRING_32}.count;\n      p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER])\n      -- Write UTF-16 sequence corresponding to the substring of `s',\n      -- interpreted as a UTF-32 sequence, starting at index `start_pos'\n      -- and ending at index `end_pos' to address `p + p_offset' and update the\n      -- size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is zero-terminated.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n      even_p_offset: (p_offset \\\\ 2) = 0\n      p_offset_non_negative: p_offset >= 0\n    local\n      i: like {READABLE_STRING_GENERAL}.count\n      c: NATURAL_32\n      m, l_count: like {MANAGED_POINTER}.count\n      l_resized: BOOLEAN\n    do\n        -- Write UTF-16 sequence.\n      from\n        i := end_pos - start_pos + 1\n        l_count := p.count\n          -- Check that there is at least `i * 2' bytes available plus the terminating null character.\n        if l_count - p_offset < (i + 1) * 2  then\n            -- Optimize resizing, once we have to resize, we actually perform the resizing\n            -- only once.\n          l_count := p_offset + utf_16_bytes_count (s, start_pos, end_pos) + 2\n          p.resize (l_count)\n          l_resized := True\n        end\n        i := start_pos - 1\n        m := p_offset\n      until\n        i >= end_pos\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0xFFFF then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          p.put_natural_16 (c.to_natural_16, m)\n          m := m + 2\n        else\n            -- Make sure there is sufficient room for all the remaining characters and\n            -- at least 3 code units of 2 bytes each, i.e. 2 code unit for the surrogate\n            -- pair, and one unit for the terminating null character. Note that we do not\n            -- take into account `p_offset' because `m' already includes it.\n            -- Note that `end_pos - i' represents the number of remaining characters\n            -- to process in the current string.\n          if not l_resized and then (m + 6 + (end_pos - i) * 2 > l_count) then\n              -- Optimize resizing, once we have to resize, we actually perform the resizing\n              -- only once.\n            l_count := m + utf_16_bytes_count (s, i, end_pos) + 2\n            p.resize (l_count)\n            l_resized := True\n          end\n\n            -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n          p.put_natural_16 ((0xD7C0 + (c |>> 10)).to_natural_16, m)\n          p.put_natural_16 ((0xDC00 + (c & 0x3FF)).to_natural_16, m + 2)\n          m := m + 4\n        end\n      end\n        -- Adjust number of written bytes and add terminating zero at the end.\n      if l_resized then\n          -- We had to add a code unit on 4 bytes. We adjust the size.\n        p.resize (m + 2)\n      end\n      p.put_natural_16 (0, m)\n      if a_new_upper /= Void then\n        a_new_upper.put (m)\n      end\n    ensure\n      p_count_may_increase: p.count >= old p.count\n      roundtrip: a_new_upper /= Void implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (a_new_upper.item // 2) - 1, False).same_string_general (s)\n      roundtrip: (a_new_upper = Void and then not s.has ('%U')) implies utf_16_0_subpointer_to_string_32 (p, p_offset // 2, (p.count // 2) - 1, True).same_string_general (s)\n    end\n\n  utf_32_string_to_utf_16le_string_8 (s: READABLE_STRING_GENERAL): STRING_8\n      -- UTF-16LE sequence corresponding to `s' interpreted as a UTF-32 sequence\n    do\n        -- We would need at least 2-bytes per characters in `s'.\n      create Result.make (s.count * 2)\n      utf_32_string_into_utf_16le_string_8 (s, Result)\n    ensure\n      roundtrip: utf_16le_string_8_to_string_32 (Result).same_string_general (s)\n    end\n\n  utf_32_string_into_utf_16le_string_8 (s: READABLE_STRING_GENERAL; a_result: STRING_8)\n      -- Copy UTF-16LE sequence corresponding to `s' interpreted as a UTF-32 sequence\n      -- appended into `a_result'.\n    local\n      i: like {STRING_32}.count\n      n: like {STRING_32}.count\n      c: NATURAL_32\n      l_nat16: NATURAL_16\n    do\n      from\n        n := s.count\n          -- We would need at least 2-bytes per characters in `s'.\n        a_result.grow (a_result.count + n * 2)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c <= 0xFFFF then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          a_result.extend ((c & 0x00FF).to_character_8)\n          a_result.extend (((c & 0xFF00) |>> 8).to_character_8)\n        else\n            -- Write the lead surrogate pair.\n          l_nat16 := (0xD7C0 + (c |>> 10)).to_natural_16\n          a_result.extend ((l_nat16 & 0x00FF).to_character_8)\n          a_result.extend (((l_nat16 & 0xFF00) |>> 8).to_character_8)\n\n            -- Write the trail surrogate pair.\n          l_nat16 := (0xDC00 + (c & 0x3FF)).to_natural_16\n          a_result.extend ((l_nat16 & 0x00FF).to_character_8)\n          a_result.extend (((l_nat16 & 0xFF00) |>> 8).to_character_8)\n        end\n      end\n    ensure\n      roundtrip: utf_16le_string_8_to_string_32 (a_result.substring (old a_result.count + 1, a_result.count)).same_string_general (s)\n    end\n\n  escaped_utf_32_substring_into_utf_16_0_pointer (\n        s: READABLE_STRING_GENERAL; start_pos, end_pos: like {READABLE_STRING_32}.count;\n        p: MANAGED_POINTER; p_offset: INTEGER; a_new_upper: detachable CELL [INTEGER]\n      )\n      -- Write UTF-16 sequence corresponding to the substring of `s',\n      -- interpreted as a UTF-32 sequence, starting at index `start_pos'\n      -- and ending at index `end_pos' to address `p + p_offset' and update the\n      -- size of `p' to the number of written bytes.\n      -- If `a_new_upper' is provided, the upper index of `p' containing the zero-termination\n      -- is written to `a_new_upper'.\n      -- The sequence is not zero-terminated.\n    require\n      start_position_big_enough: start_pos >= 1\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos <= s.count\n      even_p_offset: (p_offset \\\\ 2) = 0\n      p_offset_non_negative: p_offset >= 0\n    local\n      i, n, m, l_count: INTEGER\n      c: NATURAL_32\n      l_encoded_value: READABLE_STRING_GENERAL\n      l_decoded: BOOLEAN\n      l_resized: BOOLEAN\n    do\n      from\n        n := end_pos - start_pos + 1\n        l_count := p.count\n          -- Check that there is at least `i * 2' bytes available plus the terminating null character.\n        if l_count - p_offset < (n + 1) * 2  then\n            -- Optimize resizing, once we have to resize, we actually perform the resizing\n            -- only once.\n          l_count := p_offset + utf_16_bytes_count (s, start_pos, end_pos) + 2\n          p.resize (l_count)\n          l_resized := True\n        end\n        i := start_pos - 1\n        m := p_offset\n      until\n        i >= end_pos\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c = escape_character.natural_32_code then\n            -- We might be facing a character that was escaped.\n          if i < n then\n            if s.item (i + 1) = escape_character then\n                -- The `escape_character' was escaped, it meant they really wanted an `escape_character'.\n              i := i + 1\n            elseif s.item (i + 1) = 'u' then\n              if i + 4 < n then\n                l_encoded_value := s.substring (i + 2, i + 5)\n                if is_hexa_decimal (l_encoded_value) then\n                  c := to_natural_32 (l_encoded_value)\n                  if c < 0xD800 or c > 0xDFFF then\n                      -- Value was encoded when it should not have been\n                      -- do nothing, we leave the original content as is.\n                    c := escape_character.natural_32_code\n                  else\n                    l_decoded := True\n                    i := i + 5\n                  end\n                else\n                    -- Not an hexadecimal value, it was not escaped.\n                end\n              else\n                -- Not enough characters to make a 2-byte value, it was not escaped.\n              end\n            else\n              -- Value was most likely not encoded, because if it did, it would be the\n              -- hexadecimal representation of a byte which clearly did not need to\n              -- be escaped\n            end\n          else\n              -- Nothing more to read, clearly it was not encoded.\n          end\n        end\n\n        if not l_decoded then\n          if c <= 0xFFFF then\n              -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n            p.put_natural_16 (c.to_natural_16, m)\n            m := m + 2\n          else\n              -- Make sure there is sufficient room for all the remaining characters and\n              -- at least 3 code units of 2 bytes each, i.e. 2 code unit for the surrogate\n              -- pair, and one unit for the terminating null character. Note that we do not\n              -- take into account `p_offset' because `m' already includes it.\n              -- Note that `end_pos - i' represents the number of remaining characters\n              -- to process in the current string.\n            if not l_resized and then (m + 6 + (end_pos - i) * 2 > l_count) then\n                -- Optimize resizing, once we have to resize, we actually perform the resizing\n                -- only once.\n              l_count := m + utf_16_bytes_count (s, i, end_pos) + 2\n              p.resize (l_count)\n              l_resized := True\n            end\n\n              -- Write the lead surrogate pair.\n            p.put_natural_16 ((0xD7C0 + (c |>> 10)).to_natural_16, m)\n\n              -- Write the trail surrogate pair.\n            p.put_natural_16 ((0xDC00 + (c & 0x3FF)).to_natural_16, m + 2)\n\n            m := m + 4\n          end\n        else\n          l_decoded := False\n            -- Simply put decoded value directly in stream.\n          p.put_natural_16 (c.to_natural_16, m)\n          m := m + 2\n        end\n      end\n      if l_resized then\n          -- We had to add a code unit on 4 bytes. We adjust the size.\n        p.resize (m + 2)\n      end\n      p.put_natural_16 (0, m)\n      if a_new_upper /= Void then\n        a_new_upper.put (m)\n      end\n    ensure\n      p_count_may_increase: p.count >= old p.count\n      roundtrip: a_new_upper /= Void implies utf_16_0_subpointer_to_escaped_string_32 (p, p_offset // 2, (a_new_upper.item // 2) - 1, False).same_string_general (s.substring (start_pos, end_pos))\n      roundtrip: (a_new_upper = Void and then not s.substring (start_pos, end_pos).has ('%U')) implies\n        utf_16_0_subpointer_to_escaped_string_32 (p, p_offset // 2, (p.count // 2) - 1, True).same_string_general (s.substring (start_pos, end_pos))\n    end\n\n  escaped_utf_32_string_to_utf_16le_string_8 (s: READABLE_STRING_GENERAL): STRING_8\n      -- UTF-16LE sequence corresponding to `s' interpreted as a UTF-32 sequence that could be escaped.\n      -- If `s' contains the `escape_character' followed by either \"HH\" or \"uHHHH\" where H stands\n      -- for an hexadecimal digit, then `s' has been escaped and will be converted to what is\n      -- expected by the current platform.\n      -- Otherwise it will be ignored and it will be left as is.\n      -- See the note clause for the class for more details on the encoding.\n    do\n        -- We would need at least 2-bytes per characters in `s'.\n      create Result.make (s.count * 2)\n      escaped_utf_32_string_into_utf_16le_string_8 (s, Result)\n    ensure\n      roundtrip: utf_16le_string_8_to_escaped_string_32 (Result).same_string_general (s)\n    end\n\n  escaped_utf_32_string_into_utf_16le_string_8 (s: READABLE_STRING_GENERAL; a_result: STRING_8)\n      -- Copy UTF-16LE sequence corresponding to `s' interpreted as a UTF-32 sequence that could be\n      -- escaped appended into `a_result'.\n      -- If `s' contains the `escape_character' followed by either \"HH\" or \"uHHHH\" where H stands\n      -- for an hexadecimal digit, then `s' has been escaped and will be converted to what is\n      -- expected by the current platform.\n      -- Otherwise it will be ignored and it will be left as is.\n      -- See the note clause for the class for more details on the encoding.\n    local\n      i: like {STRING_32}.count\n      n: like {STRING_32}.count\n      c: NATURAL_32\n      l_nat16: NATURAL_16\n      l_encoded_value: READABLE_STRING_GENERAL\n      l_decoded: BOOLEAN\n    do\n      from\n        n := s.count\n          -- We would need at least 2-bytes per characters in `s'.\n        a_result.grow (a_result.count + n * 2)\n      until\n        i >= n\n      loop\n        i := i + 1\n        c := s.code (i)\n        if c = escape_character.natural_32_code then\n            -- We might be facing a character that was escaped.\n          if i < n then\n            if s.item (i + 1) = escape_character then\n                -- The `escape_character' was escaped, it meant they really wanted an `escape_character'.\n              i := i + 1\n            elseif s.item (i + 1) = 'u' then\n              if i + 4 < n then\n                l_encoded_value := s.substring (i + 2, i + 5)\n                if is_hexa_decimal (l_encoded_value) then\n                  c := to_natural_32 (l_encoded_value)\n                  if c < 0xD800 or c > 0xDFFF then\n                      -- Value was encoded when it should not have been\n                      -- do nothing, we leave the original content as is.\n                    c := escape_character.natural_32_code\n                  else\n                    l_decoded := True\n                    i := i + 5\n                  end\n                else\n                    -- Not an hexadecimal value, it was not escaped.\n                end\n              else\n                  -- Not enough characters to make a 2-byte value, it was not escaped.\n              end\n            else\n              -- Value was most likely not encoded, because if it did, it would be the\n              -- hexadecimal representation of a byte which clearly did not need to\n              -- be escaped\n            end\n          else\n              -- Nothing more to read, clearly it was not encoded.\n          end\n        end\n\n        if not l_decoded then\n          if c <= 0xFFFF then\n              -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n            a_result.extend ((c & 0x00FF).to_character_8)\n            a_result.extend (((c & 0xFF00) |>> 8).to_character_8)\n          else\n              -- Write the lead surrogate pair.\n            l_nat16 := (0xD7C0 + (c |>> 10)).to_natural_16\n            a_result.extend ((l_nat16 & 0x00FF).to_character_8)\n            a_result.extend (((l_nat16 & 0xFF00) |>> 8).to_character_8)\n\n                -- Write the trail surrogate pair.\n            l_nat16 := (0xDC00 + (c & 0x3FF)).to_natural_16\n            a_result.extend ((l_nat16 & 0x00FF).to_character_8)\n            a_result.extend (((l_nat16 & 0xFF00) |>> 8).to_character_8)\n          end\n        else\n          l_decoded := False\n            -- Simply put decoded value directly in stream.\n          a_result.extend ((c & 0x00FF).to_character_8)\n          a_result.extend (((c & 0xFF00) |>> 8).to_character_8)\n        end\n      end\n    ensure\n      roundtrip: utf_16le_string_8_to_escaped_string_32 (a_result.substring (old a_result.count + 1, a_result.count)).same_string_general (s)\n    end\n\nfeature -- UTF-16 to UTF-32\n\n  utf_16_0_pointer_to_string_32 (p: MANAGED_POINTER): STRING_32\n      -- {STRING_32} object corresponding to UTF-16 sequence `p' which is zero-terminated.\n    require\n      minimum_size: p.count >= 2\n      valid_count: p.count \\\\ 2 = 0\n    do\n        -- Allocate Result with the same number of bytes as `p'.\n      create Result.make (p.count)\n      utf_16_0_pointer_into_string_32 (p, Result)\n    ensure\n      roundtrip: is_valid_utf_16_subpointer (p, 0, p.count // 2, True) implies\n        across string_32_to_utf_16 (Result) as l_spec all l_spec.item = p.read_natural_16 (l_spec.cursor_index * 2) end\n    end\n\n  utf_16_0_pointer_into_string_32 (p: MANAGED_POINTER; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16 sequence `p' which is zero-terminated\n      -- appended into `a_result'.\n    require\n      minimum_size: p.count >= 2\n      valid_count: p.count \\\\ 2 = 0\n    do\n      utf_16_0_subpointer_into_string_32 (p, 0, p.count // 2 - 1, True, a_result)\n    ensure\n      roundtrip: is_valid_utf_16_subpointer (p, 0, p.count // 2, True) implies\n        across string_32_to_utf_16 (a_result.substring (old a_result.count + 1, a_result.count)) as l_spec all l_spec.item = p.read_natural_16 (l_spec.target_index * 2) end\n    end\n\n  utf_16_0_subpointer_to_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN): STRING_32\n      -- {STRING_32} object corresponding to UTF-16 sequence `p' between code units `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null'.\n    require\n      minimum_size: p.count >= 2\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count // 2\n    do\n      create Result.make (p.count)\n      utf_16_0_subpointer_into_string_32 (p, start_pos, end_pos, a_stop_at_null, Result)\n    ensure\n      roundtrip: is_valid_utf_16_subpointer (p, start_pos, end_pos, a_stop_at_null) implies\n        across string_32_to_utf_16 (Result) as l_spec all l_spec.item = p.read_natural_16 (l_spec.target_index * 2) end\n    end\n\n  utf_16_0_subpointer_into_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16 sequence `p' between code units `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null' appended into `a_result'.\n    require\n      minimum_size: p.count >= 2\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count // 2\n    local\n      i, n: INTEGER\n      c: NATURAL_32\n    do\n      from\n          -- Allocate Result with the same number of bytes as copied from `p'.\n        a_result.grow (a_result.count + end_pos - start_pos + 1)\n        i := start_pos * 2\n        n := end_pos * 2\n      until\n        i > n\n      loop\n        c := p.read_natural_16 (i)\n        if c = 0 and a_stop_at_null then\n            -- We hit our null terminating character, we can stop\n          i := n + 1\n        else\n          i := i + 2\n          if c < 0xD800 or c >= 0xE000 then\n              -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n            a_result.extend (c.to_character_32)\n          else\n              -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n            if i <= n then\n              a_result.extend (((c.as_natural_32 |<< 10) + p.read_natural_16 (i) - 0x35FDC00).to_character_32)\n              i := i + 2\n            end\n          end\n        end\n      end\n    ensure\n      roundtrip: is_valid_utf_16_subpointer (p, start_pos, end_pos, a_stop_at_null) implies\n        across string_32_to_utf_16 (a_result.substring (old a_result.count + 1, a_result.count)) as l_spec all l_spec.item = p.read_natural_16 (l_spec.target_index * 2) end\n    end\n\n  utf_16_0_pointer_to_escaped_string_32 (p: MANAGED_POINTER): STRING_32\n      -- {STRING_32} object corresponding to UTF-16 sequence `p' which is zero-terminated,\n      -- where invalid UTF-16LE sequences are escaped.\n    require\n      minimum_size: p.count >= 2\n      valid_count: p.count \\\\ 2 = 0\n    do\n        -- Allocate Result with the same number of bytes as `p'.\n      create Result.make (p.count)\n      utf_16_0_pointer_into_escaped_string_32 (p, Result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_16le_string_8 (Result) as l_utf and then\n        across l_utf.new_cursor.incremented (1) as l_str all\n          (l_utf.code (l_str.cursor_index) | (l_utf.code (l_str.cursor_index + 1) |<< 8)) = p.read_natural_16 (l_str.cursor_index - 1)\n        end\n    end\n\n  utf_16_0_pointer_into_escaped_string_32 (p: MANAGED_POINTER; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16 sequence `p' which is zero-terminated,\n      -- where invalid UTF-16LE sequences are escaped, appended into `a_result'.\n    require\n      minimum_size: p.count >= 2\n      valid_count: p.count \\\\ 2 = 0\n    do\n      utf_16_0_subpointer_into_escaped_string_32 (p, 0, p.count // 2 - 1, True, a_result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_16le_string_8 (a_result.substring (old a_result.count + 1, a_result.count)) as l_utf and then\n        across l_utf.new_cursor.incremented (1) as l_str all\n          (l_utf.code (l_str.cursor_index) | (l_utf.code (l_str.cursor_index + 1) |<< 8)) = p.read_natural_16 (l_str.cursor_index - 1)\n        end\n    end\n\n  utf_16_0_subpointer_to_escaped_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN): STRING_32\n      -- {STRING_32} object corresponding to UTF-16 sequence `p' between code units `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null', where invalid\n      -- UTF-16LE sequences are escaped.\n    require\n      minimum_size: p.count >= 2\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count // 2\n    do\n      create Result.make (end_pos - start_pos + 1)\n      utf_16_0_subpointer_into_escaped_string_32 (p, start_pos, end_pos, a_stop_at_null, Result)\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_16le_string_8 (Result) as l_utf and then\n        across l_utf.new_cursor.incremented (1) as l_str all\n          (l_utf.code (l_str.cursor_index) | (l_utf.code (l_str.cursor_index + 1) |<< 8)) = p.read_natural_16 (start_pos * 2 + l_str.cursor_index - 1)\n        end\n    end\n\n  utf_16_0_subpointer_into_escaped_string_32 (p: MANAGED_POINTER; start_pos, end_pos: INTEGER; a_stop_at_null: BOOLEAN; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16 sequence `p' between code units `start_pos' and\n      -- `end_pos' or the first null character encountered if `a_stop_at_null', where invalid\n      -- UTF-16LE sequences are escaped, appended into `a_result'.\n    require\n      minimum_size: p.count >= 2\n      start_position_big_enough: start_pos >= 0\n      end_position_big_enough: start_pos <= end_pos + 1\n      end_pos_small_enough: end_pos < p.count // 2\n    local\n      i, n: INTEGER\n      c1, c2: NATURAL_32\n    do\n      from\n          -- Allocate Result with the same number of bytes as copied from `p'.\n        a_result.grow (a_result.count + end_pos - start_pos + 1)\n        i := start_pos * 2\n        n := end_pos * 2\n      until\n        i > n\n      loop\n        c1 := p.read_natural_16 (i)\n        if c1 = 0 and a_stop_at_null then\n            -- We hit our null terminating character, we can stop\n          i := n + 1\n        else\n          i := i + 2\n          if c1 < 0xD800 or c1 >= 0xE000 then\n              -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n            a_result.extend (c1.to_character_32)\n          elseif c1 <= 0xDBFF and then i <= n then\n              -- Check if a lead surrogate (value between 0xD800 and 0xDBFF) is followed by a trail surrogate.\n            c2 := p.read_natural_16 (i)\n            if c2 >= 0xDC00 and c2 <= 0xDFFF then\n                -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n              a_result.extend (((c1 |<< 10) + c2 - 0x35FDC00).to_character_32)\n              i := i + 2\n            else\n                -- Escape a lead surrogate not followed by a trail one.\n              escape_code_into (a_result, c1.as_natural_16)\n            end\n          else\n              -- Escape a trail surrogate not following a lead one or\n              -- a lead surrogate not followed by a trail one.\n            escape_code_into (a_result, c1.as_natural_16)\n          end\n        end\n      end\n    ensure\n      roundtrip: attached escaped_utf_32_string_to_utf_16le_string_8 (a_result.substring (old a_result.count + 1, a_result.count)) as l_utf and then\n        across l_utf.new_cursor.incremented (1) as l_str all\n          (l_utf.code (l_str.cursor_index) | (l_utf.code (l_str.cursor_index + 1) |<< 8)) = p.read_natural_16 (start_pos * 2 + l_str.cursor_index - 1)\n        end\n    end\n\n  utf_16_to_string_32 (s: SPECIAL [NATURAL_16]): STRING_32\n      -- {STRING_32} object corresponding to UTF-16 sequence `s'.\n    do\n      create Result.make (s.count)\n      utf_16_into_string_32 (s, Result)\n    ensure\n      roundtrip: is_valid_utf_16 (s) implies string_32_to_utf_16 (Result).is_equal (s)\n    end\n\n  utf_16_into_string_32 (s: SPECIAL [NATURAL_16]; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16 sequence `s'\n      -- appended into `a_result'.\n    local\n      i: like {SPECIAL [NATURAL_16]}.count\n      n: like {SPECIAL [NATURAL_16]}.count\n      c: NATURAL_32\n    do\n      from\n        n := s.count\n        a_result.grow (a_result.count + n)\n      until\n        i >= n\n      loop\n        c := s [i]\n        i := i + 1\n        if c < 0xD800 or c >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          a_result.extend (c.to_character_32)\n        else\n            -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n          if i < n then\n            a_result.extend (((c |<< 10) + s [i] - 0x35FDC00).to_character_32)\n            i := i + 1\n          end\n        end\n      end\n    ensure\n      roundtrip: is_valid_utf_16 (s) implies string_32_to_utf_16 (a_result.substring (old a_result.count + 1, a_result.count)).is_equal (s)\n    end\n\n  utf_16le_string_8_to_string_32 (s: READABLE_STRING_8): STRING_32\n      -- {STRING_32} object corresponding to UTF-16LE sequence `s'.\n    do\n        -- There is at least half the characters of `s'.\n      create Result.make (s.count |>> 1)\n      utf_16le_string_8_into_string_32 (s, Result)\n    ensure\n      roundtrip: is_valid_utf_16le_string_8 (s) implies escaped_utf_32_string_to_utf_16le_string_8 (Result).same_string (s)\n    end\n\n  utf_16le_string_8_into_string_32 (s: READABLE_STRING_8; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16LE sequence `s' appended into `a_result'.\n    local\n      i, nb: INTEGER\n      c1, c2: NATURAL_32\n    do\n      from\n        nb := s.count\n          -- There is at least half the characters of `s'.\n        a_result.grow (a_result.count + (nb |>> 1))\n      until\n        i + 1 >= nb\n      loop\n        i := i + 2\n          -- Extract the first 2-bytes\n        c1 := s.code (i - 1) | (s.code (i) |<< 8)\n        if c1 < 0xD800 or c1 >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit, this is valid Unicode.\n          a_result.extend (c1.to_character_32)\n        else\n          i := i + 2\n          if i <= nb then\n            c2 := s.code (i - 1) | (s.code (i) |<< 8)\n            a_result.extend (((c1 |<< 10) + c2 - 0x35FDC00).to_character_32)\n          end\n        end\n      end\n    ensure\n      roundtrip: is_valid_utf_16le_string_8 (s) implies escaped_utf_32_string_to_utf_16le_string_8 (a_result.substring (old a_result.count + 1, a_result.count)).same_string (s)\n    end\n\n  utf_16le_string_8_to_escaped_string_32 (s: READABLE_STRING_8): STRING_32\n      -- {STRING_32} object corresponding to UTF-16LE sequence `s', where invalid UTF-16LE\n      -- sequences are escaped.\n    do\n        -- There is at least half the characters of `s'.\n      create Result.make (s.count |>> 1)\n      utf_16le_string_8_into_escaped_string_32 (s, Result)\n    ensure\n      roundtrip: escaped_utf_32_string_to_utf_16le_string_8 (Result).same_string (s)\n    end\n\n  utf_16le_string_8_into_escaped_string_32 (s: READABLE_STRING_8; a_result: STRING_32)\n      -- Copy {STRING_32} object corresponding to UTF-16LE sequence `s', where invalid UTF-16LE\n      -- sequences are escaped, appended into `a_result'.\n    local\n      i, nb: INTEGER\n      c1, c2: NATURAL_32\n    do\n      from\n        nb := s.count\n          -- There is at least half the characters of `s'.\n        a_result.grow (a_result.count + (nb |>> 1))\n      until\n        i + 1 >= nb\n      loop\n        i := i + 2\n          -- Extract the first 2-bytes\n        c1 := s.code (i - 1) | (s.code (i) |<< 8)\n        if c1 < 0xD800 or c1 >= 0xE000 then\n            -- Codepoint from Basic Multilingual Plane: one 16-bit code unit.\n          a_result.extend (c1.to_character_32)\n        elseif c1 <= 0xDBFF and i + 2 <= nb then\n            -- Check if a lead surrogate is followed by a trail surrogate.\n          c2 := s.code (i + 1) | (s.code (i + 2) |<< 8)\n          if c2 >= 0xDC00 and c2 <= 0xDFFF then\n              -- Supplementary Planes: surrogate pair with lead and trail surrogates.\n            a_result.extend (((c1 |<< 10) + c2 - 0x35FDC00).to_character_32)\n            i := i + 2\n          else\n              -- Escape a lead surrogate not followed by a trail one.\n            escape_code_into (a_result, c1.as_natural_16)\n          end\n        else\n            -- Escape a trail surrogate not following a lead one or\n            -- a lead surrogate not followed by a trail one.\n          escape_code_into (a_result, c1.as_natural_16)\n        end\n      end\n    ensure\n      roundtrip: escaped_utf_32_string_to_utf_16le_string_8 (a_result.substring (old a_result.count + 1, a_result.count)).same_string (s)\n    end\n\nfeature -- UTF-16 to UTF-8\n\n  utf_16_to_utf_8_string_8 (s: SPECIAL [NATURAL_16]): STRING_8\n      -- UTF-8 sequence corresponding to UTF-16 sequence `s'.\n    do\n      debug (\"to_implement\")\n        (create {REFACTORING_HELPER}).to_implement (\"Convert directly from UTF-16 to UTF-8.\")\n      end\n      Result := string_32_to_utf_8_string_8 (utf_16_to_string_32 (s))\n    ensure\n      roundtrip: is_valid_utf_16 (s) implies string_32_to_utf_16 (utf_8_string_8_to_string_32 (Result)).is_equal (s)\n    end\n\n  utf_16_into_utf_8_string_8 (s: SPECIAL [NATURAL_16]; a_result: STRING_8)\n      -- Copy UTF-8 sequence corresponding to UTF-16 sequence `s' appended into `a_result'.\n    do\n      debug (\"to_implement\")\n        (create {REFACTORING_HELPER}).to_implement (\"Convert directly from UTF-16 to UTF-8.\")\n      end\n      string_32_into_utf_8_string_8 (utf_16_to_string_32 (s), a_result)\n    ensure\n      roundtrip: is_valid_utf_16 (s) implies string_32_to_utf_16 (utf_8_string_8_to_string_32 (a_result.substring (old a_result.count + 1, a_result.count))).is_equal (s)\n    end\n\n  utf_16le_string_8_to_utf_8_string_8 (s: READABLE_STRING_8): STRING_8\n      -- UTF-8 sequence corresponding to UTF-16LE sequence `s'.\n    do\n      create Result.make (s.count)\n      utf_16le_string_8_into_utf_8_string_8 (s, Result)\n    ensure\n      roundtrip: is_valid_utf_16le_string_8 (s) implies utf_32_string_to_utf_16le_string_8 (utf_8_string_8_to_string_32 (Result)).same_string (s)\n    end\n\n  utf_16le_string_8_into_utf_8_string_8 (s: READABLE_STRING_8; a_result: STRING_8)\n      -- Copy UTF-8 sequence corresponding to UTF-16LE sequence `s' appended into `a_result'.\n    require\n      even_count: (s.count & 1) = 0\n    local\n      v: SPECIAL [NATURAL_16]\n      i: like {STRING_8}.count\n      n: like {STRING_8}.count\n    do\n      from\n        n := s.count\n        create v.make_empty (n |>> 1)\n      until\n        i >= n\n      loop\n        i := i + 2\n        check\n          valid_index: 1 <= i - 1 and i <= s.count\n        end\n        v.extend (s [i - 1].code.as_natural_16 | (s [i].code.as_natural_16 |<< 8))\n      end\n      utf_16_into_utf_8_string_8 (v, a_result)\n    ensure\n      roundtrip: is_valid_utf_16le_string_8 (s) implies utf_32_string_to_utf_16le_string_8 (utf_8_string_8_to_string_32 (a_result.substring (old a_result.count + 1, a_result.count))).same_string (s)\n    end\n\nfeature -- UTF-8 to UTF-16\n\n  utf_8_string_8_to_utf_16 (s: READABLE_STRING_8): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to UTF-8 sequence `s'.\n    do\n      debug (\"to_implement\")\n        (create {REFACTORING_HELPER}).to_implement (\"Convert directly from UTF-8 to UTF-16.\")\n      end\n      Result := string_32_to_utf_16 (utf_8_string_8_to_string_32 (s))\n    ensure\n      roundtrip: is_valid_utf_8_string_8 (s) implies utf_16_to_utf_8_string_8 (Result).same_string (s)\n    end\n\n  utf_8_string_8_to_utf_16_0 (s: READABLE_STRING_8): SPECIAL [NATURAL_16]\n      -- UTF-16 sequence corresponding to UTF-8 sequence `s' with terminating zero.\n    do\n      Result := utf_8_string_8_to_utf_16 (s)\n      Result := Result.aliased_resized_area_with_default (0, Result.count + 1)\n    ensure\n      roundtrip: is_valid_utf_8_string_8 (s) implies utf_16_to_utf_8_string_8 (Result).same_string (s)\n    end\n\nfeature -- Byte Order Mark (BOM)\n\n  utf_8_bom_to_string_8: STRING_8 = \"%/239/%/187/%/191/\"\n      -- UTF-8 BOM sequence.\n\n  utf_16be_bom_to_string_8: STRING_8 = \"%/254/%/255/\"\n      -- UTF-16BE BOM sequence.\n\n  utf_16le_bom_to_string_8: STRING_8 = \"%/255/%/254/\"\n      -- UTF-16LE BOM sequence.\n\n  utf_32be_bom_to_string_8: STRING_8 = \"%U%U%/254/%/255/\"\n      -- UTF-32BE BOM sequence.\n\n  utf_32le_bom_to_string_8: STRING_8 = \"%/255/%/254/%U%U\"\n      -- UTF-32LE BOM sequence.\n\nfeature {NONE} -- Implementation\n\n  escape_code_into (a_string: STRING_32; a_code: NATURAL_16)\n      -- Escape `a_code' as documented in the note clause of the class into `a_string'.\n      -- If `a_code' fits into a NATURAL_8, it will be just the `escape_character' followed\n      -- by the 2-digit hexadecimal representation, otherwise `escape_character' followed\n      -- by the letter `u' followed by the 4-digit hexadecimal representation.\n    do\n      a_string.append_character (escape_character)\n      if a_code <= {NATURAL_8}.max_value then\n        a_string.append_string_general (a_code.as_natural_8.to_hex_string)\n      else\n        a_string.append_character ('u')\n        a_string.append_string_general (a_code.to_hex_string)\n      end\n    end\n\n  is_hexa_decimal (a_string: READABLE_STRING_GENERAL): BOOLEAN\n      -- Is `a_string' a valid hexadecimal sequence?\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.reset ({NUMERIC_INFORMATION}.type_natural_32)\n      l_convertor.parse_string_with_type (a_string, {NUMERIC_INFORMATION}.type_natural_32)\n      Result := l_convertor.is_integral_integer\n    end\n\n  to_natural_32 (a_hex_string: READABLE_STRING_GENERAL): NATURAL_32\n      -- Convert hexadecimal value `a_hex_string' to its corresponding NATURAL_32 value.\n    require\n      is_hexa: is_hexa_decimal (a_hex_string)\n    local\n      l_convertor: like ctoi_convertor\n    do\n      l_convertor := ctoi_convertor\n      l_convertor.parse_string_with_type (a_hex_string, {NUMERIC_INFORMATION}.type_no_limitation)\n      Result := l_convertor.parsed_natural_32\n    end\n\n  ctoi_convertor: HEXADECIMAL_STRING_TO_INTEGER_CONVERTER\n      -- Convertor used to convert string to integer or natural\n    once\n      create Result.make\n      Result.set_leading_separators_acceptable (False)\n      Result.set_trailing_separators_acceptable (False)\n    ensure\n      ctoi_convertor_not_void: Result /= Void\n    end\n\nnote\n  copyright: \"Copyright (c) 1984-2014, Eiffel Software and others\"\n  license: \"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\"\n  source: \"[\n      Eiffel Software\n      5949 Hollister Ave., Goleta, CA 93117 USA\n      Telephone 805-685-1006, Fax 805-685-6869\n      Website http://www.eiffel.com\n      Customer support http://support.eiffel.com\n    ]\"\n\nend\n"});
//# sourceMappingURL=data:application/json;base64,