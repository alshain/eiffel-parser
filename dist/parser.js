eiffel.parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart, Expression: peg$parseExpression, Type: peg$parseType, ParentGroup: peg$parseParentGroup },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = peg$FAILED,
        peg$c2 = null,
        peg$c3 = function(e) {return e},
        peg$c4 = function(note, deferred, frozen, expanded, name, generics, inherit, create, convert, featureLists) {
              return new eiffel.ast.Class(
                name,
                deferred,
                frozen,
                expanded,
                optionalList(note),
                optionalList(inherit),
                optionalList(generics),
                (create == null) ? [] : create,
                featureLists
              );
            },
        peg$c5 = function(f) {return f},
        peg$c6 = function() { return null},
        peg$c7 = function(d) {return d},
        peg$c8 = "[",
        peg$c9 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c10 = "]",
        peg$c11 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c12 = function(gs) {
            return gs;
          },
        peg$c13 = ",",
        peg$c14 = { type: "literal", value: ",", description: "\",\"" },
        peg$c15 = function(r) {return r;},
        peg$c16 = function(first, rest) {return buildList(first, rest, gId()); },
        peg$c17 = function(i, cs) {
            return new eiffel.ast.FormalGenericParameter(
              i,
              (cs == null) ? [] : cs.cons,
              (cs == null) ? [] : cs.creators
            );
          },
        peg$c18 = "->",
        peg$c19 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c20 = function(cons, crs) {
            console.warn("Generic constraint: not implemented");
            return {
              cons: cons,
              creators: crs,
            }
          },
        peg$c21 = function(t, r) {
            return new eiffel.ast.TypeConstraint(t, r);
          },
        peg$c22 = function(is) {
            console.warn("Constraint Creators: Not implemented");
            return is;
          },
        peg$c23 = "{",
        peg$c24 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c25 = "}",
        peg$c26 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c27 = function(cs) {return cs},
        peg$c28 = function(p) {return p;},
        peg$c29 = ":",
        peg$c30 = { type: "literal", value: ":", description: "\":\"" },
        peg$c31 = ";",
        peg$c32 = { type: "literal", value: ";", description: "\";\"" },
        peg$c33 = function(i, v) {return {key: i, value: v.value};},
        peg$c34 = function(name) { return name},
        peg$c35 = function(id) { return id},
        peg$c36 = function(first, rest) {return buildList(first, rest, gId())},
        peg$c37 = function(i) {return i;},
        peg$c38 = function() { return null; },
        peg$c39 = function(c, ps) {
            return new eiffel.ast.ParentGroup(c, ps);
          },
        peg$c40 = function(t, adaptions) {
            return new eiffel.ast.Parent(
              t,
              adaptions
            );
          },
        peg$c41 = function(as) { return as; },
        peg$c42 = function(t, l) {
            return new eiffel.ast.Undefines(t, l);
          },
        peg$c43 = function(t, l) {
            return new eiffel.ast.Redefines(t, l);
          },
        peg$c44 = function(t, l) {
            return new eiffel.ast.Renames(t, l);
          },
        peg$c45 = function(oldName, newName) {
            return new eiffel.ast.Rename(oldName, newName);
          },
        peg$c46 = function(t, es) {
            return new eiffel.ast.NewExports(t, es);
          },
        peg$c47 = function(cs, fs) {
            return {
              access: cs,
              features: fs,
            };
          },
        peg$c48 = function(t, l) {
            return new eiffel.ast.Selects(t, l);
          },
        peg$c49 = "(",
        peg$c50 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c51 = ")",
        peg$c52 = { type: "literal", value: ")", description: "\")\"" },
        peg$c53 = function(acc) { return acc },
        peg$c54 = function(access, fs) { return new eiffel.ast.FeatureList(
                optionalList(access),
                fs
              );
            },
        peg$c55 = function(c) {return c},
        peg$c56 = function(p) {return p},
        peg$c57 = function(a) {return a},
        peg$c58 = function(fi) {return fi; },
        peg$c59 = function(f, na) {
            return new eiffel.ast.FrozenNameAlias(
              na.name,
              na.alias,
              f
            );
          },
        peg$c60 = function(n, a) {
            return new eiffel.ast.ExtendedFeatureName(
              n,
              a
            );
          },
        peg$c61 = function(start, h, rt, b, end) {
            return new eiffel.ast.Function(
              h.namesAndAliases,
              h.params,
              rt,
              b
            );
          },
        peg$c62 = function(start, h, b, end) {
            return new eiffel.ast.Procedure(
              h.namesAndAliases,
              h.params,
              null,
              b
            );
          },
        peg$c63 = function(ps) {return ps;},
        peg$c64 = function(n, p) {
            return {
              namesAndAliases: n,
              params: optionalList(p)
            }
          },
        peg$c65 = function(r) {return r},
        peg$c66 = function(n, alias) {
            return {
              name: n,
              alias: alias,
            }
          },
        peg$c67 = function(start, s, end) {
            return new eiffel.ast.Alias(s, start, end);
          },
        peg$c68 = function(vi) { return vi; },
        peg$c69 = function(v, vs) { return Array.prototype.concat.apply(v, vs)},
        peg$c70 = function(ids, t) {
            var varDeclEntries = ids.map(function(id) {
              return new eiffel.ast.VarDeclEntry(id);
            });
            return new eiffel.ast.VarDeclList(varDeclEntries, t);
          },
        peg$c71 = function(n, t) {
            return new eiffel.ast.Attribute(
              n,
              t
            );
          },
        peg$c72 = "=",
        peg$c73 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c74 = function(n, t, l) {
            return new eiffel.ast.ConstantAttribute(
              n,
              t,
              l
            );
          },
        peg$c75 = void 0,
        peg$c76 = function(bs) {
            return _.flatten(bs);
          },
        peg$c77 = function(instructions) {
            return new eiffel.ast.External(instructions);
          },
        peg$c78 = function(instructions) {
            return new eiffel.ast.DeferredBlock(instructions);
          },
        peg$c79 = function(instructions) {
            return new eiffel.ast.DoBlock(instructions);
          },
        peg$c80 = function(instructions) {
          return new eiffel.ast.OnceBlock(instructions);
        },
        peg$c81 = function(start, e, end) {
            return new eiffel.ast.Obsolete(e, start, end);
          },
        peg$c82 = function(c) {return c;},
        peg$c83 = function(l) {
            return new eiffel.ast.CheckInstruction(l.expression);
          },
        peg$c84 = function(a) {
            return a;
          },
        peg$c85 = function(l) {
            return new eiffel.ast.Precondition(l.name, l.expression);
          },
        peg$c86 = function(l) {
            return new eiffel.ast.Postcondition(l.name, l.expression);
          },
        peg$c87 = function(l) {
            return new eiffel.ast.Invariantcondition(l.name, l.expression);
          },
        peg$c88 = function(l, e) {
            return {
              name: l,
              expression: e,
            };
          },
        peg$c89 = function(l) {
            return {
              name: l,
              expression: null,
            };
          },
        peg$c90 = function(vs) { return new eiffel.ast.LocalsBlock(vs); },
        peg$c91 = function(v) {return v;},
        peg$c92 = function(vs) {return vs;},
        peg$c93 = function() {return null;},
        peg$c94 = function(n) {return n;},
        peg$c95 = function(ns, r) {if(ns) { return [ns, r]} else { return [r]}},
        peg$c96 = function(i, rest) {return merge(i, rest)},
        peg$c97 = function() {
            return new eiffel.ast.Pos(
              offset()
              //line(),
              //column()
            );
          },
        peg$c98 = function() {
            return _n("noop", {});
          },
        peg$c99 = "implies",
        peg$c100 = { type: "literal", value: "implies", description: "\"implies\"" },
        peg$c101 = function(o, r, e) { return {kind: o, right:r, end:e}},
        peg$c102 = function(start, l, rest, end) { return buildBinaryTree(l, rest, start, end)},
        peg$c103 = "or ",
        peg$c104 = { type: "literal", value: "or ", description: "\"or \"" },
        peg$c105 = "else",
        peg$c106 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c107 = function() { return "or else"},
        peg$c108 = "or",
        peg$c109 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c110 = "xor",
        peg$c111 = { type: "literal", value: "xor", description: "\"xor\"" },
        peg$c112 = function(o, r) { return {kind: o, right:r}},
        peg$c113 = "and ",
        peg$c114 = { type: "literal", value: "and ", description: "\"and \"" },
        peg$c115 = "then",
        peg$c116 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c117 = function() { return "and then" },
        peg$c118 = "and",
        peg$c119 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c120 = "..",
        peg$c121 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c122 = "/=",
        peg$c123 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c124 = "~",
        peg$c125 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c126 = "/~",
        peg$c127 = { type: "literal", value: "/~", description: "\"/~\"" },
        peg$c128 = "<=",
        peg$c129 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c130 = ">=",
        peg$c131 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c132 = "<",
        peg$c133 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c134 = ">",
        peg$c135 = { type: "literal", value: ">", description: "\">\"" },
        peg$c136 = "+",
        peg$c137 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c138 = "-",
        peg$c139 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c140 = function() {return "-"},
        peg$c141 = "//",
        peg$c142 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c143 = "/",
        peg$c144 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c145 = "\\\\",
        peg$c146 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c147 = "*",
        peg$c148 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c149 = "^",
        peg$c150 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c151 = function(start, l, k, r, end) {
              return new eiffel.ast.BinaryOp(
                k,
                l,
                r,
                start,
                end
              );
            },
        peg$c152 = function() {return "+"},
        peg$c153 = "not",
        peg$c154 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c155 = "old",
        peg$c156 = { type: "literal", value: "old", description: "\"old\"" },
        peg$c157 = function(start, o, u, end) {
              return new eiffel.ast.UnaryOp(
                o,
                u,
                end,
                end
              );
            },
        peg$c158 = function(start, end) {
              return new eiffel.ast.CurrentExpression(start, end);
            },
        peg$c159 = function(e) { return e},
        peg$c160 = function(start, end) {
              return new eiffel.ast.ResultExpression(start, end);
            },
        peg$c161 = function(i, a) {
            return new eiffel.ast.UnqualifiedCallExpression(i, a);
          },
        peg$c162 = function(start, es, end) {
            return new eiffel.ast.TupleExpression(es, start, end);
          },
        peg$c163 = function(i) {
            return new eiffel.ast.TypeExpression(i);
          },
        peg$c164 = function(f, ops) { return buildIndexArgTree(f, ops)},
        peg$c165 = function(t, m) {
            return new eiffel.ast.CreateExpression(
              t,
              (m ? m.name : null),
              m ? optionalList(m.args) : []
            );
          },
        peg$c166 = function(start, t, q, a, end) {
            return new eiffel.ast.PrecursorCall(t, q, a, start, end);
          },
        peg$c167 = function(t) { return t; },
        peg$c168 = function(t) {return t;},
        peg$c169 = function(start, t, ov, nv, end) {
            return new eiffel.ast.AttachedExpression(t, ov, nv, start, end);
          },
        peg$c170 = function(a) {
            return new eiffel.ast.IndexExpression(
              undefined,
              optionalList(a)
            );
          },
        peg$c171 = ".",
        peg$c172 = { type: "literal", value: ".", description: "\".\"" },
        peg$c173 = function(i, a) {
            return new eiffel.ast.CallExpression(
              undefined,
              i,
              optionalList(a)
            );
          },
        peg$c174 = function(i) {
            return new eiffel.ast.IdentifierAccess(i);
          },
        peg$c175 = "_",
        peg$c176 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c177 = function() {return true},
        peg$c178 = function() {return false},
        peg$c179 = function(g) {return g},
        peg$c180 = function(start, detachable, n, ts, end) {
            return new eiffel.ast.Type(
              n,
              optionalList(ts),
              detachable,
              start,
              end
            );
          },
        peg$c181 = function(start, t, c, end) {
            return new eiffel.ast.TypeLikeCurrent(t, c);
          },
        peg$c182 = function(start, t, i, end) {
            return new eiffel.ast.TypeLikeFeature(t, i);
          },
        peg$c183 = function(t) {return t},
        peg$c184 = function(f, rest) {return buildList(f, rest, gId())},
        peg$c185 = function(fromSeq, until, is, v) {
            return new eiffel.ast.FromLoop(
              fromSeq,
              until,
              is,
              v
            );
          },
        peg$c186 = function(fromSeq) { return fromSeq; },
        peg$c187 = function(until) { return until; },
        peg$c188 = function(is) {return is; },
        peg$c189 = function(c, is, ei, e) {
            return new eiffel.ast.IfElse(
              c,
              optionalList(is),
              optionalList(ei),
              optionalList(e)
            );
          },
        peg$c190 = function(is) { return is },
        peg$c191 = function(c, is) {return new eiffel.ast.ElseIf(c, optionalList(is));},
        peg$c192 = function(rest) {return rest},
        peg$c193 = ":=",
        peg$c194 = { type: "literal", value: ":=", description: "\":=\"" },
        peg$c195 = function(lhs, rhs) {
            return new eiffel.ast.Assignment(
              lhs,
              rhs
            );
          },
        peg$c196 = function(t, n, m) {
            return new eiffel.ast.CreateInstruction(
              n,
              (m ? m.name : null),
              m ? optionalList(m.args) : []
            );
          },
        peg$c197 = function(n, as) {
            return {
              name: n,
              args: optionalList(as)
            }
          },
        peg$c198 = function(r) {return optionalList(r)},
        peg$c199 = function(first, rest) { return buildList(first, rest, gId())},
        peg$c200 = function(t) { return t },
        peg$c201 = function(ids) {return ids;},
        peg$c202 = { type: "other", description: "identifier" },
        peg$c203 = /^[a-zA-Z]/,
        peg$c204 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c205 = /^[a-zA-Z0-9_]/,
        peg$c206 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
        peg$c207 = " ",
        peg$c208 = { type: "literal", value: " ", description: "\" \"" },
        peg$c209 = "\t",
        peg$c210 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c211 = "--",
        peg$c212 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c213 = { type: "any", description: "any character" },
        peg$c214 = { type: "other", description: "whitespace" },
        peg$c215 = /^[ \t\n\r]/,
        peg$c216 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
        peg$c217 = function(name) {
            if (isReserved(name.name)) {
              expected("Identifier, Keyword " + name.name + " found");
            }
            return name;
          },
        peg$c218 = "0b",
        peg$c219 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c220 = "0B",
        peg$c221 = { type: "literal", value: "0B", description: "\"0B\"" },
        peg$c222 = /^[01]/,
        peg$c223 = { type: "class", value: "[01]", description: "[01]" },
        peg$c224 = "0c",
        peg$c225 = { type: "literal", value: "0c", description: "\"0c\"" },
        peg$c226 = "0C",
        peg$c227 = { type: "literal", value: "0C", description: "\"0C\"" },
        peg$c228 = /^[0-7]/,
        peg$c229 = { type: "class", value: "[0-7]", description: "[0-7]" },
        peg$c230 = "0x",
        peg$c231 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c232 = "0X",
        peg$c233 = { type: "literal", value: "0X", description: "\"0X\"" },
        peg$c234 = /^[0-9a-fA-F]/,
        peg$c235 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c236 = /^[0-9]/,
        peg$c237 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c238 = /^[1-9]/,
        peg$c239 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c240 = /^[\n\r\u2028\u2029]/,
        peg$c241 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c242 = { type: "other", description: "end of line" },
        peg$c243 = "\n",
        peg$c244 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c245 = "\r\n",
        peg$c246 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c247 = "\r",
        peg$c248 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c249 = "\u2028",
        peg$c250 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c251 = "\u2029",
        peg$c252 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c253 = { type: "other", description: "comment" },
        peg$c254 = function(start, end) {
            return new eiffel.ast.IntLiteral(text(), start, end);
          },
        peg$c255 = function(start, end) {
            return new eiffel.ast.RealLiteral(text(), start, end);
          },
        peg$c256 = /^[eE]/,
        peg$c257 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c258 = { type: "other", description: "string" },
        peg$c259 = "\"",
        peg$c260 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c261 = function(start, chars, end) {
            return new eiffel.ast.StringLiteral(chars.join(""), start, end);
          },
        peg$c262 = { type: "other", description: "character" },
        peg$c263 = "'",
        peg$c264 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c265 = "%",
        peg$c266 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c267 = function() { return text(); },
        peg$c268 = function(sequence) { return "%" + sequence; },
        peg$c269 = "\\",
        peg$c270 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c271 = function() { return ""; },
        peg$c272 = "0",
        peg$c273 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c274 = function() { return "\0"; },
        peg$c275 = "A",
        peg$c276 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c277 = "B",
        peg$c278 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c279 = "C",
        peg$c280 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c281 = "D",
        peg$c282 = { type: "literal", value: "D", description: "\"D\"" },
        peg$c283 = "F",
        peg$c284 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c285 = "H",
        peg$c286 = { type: "literal", value: "H", description: "\"H\"" },
        peg$c287 = "L",
        peg$c288 = { type: "literal", value: "L", description: "\"L\"" },
        peg$c289 = "N",
        peg$c290 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c291 = "Q",
        peg$c292 = { type: "literal", value: "Q", description: "\"Q\"" },
        peg$c293 = "R",
        peg$c294 = { type: "literal", value: "R", description: "\"R\"" },
        peg$c295 = "S",
        peg$c296 = { type: "literal", value: "S", description: "\"S\"" },
        peg$c297 = "T",
        peg$c298 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c299 = "U",
        peg$c300 = { type: "literal", value: "U", description: "\"U\"" },
        peg$c301 = "V",
        peg$c302 = { type: "literal", value: "V", description: "\"V\"" },
        peg$c303 = "x",
        peg$c304 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c305 = "u",
        peg$c306 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c307 = function(start, r, end) { return new eiffel.ast.VoidLiteral(start, end);},
        peg$c308 = function(start, r, end) {return new eiffel.ast.BooleanLiteral(r, start, end);},
        peg$c309 = function(start, first, rest, end) {
            return new eiffel.ast.Identifier(
              first + rest.join(""),
              start,
              end
            );
        },
        peg$c310 = function(r) { return r},
        peg$c311 = function(pos, r) { return r;},
        peg$c312 = function(r) { return r;},
        peg$c313 = "__",
        peg$c314 = { type: "literal", value: "__", description: "\"__\"" },
        peg$c315 = "?",
        peg$c316 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c317 = "!",
        peg$c318 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c319 = "$",
        peg$c320 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c321 = "(|",
        peg$c322 = { type: "literal", value: "(|", description: "\"(|\"" },
        peg$c323 = "|)",
        peg$c324 = { type: "literal", value: "|)", description: "\"|)\"" },
        peg$c325 = "~=",
        peg$c326 = { type: "literal", value: "~=", description: "\"~=\"" },
        peg$c327 = function(os) { return isFreeOperator(os.join(""));},
        peg$c328 = function(os) {
              return os.join("");
          },
        peg$c329 = function(s) { return isOperatorSymbol(s) },
        peg$c330 = function(s) {
            return s;
          },
        peg$c331 = "agent",
        peg$c332 = { type: "literal", value: "agent", description: "\"agent\"" },
        peg$c333 = function(start, s, end) { return new eiffel.ast.Token(s, start, end); },
        peg$c334 = "alias",
        peg$c335 = { type: "literal", value: "alias", description: "\"alias\"" },
        peg$c336 = "all",
        peg$c337 = { type: "literal", value: "all", description: "\"all\"" },
        peg$c338 = "assign",
        peg$c339 = { type: "literal", value: "assign", description: "\"assign\"" },
        peg$c340 = "as",
        peg$c341 = { type: "literal", value: "as", description: "\"as\"" },
        peg$c342 = "attached",
        peg$c343 = { type: "literal", value: "attached", description: "\"attached\"" },
        peg$c344 = "attribute",
        peg$c345 = { type: "literal", value: "attribute", description: "\"attribute\"" },
        peg$c346 = "check",
        peg$c347 = { type: "literal", value: "check", description: "\"check\"" },
        peg$c348 = "class",
        peg$c349 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c350 = "convert",
        peg$c351 = { type: "literal", value: "convert", description: "\"convert\"" },
        peg$c352 = "create",
        peg$c353 = { type: "literal", value: "create", description: "\"create\"" },
        peg$c354 = "Current",
        peg$c355 = { type: "literal", value: "Current", description: "\"Current\"" },
        peg$c356 = "debug",
        peg$c357 = { type: "literal", value: "debug", description: "\"debug\"" },
        peg$c358 = "deferred",
        peg$c359 = { type: "literal", value: "deferred", description: "\"deferred\"" },
        peg$c360 = "do",
        peg$c361 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c362 = "detachable",
        peg$c363 = { type: "literal", value: "detachable", description: "\"detachable\"" },
        peg$c364 = "elseif",
        peg$c365 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c366 = "end",
        peg$c367 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c368 = "ensure",
        peg$c369 = { type: "literal", value: "ensure", description: "\"ensure\"" },
        peg$c370 = "expanded",
        peg$c371 = { type: "literal", value: "expanded", description: "\"expanded\"" },
        peg$c372 = "export",
        peg$c373 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c374 = "external",
        peg$c375 = { type: "literal", value: "external", description: "\"external\"" },
        peg$c376 = "False",
        peg$c377 = { type: "literal", value: "False", description: "\"False\"" },
        peg$c378 = "feature",
        peg$c379 = { type: "literal", value: "feature", description: "\"feature\"" },
        peg$c380 = "from",
        peg$c381 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c382 = "frozen",
        peg$c383 = { type: "literal", value: "frozen", description: "\"frozen\"" },
        peg$c384 = "if",
        peg$c385 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c386 = "inherit",
        peg$c387 = { type: "literal", value: "inherit", description: "\"inherit\"" },
        peg$c388 = "inspect",
        peg$c389 = { type: "literal", value: "inspect", description: "\"inspect\"" },
        peg$c390 = "invariant",
        peg$c391 = { type: "literal", value: "invariant", description: "\"invariant\"" },
        peg$c392 = "like",
        peg$c393 = { type: "literal", value: "like", description: "\"like\"" },
        peg$c394 = "local",
        peg$c395 = { type: "literal", value: "local", description: "\"local\"" },
        peg$c396 = "loop",
        peg$c397 = { type: "literal", value: "loop", description: "\"loop\"" },
        peg$c398 = "note",
        peg$c399 = { type: "literal", value: "note", description: "\"note\"" },
        peg$c400 = "obsolete",
        peg$c401 = { type: "literal", value: "obsolete", description: "\"obsolete\"" },
        peg$c402 = "once",
        peg$c403 = { type: "literal", value: "once", description: "\"once\"" },
        peg$c404 = "only",
        peg$c405 = { type: "literal", value: "only", description: "\"only\"" },
        peg$c406 = "Precursor",
        peg$c407 = { type: "literal", value: "Precursor", description: "\"Precursor\"" },
        peg$c408 = "redefine",
        peg$c409 = { type: "literal", value: "redefine", description: "\"redefine\"" },
        peg$c410 = "rename",
        peg$c411 = { type: "literal", value: "rename", description: "\"rename\"" },
        peg$c412 = "require",
        peg$c413 = { type: "literal", value: "require", description: "\"require\"" },
        peg$c414 = "rescue",
        peg$c415 = { type: "literal", value: "rescue", description: "\"rescue\"" },
        peg$c416 = "Result",
        peg$c417 = { type: "literal", value: "Result", description: "\"Result\"" },
        peg$c418 = "retry",
        peg$c419 = { type: "literal", value: "retry", description: "\"retry\"" },
        peg$c420 = "select",
        peg$c421 = { type: "literal", value: "select", description: "\"select\"" },
        peg$c422 = "separate",
        peg$c423 = { type: "literal", value: "separate", description: "\"separate\"" },
        peg$c424 = "True",
        peg$c425 = { type: "literal", value: "True", description: "\"True\"" },
        peg$c426 = "TUPLE",
        peg$c427 = { type: "literal", value: "TUPLE", description: "\"TUPLE\"" },
        peg$c428 = "undefine",
        peg$c429 = { type: "literal", value: "undefine", description: "\"undefine\"" },
        peg$c430 = "until",
        peg$c431 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c432 = "variant",
        peg$c433 = { type: "literal", value: "variant", description: "\"variant\"" },
        peg$c434 = "Void",
        peg$c435 = { type: "literal", value: "Void", description: "\"Void\"" },
        peg$c436 = "when",
        peg$c437 = { type: "literal", value: "when", description: "\"when\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseclass();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseclass();
      }

      return s0;
    }

    function peg$parseclass() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNote();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseMaybeDeferred();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseMaybeFrozen();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parseExpandedToken();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseW();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c3(s6);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseClassToken();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseClassName();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseGenericParams();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseinherit();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c2;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsecreate();
                        if (s10 === peg$FAILED) {
                          s10 = peg$c2;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseConvert();
                          if (s11 === peg$FAILED) {
                            s11 = peg$c2;
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parseFeatureList();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parseFeatureList();
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseInvariant();
                              if (s13 === peg$FAILED) {
                                s13 = peg$c2;
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseW();
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseNote();
                                  if (s15 === peg$FAILED) {
                                    s15 = peg$c2;
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parseEndToken();
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parsew();
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c4(s2, s3, s4, s5, s7, s8, s9, s10, s11, s12);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c1;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c1;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseMaybeFrozen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFrozenToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c5(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseMaybeDeferred() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDeferredToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c7(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseGenericParams() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseGenericParamList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c10;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c12(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseGenericParamList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseGenericParameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseGenericParameter();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseGenericParameter();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c15(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c16(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseGenericParameter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseGenericConstraint();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c17(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseGenericConstraint() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c18) {
          s2 = peg$c18;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConstrainingTypes();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseConstraintCreators();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c20(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConstrainingTypes() {
      var s0;

      s0 = peg$parseSingleConstraint();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMultipleConstraint();
      }

      return s0;
    }

    function peg$parseSingleConstraint() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRename();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c21(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConstraintCreators() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCreateToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseW();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEndToken();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseMultipleConstraint() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleConstraintList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c25;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c27(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSingleConstraintList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseSingleConstraint();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseSingleConstraint();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseSingleConstraint();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c16(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNote() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNoteToken();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNotePair();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNotePair();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c28(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNotePair() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c29;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNoteValues();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                      s9 = peg$c31;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                    if (s9 !== peg$FAILED) {
                      s8 = [s8, s9];
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c1;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$c1;
                  }
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c33(s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNoteValues() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNoteValue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c13;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseNoteValues();
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNoteValue();
      }

      return s0;
    }

    function peg$parseNoteValue() {
      var s0;

      s0 = peg$parseStringLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIntegerLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIdentifier();
        }
      }

      return s0;
    }

    function peg$parseClassName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c34(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecreate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCreateToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c13;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseIdentifier();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c35(s9);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c13;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseIdentifier();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c35(s9);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c1;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c36(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseinherit() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseParentGroup();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseParentGroup();
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseParentGroup() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInheritToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c23;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 === peg$FAILED) {
                  s7 = peg$c2;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c25;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c37(s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c38();
            }
            s3 = s4;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseParent();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseParent();
              }
            } else {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseParent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAdaptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c40(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAdaptions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAdaption();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseAdaption();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEndToken();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c41(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAdaption() {
      var s0;

      s0 = peg$parseInhUndefine();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInhRedefine();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInhRename();
          if (s0 === peg$FAILED) {
            s0 = peg$parseInhSelect();
            if (s0 === peg$FAILED) {
              s0 = peg$parseInhNewExports();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseInhUndefine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUndefineToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c42(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhRedefine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRedefineToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c43(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhRename() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRenameToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRenameList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c44(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRenameList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseRename();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c13;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseRename();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c35(s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseRename();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c35(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRename() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAsToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseW();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExtendedFeatureName();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c45(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhNewExports() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExportToken();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseExportChangeset();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseExportChangeset();
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExportChangeset() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c23;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c25;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsew();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseFeatureSet();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c47(s4, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeatureSet() {
      var s0;

      s0 = peg$parseIdentifierList();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAllToken();
      }

      return s0;
    }

    function peg$parseInhSelect() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSelectToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c48(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConvert() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConvertToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConvertList();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConvertList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseConvertListEntry();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c13;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseConvertListEntry();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c35(s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseConvertListEntry();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c35(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConvertListEntry() {
      var s0;

      s0 = peg$parseConversionProcedure();
      if (s0 === peg$FAILED) {
        s0 = peg$parseConversionQuery();
      }

      return s0;
    }

    function peg$parseConversionProcedure() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsew();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTypeList();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsew();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c25;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsew();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c51;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c52); }
                          }
                          if (s11 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConversionQuery() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 123) {
                s5 = peg$c23;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTypeList();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsew();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s8 = peg$c25;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s8 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeatureList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFeatureToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAccessSpecifier();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c53(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseFeature();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseFeature();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c54(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeature() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConstant();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c31;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c55(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunction();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c31;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c5(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseW();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseProcedure();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parsew();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 59) {
                  s5 = peg$c31;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c2;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c56(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseW();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseAttribute();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parsew();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s5 = peg$c31;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                  }
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$c2;
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c57(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNewFeatureList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseNewFeatureName();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseNewFeatureName();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c15(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseNewFeatureName();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c15(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNewFeatureName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFrozenToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsew();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c58(s2);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExtendedFeatureName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c59(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExtendedFeatureName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c60(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRoutineHeader();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c29;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseType();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseAssigner();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRoutineBody();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsepos();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c61(s1, s2, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAssigner() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAssignToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseProcedure() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRoutineHeader();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRoutineBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c62(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineHeader() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseNewFeatureList();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsew();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c49;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseVarList();
              if (s6 === peg$FAILED) {
                s6 = peg$c2;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c51;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                }
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s2;
                  s3 = peg$c63(s6);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c64(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineNameAliasList() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseRoutineNameAlias();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseRoutineNameAlias();
              if (s7 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c65(s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseRoutineNameAlias();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c65(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineNameAlias() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c66(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAlias() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepos();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAliasToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseStringLiteral();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepos();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c67(s2, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVarList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseVars();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s5 = peg$c31;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseVars();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c68(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c31;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseVars();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c68(s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c69(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVars() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseType();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c70(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttribute() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNewFeatureList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseType();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c71(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConstant() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseNewFeatureList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseType();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsew();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s7 = peg$c72;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c73); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsew();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseLiteral();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c74(s1, s5, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEndIsNext() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEndToken();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineBody() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEndIsNext();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseRoutineBodyElement();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseRoutineBodyElement();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEndToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c76(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineBodyElement() {
      var s0;

      s0 = peg$parsePreconditions();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLocals();
        if (s0 === peg$FAILED) {
          s0 = peg$parseObsolete();
          if (s0 === peg$FAILED) {
            s0 = peg$parseExternal();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDeferredBlock();
              if (s0 === peg$FAILED) {
                s0 = peg$parseOnceBlock();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseDoBlock();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsePostconditions();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseExternal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExternalToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c77(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDeferredBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDeferredToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c78(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDoBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDoToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c79(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOnceBlock() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOnceToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c80(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseObsolete() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepos();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseObsoleteToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseW();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseImpliesExpr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepos();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c81(s2, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePreconditions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRequireToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseElseToken();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsePrecondition();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsePrecondition();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c82(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePostconditions() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEnsureToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseThenToken();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsePostcondition();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsePostcondition();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c82(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInvariant() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInvariantToken();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseInvariantcondition();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseInvariantcondition();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c82(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAssertion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseLabelledCondition();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseLabelledCondition();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNote();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c83(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCheckInstruction() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseCheckToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAssertion();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEndToken();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c84(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePrecondition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLabelledCondition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePostcondition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLabelledCondition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c86(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInvariantcondition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLabelledCondition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c87(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLabelledCondition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConditionLabel();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c88(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseConditionLabel();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c89(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseConditionLabel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c29;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c37(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLocals() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLocalToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVarLists();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c90(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVarLists() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseVarList();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c91(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVarList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c91(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInstructionSeq() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstruction();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseIndent();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseIndent();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseLineTerminatorSequence();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                peg$reportedPos = s5;
                s6 = peg$c93();
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseIndent();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseIndent();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseNoOp();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseIndent();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseIndent();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c94(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseInstruction();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c95(s5, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseIndent();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseIndent();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLineTerminatorSequence();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c93();
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseIndent();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseIndent();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseNoOp();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseIndent();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseIndent();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c94(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseInstruction();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c95(s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c96(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsepos() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = [];
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c97();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInstruction() {
      var s0;

      s0 = peg$parseNoOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCreateInstr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAssignmentInstr();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLoopInstr();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIfInstr();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIfInstr();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseImpliesExpr();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCheckInstruction();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNoOp() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c31;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c98();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0;

      s0 = peg$parseImpliesExpr();

      return s0;
    }

    function peg$parseImpliesExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOrExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c99) {
              s6 = peg$c99;
              peg$currPos += 7;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c100); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseOrExpr();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsepos();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c101(s6, s9, s10);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c99) {
                s6 = peg$c99;
                peg$currPos += 7;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseOrExpr();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsepos();
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c101(s6, s9, s10);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOrExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAndExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c103) {
              s7 = peg$c103;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c104); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c105) {
                  s9 = peg$c105;
                  peg$currPos += 4;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c106); }
                }
                if (s9 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c107();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c108) {
                s6 = peg$c108;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c109); }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c110) {
                  s6 = peg$c110;
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c111); }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseAndExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c103) {
                s7 = peg$c103;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c104); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c105) {
                    s9 = peg$c105;
                    peg$currPos += 4;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c106); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c107();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c108) {
                  s6 = peg$c108;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c110) {
                    s6 = peg$c110;
                    peg$currPos += 3;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseAndExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c112(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAndExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCompExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c113) {
              s7 = peg$c113;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c114); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c115) {
                  s9 = peg$c115;
                  peg$currPos += 4;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c116); }
                }
                if (s9 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c117();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c118) {
                s6 = peg$c118;
                peg$currPos += 3;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c119); }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCompExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c113) {
                s7 = peg$c113;
                peg$currPos += 4;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c114); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c115) {
                    s9 = peg$c115;
                    peg$currPos += 4;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c117();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c118) {
                  s6 = peg$c118;
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c119); }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCompExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c112(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCompExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDotDotExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCompOperator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseDotDotExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c112(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCompOperator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDotDotExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDotDotExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBinPlusMinusExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c120) {
              s6 = peg$c120;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c121); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseBinPlusMinusExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c120) {
                s6 = peg$c120;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c121); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseBinPlusMinusExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c112(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCompOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c72;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c122) {
          s0 = peg$c122;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s0 = peg$c124;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c125); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c126) {
              s0 = peg$c126;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c128) {
                s0 = peg$c128;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c129); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c130) {
                  s0 = peg$c130;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c131); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s0 = peg$c132;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c133); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s0 = peg$c134;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c135); }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBinPlusMinusExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBinMultExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s6 = peg$c136;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c137); }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 45) {
                s7 = peg$c138;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c139); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 45) {
                  s9 = peg$c138;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c139); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c75;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c140();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseBinMultExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c112(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s6 = peg$c136;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c137); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                  s7 = peg$c138;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c139); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s9 = peg$c138;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c139); }
                  }
                  peg$silentFails--;
                  if (s9 === peg$FAILED) {
                    s8 = peg$c75;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c140();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseBinMultExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseBinMultExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExponentExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c141) {
              s6 = peg$c141;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c142); }
            }
            if (s6 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c143;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c144); }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c145) {
                  s6 = peg$c145;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c146); }
                }
                if (s6 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s6 = peg$c147;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c148); }
                  }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseExponentExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c112(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c141) {
                s6 = peg$c141;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
              }
              if (s6 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s6 = peg$c143;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c144); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c145) {
                    s6 = peg$c145;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c146); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s6 = peg$c147;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c148); }
                    }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseExponentExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExponentExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFreeBinaryExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s4 = peg$c149;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c150); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExponentExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepos();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c151(s1, s2, s4, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseFreeBinaryExpr();
      }

      return s0;
    }

    function peg$parseFreeBinaryExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFreeOperator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseUnaryExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c112(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseFreeOperator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseUnaryExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c112(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c102(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseUnaryExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c138;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c138;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c139); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c75;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c140();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c136;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c137); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c152();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c153) {
              s3 = peg$c153;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c154); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c75;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c155) {
                s3 = peg$c155;
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c156); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                  s4 = peg$c75;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parseFreeOperator();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseUnaryExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c157(s1, s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseFactorExpr();
      }

      return s0;
    }

    function peg$parseCurrent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCurrentToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepos();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c158(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFirstExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c49;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c159(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseCurrent();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTypeExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTupleExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsepos();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseResultToken();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsepos();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c160(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseIdentifierAccess();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseArgs();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c161(s1, s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parseIdentifierAccess();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseStringLiteral();
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseTupleExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c10;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepos();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c162(s1, s4, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseTypeExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseType();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c163(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFactorExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFirstExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIndex();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCall();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIndex();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCall();
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c164(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsePrecursor();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCreateExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAttachedExpression();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseCreateExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseCreateToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIllegalAfterKeyword();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c75;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExplicitCreationType();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseCreationCall();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c165(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePrecursor() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePrecursorToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseParent_qualification();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseArgs();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c166(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseParent_qualification() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c23;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c25;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c26); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c167(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttachedExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttachedToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c23;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseType();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c25;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c168(s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseImpliesExpr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseW();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseAsToken();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseW();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseIdentifier();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsepos();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c169(s1, s3, s5, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIndex() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c10;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c170(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c171;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c172); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseArgs();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c173(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifierAccess() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c174(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIllegalAfterKeyword() {
      var s0;

      s0 = peg$parseLetter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c175;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
        }
      }

      return s0;
    }

    function peg$parseType() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDetachableToken();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseW();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c177();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c178();
          }
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s6 = peg$c8;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseTypeList();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsew();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s10 = peg$c10;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c11); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c179(s8);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c180(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLikeToken();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseW();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseCurrent();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsepos();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c181(s1, s2, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsepos();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseLikeToken();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseW();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseIdentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsepos();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c182(s1, s2, s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parseTypeList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseType();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c183(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseType();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c183(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c184(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopInstr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseLoopFrom();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLoopUntil();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseLoopInstructions();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLoopVariant();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseW();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseEndToken();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c185(s1, s2, s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopFrom() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseFromToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstructionSeq();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c186(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopUntil() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUntilToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseImpliesExpr();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c187(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopInstructions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLoopToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c188(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopVariant() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariantToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseConditionLabel();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseImpliesExpr();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c91(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIfInstr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseIfToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseW();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseThenToken();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseInstructionSeq();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseElseIf();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseElse();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseW();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseEndToken();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c189(s3, s6, s7, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElse() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseElseToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c190(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseIf() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseElseifToken();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseW();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseImpliesExpr();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseW();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseThenToken();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseInstructionSeq();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c191(s6, s9);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseElseifToken();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseW();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseImpliesExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseW();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseThenToken();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseInstructionSeq();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c191(s6, s9);
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c192(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAssignmentInstr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseImpliesExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c193) {
            s3 = peg$c193;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c194); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseImpliesExpr();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c195(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreateInstr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCreateToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIllegalAfterKeyword();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c75;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExplicitCreationType();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIdentifier();
              if (s5 === peg$FAILED) {
                s5 = peg$parseResultToken();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCreationCall();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c196(s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreationCall() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c171;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgs();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c197(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseArgs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c49;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExpressionList();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c198(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExpressionList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseImpliesExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseImpliesExpr();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c65(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseImpliesExpr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c65(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c199(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExplicitCreationType() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c25;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c200(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAccessSpecifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c25;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c201(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifierList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c13;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIdentifier();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c35(s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIdentifier();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c35(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseid() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c203.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c205.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c205.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }

      return s0;
    }

    function peg$parseIndent() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c207;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s2 = peg$c209;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c210); }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c207;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c208); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 9) {
              s2 = peg$c209;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c210); }
            }
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c211) {
          s3 = peg$c211;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c212); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$parseLineTerminatorSequence();
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = peg$c75;
          } else {
            peg$currPos = s6;
            s6 = peg$c1;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c213); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = peg$currPos;
            peg$silentFails++;
            s7 = peg$parseLineTerminatorSequence();
            peg$silentFails--;
            if (s7 === peg$FAILED) {
              s6 = peg$c75;
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c213); }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseW() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = [];
      if (peg$c215.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c211) {
          s2 = peg$c211;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c212); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$parseLineTerminatorSequence();
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = peg$c75;
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c213); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$parseLineTerminatorSequence();
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = peg$c75;
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            if (s5 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c213); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c215.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c211) {
              s2 = peg$c211;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c212); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parseLineTerminatorSequence();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c75;
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c213); }
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parseLineTerminatorSequence();
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = peg$c75;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c213); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              }
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c1;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          }
        }
      } else {
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }

      return s0;
    }

    function peg$parsew() {
      var s0;

      s0 = peg$parseW();
      if (s0 === peg$FAILED) {
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c217(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0;

      s0 = peg$parseLetter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c175;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
        }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDecimalDigit();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c175;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s3 = peg$c175;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c176); }
              }
            }
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDecimalDigit();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$parseDecimalDigit();
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseDecimalDigit();
          }
        } else {
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseBinaryIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c218) {
        s1 = peg$c218;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c219); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c220) {
          s1 = peg$c220;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c221); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBinaryDigit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseBinaryDigit();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c175;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c176); }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseBinaryDigit();
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s4 = peg$c175;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
                }
              }
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseBinaryDigit();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c218) {
          s1 = peg$c218;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c219); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c220) {
            s1 = peg$c220;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c221); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseBinaryDigit();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseBinaryDigit();
            }
          } else {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseBinaryDigit() {
      var s0;

      if (peg$c222.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }

      return s0;
    }

    function peg$parseOctalIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c224) {
        s1 = peg$c224;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c226) {
          s1 = peg$c226;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c227); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOctalDigit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseOctalDigit();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c175;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c176); }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseOctalDigit();
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s4 = peg$c175;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
                }
              }
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseOctalDigit();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c224) {
          s1 = peg$c224;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c225); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c226) {
            s1 = peg$c226;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseOctalDigit();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseOctalDigit();
            }
          } else {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseOctalDigit() {
      var s0;

      if (peg$c228.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }

      return s0;
    }

    function peg$parseHexIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c230) {
        s1 = peg$c230;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c231); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c232) {
          s1 = peg$c232;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c233); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHexDigit();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseHexDigit();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c175;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c176); }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseHexDigit();
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s4 = peg$c175;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
                }
              }
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHexDigit();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c230) {
          s1 = peg$c230;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c231); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c232) {
            s1 = peg$c232;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c233); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseHexDigit();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseHexDigit();
            }
          } else {
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c234.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c236.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c238.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c240.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c241); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c243;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c244); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c245) {
          s0 = peg$c245;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c246); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c247;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c248); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c249;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c250); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c251;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c252); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c242); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseSingleLineComment();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c211) {
        s1 = peg$c211;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c75;
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c75;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseBaseIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c138;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsew();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalIntegerLiteral();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c138;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c2;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBinaryIntegerLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = peg$c75;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c138;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c139); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsew();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$c2;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseHexIntegerLiteral();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              s4 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s4 === peg$FAILED) {
                s3 = peg$c75;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s2 = peg$c138;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c139); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsew();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c1;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c1;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseOctalIntegerLiteral();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = peg$c75;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
                if (s3 !== peg$FAILED) {
                  s1 = [s1, s2, s3];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseIntegerLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBaseIntegerLiteral();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c254(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseReal_Constant() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSign();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseReal();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c255(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseReal() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseDecimalIntegerLiteral();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c171;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c172); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDecimalIntegerLiteral();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExponent();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c75;
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c171;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c172); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseDecimalIntegerLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseExponent();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c75;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseExponent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c256.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSign();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDecimalIntegerLiteral();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSign() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c138;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c259;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDoubleStringCharacter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDoubleStringCharacter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c259;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c260); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c261(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c258); }
      }

      return s0;
    }

    function peg$parseCharLiteral() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c263;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c264); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSingleStringCharacter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseSingleStringCharacter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c263;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c264); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c261(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c262); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c259;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c265;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c267();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c265;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSourceCharacter();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c268(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c263;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c265;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c267();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c265;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c266); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSourceCharacter();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c268(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseLineContinuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c269;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c270); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c271();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c272;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c75;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c263;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c264); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s0 = peg$c275;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c276); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 66) {
            s0 = peg$c277;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c278); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 67) {
              s0 = peg$c279;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c280); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 68) {
                s0 = peg$c281;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c282); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 70) {
                  s0 = peg$c283;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c284); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 72) {
                    s0 = peg$c285;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c286); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 76) {
                      s0 = peg$c287;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c288); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 78) {
                        s0 = peg$c289;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c290); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 81) {
                          s0 = peg$c291;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c292); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 82) {
                            s0 = peg$c293;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c294); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 83) {
                              s0 = peg$c295;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c296); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 84) {
                                s0 = peg$c297;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c298); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 85) {
                                  s0 = peg$c299;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c300); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 86) {
                                    s0 = peg$c301;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c302); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 37) {
                                      s0 = peg$c265;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c266); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s0 = peg$c263;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c264); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s0 = peg$c259;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 40) {
                                            s0 = peg$c49;
                                            peg$currPos++;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c50); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s0 = peg$c51;
                                              peg$currPos++;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 60) {
                                                s0 = peg$c132;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                  s0 = peg$c134;
                                                  peg$currPos++;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c267();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c303;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c304); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c305;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c306); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVoidToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepos();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c75;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c307(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBooleanLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepos();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c75;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c308(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseReal_Constant();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseIntegerLiteral();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              s3 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c75;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c15(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseStringLiteral();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = peg$c75;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c15(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseCharLiteral();
                if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  peg$silentFails++;
                  s3 = peg$parseIllegalAfterKeyword();
                  peg$silentFails--;
                  if (s3 === peg$FAILED) {
                    s2 = peg$c75;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c15(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLetter() {
      var s0;

      if (peg$c203.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLetter();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseIdentifierPart();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseIdentifierPart();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c309(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIllegalAfterKeyword();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c75;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c310(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseVoidToken();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = peg$c75;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c311(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBooleanLiteral();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c75;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c312(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTrueToken();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c267();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFalseToken();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c267();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseSpecialSymbol() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c313) {
        s0 = peg$c313;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s0 = peg$c29;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c30); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s0 = peg$c31;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s0 = peg$c13;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 63) {
                s0 = peg$c315;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c316); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 33) {
                  s0 = peg$c317;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c318); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 39) {
                    s0 = peg$c263;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c264); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s0 = peg$c259;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c260); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 36) {
                        s0 = peg$c319;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c320); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                          s0 = peg$c171;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c172); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c18) {
                            s0 = peg$c18;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c19); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c193) {
                              s0 = peg$c193;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c194); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 61) {
                                s0 = peg$c72;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c73); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c122) {
                                  s0 = peg$c122;
                                  peg$currPos += 2;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 126) {
                                    s0 = peg$c124;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c126) {
                                      s0 = peg$c126;
                                      peg$currPos += 2;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 40) {
                                        s0 = peg$c49;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                          s0 = peg$c51;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 2) === peg$c321) {
                                            s0 = peg$c321;
                                            peg$currPos += 2;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c322); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c323) {
                                              s0 = peg$c323;
                                              peg$currPos += 2;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c324); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 91) {
                                                s0 = peg$c8;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 93) {
                                                  s0 = peg$c10;
                                                  peg$currPos++;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 123) {
                                                    s0 = peg$c23;
                                                    peg$currPos++;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                      s0 = peg$c25;
                                                      peg$currPos++;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePredefinedOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c72;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c122) {
          s0 = peg$c122;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s0 = peg$c124;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c125); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c325) {
              s0 = peg$c325;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c326); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseStandardOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c136;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c138;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s0 = peg$c147;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c148); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s0 = peg$c143;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c144); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 94) {
                s0 = peg$c149;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c150); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s0 = peg$c132;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c133); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s0 = peg$c134;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c135); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c128) {
                      s0 = peg$c128;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c129); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c130) {
                        s0 = peg$c130;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c131); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c141) {
                          s0 = peg$c141;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c142); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c145) {
                            s0 = peg$c145;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c146); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c120) {
                              s0 = peg$c120;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c121); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFreeOperator() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseOperatorSymbol();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseOperatorSymbol();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c327(s1);
        if (s2) {
          s2 = peg$c75;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c328(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOperatorSymbol() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = peg$currPos;
        s2 = peg$c329(s1);
        if (s2) {
          s2 = peg$c75;
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c330(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseKeyword() {
      var s0;

      s0 = peg$parseAgentToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAliasToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAllToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAndToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAssignToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAsToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAttachedToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseAttributeToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseCheckToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseClassToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseConvertToken();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCreateToken();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseCurrentToken();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseDebugToken();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDeferredToken();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDoToken();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseDetachableToken();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseElseifToken();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseElseToken();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseEndToken();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseEnsureToken();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseExpandedToken();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseExportToken();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseExternalToken();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseFalseToken();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseFeatureToken();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseFromToken();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseFrozenToken();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseIfToken();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseImpliesToken();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseInheritToken();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseInspectToken();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseInvariantToken();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseLikeToken();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseLocalToken();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseLoopToken();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseNoteToken();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseNotToken();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseObsoleteToken();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseOldToken();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseOnceToken();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseOnlyToken();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parseOrToken();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parsePrecursorToken();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseRedefineToken();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseRenameToken();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseRequireToken();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseRescueToken();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseResultToken();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseRetryToken();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseSelectToken();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseSeparateToken();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseThenToken();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseTrueToken();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseUndefineToken();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseUntilToken();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseVariantToken();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseVoidToken();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseWhenToken();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseXorToken();
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAgentToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c331) {
          s2 = peg$c331;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c332); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAliasToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c334) {
          s2 = peg$c334;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c335); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAllToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c336) {
          s2 = peg$c336;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAndToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c118) {
          s2 = peg$c118;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c119); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAssignToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c338) {
          s2 = peg$c338;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c339); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAsToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c340) {
          s2 = peg$c340;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c341); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttachedToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c342) {
          s2 = peg$c342;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttributeToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c344) {
          s2 = peg$c344;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c345); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCheckToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c346) {
          s2 = peg$c346;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c347); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseClassToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c348) {
          s2 = peg$c348;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c349); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConvertToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c350) {
          s2 = peg$c350;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c351); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreateToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c352) {
          s2 = peg$c352;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c353); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCurrentToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c354) {
          s2 = peg$c354;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c355); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDebugToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c356) {
          s2 = peg$c356;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c357); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDeferredToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c358) {
          s2 = peg$c358;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c359); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDoToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c360) {
          s2 = peg$c360;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c361); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDetachableToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c362) {
          s2 = peg$c362;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c363); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c105) {
          s2 = peg$c105;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseifToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c364) {
          s2 = peg$c364;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c365); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEndToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c366) {
          s2 = peg$c366;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c367); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEnsureToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c368) {
          s2 = peg$c368;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c369); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExpandedToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c370) {
          s2 = peg$c370;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c371); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExportToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c372) {
          s2 = peg$c372;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c373); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExternalToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c374) {
          s2 = peg$c374;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c375); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFalseToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c376) {
          s2 = peg$c376;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c377); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeatureToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c378) {
          s2 = peg$c378;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c379); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFromToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c380) {
          s2 = peg$c380;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c381); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFrozenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c382) {
          s2 = peg$c382;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c383); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIfToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c384) {
          s2 = peg$c384;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c385); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseImpliesToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c99) {
          s2 = peg$c99;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c100); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInheritToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c386) {
          s2 = peg$c386;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c387); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInspectToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c388) {
          s2 = peg$c388;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c389); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInvariantToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c390) {
          s2 = peg$c390;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c391); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLikeToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c392) {
          s2 = peg$c392;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c393); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLocalToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c394) {
          s2 = peg$c394;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c395); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c396) {
          s2 = peg$c396;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c397); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNotToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c153) {
          s2 = peg$c153;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c154); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNoteToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c398) {
          s2 = peg$c398;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c399); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseObsoleteToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c400) {
          s2 = peg$c400;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c401); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOldToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c155) {
          s2 = peg$c155;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOnceToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c402) {
          s2 = peg$c402;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c403); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOnlyToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c404) {
          s2 = peg$c404;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c405); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOrToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c108) {
          s2 = peg$c108;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePrecursorToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c406) {
          s2 = peg$c406;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c407); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRedefineToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c408) {
          s2 = peg$c408;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c409); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRenameToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c410) {
          s2 = peg$c410;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c411); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRequireToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c412) {
          s2 = peg$c412;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c413); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRescueToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c414) {
          s2 = peg$c414;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c415); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseResultToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c416) {
          s2 = peg$c416;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c417); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRetryToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c418) {
          s2 = peg$c418;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c419); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSelectToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c420) {
          s2 = peg$c420;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c421); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSeparateToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c422) {
          s2 = peg$c422;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c423); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseThenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c115) {
          s2 = peg$c115;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseTrueToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c424) {
          s2 = peg$c424;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c425); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseTUPLEToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c426) {
          s2 = peg$c426;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c427); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseUndefineToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c428) {
          s2 = peg$c428;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c429); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseUntilToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c430) {
          s2 = peg$c430;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c431); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVariantToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c432) {
          s2 = peg$c432;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c433); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVoidToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c434) {
          s2 = peg$c434;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c435); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseWhenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c436) {
          s2 = peg$c436;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c437); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseXorToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c110) {
          s2 = peg$c110;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c333(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }


      function allSubsequences(s) {
        var i;
        var j;
        var results = [];
        for(i = 0; i < s.length; i++) {
          for (j = i + 1; j <= s.length; j++) {
            results.push(s.substring(i, j));
          }
        }
        return results;
      }

      function isReserved(name) {
        // TODO reinsert TUPLE
        return /^(agent|alias|all|and|as|assign|attribute|check|class|convert|create|Current|debug|deferred|do|detachable|else|elseif|end|ensure|expanded|export|external|False|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|only|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|then|True|undefine|until|variant|Void|when|xor)$/.test(name);
      }

      function isOperatorSymbol(s) {
        // FIXME Standard says character must not be a |, but then it won't recognise |>>
        var specialSymbolChars = "_:;,?!'\"$.->:=/=~/~()()[]{}";
        var standardOperatorSymbols = "+-*/^<>=\\.";
        if(/^[^a-zA-Z0-9\s\:]$/.test(s)) {
          // SPEC 8.32.20
          // AT LEAST ONE OF THE FOLLOWING PROPERTIES
          // 1 It does not appear in any of the special symbols.
          if (specialSymbolChars.indexOf(s) === -1) {
            return true;
          }

          // 2 It appears in any of the standard (unary or binary) operators
          // BUT is neither a dot . nor an equal sign =.
          if (s !== "." && s !== "=" && standardOperatorSymbols.indexOf(s) !== -1) {
            return true;
          }

          // 3 It is a tilde ~, percent %, question mark ?, or exclamation mark !.

          if (s === "~" || s === "%" || s === "?" || s === "!") {
            return true;
          }
        }
        return false;
      }
      var specialSymbols = [
        "--",
        ":",
        ";",
        ",",
        "?",
        "!",
        "'",
        "\"",
        "$",
        ".",
        "->",
        ":=",
        "=",
        "/=",
        "~",
        "/~",
        "(",
        ")",
        "(|",
        "|)",
        "[",
        "]",
        "{",
        "}",
      ];

      var predefinedOperators = [
        "=",
        "/=",
        "~",
        "~=",
      ];

      var standardOperators = [
        "+",
        "-",
        "*",
        "/",
        "^",
        "<",
        ">",
        "<=",
        ">=",
        "//",
        "\\\\",
        "..",
      ];

      function isFreeOperator(os) {
        // SPEC 3.32.21 Page 157 (PDF page: 177)

        // A free operator is sequence of one or more characters satisfying the following properties:

        // 1 It is not a special symbol, standard operator or predefined operator.

        if (specialSymbols.indexOf(os) !== -1) {
          return false;
        }

        if (standardOperators.indexOf(os) !== -1) {
          return false;
        }

        if (predefinedOperators.indexOf(os) !== -1) {
          return false;
        }


        // 2 Every character in the sequence is an operator symbol.

          // Already satisfied because this is only called with a sequence of isOperatorSymbol satisfying characters

        // 3 Every subsequence that is not a standard operator or predefined operator is distinct from all special symbols
        var fulfilled_3 = true;
        var subsequences = allSubsequences(os);
        subsequences.forEach(function (subsequence) {
          var is_standard = standardOperators.indexOf(subsequence) !== -1;
          var is_predefined = predefinedOperators.indexOf(subsequence) !== -1;
          if (!is_standard && !is_predefined) {
            if (specialSymbols.indexOf(subsequence) !== -1) {
              // NOT distinct
              fulfilled_3 = false;
            }
          }
        });

        return fulfilled_3;
      }

      function Node(nodeType, data) {
        this.nodeType = nodeType;
        for (var prop in data) {
          if (data.hasOwnProperty(prop)) {
            this[prop] = data[prop];
          }
        }
      }

      function _n(nodeType, data) {
        return new Node(nodeType, data);
      }

      function extractList(list, f) {
        var result = new Array(list.length), i;
        for (i = 0; i < list.length; i++) {
          result[i] = f(list[i]);
        }

        return result;
      }

      function currentExpression(pos) {
        return new eiffel.ast.CurrentExpression(pos);
      }

      function buildBinaryTree(left, rest, start, end) {
        return rest.reduce(
          function(left, kind__right) {
            return  new eiffel.ast.BinaryOp(
              kind__right.kind,
              left,
              kind__right.right,
              start,
              kind__right.end
            );
          },
          left
        );
      }

      function buildList(first, rest, f) {
          return [first].concat(extractList(rest, f));
      }

      function merge(first, rest) {
        var result = [first];
        return Array.prototype.reduce.call(rest, function(xs, x) { return xs.concat(x);}, result);
      }

      function buildIndexArgTree(first, rest) {
        return rest.reduce(
          function(operand, operator) {
            operator.operand = operand;
            return operator;
          },
          first
        );
      }

      function gAttr(name) {
        return function (x) {
          return x[name];
        };
      }
      function gId() {
        return function (x) {
          return x;
        }
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();