eiffel.parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart, Expression: peg$parseExpression, Type: peg$parseType },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = peg$FAILED,
        peg$c2 = null,
        peg$c3 = function(note, name, inherit, create, featureLists) { return new eiffel.ast.Class(
                name,
                optionalList(note),
                optionalList(inherit),
                (create == null) ? [] : create,
                featureLists
              );
            },
        peg$c4 = function(p) {return p;},
        peg$c5 = ":",
        peg$c6 = { type: "literal", value: ":", description: "\":\"" },
        peg$c7 = function(i, v) {return {key: i, value: v.value};},
        peg$c8 = function(name) { return name},
        peg$c9 = ",",
        peg$c10 = { type: "literal", value: ",", description: "\",\"" },
        peg$c11 = function(id) { return id},
        peg$c12 = function(first, rest) {return buildList(first, rest, gId())},
        peg$c13 = "{",
        peg$c14 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c15 = "}",
        peg$c16 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c17 = function(i) {return i;},
        peg$c18 = function() { return null; },
        peg$c19 = function(c, ps) {
            return _n("inheritance", {
              conforming: c,
              parents: ps,
            });
          },
        peg$c20 = function(t, a) {
            return _n("parent", {
              type: t,
              undefine: (a === null) ? null : a.undefine,
              redefine: (a === null) ? null : a.redefine,
              rename: (a === null) ? null : a.rename,
              newexport: (a === null) ? null : a.newexport,
              select: (a === null) ? null : a.select,
            });
          },
        peg$c21 = function(undefine, redefine, rename, newexport, select) {
            return {
              undefine: undefine,
              redefine: redefine,
              rename: rename,
              newexport: newexport,
              select: select,
            };
          },
        peg$c22 = function(redefine, rename, newexport, select) {
            return {
              undefine: [],
              redefine: redefine,
              rename: rename,
              newexport: newexport,
              select: select,
            };
          },
        peg$c23 = function(rename, newexport, select) {
            return {
              undefine: [],
              redefine: [],
              rename: rename,
              newexport: newexport,
              select: select,
            };
          },
        peg$c24 = function(newexport, select) {
            return {
              undefine: [],
              redefine: [],
              rename: [],
              newexport: newexport,
              select: select,
            };
          },
        peg$c25 = function(select) {
            return {
              undefine: [],
              redefine: [],
              rename: [],
              newexport: [],
              select: select,
            };
          },
        peg$c26 = function(l) { return l; },
        peg$c27 = function(es) { return es; },
        peg$c28 = ";",
        peg$c29 = { type: "literal", value: ";", description: "\";\"" },
        peg$c30 = function(cs, fs) {
            return {
              access: cs,
              features: fs,
            };
          },
        peg$c31 = "unimplemented",
        peg$c32 = { type: "literal", value: "unimplemented", description: "\"unimplemented\"" },
        peg$c33 = function(acc) { return acc },
        peg$c34 = function(access, fs) { return new eiffel.ast.FeatureList(
                optionalList(access),
                fs
              );
            },
        peg$c35 = function(c) {return c},
        peg$c36 = function(f) {return f},
        peg$c37 = function(p) {return p},
        peg$c38 = function(a) {return a},
        peg$c39 = function(start, h, rt, b, end) {
            return new eiffel.ast.Function(
              h.name,
              h.params,
              h.alias,
              rt,
              b.preconditions,
              b.locals,
              b.instructionKind,
              b.instructions,
              b.postconditions,
              h.frozen
            );
          },
        peg$c40 = function(start, h, b, end) {
            return new eiffel.ast.Procedure(
              h.name,
              h.params,
              h.alias,
              null,
              b.preconditions,
              b.locals,
              b.instructionKind,
              b.instructions,
              b.postconditions,
              h.frozen
            );
          },
        peg$c41 = function() {return true},
        peg$c42 = function() { return false},
        peg$c43 = "(",
        peg$c44 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c45 = ")",
        peg$c46 = { type: "literal", value: ")", description: "\")\"" },
        peg$c47 = function(ps) {return ps;},
        peg$c48 = function(frozen, n, alias, p) {
            return {
              name: n,
              alias: alias,
              frozen: frozen,
              params: optionalList(p)
            }
          },
        peg$c49 = function(start, s, end) {
            return new eiffel.ast.Alias(s, start, end);
          },
        peg$c50 = function(vi) { return vi; },
        peg$c51 = function(v, vs) { return Array.prototype.concat.apply(v, vs)},
        peg$c52 = function(ids, t) {
            var varDeclEntries = ids.map(function(id) {
              return new eiffel.ast.VarDeclEntry(id);
            });
            return new eiffel.ast.VarDeclList(varDeclEntries, t);
          },
        peg$c53 = function(n, t) {
            return new eiffel.ast.Attribute(
              n,
              t
            );
          },
        peg$c54 = "=",
        peg$c55 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c56 = function(a, l) {
            return new eiffel.ast.ConstantAttribute(
              a,
              a.attributeType,
              l
            );
          },
        peg$c57 = function(pre, l, instructionKind, instructions, post) {
            return {
              preconditions: optionalList(pre),
              locals: optionalList(l),
              instructionKind: instructionKind,
              instructions: optionalList(instructions),
              post: optionalList(post),
            }
          },
        peg$c58 = function(start, e, end) {return new eiffel.ast.External(e, start, end);},
        peg$c59 = function(start, e, end) {return new eiffel.ast.Obsolete(e, start, end);},
        peg$c60 = function(c) {return c;},
        peg$c61 = function(l) {
            return new eiffel.ast.Precondition(l.name, l.expression);
          },
        peg$c62 = function(l) {
            return new eiffel.ast.Postcondition(l.name, l.expression);
          },
        peg$c63 = function(l, e) {
            return {
              name: l,
              expression: e,
            };
          },
        peg$c64 = function(vs) { return vs; },
        peg$c65 = function(v) {return v;},
        peg$c66 = function(vs) {return vs;},
        peg$c67 = function() {return null;},
        peg$c68 = function(n) {return n;},
        peg$c69 = function(ns, r) {if(ns) { return [ns, r]} else { return [ns]}},
        peg$c70 = function(i, rest) {return merge([i], rest)},
        peg$c71 = function() {
            return new eiffel.ast.Pos(
              offset(),
              line(),
              column()
            );
          },
        peg$c72 = function() {
            return _n("noop", {});
          },
        peg$c73 = "implies",
        peg$c74 = { type: "literal", value: "implies", description: "\"implies\"" },
        peg$c75 = void 0,
        peg$c76 = function(o, r, e) { return {kind: o, right:r, end:e}},
        peg$c77 = function(start, l, rest, end) { return buildBinaryTree(l, rest, start, end)},
        peg$c78 = "or ",
        peg$c79 = { type: "literal", value: "or ", description: "\"or \"" },
        peg$c80 = "else",
        peg$c81 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c82 = function() { return "or else"},
        peg$c83 = "or",
        peg$c84 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c85 = function(o, r) { return {kind: o, right:r}},
        peg$c86 = "and ",
        peg$c87 = { type: "literal", value: "and ", description: "\"and \"" },
        peg$c88 = "then",
        peg$c89 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c90 = function() { return "and then" },
        peg$c91 = "and",
        peg$c92 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c93 = "..",
        peg$c94 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c95 = "/=",
        peg$c96 = { type: "literal", value: "/=", description: "\"/=\"" },
        peg$c97 = "~",
        peg$c98 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c99 = "/~",
        peg$c100 = { type: "literal", value: "/~", description: "\"/~\"" },
        peg$c101 = "<=",
        peg$c102 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c103 = ">=",
        peg$c104 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c105 = "<",
        peg$c106 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c107 = ">",
        peg$c108 = { type: "literal", value: ">", description: "\">\"" },
        peg$c109 = "+",
        peg$c110 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c111 = "-",
        peg$c112 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c113 = function() {return "-"},
        peg$c114 = "//",
        peg$c115 = { type: "literal", value: "//", description: "\"//\"" },
        peg$c116 = "/",
        peg$c117 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c118 = "\\\\",
        peg$c119 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c120 = "*",
        peg$c121 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c122 = "^",
        peg$c123 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c124 = function(start, l, k, r, end) {
              return new eiffel.ast.BinaryOp(
                k,
                l,
                r,
                start,
                end
              );
            },
        peg$c125 = function() {return "+"},
        peg$c126 = "not",
        peg$c127 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c128 = function(start, o, u, end) {
              return new eiffel.ast.UnaryOp(
                o,
                u,
                end,
                end
              );
            },
        peg$c129 = function(start, end) {
              return new eiffel.ast.CurrentExpression(start, end);
            },
        peg$c130 = function(e) { return e},
        peg$c131 = function(start, end) {
              return new eiffel.ast.ResultExpression(start, end);
            },
        peg$c132 = function(f, ops) { return buildIndexArgTree(f, ops)},
        peg$c133 = "[",
        peg$c134 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c135 = "]",
        peg$c136 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c137 = function(a) {
            return new eiffel.ast.IndexExpression(
              undefined,
              optionalList(a)
            );
          },
        peg$c138 = ".",
        peg$c139 = { type: "literal", value: ".", description: "\".\"" },
        peg$c140 = function(i, a) {
            return new eiffel.ast.CallExpression(
              undefined,
              i,
              optionalList(a)
            );
          },
        peg$c141 = function(i) {
            return new eiffel.ast.IdentifierAccess(i);
          },
        peg$c142 = function() {return false},
        peg$c143 = function(g) {return g},
        peg$c144 = function(start, detachable, n, ts, end) {
            return new eiffel.ast.Type(
              n,
              optionalList(ts),
              detachable,
              start,
              end
            );
          },
        peg$c145 = function(start, o, end) {
            return new eiffel.ast.Type();
          },
        peg$c146 = function(t) {return t},
        peg$c147 = function(f, rest) {return buildList(f, rest, gId())},
        peg$c148 = function(fromSeq, until, is) {
            return new eiffel.ast.FromLoop(
              fromSeq,
              until,
              is
            );
          },
        peg$c149 = function(c, is, ei, e) {
            return new eiffel.ast.IfElse(
              c,
              optionalList(is),
              optionalList(ei),
              optionalList(e)
            );
          },
        peg$c150 = function(is) { return is },
        peg$c151 = function(c, is) {return new eiffel.ast.ElseIf(c, optionalList(is));},
        peg$c152 = function(rest) {return rest},
        peg$c153 = ":=",
        peg$c154 = { type: "literal", value: ":=", description: "\":=\"" },
        peg$c155 = function(lhs, rhs) {
            return new eiffel.ast.Assignment(
              lhs,
              rhs
            );
          },
        peg$c156 = function(t, n, m) {
            return new eiffel.ast.CreateInstruction(
              n,
              (m ? m : "default_create"),
              m ? optionalList(m.args) : []
            );
          },
        peg$c157 = function(n, as) {
            return {
              name: n,
              args: optionalList(as)
            }
          },
        peg$c158 = function(r) {return optionalList(r)},
        peg$c159 = function(r) {return r},
        peg$c160 = function(first, rest) { return buildList(first, rest, gId())},
        peg$c161 = function(t) { return t },
        peg$c162 = function(ids) {return ids;},
        peg$c163 = { type: "other", description: "identifier" },
        peg$c164 = /^[a-zA-Z]/,
        peg$c165 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c166 = /^[a-zA-Z0-9_]/,
        peg$c167 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
        peg$c168 = " ",
        peg$c169 = { type: "literal", value: " ", description: "\" \"" },
        peg$c170 = "\t",
        peg$c171 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c172 = { type: "other", description: "whitespace" },
        peg$c173 = "\n",
        peg$c174 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c175 = "\r",
        peg$c176 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c177 = "--",
        peg$c178 = { type: "literal", value: "--", description: "\"--\"" },
        peg$c179 = { type: "any", description: "any character" },
        peg$c180 = function(name) {
            if (isReserved(name.name)) {
              expected("Identifier, Keyword " + name.name + " found");
            }
            return name;
          },
        peg$c181 = "_",
        peg$c182 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c183 = "0",
        peg$c184 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c185 = /^[0-9]/,
        peg$c186 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c187 = /^[1-9]/,
        peg$c188 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c189 = /^[\n\r\u2028\u2029]/,
        peg$c190 = { type: "class", value: "[\\n\\r\\u2028\\u2029]", description: "[\\n\\r\\u2028\\u2029]" },
        peg$c191 = { type: "other", description: "end of line" },
        peg$c192 = "\r\n",
        peg$c193 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c194 = "\u2028",
        peg$c195 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c196 = "\u2029",
        peg$c197 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c198 = { type: "other", description: "comment" },
        peg$c199 = function(start, end) {
            return new eiffel.ast.IntLiteral(parseFloat(text()), start, end);
          },
        peg$c200 = { type: "other", description: "string" },
        peg$c201 = "\"",
        peg$c202 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c203 = function(start, chars, end) {
          return new eiffel.ast.StringLiteral(chars.join(""), start, end);
          },
        peg$c204 = { type: "other", description: "character" },
        peg$c205 = "'",
        peg$c206 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c207 = function(start, char, end) {
            return new eiffel.ast.StringLiteral(char, start, end);
          },
        peg$c208 = "%",
        peg$c209 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c210 = function() { return text(); },
        peg$c211 = function(sequence) { return "%" + sequence; },
        peg$c212 = "\\",
        peg$c213 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c214 = function() { return ""; },
        peg$c215 = function() { return "\0"; },
        peg$c216 = "A",
        peg$c217 = { type: "literal", value: "A", description: "\"A\"" },
        peg$c218 = "B",
        peg$c219 = { type: "literal", value: "B", description: "\"B\"" },
        peg$c220 = "C",
        peg$c221 = { type: "literal", value: "C", description: "\"C\"" },
        peg$c222 = "D",
        peg$c223 = { type: "literal", value: "D", description: "\"D\"" },
        peg$c224 = "F",
        peg$c225 = { type: "literal", value: "F", description: "\"F\"" },
        peg$c226 = "H",
        peg$c227 = { type: "literal", value: "H", description: "\"H\"" },
        peg$c228 = "L",
        peg$c229 = { type: "literal", value: "L", description: "\"L\"" },
        peg$c230 = "N",
        peg$c231 = { type: "literal", value: "N", description: "\"N\"" },
        peg$c232 = "Q",
        peg$c233 = { type: "literal", value: "Q", description: "\"Q\"" },
        peg$c234 = "R",
        peg$c235 = { type: "literal", value: "R", description: "\"R\"" },
        peg$c236 = "S",
        peg$c237 = { type: "literal", value: "S", description: "\"S\"" },
        peg$c238 = "T",
        peg$c239 = { type: "literal", value: "T", description: "\"T\"" },
        peg$c240 = "U",
        peg$c241 = { type: "literal", value: "U", description: "\"U\"" },
        peg$c242 = "V",
        peg$c243 = { type: "literal", value: "V", description: "\"V\"" },
        peg$c244 = "x",
        peg$c245 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c246 = "u",
        peg$c247 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c248 = function(start, r, end) { return new eiffel.ast.VoidLiteral(start, end);},
        peg$c249 = function(start, r, end) {return new eiffel.ast.BooleanLiteral(r, start, end);},
        peg$c250 = function(r) {return r;},
        peg$c251 = /^[a-z]/,
        peg$c252 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c253 = /^[A-Z]/,
        peg$c254 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c255 = function(start, first, rest, end) {
            return new eiffel.ast.Identifier(
              first + rest.join(""),
              start,
              end
            );
        },
        peg$c256 = function(r) { return r},
        peg$c257 = function(pos, r) { return r;},
        peg$c258 = function(r) { return r;},
        peg$c259 = function() { return true; },
        peg$c260 = function() { return false; },
        peg$c261 = "agent",
        peg$c262 = { type: "literal", value: "agent", description: "\"agent\"" },
        peg$c263 = function(start, s, end) { return { text: s, start: start, end:end }; },
        peg$c264 = "alias",
        peg$c265 = { type: "literal", value: "alias", description: "\"alias\"" },
        peg$c266 = "all",
        peg$c267 = { type: "literal", value: "all", description: "\"all\"" },
        peg$c268 = "assign",
        peg$c269 = { type: "literal", value: "assign", description: "\"assign\"" },
        peg$c270 = "as",
        peg$c271 = { type: "literal", value: "as", description: "\"as\"" },
        peg$c272 = "attribute",
        peg$c273 = { type: "literal", value: "attribute", description: "\"attribute\"" },
        peg$c274 = "check",
        peg$c275 = { type: "literal", value: "check", description: "\"check\"" },
        peg$c276 = "class",
        peg$c277 = { type: "literal", value: "class", description: "\"class\"" },
        peg$c278 = "convert",
        peg$c279 = { type: "literal", value: "convert", description: "\"convert\"" },
        peg$c280 = "create",
        peg$c281 = { type: "literal", value: "create", description: "\"create\"" },
        peg$c282 = "Current",
        peg$c283 = { type: "literal", value: "Current", description: "\"Current\"" },
        peg$c284 = "debug",
        peg$c285 = { type: "literal", value: "debug", description: "\"debug\"" },
        peg$c286 = "deferred",
        peg$c287 = { type: "literal", value: "deferred", description: "\"deferred\"" },
        peg$c288 = "do",
        peg$c289 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c290 = "detachable",
        peg$c291 = { type: "literal", value: "detachable", description: "\"detachable\"" },
        peg$c292 = "elseif",
        peg$c293 = { type: "literal", value: "elseif", description: "\"elseif\"" },
        peg$c294 = "end",
        peg$c295 = { type: "literal", value: "end", description: "\"end\"" },
        peg$c296 = "ensure",
        peg$c297 = { type: "literal", value: "ensure", description: "\"ensure\"" },
        peg$c298 = "expanded",
        peg$c299 = { type: "literal", value: "expanded", description: "\"expanded\"" },
        peg$c300 = "export",
        peg$c301 = { type: "literal", value: "export", description: "\"export\"" },
        peg$c302 = "external",
        peg$c303 = { type: "literal", value: "external", description: "\"external\"" },
        peg$c304 = "False",
        peg$c305 = { type: "literal", value: "False", description: "\"False\"" },
        peg$c306 = "feature",
        peg$c307 = { type: "literal", value: "feature", description: "\"feature\"" },
        peg$c308 = "from",
        peg$c309 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c310 = "frozen",
        peg$c311 = { type: "literal", value: "frozen", description: "\"frozen\"" },
        peg$c312 = "if",
        peg$c313 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c314 = "inherit",
        peg$c315 = { type: "literal", value: "inherit", description: "\"inherit\"" },
        peg$c316 = "inspect",
        peg$c317 = { type: "literal", value: "inspect", description: "\"inspect\"" },
        peg$c318 = "invariant",
        peg$c319 = { type: "literal", value: "invariant", description: "\"invariant\"" },
        peg$c320 = "like",
        peg$c321 = { type: "literal", value: "like", description: "\"like\"" },
        peg$c322 = "local",
        peg$c323 = { type: "literal", value: "local", description: "\"local\"" },
        peg$c324 = "loop",
        peg$c325 = { type: "literal", value: "loop", description: "\"loop\"" },
        peg$c326 = "note",
        peg$c327 = { type: "literal", value: "note", description: "\"note\"" },
        peg$c328 = "obsolete",
        peg$c329 = { type: "literal", value: "obsolete", description: "\"obsolete\"" },
        peg$c330 = "old",
        peg$c331 = { type: "literal", value: "old", description: "\"old\"" },
        peg$c332 = "once",
        peg$c333 = { type: "literal", value: "once", description: "\"once\"" },
        peg$c334 = "only",
        peg$c335 = { type: "literal", value: "only", description: "\"only\"" },
        peg$c336 = "Precursor",
        peg$c337 = { type: "literal", value: "Precursor", description: "\"Precursor\"" },
        peg$c338 = "redefine",
        peg$c339 = { type: "literal", value: "redefine", description: "\"redefine\"" },
        peg$c340 = "rename",
        peg$c341 = { type: "literal", value: "rename", description: "\"rename\"" },
        peg$c342 = "require",
        peg$c343 = { type: "literal", value: "require", description: "\"require\"" },
        peg$c344 = "rescue",
        peg$c345 = { type: "literal", value: "rescue", description: "\"rescue\"" },
        peg$c346 = "Result",
        peg$c347 = { type: "literal", value: "Result", description: "\"Result\"" },
        peg$c348 = "retry",
        peg$c349 = { type: "literal", value: "retry", description: "\"retry\"" },
        peg$c350 = "select",
        peg$c351 = { type: "literal", value: "select", description: "\"select\"" },
        peg$c352 = "separate",
        peg$c353 = { type: "literal", value: "separate", description: "\"separate\"" },
        peg$c354 = "True",
        peg$c355 = { type: "literal", value: "True", description: "\"True\"" },
        peg$c356 = "TUPLE",
        peg$c357 = { type: "literal", value: "TUPLE", description: "\"TUPLE\"" },
        peg$c358 = "undefine",
        peg$c359 = { type: "literal", value: "undefine", description: "\"undefine\"" },
        peg$c360 = "until",
        peg$c361 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c362 = "variant",
        peg$c363 = { type: "literal", value: "variant", description: "\"variant\"" },
        peg$c364 = "Void",
        peg$c365 = { type: "literal", value: "Void", description: "\"Void\"" },
        peg$c366 = "when",
        peg$c367 = { type: "literal", value: "when", description: "\"when\"" },
        peg$c368 = "xor",
        peg$c369 = { type: "literal", value: "xor", description: "\"xor\"" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseclass();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseclass();
      }

      return s0;
    }

    function peg$parseclass() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNote();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseClassToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseClassName();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinherit();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecreate();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseFeatureList();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseFeatureList();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseW();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseEndToken();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsew();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c3(s2, s4, s5, s6, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNote() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNoteToken();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseNotePair();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseNotePair();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNotePair() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c5;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseNoteValue();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c7(s2, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNoteValue() {
      var s0;

      s0 = peg$parseStringLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIntegerLiteral();
      }

      return s0;
    }

    function peg$parseClassName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecreate() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCreateToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s7 = peg$c9;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseIdentifier();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c11(s9);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c9;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseIdentifier();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s6;
                      s7 = peg$c11(s9);
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c1;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c12(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseinherit() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseInheritanceClause();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseInheritanceClause();
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInheritanceClause() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInheritToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c13;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseIdentifier();
                if (s7 === peg$FAILED) {
                  s7 = peg$c2;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s9 = peg$c15;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c17(s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c18();
            }
            s3 = s4;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseParent();
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseParent();
              }
            } else {
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c19(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseParent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseType();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAdaptions();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c20(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAdaptions() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseInhUndefine();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInhRedefine();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInhRename();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInhNewExports();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseInhSelect();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseW();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseEndToken();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c21(s1, s2, s3, s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseInhRedefine();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseInhRename();
          if (s2 === peg$FAILED) {
            s2 = peg$c2;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseInhNewExports();
            if (s3 === peg$FAILED) {
              s3 = peg$c2;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseInhSelect();
              if (s4 === peg$FAILED) {
                s4 = peg$c2;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseW();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseEndToken();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c22(s1, s2, s3, s4);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseInhRename();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseInhNewExports();
            if (s2 === peg$FAILED) {
              s2 = peg$c2;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseInhSelect();
              if (s3 === peg$FAILED) {
                s3 = peg$c2;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parseW();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseEndToken();
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c23(s1, s2, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseInhNewExports();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseInhSelect();
              if (s2 === peg$FAILED) {
                s2 = peg$c2;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseW();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseEndToken();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c24(s1, s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseInhSelect();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseW();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseEndToken();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c25(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseInhUndefine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUndefineToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c26(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhRedefine() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRedefineToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c26(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhRename() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRenameToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c26(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInhNewExports() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExportToken();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseExportChangeset();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseExportChangeset();
            }
          } else {
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExportChangeset() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s2 = peg$c13;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifierList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s6 = peg$c15;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseFeatureSet();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsew();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c28;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c30(s4, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeatureSet() {
      var s0;

      s0 = peg$parseIdentifierList();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAllToken();
      }

      return s0;
    }

    function peg$parseInhSelect() {
      var s0;

      if (input.substr(peg$currPos, 13) === peg$c31) {
        s0 = peg$c31;
        peg$currPos += 13;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseFeatureList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFeatureToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseAccessSpecifier();
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c33(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseFeature();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseFeature();
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c34(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeature() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConstant();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c35(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseW();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunction();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c36(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseW();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseProcedure();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c37(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseW();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseAttribute();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c38(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRoutineHeader();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c5;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseType();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseW();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseRoutineBody();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsepos();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c39(s1, s2, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseProcedure() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRoutineHeader();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRoutineBody();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c40(s1, s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineHeader() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFrozenToken();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseW();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c41();
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c42();
        }
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAlias();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s6 = peg$c43;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseVarList();
                  if (s8 === peg$FAILED) {
                    s8 = peg$c2;
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c45;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c46); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c47(s8);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c48(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAlias() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepos();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAliasToken();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseStringLiteral();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsepos();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c49(s2, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVarList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseVars();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsew();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s5 = peg$c28;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseVars();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c50(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parsew();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 59) {
              s5 = peg$c28;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseVars();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c50(s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c51(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVars() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifierList();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseType();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c52(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttribute() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseType();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c53(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConstant() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseAttribute();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c54;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseLiteral();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c56(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRoutineBody() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsePreconditions();
      if (s1 === peg$FAILED) {
        s1 = peg$c2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLocals();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseObsoleteToken();
          if (s3 === peg$FAILED) {
            s3 = peg$parseExternalToken();
            if (s3 === peg$FAILED) {
              s3 = peg$parseDoToken();
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInstructionSeq();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseW();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsePostconditions();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsew();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseEndToken();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c57(s1, s2, s3, s4, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExternal() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExternalToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseImpliesExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseW();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c58(s1, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseObsolete() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseObsoleteToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseImpliesExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseW();
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c59(s1, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePreconditions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseRequireToken();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePrecondition();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePrecondition();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c60(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePostconditions() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEnsureToken();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsePostcondition();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsePostcondition();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c60(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePrecondition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLabelledCondition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsePostcondition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseLabelledCondition();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c62(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLabelledCondition() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseConditionLabel();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c63(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConditionLabel() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c17(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLocals() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLocalToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVarLists();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVarLists() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseVarList();
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c65(s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseVarList();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c65(s4);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInstructionSeq() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstruction();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseIndent();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseIndent();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseLineTerminatorSequence();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                peg$reportedPos = s5;
                s6 = peg$c67();
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c1;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseIndent();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseIndent();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseNoOp();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseIndent();
                while (s9 !== peg$FAILED) {
                  s8.push(s9);
                  s9 = peg$parseIndent();
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c68(s7);
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseInstruction();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c69(s5, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseIndent();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseIndent();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseLineTerminatorSequence();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c67();
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$c1;
            }
            if (s5 === peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseIndent();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseIndent();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseNoOp();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parseIndent();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseIndent();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s5;
                    s6 = peg$c68(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$c1;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseInstruction();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c69(s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c70(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parsepos() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = [];
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c71();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseInstruction() {
      var s0;

      s0 = peg$parseNoOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCreateInstr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAssignmentInstr();
          if (s0 === peg$FAILED) {
            s0 = peg$parseLoopInstr();
            if (s0 === peg$FAILED) {
              s0 = peg$parseIfInstr();
              if (s0 === peg$FAILED) {
                s0 = peg$parseIfInstr();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseImpliesExpr();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNoOp() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s2 = peg$c28;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c72();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0;

      s0 = peg$parseImpliesExpr();

      return s0;
    }

    function peg$parseImpliesExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseOrExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c73) {
              s6 = peg$c73;
              peg$currPos += 7;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseOrExpr();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parsepos();
                    if (s10 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c76(s6, s9, s10);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c73) {
                s6 = peg$c73;
                peg$currPos += 7;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c74); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseOrExpr();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsepos();
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c76(s6, s9, s10);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOrExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAndExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c78) {
              s7 = peg$c78;
              peg$currPos += 3;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c80) {
                  s9 = peg$c80;
                  peg$currPos += 4;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s9 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c82();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c83) {
                s6 = peg$c83;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseAndExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c78) {
                s7 = peg$c78;
                peg$currPos += 3;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c80) {
                    s9 = peg$c80;
                    peg$currPos += 4;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c82();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c83) {
                  s6 = peg$c83;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c84); }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseAndExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c85(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAndExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCompExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c86) {
              s7 = peg$c86;
              peg$currPos += 4;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c87); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsew();
              if (s8 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c88) {
                  s9 = peg$c88;
                  peg$currPos += 4;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c89); }
                }
                if (s9 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c90();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$c1;
            }
            if (s6 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c91) {
                s6 = peg$c91;
                peg$currPos += 3;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseCompExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c86) {
                s7 = peg$c86;
                peg$currPos += 4;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c87); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c88) {
                    s9 = peg$c88;
                    peg$currPos += 4;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c89); }
                  }
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c90();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c91) {
                  s6 = peg$c91;
                  peg$currPos += 3;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c92); }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseCompExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c85(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCompExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDotDotExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCompOperator();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseDotDotExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c85(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCompOperator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseDotDotExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDotDotExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBinPlusMinusExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c93) {
              s6 = peg$c93;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$currPos;
              peg$silentFails++;
              s8 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s8 === peg$FAILED) {
                s7 = peg$c75;
              } else {
                peg$currPos = s7;
                s7 = peg$c1;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseBinPlusMinusExpr();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s9);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c93) {
                s6 = peg$c93;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                peg$silentFails++;
                s8 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s8 === peg$FAILED) {
                  s7 = peg$c75;
                } else {
                  peg$currPos = s7;
                  s7 = peg$c1;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseBinPlusMinusExpr();
                    if (s9 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c85(s6, s9);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCompOperator() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c54;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c95) {
          s0 = peg$c95;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 126) {
            s0 = peg$c97;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c99) {
              s0 = peg$c99;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c100); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c101) {
                s0 = peg$c101;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c102); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c103) {
                  s0 = peg$c103;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c104); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 60) {
                    s0 = peg$c105;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c106); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                      s0 = peg$c107;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c108); }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBinPlusMinusExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseBinMultExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s6 = peg$c109;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c110); }
            }
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 45) {
                s7 = peg$c111;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 45) {
                  s9 = peg$c111;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c112); }
                }
                peg$silentFails--;
                if (s9 === peg$FAILED) {
                  s8 = peg$c75;
                } else {
                  peg$currPos = s8;
                  s8 = peg$c1;
                }
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s6;
                  s7 = peg$c113();
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c1;
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseBinMultExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c85(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s6 = peg$c109;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c110); }
              }
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                  s7 = peg$c111;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c112); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  peg$silentFails++;
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s9 = peg$c111;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                  peg$silentFails--;
                  if (s9 === peg$FAILED) {
                    s8 = peg$c75;
                  } else {
                    peg$currPos = s8;
                    s8 = peg$c1;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s6;
                    s7 = peg$c113();
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c1;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$c1;
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseBinMultExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseBinMultExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExponentExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c114) {
              s6 = peg$c114;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
            if (s6 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s6 = peg$c116;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c117); }
              }
              if (s6 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c118) {
                  s6 = peg$c118;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c119); }
                }
                if (s6 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s6 = peg$c120;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c121); }
                  }
                }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsew();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseExponentExpr();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c85(s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c114) {
                s6 = peg$c114;
                peg$currPos += 2;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c115); }
              }
              if (s6 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s6 = peg$c116;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c117); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c118) {
                    s6 = peg$c118;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c119); }
                  }
                  if (s6 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s6 = peg$c120;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c121); }
                    }
                  }
                }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseExponentExpr();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c85(s6, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c77(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExponentExpr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseUnaryExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s4 = peg$c122;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c123); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseExponentExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsepos();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c124(s1, s2, s4, s6, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnaryExpr();
      }

      return s0;
    }

    function peg$parseUnaryExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s3 = peg$c111;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c111;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c75;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c113();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c109;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c110); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c125();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c126) {
              s3 = peg$c126;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c75;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseUnaryExpr();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c128(s1, s2, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseFactorExpr();
      }

      return s0;
    }

    function peg$parseCurrent() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCurrentToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepos();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c129(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFirstExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c45;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c130(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseCurrent();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsepos();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseResultToken();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsepos();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c131(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseIdentifierAccess();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseArgs();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parseIdentifierAccess();
              if (s0 === peg$FAILED) {
                s0 = peg$parseStringLiteral();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseFactorExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseFirstExpr();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseIndex();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCall();
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseIndex();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCall();
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c132(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteral();
      }

      return s0;
    }

    function peg$parseIndex() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c133;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c134); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseArgList();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsew();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c135;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c136); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c137(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c138;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseArgs();
              if (s5 === peg$FAILED) {
                s5 = peg$c2;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c140(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifierAccess() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c141(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIllegalAfterKeyword() {
      var s0;

      s0 = peg$parseLetter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
      }

      return s0;
    }

    function peg$parseType() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseDetachableToken();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseW();
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c41();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c142();
          }
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s6 = peg$c133;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c134); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsew();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseTypeList();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsew();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s10 = peg$c135;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c136); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c143(s8);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c144(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseLikeToken();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseW();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseLikeOperand();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsepos();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c145(s1, s4, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseLikeOperand() {
      var s0;

      s0 = peg$parseIdentifier();
      if (s0 === peg$FAILED) {
        s0 = peg$parseCurrent();
      }

      return s0;
    }

    function peg$parseTypeList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseType();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c146(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseType();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c146(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c147(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopInstr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      s0 = peg$currPos;
      s1 = peg$parseFromToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseInstructionSeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseUntilToken();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseW();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseImpliesExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseW();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseLoopToken();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseInstructionSeq();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseW();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseEndToken();
                          if (s11 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c148(s2, s6, s9);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c1;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIfInstr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseIfToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseW();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseImpliesExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseW();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseThenToken();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseInstructionSeq();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseElseIf();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c2;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseElse();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c2;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseW();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseEndToken();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c149(s3, s6, s7, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElse() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseW();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseElseToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInstructionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c150(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseIf() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseElseifToken();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseW();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseImpliesExpr();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseW();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseThenToken();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseInstructionSeq();
                  if (s9 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c151(s6, s9);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c1;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseW();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseElseifToken();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseW();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseImpliesExpr();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseW();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseThenToken();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseInstructionSeq();
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c151(s6, s9);
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAssignmentInstr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseImpliesExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c153) {
            s3 = peg$c153;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseImpliesExpr();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c155(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreateInstr() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseCreateToken();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIllegalAfterKeyword();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c75;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseExplicitCreationType();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIdentifier();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseCreationCall();
                if (s6 === peg$FAILED) {
                  s6 = peg$c2;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c156(s4, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreationCall() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c138;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArgs();
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c157(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseArgs() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsew();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c43;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsew();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseArgList();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c45;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c158(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseArgList() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseImpliesExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsew();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseImpliesExpr();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsew();
                if (s8 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c159(s7);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsew();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseImpliesExpr();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsew();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c159(s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c160(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExplicitCreationType() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c161(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAccessSpecifier() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsew();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseIdentifierList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsew();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c162(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIdentifierList() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsew();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseIdentifier();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c11(s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsew();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseIdentifier();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c11(s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseid() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c164.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c166.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c167); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c166.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c167); }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseIndent() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c168;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c170;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c168;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 9) {
              s1 = peg$c170;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c171); }
            }
          }
        }
      } else {
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseW() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c168;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c170;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s1 = peg$c173;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c174); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 13) {
              s1 = peg$c175;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c176); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c177) {
                s2 = peg$c177;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c178); }
              }
              if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parseLineTerminatorSequence();
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = peg$c75;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c1;
                }
                if (s5 !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c179); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c1;
                }
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  peg$silentFails++;
                  s6 = peg$parseLineTerminatorSequence();
                  peg$silentFails--;
                  if (s6 === peg$FAILED) {
                    s5 = peg$c75;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c1;
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c179); }
                    }
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c1;
                  }
                }
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c1;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c1;
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c168;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c169); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 9) {
              s1 = peg$c170;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c171); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s1 = peg$c173;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c174); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 13) {
                  s1 = peg$c175;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c177) {
                    s2 = peg$c177;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c178); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$currPos;
                    peg$silentFails++;
                    s6 = peg$parseLineTerminatorSequence();
                    peg$silentFails--;
                    if (s6 === peg$FAILED) {
                      s5 = peg$c75;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c179); }
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                    while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      s4 = peg$currPos;
                      s5 = peg$currPos;
                      peg$silentFails++;
                      s6 = peg$parseLineTerminatorSequence();
                      peg$silentFails--;
                      if (s6 === peg$FAILED) {
                        s5 = peg$c75;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$c1;
                      }
                      if (s5 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c179); }
                        }
                        if (s6 !== peg$FAILED) {
                          s5 = [s5, s6];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$c1;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                    }
                    if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c1;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c1;
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }

      return s0;
    }

    function peg$parsew() {
      var s0;

      s0 = peg$parseW();
      if (s0 === peg$FAILED) {
        s0 = peg$c2;
      }

      return s0;
    }

    function peg$parseIdentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseReservedWord();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c180(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseIdentifierPart() {
      var s0;

      s0 = peg$parseLetter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s0 = peg$c181;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c182); }
          }
        }
      }

      return s0;
    }

    function peg$parseSourceCharacter() {
      var s0;

      if (input.length > peg$currPos) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      return s0;
    }

    function peg$parseDecimalIntegerLiteral() {
      var s0, s1, s2, s3;

      if (input.charCodeAt(peg$currPos) === 48) {
        s0 = peg$c183;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c184); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseNonZeroDigit();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseDecimalDigit();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseDecimalDigit() {
      var s0;

      if (peg$c185.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }

      return s0;
    }

    function peg$parseNonZeroDigit() {
      var s0;

      if (peg$c187.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }

      return s0;
    }

    function peg$parseLineTerminator() {
      var s0;

      if (peg$c189.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }

      return s0;
    }

    function peg$parseLineTerminatorSequence() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c173;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c192) {
          s0 = peg$c192;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c193); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c175;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c176); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c194;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c195); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c196;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c197); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      return s0;
    }

    function peg$parseComment() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseSingleLineComment();
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }

      return s0;
    }

    function peg$parseSingleLineComment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c177) {
        s1 = peg$c177;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c178); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseLineTerminator();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = peg$c75;
        } else {
          peg$currPos = s4;
          s4 = peg$c1;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSourceCharacter();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c1;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$parseLineTerminator();
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c75;
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSourceCharacter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIntegerLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDecimalIntegerLiteral();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepos();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c199(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c201;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c202); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDoubleStringCharacter();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseDoubleStringCharacter();
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s4 = peg$c201;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c202); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c203(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }

      return s0;
    }

    function peg$parseCharLiteral() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s2 = peg$c205;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c206); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSingleStringCharacter();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s4 = peg$c205;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c206); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepos();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c207(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c201;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c208;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c210();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c208;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSourceCharacter();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c211(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c205;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c208;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseLineTerminator();
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c210();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 37) {
          s1 = peg$c208;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c209); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSourceCharacter();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c211(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseLineContinuation();
        }
      }

      return s0;
    }

    function peg$parseLineContinuation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c212;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c213); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLineTerminatorSequence();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c214();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c183;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c184); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseDecimalDigit();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c75;
          } else {
            peg$currPos = s2;
            s2 = peg$c1;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c215();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c205;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 65) {
          s0 = peg$c216;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c217); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 66) {
            s0 = peg$c218;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c219); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 67) {
              s0 = peg$c220;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c221); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 68) {
                s0 = peg$c222;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c223); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 70) {
                  s0 = peg$c224;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c225); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 72) {
                    s0 = peg$c226;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 76) {
                      s0 = peg$c228;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 78) {
                        s0 = peg$c230;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c231); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 81) {
                          s0 = peg$c232;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c233); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 82) {
                            s0 = peg$c234;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c235); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 83) {
                              s0 = peg$c236;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c237); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 84) {
                                s0 = peg$c238;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c239); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 85) {
                                  s0 = peg$c240;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c241); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 86) {
                                    s0 = peg$c242;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c243); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 37) {
                                      s0 = peg$c208;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 39) {
                                        s0 = peg$c205;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c206); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 34) {
                                          s0 = peg$c201;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 40) {
                                            s0 = peg$c43;
                                            peg$currPos++;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c44); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s0 = peg$c45;
                                              peg$currPos++;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c46); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 60) {
                                                s0 = peg$c105;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                  s0 = peg$c107;
                                                  peg$currPos++;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      if (s2 === peg$FAILED) {
        s2 = peg$parseLineTerminator();
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = peg$c75;
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSourceCharacter();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c210();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseDecimalDigit();
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c244;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c245); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c246;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c247); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVoidToken();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepos();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c75;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c248(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBooleanLiteral();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepos();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c75;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c249(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseIntegerLiteral();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c75;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c250(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseStringLiteral();
            if (s1 !== peg$FAILED) {
              s2 = peg$currPos;
              peg$silentFails++;
              s3 = peg$parseIllegalAfterKeyword();
              peg$silentFails--;
              if (s3 === peg$FAILED) {
                s2 = peg$c75;
              } else {
                peg$currPos = s2;
                s2 = peg$c1;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c250(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCharLiteral();
              if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseIllegalAfterKeyword();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                  s2 = peg$c75;
                } else {
                  peg$currPos = s2;
                  s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c250(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLetter() {
      var s0;

      if (peg$c251.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c252); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c253.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c254); }
        }
      }

      return s0;
    }

    function peg$parseIdentifierName() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLetter();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseIdentifierPart();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseIdentifierPart();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c255(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      return s0;
    }

    function peg$parseReservedWord() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIllegalAfterKeyword();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = peg$c75;
        } else {
          peg$currPos = s2;
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c256(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepos();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseVoidToken();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = peg$c75;
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c257(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseBooleanLiteral();
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            s3 = peg$parseIllegalAfterKeyword();
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c75;
            } else {
              peg$currPos = s2;
              s2 = peg$c1;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c258(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTrueToken();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c259();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseFalseToken();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c260();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseKeyword() {
      var s0;

      s0 = peg$parseAgentToken();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAliasToken();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAllToken();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAndToken();
            if (s0 === peg$FAILED) {
              s0 = peg$parseAssignToken();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAsToken();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAttributeToken();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseCheckToken();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseClassToken();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseConvertToken();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseCreateToken();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCurrentToken();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseDebugToken();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseDeferredToken();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseDoToken();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseDetachableToken();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseElseifToken();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseElseToken();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseEndToken();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseEnsureToken();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseExpandedToken();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseExportToken();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseExternalToken();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseFalseToken();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseFeatureToken();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseFromToken();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseFrozenToken();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseIfToken();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseImpliesToken();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseInheritToken();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parseInspectToken();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseInvariantToken();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parseLikeToken();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseLocalToken();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseLoopToken();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parseNoteToken();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseNotToken();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parseObsoleteToken();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseOldToken();
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$parseOnceToken();
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$parseOnlyToken();
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$parseOrToken();
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$parsePrecursorToken();
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$parseRedefineToken();
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$parseRenameToken();
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$parseRequireToken();
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$parseRescueToken();
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$parseResultToken();
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$parseRetryToken();
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$parseSelectToken();
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$parseSeparateToken();
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$parseThenToken();
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$parseTrueToken();
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$parseTUPLEToken();
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$parseUndefineToken();
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$parseUntilToken();
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$parseVariantToken();
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$parseVoidToken();
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$parseWhenToken();
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$parseXorToken();
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseAgentToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c261) {
          s2 = peg$c261;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c262); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAliasToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c264) {
          s2 = peg$c264;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c265); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAllToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c266) {
          s2 = peg$c266;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c267); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAndToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c91) {
          s2 = peg$c91;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAssignToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c268) {
          s2 = peg$c268;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c269); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAsToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c270) {
          s2 = peg$c270;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c271); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseAttributeToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c272) {
          s2 = peg$c272;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c273); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCheckToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c274) {
          s2 = peg$c274;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c275); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseClassToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c276) {
          s2 = peg$c276;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c277); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseConvertToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c278) {
          s2 = peg$c278;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c279); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCreateToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c280) {
          s2 = peg$c280;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseCurrentToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c282) {
          s2 = peg$c282;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c283); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDebugToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c284) {
          s2 = peg$c284;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c285); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDeferredToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c286) {
          s2 = peg$c286;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c287); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDoToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c288) {
          s2 = peg$c288;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c289); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseDetachableToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c290) {
          s2 = peg$c290;
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c291); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c80) {
          s2 = peg$c80;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseElseifToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c292) {
          s2 = peg$c292;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c293); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEndToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c294) {
          s2 = peg$c294;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c295); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEnsureToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c296) {
          s2 = peg$c296;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c297); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExpandedToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c298) {
          s2 = peg$c298;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c299); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExportToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c300) {
          s2 = peg$c300;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c301); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseExternalToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c302) {
          s2 = peg$c302;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c303); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFalseToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c304) {
          s2 = peg$c304;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFeatureToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c306) {
          s2 = peg$c306;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c307); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFromToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c308) {
          s2 = peg$c308;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c309); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseFrozenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c310) {
          s2 = peg$c310;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c311); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseIfToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c312) {
          s2 = peg$c312;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c313); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseImpliesToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c73) {
          s2 = peg$c73;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInheritToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c314) {
          s2 = peg$c314;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c315); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInspectToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c316) {
          s2 = peg$c316;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c317); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseInvariantToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c318) {
          s2 = peg$c318;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c319); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLikeToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c320) {
          s2 = peg$c320;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c321); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLocalToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c322) {
          s2 = peg$c322;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c323); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseLoopToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c324) {
          s2 = peg$c324;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNotToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c126) {
          s2 = peg$c126;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseNoteToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c326) {
          s2 = peg$c326;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c327); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseObsoleteToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c328) {
          s2 = peg$c328;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c329); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOldToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c330) {
          s2 = peg$c330;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c331); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOnceToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c332) {
          s2 = peg$c332;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c333); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOnlyToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c334) {
          s2 = peg$c334;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c335); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseOrToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c83) {
          s2 = peg$c83;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsePrecursorToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 9) === peg$c336) {
          s2 = peg$c336;
          peg$currPos += 9;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRedefineToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c338) {
          s2 = peg$c338;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c339); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRenameToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c340) {
          s2 = peg$c340;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c341); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRequireToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c342) {
          s2 = peg$c342;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRescueToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c344) {
          s2 = peg$c344;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c345); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseResultToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c346) {
          s2 = peg$c346;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c347); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseRetryToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c348) {
          s2 = peg$c348;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c349); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSelectToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c350) {
          s2 = peg$c350;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c351); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseSeparateToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c352) {
          s2 = peg$c352;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c353); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseThenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c88) {
          s2 = peg$c88;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c89); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseTrueToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c354) {
          s2 = peg$c354;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c355); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseTUPLEToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c356) {
          s2 = peg$c356;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c357); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseUndefineToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c358) {
          s2 = peg$c358;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c359); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseUntilToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c360) {
          s2 = peg$c360;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c361); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVariantToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c362) {
          s2 = peg$c362;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c363); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseVoidToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c364) {
          s2 = peg$c364;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c365); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseWhenToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c366) {
          s2 = peg$c366;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c367); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseXorToken() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsepos();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c368) {
          s2 = peg$c368;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c369); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseIllegalAfterKeyword();
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = peg$c75;
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepos();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c263(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }


      function isReserved(name) {
        return /^(agent|alias|all|and|as|assign|attribute|check|class|convert|create|Current|debug|deferred|do|detachable|else|elseif|end|ensure|expanded|export|external|False|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|only|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|then|True|TUPLE|undefine|until|variant|Void|when|xor)$/.test(name);
      }

      function Node(nodeType, data) {
        this.nodeType = nodeType;
        for (var prop in data) {
          if (data.hasOwnProperty(prop)) {
            this[prop] = data[prop];
          }
        }
      }

      function _n(nodeType, data) {
        return new Node(nodeType, data);
      }

      function extractList(list, f) {
        var result = new Array(list.length), i;
        for (i = 0; i < list.length; i++) {
          result[i] = f(list[i]);
        }

        return result;
      }

      function currentExpression(pos) {
        return new eiffel.ast.CurrentExpression(pos);
      }

      function buildBinaryTree(left, rest, start, end) {
        return rest.reduce(
          function(left, kind__right) {
            return  new eiffel.ast.BinaryOp(
              kind__right.kind,
              left,
              kind__right.right,
              start,
              kind__right.end
            );
          },
          left
        );
      }

      function buildList(first, rest, f) {
          return [first].concat(extractList(rest, f));
      }

      function merge() {
        return Array.prototype.reduce.call(arguments, function(xs, x) { return xs.concat(x);});
      }

      function buildIndexArgTree(first, rest) {
        return rest.reduce(
          function(operand, operator) {
            operator.operand = operand;
            return operator;
          },
          first
        );
      }

      function gAttr(name) {
        return function (x) {
          return x[name];
        };
      }
      function gId() {
        return function (x) {
          return x;
        }
      }

      function optionalList(value) {
        return value !== null ? value : [];
      }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();